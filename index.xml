<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>William</title>
    <link>https://williamlfang.github.io/</link>
    <description>William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 15 May 2024 14:51:20 &#43;0800</lastBuildDate>
      <atom:link href="https://williamlfang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>fzf 显示预览窗口</title>
  <link>https://williamlfang.github.io/2024-05-15-fzf-%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88%E7%AA%97%E5%8F%A3/</link>
  <pubDate>Wed, 15 May 2024 14:51:20 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-05-15-fzf-%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88%E7%AA%97%E5%8F%A3/</guid>
  <description><![CDATA[<p>可以让 <code>fzf</code> 显示预览窗口功能，使用快捷键 <code>ctrl-f</code></p>]]></description>
</item>
<item>
  <title>rinetd 实现端口转发</title>
  <link>https://williamlfang.github.io/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link>
  <pubDate>Wed, 15 May 2024 14:25:29 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid>
  <description><![CDATA[<p>通过 <code>rinetd</code> 部署简易的端口转发功能，方便集中管理。</p>]]></description>
</item>
<item>
  <title>vim 打印带格式的连续数字</title>
  <link>https://williamlfang.github.io/2024-05-14-vim-%E6%89%93%E5%8D%B0%E5%B8%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97/</link>
  <pubDate>Tue, 14 May 2024 14:10:24 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-05-14-vim-%E6%89%93%E5%8D%B0%E5%B8%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97/</guid>
  <description><![CDATA[<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">:put <span class="o">=</span> map<span class="o">(</span>range<span class="o">(</span>0,17<span class="o">)</span>, <span class="s1">&#39;printf(&#39;&#39;[%02d]&#39;&#39;, v:val)&#39;</span><span class="o">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或者使用</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">:for i in range<span class="o">(</span>0,10<span class="o">)</span><span class="p">|</span> <span class="nv">put</span><span class="o">=</span>printf<span class="o">(</span><span class="s1">&#39;[%02d]&#39;</span>, i<span class="o">)</span> <span class="p">|</span>endfor</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>clickhouse 运维</title>
  <link>https://williamlfang.github.io/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/</link>
  <pubDate>Mon, 13 May 2024 22:00:04 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/</guid>
  <description><![CDATA[<h2 id="重启服务" class="heading-element">
  <a href="#%e9%87%8d%e5%90%af%e6%9c%8d%e5%8a%a1" class="heading-mark"></a>重启服务</h2><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo service clickhouse-server restart
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 可以待配置启动，方便查找问题</span>
</span></span><span class="line"><span class="cl">sudo -u clickhouse clickhouse-server --config-file<span class="o">=</span>/etc/clickhouse-server/config.xml</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>CRTP 与 std::variant</title>
  <link>https://williamlfang.github.io/2024-05-01-crtp-%E4%B8%8E-std--variant/</link>
  <pubDate>Wed, 01 May 2024 15:33:50 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-05-01-crtp-%E4%B8%8E-std--variant/</guid>
  <description><![CDATA[<p><strong>Curriously Recursive Template Method</strong>(<code>CRTP</code>) 一种是实现了编译期多态（静态多态）的方法，相比于虚函数（<code>virtual</code>）跳过了虚表<code>vtable</code>查找，提供了比动态多态（运行时多态）更好的性能。</p>]]></description>
</item>
<item>
  <title>项目 google abseil cpp 库</title>
  <link>https://williamlfang.github.io/2024-04-30-%E9%A1%B9%E7%9B%AE-google-abseil-cpp-%E5%BA%93/</link>
  <pubDate>Tue, 30 Apr 2024 14:56:09 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-30-%E9%A1%B9%E7%9B%AE-google-abseil-cpp-%E5%BA%93/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>使用 ninja 加速 c&#43;&#43; build</title>
  <link>https://williamlfang.github.io/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/</link>
  <pubDate>Tue, 30 Apr 2024 14:55:29 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/</guid>
  <description><![CDATA[<p><code>ninja</code> 和 <code>make</code> 是一样属于 <strong>build system</strong>，不过提供了更好的编译速度，尤其对于大型开发项目，可以节省大量的编译时间。</p>]]></description>
</item>
<item>
  <title>可预先分配空间的 std::priority_queue</title>
  <link>https://williamlfang.github.io/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/</link>
  <pubDate>Mon, 29 Apr 2024 10:03:52 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/</guid>
  <description><![CDATA[<p><code>c++</code> 标准库 <code>&lt;queue&gt;</code> 提供了优先队列 <code>priority_queue</code>，以 <code>log(1)</code> 的算法获取队列头部、并以 <code>log(n)</code> 的算法插入元素。其原型为</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">T</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Container</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Compare</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">priority_queue</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>c&#43;&#43; 高性能技巧</title>
  <link>https://williamlfang.github.io/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/</link>
  <pubDate>Mon, 22 Apr 2024 16:45:45 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/</guid>
  <description><![CDATA[参考链接 C++ 优化点]]></description>
</item>
<item>
  <title>c&#43;&#43; 使用 google benchmark</title>
  <link>https://williamlfang.github.io/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/</link>
  <pubDate>Sun, 21 Apr 2024 13:08:02 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/</guid>
  <description><![CDATA[<p>在低延迟场景中，我们对性能有极致的要求。为了方便对比不同函数的开心，需要借助一些测试手段。这些测试的基本流程是：</p>
<ol>
<li>在函数调用开始是计算 rdtsc 初始值</li>
<li>函数调用结束后，计算 rdtsc 的差值</li>
<li>循环以上流程若干次</li>
<li>最终得到一个平均的函数开销时间</li>
</ol>
<p>整个测试流程其实是非常的标准化，我们完全可以利用一些框架进行快速的测试。比如我现在使用的 <code>google benchmark</code>。</p>]]></description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>William</title>
    <link>https://williamlfang.github.io/</link>
    <description>William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 29 Apr 2024 10:03:52 &#43;0800</lastBuildDate>
      <atom:link href="https://williamlfang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>可预先分配空间的 std::priority_queue</title>
  <link>https://williamlfang.github.io/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/</link>
  <pubDate>Mon, 29 Apr 2024 10:03:52 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/</guid>
  <description><![CDATA[<p><code>c++</code> 标准库 <code>&lt;queue&gt;</code> 提供了优先队列 <code>priority_queue</code>，以 <code>log(1)</code> 的算法获取队列头部、并以 <code>log(n)</code> 的算法插入元素。其原型为</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">T</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Container</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Compare</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">priority_queue</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>c&#43;&#43; 高性能技巧</title>
  <link>https://williamlfang.github.io/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/</link>
  <pubDate>Mon, 22 Apr 2024 16:45:45 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/</guid>
  <description><![CDATA[参考链接 C++ 优化点]]></description>
</item>
<item>
  <title>c&#43;&#43; 使用 google benchmark</title>
  <link>https://williamlfang.github.io/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/</link>
  <pubDate>Sun, 21 Apr 2024 13:08:02 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/</guid>
  <description><![CDATA[<p>在低延迟场景中，我们对性能有极致的要求。为了方便对比不同函数的开心，需要借助一些测试手段。这些测试的基本流程是：</p>
<ol>
<li>在函数调用开始是计算 rdtsc 初始值</li>
<li>函数调用结束后，计算 rdtsc 的差值</li>
<li>循环以上流程若干次</li>
<li>最终得到一个平均的函数开销时间</li>
</ol>
<p>整个测试流程其实是非常的标准化，我们完全可以利用一些框架进行快速的测试。比如我现在使用的 <code>google benchmark</code>。</p>]]></description>
</item>
<item>
  <title>构建指数权重ib weight</title>
  <link>https://williamlfang.github.io/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/</link>
  <pubDate>Mon, 15 Apr 2024 14:43:52 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/better.jpg" alt="构建指数权重ib weight" title="构建指数权重ib weight" referrerpolicy="no-referrer"/></div><p>中金所推出了多个股指期货合约，这些合约以相应的股票指数为基础标的。为了更好的预测股指期货波动，我们需要更准确的指数信息。而构建指数的基础数据包括：</p>
<ul>
<li>成份股</li>
<li>成份权重</li>
<li>基准日期的自由流通市值（中证指数）</li>
</ul>
<p>无论对于历史数据的复原，还是实盘数据的更新，一份合理、准确的指数构建都至关重要。上述三个项目当中，尤其以指数的成份权重尤为关键。</p>
<p>中证指数官网<strong>有偿</strong>提供每日权重的更新数据，不过收费巨贵。为此，我们可以通过模拟中证指数的构建方法和计算规则，生成一份准确的指数数据。具体的规则，可以参考<a href="http://www.sse.com.cn/market/sseindex/calculation/c/5726306.pdf"target="_blank" rel="external nofollow noopener noreferrer">《中证指数有限公司股票指数计算与维护细则V13.1》<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>我们的工作主要有部分：</p>
<ol>
<li>复原历史指数权重数据</li>
<li>实现每日权重数据更新</li>
<li>根据样本权重，利用逐笔成交数据(<code>last_px</code>)、快照数据(<code>vwap</code>)计算得到每一个点位上的指数价格</li>
</ol>]]></description>
</item>
<item>
  <title>dlopen c&#43;&#43; 使用总结</title>
  <link>https://williamlfang.github.io/2024-04-12-dlopen-c-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
  <pubDate>Fri, 12 Apr 2024 18:02:09 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-04-12-dlopen-c-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
  <description><![CDATA[<p>使用 <code>dlopen</code> 可以在程序运行时加载动态库(<code>.so</code>, shared object)，允许我们在 runtime 阶段执行判断需要的函数。</p>]]></description>
</item>
<item>
  <title>docker 使用 host 代理</title>
  <link>https://williamlfang.github.io/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/</link>
  <pubDate>Thu, 28 Mar 2024 23:33:45 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/</guid>
  <description><![CDATA[<p>host 宿主机已经配置 vpn 代理，为了可以让 <code>Docker</code> 虚拟机能够共享宿主机的代理服务，我们需要修改相关的配置。</p>]]></description>
</item>
<item>
  <title>docker 搭建 TTRSS</title>
  <link>https://williamlfang.github.io/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/</link>
  <pubDate>Sun, 24 Mar 2024 16:17:12 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/ttrss.png" alt="docker 搭建 TTRSS" title="docker 搭建 TTRSS" referrerpolicy="no-referrer"/></div><p>使用 Docker 搭建一个简易的 RSS 服务，根据自己的兴趣订阅消息源。我现在使用的是 <code>Awesome TinyTinyRSS</code>。</p>
<a href="https://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2" title="通过 docker-compose 部署"target="_blank" rel="external nofollow noopener noreferrer" class="card-link"><span class="cl-backdrop" style="--cl-bg-url: url(/images/fixit.min.svg);"></span>
    <span class="cl-content">
      <span class="cl-text">
        <span class="cl-title">Awesome TTRSS</span>
        <span class="cl-meta">
          <svg class="cl-icon-link" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M574 665.4c-3.1-3.1-8.2-3.1-11.3 0L446.5 781.6c-53.8 53.8-144.6 59.5-204 0-59.5-59.5-53.8-150.2 0-204l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3l-39.8-39.8c-3.1-3.1-8.2-3.1-11.3 0L191.4 526.5c-84.6 84.6-84.6 221.5 0 306s221.5 84.6 306 0l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3L574 665.4zM832.6 191.4c-84.6-84.6-221.5-84.6-306 0L410.3 307.6c-3.1 3.1-3.1 8.2 0 11.3l39.7 39.7c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c53.8-53.8 144.6-59.5 204 0 59.5 59.5 53.8 150.2 0 204L665.3 562.6c-3.1 3.1-3.1 8.2 0 11.3l39.8 39.8c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c84.5-84.6 84.5-221.5 0-306.1z" fill="#a9a9b3"></path><path d="M610.1 372.3c-3.1-3.1-8.2-3.1-11.3 0L372.3 598.7c-3.1 3.1-3.1 8.2 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l226.4-226.4c3.1-3.1 3.1-8.2 0-11.3l-39.5-39.6z" fill="#a9a9b3"></path></svg>
          <span class="cl-url">https://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2</span>
        </span>
      </span><svg class="cl-icon-globe" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="64" height="64"><path d="M960 512c0 249.408-203.2 448-448 448-244.778667 0-448-198.592-448-448S262.592 64 512 64s448 198.592 448 448" fill="#2196F3"></path><path d="M507.52 718.08c0-8.96-4.48-13.44-13.44-17.92-26.88-8.96-53.76-8.96-76.16-31.381333-4.48-8.96-4.48-17.92-8.96-26.88-8.96-8.96-31.36-13.44-44.8-17.92h-89.6c-13.44-4.48-22.4-22.4-31.36-35.84 0-4.48 0-13.461333-8.96-13.461334-8.96-4.458667-17.92 4.501333-26.88 0-4.48-4.458667-4.48-8.96-4.48-13.418666 0-13.461333 8.96-26.901333 17.92-35.861334 13.44-8.96 26.88 4.48 40.32 4.48 4.48 0 4.48 0 8.96 4.48 13.44 4.48 17.92 22.4 17.92 35.861334v8.96c0 4.48 4.48 4.48 8.96 4.48 4.48-22.4 4.48-44.821333 8.96-67.2 0-26.88 26.88-53.781333 49.28-62.72 8.96-4.458667 13.44 4.501333 22.4 0 26.88-8.96 94.08-35.84 80.64-71.658667-8.96-31.381333-35.84-62.698667-71.68-58.24-8.96 4.501333-13.44 8.96-22.4 13.461333-13.44 8.96-40.32 35.84-53.76 35.84-22.4-4.48-22.4-35.84-17.92-49.301333 4.48-17.92 44.8-76.138667 71.68-67.178667l17.92 17.92c8.96 4.48 22.4 4.48 35.84 4.48 4.48 0 8.96 0 13.44-4.48 4.48-4.48 4.48-4.48 4.48-8.96 0-13.44-13.44-26.901333-22.4-35.861333s-22.4-17.92-35.84-22.378667c-44.8-13.461333-116.48 4.458667-152.32 35.84-35.84 31.36-62.72 85.12-80.64 129.92-8.96 26.88-17.92 62.698667-22.4 94.08-4.48 22.4-8.96 40.32 4.48 62.698667 13.44 26.88 40.32 53.781333 67.2 71.68 17.92 13.44 53.76 13.44 71.68 35.84 13.44 17.941333 8.96 40.32 8.96 62.72 0 26.88 17.92 49.28 26.88 71.658667 4.48 13.461333 8.96 31.381333 13.44 44.821333 0 4.48 4.48 31.36 4.48 35.84 26.88 13.44 49.28 26.901333 80.64 35.861333 4.48 0 22.4-26.901333 22.4-31.381333 13.44-13.44 22.4-31.36 35.84-40.32 8.96-4.48 17.92-8.96 26.88-17.941333 8.96-8.96 13.44-26.88 17.92-40.32 4.48-8.938667 8.96-26.858667 4.48-40.298667M516.48 305.92c4.48 0 8.96-4.48 17.92-8.96 13.44-8.96 26.901333-22.4 40.32-31.36 13.461333-8.96 26.901333-22.4 35.861333-31.36 13.44-8.96 22.4-26.88 26.88-40.341333 4.48-8.96 17.941333-26.88 13.44-40.32-4.48-8.96-26.88-13.44-35.84-17.92C579.2 126.698667 547.84 122.24 512 122.24c-13.44 0-31.36 4.458667-35.84 17.92-4.48 22.4 13.44 17.92 31.36 22.4 0 0 4.48 35.84 4.48 40.32 4.48 22.421333-8.96 35.84-8.96 58.24 0 13.44 0 35.84 8.96 44.8h4.48zM892.8 619.52c4.501333-8.96 4.501333-22.4 8.96-31.36 4.501333-22.421333 4.501333-44.8 4.501333-67.2 0-44.8-4.501333-89.578667-17.92-129.92-8.96-13.44-13.461333-26.88-17.941333-40.341333-8.96-22.378667-22.4-44.8-40.32-62.698667-17.92-22.4-40.341333-85.12-80.64-67.2-13.44 4.501333-22.4 22.421333-31.36 31.381333l-26.88 40.32c-4.501333 4.48-8.96 13.44-4.501333 17.92 0 4.48 4.501333 4.48 8.96 4.48 8.96 4.501333 13.461333 4.501333 22.421333 8.96 4.48 0 8.96 4.501333 4.48 8.96 0 0 0 4.501333-4.48 4.501334-22.421333 22.4-44.8 40.32-67.2 62.698666-4.48 4.48-8.96 13.44-8.96 17.92s4.48 4.48 4.48 8.96c0 4.501333-4.48 4.501333-8.96 8.96-8.96 4.501333-17.92 8.96-22.4 13.461334-4.48 8.96 0 22.4-4.48 31.36-4.48 22.4-17.941333 40.32-26.901333 62.72-8.96 13.418667-13.418667 26.88-22.378667 40.32 0 17.92-4.501333 31.36 4.458667 44.8 22.421333 31.36 62.72 13.44 94.08 26.901333 8.96 4.458667 17.92 4.458667 22.421333 13.418667 13.418667 13.461333 13.418667 35.861333 17.92 49.301333 4.458667 17.92 8.96 35.84 17.92 53.76 4.48 22.421333 13.44 44.821333 17.92 62.72 40.341333-31.36 76.16-67.178667 103.04-112 26.88-31.424 40.341333-67.242667 53.76-103.104" fill="#CDDC39"></path></svg></span></a>]]></description>
</item>
<item>
  <title>data cache 的妙用</title>
  <link>https://williamlfang.github.io/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/</link>
  <pubDate>Fri, 22 Mar 2024 16:56:20 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/</guid>
  <description><![CDATA[<p><code>data cache</code> 在用户调用资源开辟一块缓存区域，保存了中间的计算结果，可以避免重复计算。</p>]]></description>
</item>
<item>
  <title>ATT 汇编语法</title>
  <link>https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/</link>
  <pubDate>Tue, 19 Mar 2024 18:30:35 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/att.png" alt="ATT 汇编语法" title="ATT 汇编语法" referrerpolicy="no-referrer"/></div><p><code>AT&amp;T</code> 汇编是 <code>Linux</code> 操作系统默认的汇编语言。熟悉汇编语言能够增强我们对程序运行逻辑的认识，理解程序运行的性能瓶颈。</p>]]></description>
</item>
<item>
  <title>Linux 配对罗技蓝牙鼠标</title>
  <link>https://williamlfang.github.io/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/</link>
  <pubDate>Mon, 18 Mar 2024 21:10:17 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/solaar-2.png" alt="Linux 配对罗技蓝牙鼠标" title="Linux 配对罗技蓝牙鼠标" referrerpolicy="no-referrer"/></div><p>我在多年前购买了一款罗技无线蓝牙鼠标 <code>Master 3S</code>，使用感觉是相当得丝滑。不过非常遗憾，我这次过年回家，不小心把鼠标的蓝牙适配器弄丢了，导致最近办公只能使用戴尔赠送的有线鼠标。体验感不是特别好。</p>
<p>今天突发奇想，我原先也有一个旧的罗技蓝牙鼠标（初代Master），何不利用旧的蓝牙适配器来配对这款 <code>Master 3s</code> ？</p>]]></description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>William</title>
    <link>https://williamlfang.github.io/</link>
    <description>William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 25 Jul 2025 14:22:44 &#43;0800</lastBuildDate>
      <atom:link href="https://williamlfang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Docker 修改 DNS:resolv.conf</title>
  <link>https://williamlfang.github.io/2025-07-25-docker-%E4%BF%AE%E6%94%B9-dns-resolv.conf/</link>
  <pubDate>Fri, 25 Jul 2025 14:22:44 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-07-25-docker-%E4%BF%AE%E6%94%B9-dns-resolv.conf/</guid>
  <description><![CDATA[<p>为了在 <code>Docker</code> 中使用指定 <code>DNS</code>，我们需要相应修改 <code>/etc/resolv.conf</code>。现在遇到的问题是</p>
<blockquote>
<p>无法在 Dockerfile 里“永久”覆盖 /etc/resolv.conf；
无论 Classic 还是 BuildKit，Docker 都会在启动阶段把运行时生成的 resolv.conf 挂到容器里，覆盖镜像中原有内容。</p>
</blockquote>
<p>因此，我们需要在 <code>build</code> 阶段，把 <code>DNS</code> 「传送」到 <code>docker</code> 里面。下面介绍具体的方法。</p>]]></description>
</item>
<item>
  <title>Linux kill SIGTERM vs SIGKILL</title>
  <link>https://williamlfang.github.io/2025-06-24-linux-kill-sigterm-vs-sigkill/</link>
  <pubDate>Tue, 24 Jun 2025 10:55:02 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-06-24-linux-kill-sigterm-vs-sigkill/</guid>
  <description><![CDATA[ Ref the real reason to not use sigkill ]]></description>
</item>
<item>
  <title>gcc: Link Time Optimization</title>
  <link>https://williamlfang.github.io/2025-06-20-gcc--link-time-optimization/</link>
  <pubDate>Fri, 20 Jun 2025 10:23:03 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-06-20-gcc--link-time-optimization/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Linux 安装 syncthing</title>
  <link>https://williamlfang.github.io/2025-06-08-linux-%E5%AE%89%E8%A3%85-syncthing/</link>
  <pubDate>Sun, 08 Jun 2025 18:27:20 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-06-08-linux-%E5%AE%89%E8%A3%85-syncthing/</guid>
  <description><![CDATA[<p>使用 <code>syncthing</code> 同步不同机器之间的文件，所有数据均保留在本地机器。</p>]]></description>
</item>
<item>
  <title>(grok)Best Practice for Writing Bash Scripts</title>
  <link>https://williamlfang.github.io/2025-04-16-grokbest-practice-for-writing-bash-scripts/</link>
  <pubDate>Wed, 16 Apr 2025 13:27:56 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-04-16-grokbest-practice-for-writing-bash-scripts/</guid>
  <description><![CDATA[<blockquote>
<p>what is the best practice for writing bash scripts</p>
</blockquote>]]></description>
</item>
<item>
  <title>(转)Linux 网络大流量传输优化方法</title>
  <link>https://williamlfang.github.io/2025-04-12-%E8%BD%AClinux-%E7%BD%91%E7%BB%9C%E5%A4%A7%E6%B5%81%E9%87%8F%E4%BC%A0%E8%BE%93%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</link>
  <pubDate>Sat, 12 Apr 2025 22:36:25 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-04-12-%E8%BD%AClinux-%E7%BD%91%E7%BB%9C%E5%A4%A7%E6%B5%81%E9%87%8F%E4%BC%A0%E8%BE%93%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</guid>
  <description><![CDATA[<p>提升 <code>Linux</code> 性能。</p>]]></description>
</item>
<item>
  <title>Linux 内存调优的两个重要参数</title>
  <link>https://williamlfang.github.io/2025-03-29-linux-%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E5%8F%82%E6%95%B0/</link>
  <pubDate>Sat, 29 Mar 2025 15:08:37 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-03-29-linux-%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E5%8F%82%E6%95%B0/</guid>
  <description><![CDATA[<p>今天在看这篇介绍 <strong>Linux 性能调优</strong> 的博客(<a href="https://linuxblog.io/linux-performance-almost-always-add-swap-space/"target="_blank" rel="external nofollow noopener noreferrer">Linux Performance: Almost Always Add Swap Space<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>)，其中涉及到如何调整内核内存的调整机制。主要的参数有</p>
<ul>
<li><i class="fa-regular fa-square fa-fw" aria-hidden="true"></i> <code>swappiness</code>: This control is used to define how aggressively the kernel will swap memory pages. Higher values will increase aggressiveness; lower values decrease the amount of swap. (default = 60, recommended values between 1 and 60) Remove your swap for 0 value, but it is usually not recommended in most cases.</li>
<li><i class="fa-regular fa-square fa-fw" aria-hidden="true"></i> <code>vfs_cache_pressure</code>: Controls the kernel’s tendency to reclaim the memory, which is used for caching of directory and inode objects. (default = 100, recommend value 50 to 200)</li>
</ul>]]></description>
</item>
<item>
  <title>kitty 终端模拟器</title>
  <link>https://williamlfang.github.io/2025-03-15-kitty-%E7%BB%88%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%99%A8/</link>
  <pubDate>Sat, 15 Mar 2025 23:04:20 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-03-15-kitty-%E7%BB%88%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%99%A8/</guid>
  <description><![CDATA[安装 1 2 3 4 5 6 ## magick-cli sudo apt-get install imagemagick sudo apt-get install luajit sudo apt-get install luarocks luarocks install magick tmux.conf 1 2 3 4 5 ##----------------------------------------------------------------------------- ## HACK: for kitty set -gq allow-passthrough on set -g visual-activity off ##-----------------------------------------------------------------------------]]></description>
</item>
<item>
  <title>nvim dap 映射 r 快捷键</title>
  <link>https://williamlfang.github.io/2025-02-22-nvim-dap-%E6%98%A0%E5%B0%84-r-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
  <pubDate>Sat, 22 Feb 2025 20:39:59 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-02-22-nvim-dap-%E6%98%A0%E5%B0%84-r-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2025-02-22-nvim-dap-%E6%98%A0%E5%B0%84-r-%E5%BF%AB%E6%8D%B7%E9%94%AE/nvim-dap-repl.png" alt="nvim dap 映射 r 快捷键" title="nvim dap 映射 r 快捷键" referrerpolicy="no-referrer"/></div><p>最近在研究如何使用 <code>nvim-dap</code> 进行 <code>debugging</code>。在 <code>gdb</code>，我们可以很方便的使用单个按键就可以触发一些行为，如</p>
<ul>
<li><i class="fa-regular fa-check-square fa-fw" aria-hidden="true"></i> <code>r</code>: <code>run</code></li>
<li><i class="fa-regular fa-check-square fa-fw" aria-hidden="true"></i> <code>c</code>: <code>continue</code></li>
<li><i class="fa-regular fa-check-square fa-fw" aria-hidden="true"></i> <code>s</code>: <code>step-in</code></li>
</ul>
<p>那么，我的想法也是在 <code>nvim-dap</code> 实现这样快捷键 <code>r</code> 来模拟 <code>run</code> 的行为。现在的问题是：由于在 <code>normal mode</code>，单个按键 <code>r</code> 代表 <code>replace one character</code>。</p>
<p>因此，我们需要在 <code>nvim</code> 的 <code>buffers</code> 去识别是否启动了 <code>nvim-dap</code></p>
<ul>
<li><i class="fa-regular fa-check-square fa-fw" aria-hidden="true"></i> 如果存在 <code>dap-repl</code>，则映射 <code>r</code>；</li>
<li><i class="fa-regular fa-check-square fa-fw" aria-hidden="true"></i> 如果找不到，则回退到 <code>replace</code> 的功能。</li>
</ul>]]></description>
</item>
<item>
  <title>update GLIBC_2.28</title>
  <link>https://williamlfang.github.io/2025-02-22-update-glibc_2.28/</link>
  <pubDate>Sat, 22 Feb 2025 15:53:13 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-02-22-update-glibc_2.28/</guid>
  <description><![CDATA[]]></description>
</item>
</channel>
</rss>

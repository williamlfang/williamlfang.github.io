[{"categories":["programming"],"content":"data cache 在用户调用资源开辟一块缓存区域，保存了中间的计算结果，可以避免重复计算。 ","date":"2024-03-22","objectID":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/:0:0","tags":["data","cache","python","lru"],"title":"data cache 的妙用","uri":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/"},{"categories":["programming"],"content":"AT\u0026T 汇编是 Linux 操作系统默认的汇编语言。熟悉汇编语言能够增强我们对程序运行逻辑的认识，理解程序运行的性能瓶颈。 Ref x86 Assembly Guide Introduction to Compilers and Language Design Function Calls and the Call Stack 你一定要搞明白的C函数调用方式与栈原理 第 1 章 C++ 惯用法 C++ 函数调用栈 ","date":"2024-03-19","objectID":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/:0:0","tags":["AT\u0026t","att","assemble","gcc","g++","c++","c","intel","汇编"],"title":"ATT 汇编语法","uri":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/"},{"categories":["tools"],"content":"我在多年前购买了一款罗技无线蓝牙鼠标 Master 3S，使用感觉是相当得丝滑。不过非常遗憾，我这次过年回家，不小心把鼠标的蓝牙适配器弄丢了，导致最近办公只能使用戴尔赠送的有线鼠标。体验感不是特别好。 今天突发奇想，我原先也有一个旧的罗技蓝牙鼠标（初代Master），何不利用旧的蓝牙适配器来配对这款 Master 3s ？ 官网软件首先遇到的问题是：由于罗技出产配对使用的是鼠标的通道，如果需要用其他蓝色接收器重新配对，则要通过罗技提供的软件进行重新配对的操作。遗憾的是（大部分厂商）都只提供 Window 和 Mac 操作系统下的软件版本，而没有开发 Linux 版本。这导致我无法从官网获取软件支持。 Logi Options+ Linux 开源软件","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:0:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" 遇事不决，google 解决当然，遇事不决，google 解决。我以关键词 Logi Options+ linux 检索，第一个跳出 StackOverflow:Logitech Options on Linux https://askubuntu.com/questions/1206369/logitech-options-on-linux 按照上面的方法，开始安装 solaar sudo apt install solaar solaar ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:1:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" solaar打开 solaar 后，我们接下来需要添加新设备。我们需要把鼠标先关闭，然后再重新开启，这样程序才能识别是新接入的设备。 添加新设, 记得先关闭再重启鼠标 配对成功后，即可看到无线鼠标的设备信息来。 成功配对我的 Master 3S ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:2:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["programming"],"content":"pybind11 allow us to expose c++ class/function to higher abstraction level of python programming language, bringing high performance and flexibility into python. To pass named arguments in python, it’s required to specify argument names in pybind11’s interface. In this post, I will illustrate how to do that. c++ class","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:0:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" header #include \u003cpybind11/pybind11.h\u003e #include \u003cpybind11/embed.h\u003e #include \u003cpybind11/stl.h\u003e #include \u003ciostream\u003e #include \u003ccstdlib\u003e #include \u003ccstdio\u003e // from SnailCore #include \u003cutil/acct_info.hpp\u003e #include \u003cutil/shm.hpp\u003e #include \u003cutil/shm_tool.hpp\u003e #include \u003cutil/shm_status.hpp\u003e #include \u003cutil/shm_struct.hpp\u003e #include \u003cutil/shmv.hpp\u003e #include \u003cutil/time_util.hpp\u003e #include \u003cutil/index_type.hpp\u003e #include \u003cutil/str_util.hpp\u003e ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:1:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" function py::dict pybind11_read_shm_acc(const std::string\u0026 shm_tag) { std::unique_ptr\u003csnail::acct_info_t::shm_reader_t\u003e reader {new snail::acct_info_t::shm_reader_t(shm_tag)}; auto total = reader-\u003esize(); std::cout \u003c\u003c \"total:\" \u003c\u003c total \u003c\u003c std::endl; std::vector\u003cstd::string\u003e client_id, us; std::vector\u003cdouble\u003e beg_balance, curr_balance, enabled_balance, frozen_balance, deposit, margin, frozen_margin, fee, frozen_fee, pos_profit, close_profit; for (size_t i = 0; i \u003c total; ++i) { auto e = reader-\u003esafe_get(i); client_id.emplace_back(e-\u003eclient_id); us.emplace_back(microtime::from_count(e-\u003eus).to_zgc_str()); beg_balance.emplace_back(e-\u003ebeg_balance); curr_balance.emplace_back(e-\u003ecurr_balance); enabled_balance.emplace_back(e-\u003eenabled_balance); frozen_balance.emplace_back(e-\u003efrozen_balance); deposit.emplace_back(e-\u003edeposit); margin.emplace_back(e-\u003emargin); frozen_margin.emplace_back(e-\u003efrozen_margin); fee.emplace_back(e-\u003efee); frozen_fee.emplace_back(e-\u003efrozen_fee); pos_profit.emplace_back(e-\u003epos_profit); close_profit.emplace_back(e-\u003eclose_profit); } py::dict d; d[\"US\"] = us; d[\"ClientID\"] = client_id; d[\"BegBalance\"] = beg_balance; d[\"CurrBalance\"] = curr_balance; d[\"EnabledBalance\"] = enabled_balance; d[\"FrozenBalance\"] = frozen_balance; d[\"Deposit\"] = deposit; d[\"Margin\"] = margin; d[\"FrozenMargin\"] = frozen_margin; d[\"Fee\"] = fee; d[\"FrozenFee\"] = frozen_fee; d[\"PosProfit\"] = pos_profit; d[\"CloseProfit\"] = close_profit; return d; } ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:2:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" class class Account { public: Account(const std::string\u0026 shm_tag, int shm_size, bool continued = false) : _shm_tag{shm_tag} , _shm_size{shm_size} , _continued{false} { _shm_acc.reset(new acct_info_t::shm_writer_t( _shm_tag, _shm_size, _continued )); } ~Account() {} void write(const std::string\u0026 client_id, double beg_balance, double curr_balance, double enabled_balance, double frozen_balance = 0.0, double deposit = 0.0, double margin = 0.0, double frozen_margin = 0.0, double fee = 0.0, double frozen_fee = 0.0, double pos_profit = 0.0, double close_profit = 0.0, uint64_t us = 0 ) { auto e = _shm_acc-\u003eget_slot(); if (!e) { std::cout \u003c\u003c \"failed to get_slot, shm is full\" \u003c\u003c std::endl; return; } e-\u003eus = us == 0 ? microtime::now().count(): us; copy_str(e-\u003eclient_id, client_id.c_str()); e-\u003ebeg_balance = beg_balance; e-\u003ecurr_balance = curr_balance; e-\u003eenabled_balance = enabled_balance; e-\u003efrozen_balance = frozen_balance; e-\u003edeposit = deposit; e-\u003emargin = margin; e-\u003efrozen_margin = frozen_margin; e-\u003efee = fee; e-\u003efrozen_fee = frozen_fee; e-\u003epos_profit = pos_profit; e-\u003eclose_profit = close_profit; _shm_acc-\u003ecommit(e); } py::dict read() { return pybind11_read_shm_acc(_shm_tag); } private: std::string _shm_tag; int _shm_size {0}; bool _continued {false}; std::shared_ptr\u003ctypename acct_info_t::shm_writer_t\u003e _shm_acc; }; pybind11 interfacepybind11 provides by MACRO interfaces of c++. By defining py::arg(\"shm_tag\"), it’s possible to pass named arguments from python into c++’s functions/classes, with default values setting. PYBIND11_MODULE(snail, m) { // Function Interface m.def(\"pybind11_read_shm_acc\", \u0026pybind11_read_shm_acc, R\"pbdoc( read snail::acct_info_t )pbdoc\"); // Class Interface // define Account class py::class_\u003cAccount\u003e(m, \"Account\") // ctor .def(py::init\u003cconst std::string\u0026, int, bool\u003e(), py::arg(\"shm_tag\"), py::arg(\"shm_size\"), py::arg(\"continued\") = false ) .def(\"write\", \u0026Account::write, py::arg(\"client_id\"), py::arg(\"beg_balance\"), py::arg(\"curr_balance\"), py::arg(\"enabled_balance\"), py::arg(\"frozen_balance\") = 0.0, py::arg(\"deposit\") = 0.0, py::arg(\"margin\") = 0.0, py::arg(\"frozen_margin\") = 0.0, py::arg(\"fee\") = 0.0, py::arg(\"frozen_fee\") = 0.0, py::arg(\"pos_profit\") = 0.0, py::arg(\"close_profit\") = 0.0, py::arg(\"us\") = 0 ) .def(\"read\", \u0026Account::read) ; #ifdef VERSION_INFO m.attr(\"__version__\") = MACRO_STRINGIFY(VERSION_INFO); #else m.attr(\"__version__\") = \"dev\"; #endif } python callingNow we can call c++ functions/class interfaces in python. import pandas as pd from wepy.cpp.snail import pybind11_read_shm_acc from wepy.cpp.snail import Account ## Function Interface def read_shm_acc(shm_tag:str) -\u003e pd.DataFrame: data = pybind11_read_shm_acc(shm_tag) return pd.DataFrame(data) ## Class Interface from wepy.cpp.snail import Account acct = Account(shm_tag = \"lfang_acc\", shm_size = 1000) acct.write(client_id = \"lfang\", beg_balance = 1000.0, curr_balance = 1000.0, enabled_balance = 1000.0, deposit = 100) df = pd.DataFrame(acct.read()) df = read_shm_acc(\"lfang_acc\") python-calling ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:3:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["tools"],"content":"nvim 可以利用跳转功能，直接在当前光标下打开文件。如果该文件不存在，则新建一个。 我配置的快捷键是 gf(go file)。 vim.cmd([[ nnoremap \u003csilent\u003e gf :call JumpOrCreateFile()\u003cCR\u003e function! JumpOrCreateFile() \" Get the filename under the cursor let filename = expand(\"\u003ccfile\u003e\") \" Expand the tilde in the file path let expanded_filename = expand(filename) \" Check if the file path starts with \"./\" if expanded_filename =~# '^\\.\\/' \" Get the current directory of the editing file let current_directory = expand('%:p:h') \" Create the full path by appending the relative file path let expanded_filename = current_directory . '/' . expanded_filename endif \" Check if the file exists if !filereadable(expanded_filename) \" Prompt the user for file creation with the full path let choice = confirm('File does not exist. Create \"' . expanded_filename . '\"?', \"\u0026Yes\\n\u0026No\", 1) \" Handle the user's choice if choice == 1 \" Create the file and open it echohl WarningMsg | echo 'Created New File: ' . expanded_filename | echohl None execute 'edit ' . expanded_filename endif else \" File exists, perform normal gf behavior echohl ModeMsg | echo 'Open File: ' . expanded_filename | echohl None execute 'normal! gf' endif endfunction ]]) ","date":"2024-03-18","objectID":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/:0:0","tags":["nvim","cursor","gf","buffer"],"title":"nvim 直接打开当前光标下的文件","uri":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"使用 Hugo + Github 搭建个人博客系统，并托管在 Github Page 服务。 思路 在 Github 创建一个项目用于托管博客代码、markdown 文件等，比如 myblog 在 Github 创建 Page 项目。Page 项目是静态网页渲染，并可以托管在 Github 服务器。这样，我们就可以把网站内容发布到 Github。 这个 Page 的特别之处在于：我们将其项目名称设置为 williamlfang.github.io，即 yourusename.github.io。 Hugo 是一个优秀的静态网页生成框架，提供了灵活的配置。我们可以通过设置不同的主题（theme）来渲染网页，达到内容与形式分离的目地。 由于部分主题的功能需要使用到新特性，我们最好安装 hugo-extended 版本。 ## 需要安装 hugo extended version wget https://github.com/gohugoio/hugo/releases/download/v0.123.8/hugo_extended_0.123.8_linux-amd64.deb sudo dpkg -i hugo_extended_0.123.8_linux-amd64.deb hugo version 步骤","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 建立 Github 项目 在 Github 创建 myblog 项目 原教程是将源仓库与 Page 放在同一个项目，所以需要设置成 public。不过我的做法是将源仓库与发布仓库Page分离，内容托管在 myblog 的 private 项目，然后将 hugo 渲染后的 html 拷贝到发布仓库 Page。 在 Github 创建 williamlfang.github.io 项目 如上所述，需要将发布仓库 Page 设置为 public 开放互联网访问。 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" Hugo 搭建 初始化 hugo 目录 git clone git@github.com:williamlfang/myblog.git ## 初始化项目，如果存在目录，则需要添加 --force hugo new site myblog cd myblog ## 添加主题，这里我使用来 FixIt git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 根据对应 theme 提供的配置文件进行修改，可以查看参考配置 themes/FixIt/hugo.toml vim hugo.toml 比如我的配置是这样的： title 设置博客名称 baseURL 对应域名（如果是托管在 Github Page，则填写https://williamlfang.github.io/） theme 配置相应的名称（需要在 themes/ 目录下） avatar 是头像设置（如果是 FixIt，需要替换为自己的头像文件，在 themes/FixIt/assets/images） 创建博客 markdown 文章，可以使用命令 ## create new post ## 这个命令会调用参数模板，位于 `theme/FixIt/archetypes` ## 我们可以自行修改 hugo new posts/first_post.md ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 添加月历主要是看到这篇优秀的博客，受到启发。于是我也准备在博客添加一个月历，用于查看文章发布的情况。 给 Hugo 博客添加月历功能 https://blog.gimo.me/posts/adding-calendar-view-for-hugo-blog-posts/ 这里主要修改的地方有： 在配置 hugo.toml 添加一个栏目 [menu] [[menu.main]] identifier = \"calendar\" parent = \"\" pre = \"\" post = \"\" name = \"月历\" url = \"/calendar/\" title = \"\" weight = 100 [menu.main.params] icon = \"fa-regular fa-id-card fa-fw fa-sm\" 新建 content/calendar/index.md，设置其布局 --- title: \"月历📅\" date: 2024-03-01T16:00:09+08:00 layout: calendar --- 由于上面设置了 layout: calendar，因此，我们需要添加相关的页面模板。在根目录创建 layouts/page/calendar.html，具体布局可以参考 404.html 修改 calendar css 格式，在根目录创建（或则复制一份 /theme/FixIt/assets/css/_custom.css）到 assets/css/_custom.css // ============================== // Custom style // 自定义样式 // ============================== #calendar { a { color: var(--text-bright); \u0026:hover { text-decoration: none; } } tr { background: var(--background-body); } .fc-daygrid-event { white-space: normal; } .fc-day-sat .fc-daygrid-day-number, .fc-day-sat .fc-col-header-cell-cushion, .fc-day-sun .fc-daygrid-day-number, .fc-day-sun .fc-col-header-cell-cushion { color: #e74c3c; } } calendar 效果图 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 预览与发布 预览效果 ## preview hugo server --disableFastRender 生成静态页面：把 .md 文件转化成 html 页面，并保存到 public。这个就是我们托管在 Github Page 上的网站。后面需要把这个文件夹拷贝到 Page 项目，并进行发布。 ## 准备发布静态 html ，会生成一个 public 目录 hugo 发布静态生成的网站页面。我原来的做法是把 github page 单独放在一个目录，然后通过拷贝的方式进行同步。现在回想起来，这个方法似乎有点多此一举，为何不直接在 public 目录添加一个 submodule 呢，然后把内容推送到 github page 即可？ ## 先生成一个 public 目录 hugo ## 然后添加 submodule git submodule add git@github.com:williamlfang/williamlfang.github.io.git public cd public ## 后面有新的文章更新，只需要添加 public 即可 git add -A git commit -m \"add submodule\" git push origin main ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本可以在项目建立一个脚本，用于一键发布最新变动。 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # GitHub username. USERNAME=williamlfang # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- cd ../${SITE} pwd msg \"Pulling down from ${SITE}\" git pull msg \"Building the website\" cd ../${SOURCE} pwd msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push cp -r public/* ../${SITE} cd ../${SITE} git add -A git commit -m \"$MESSAGE\" git push origin master msg \"We've happily done.\" ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- ## into github-page pushd public msg \"Pulling down from ${SITE}\" git pull popd ## msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push pushd public git add -A git commit -m \"$MESSAGE\" git push origin main popd msg \"We've happily done.\" 使用技巧","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 内容","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 排序 默认以日期排序 通过设置 weight 以改变文章排序（前置功能） --- title: 使用hugo+github搭建博客 weight: 1 \u003c!--实现文章置顶功能--\u003e --- ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 注释1 要创建脚注引用，请在方括号中添加插入符号和标识符 ([^1])。 标识符可以是数字或单词，但不能包含空格或制表符。 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中，脚注按顺序编号。 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注)。 你不一定要在文档末尾添加脚注。可以将它们放在除列表，引用和表格等元素之外的任何位置。 这是一个数字脚注 [^1] 这是一个带标签的脚注 [^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注2 这是一个带标签的脚注3 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 图片","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 路径 在根目录下面有一个 static 目录，当hugo执行时，这个目录会被拷贝到 public 目录下，html 静态页面解析时会从这个路径开始寻找。因此，我们可以利用这一点，把 avatar、logo 等图片放在 static/images 下面，然后就可以使用路径 /images/xxx.png 来引用图片了 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 缩放功能 可以实现图片的全屏放大功能：需要在图片后面添加注释信息。需要注意的是，我在这里使用了相对路径，即与当前文档在同一个目录下面，这有赖于 Hugo(\u003e0.6.2) 提供的 layout/_default/_markup 功能。 ![我的博客](./hugo-fixit.png \"William Fang's Hugo FixIt\") 我的博客 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 代码块","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 自动折叠 配置默认展开的代码块长度 # 代码配置 [params.page.code] # 是否显示代码块的复制按钮 copy = true # 是否显示代码块的编辑按钮 edit = true # 默认展开显示的代码行数 # maxShownLines = 10 maxShownLines = 25 ## \u003c------------- # KaTeX 数学公式 (https://katex.org) [params.page.math] enable = true # 默认行内定界符是 $ ... $ 和 \\( ... \\) inlineLeftDelimiter = \"\" inlineRightDelimiter = \"\" # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 blockLeftDelimiter = \"\" blockRightDelimiter = \"\" # KaTeX 插件 copy_tex copyTex = true # KaTeX 插件 mhchem mhchem = true # Mapbox GL JS 配置 (https://docs.mapbox.com/mapbox-gl-js) ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 数学公式 hugo.toml title = \"William\" # baseURL = \"http://example.org/\" baseURL = \"https://williamlfang.github.io/\" # 网站语言，仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true ## ---------------------------------------------------------------------------\u003e[theme] # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"FixIt\" ## ---------------------------------------------------------------------------\u003c[theme] # [menu] # [[menu.main]] # identifier = \"posts\" # name = \"文章\" # url = \"/posts/\" # weight = 1 # [[menu.main]] # identifier = \"categories\" # name = \"分类\" # url = \"/categories/\" # title = \"\" # weight = 2 # [[menu.main]] # identifier = \"tags\" # name = \"标签\" # url = \"/tags/\" # weight = 3 # # [[menu.main]] # identifier = \"about\" # name = \"关于\" # url = \"about/\" # weight = 20 # icon = \"fa-solid fa-signature\" # [[menu.main.params]] # icon = \"fa-solid fa-signature\" [menu] [[menu.main]] identifier = \"posts\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"文章\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-regular fa-newspaper\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"archives\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"归档\" url = \"/archives/\" # title will be shown when you hover on this menu link title = \"\" weight = 2 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-solid fa-archive\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"categories\" parent = \"\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-folder-tree\" [[menu.main]] identifier = \"tags\" parent = \"\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" [[menu.main]] identifier = \"about\" parent = \"\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 20 [menu.main.params] icon = \"fa-solid fa-signature\" [params] # FixIt 主题版本 version = \"0.2.X\" # 例如：\"0.2.X\", \"0.2.15\", \"v0.2.15\" 等 # 网站描述 # description = \"这是我的 Hugo FixIt 网站\" description = \"William\" # 网站关键词 keywords = [\"Hugo\", \"FixIt\"] # 网站默认主题样式 [\"light\", \"dark\", \"auto\"] defaultTheme = \"auto\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片，用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = true # 是否自动显示外链图标 externalIcon = false # 是否反转导航菜单的顺序 navigationReverse = false # 是否在每个页面标题中添加网站标题 # 请记得在 `hugo.toml` 中设置网站标题 (例如 title = \"title\") withSiteTitle = true # 当网站标题被添加到每个页面标题时的标题分隔符 titleDelimiter = \"-\" # 是否在主页标题中添加网站副标题 # 请记得通过 `params.header.subtitle.name` 设置网站副标题 indexWithSubtitle = false # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 # 你可以将其关闭，但如果你不这样做，我们将不胜感激，因为这是观察 FixIt 受欢迎程度上升的好方法 disableThemeInject = false # 作者配置 [params.author] name = \"\" email = \"\" link = \"\" avatar = \"\" # 公共 Git 仓库信息，仅在 enableGitInfo 设为 true 时有效 [params.gitInfo] # 例如 \"https://github.com/hugo-fixit/docs\" rep","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Programming"],"content":"C++ Hacker’s Guide 是一本介绍编程技巧的实用书籍。 ","date":"2024-03-16","objectID":"/2024-03-16-c-hackers-guide/:0:0","tags":["c++","hacker"],"title":"C++ Hacker's Guide","uri":"/2024-03-16-c-hackers-guide/"},{"categories":["tools"],"content":"我现在基本上都是使用nvim做笔记，大部分的时间都是写 markdown 格式的文档。因此，需要一款能够在终端实时渲染的插件。 ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:0:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" glowglow 是一款可以在终端渲染 markdown 文档的命令 # Debian/Ubuntu sudo mkdir -p /etc/apt/keyrings curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg echo \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list sudo apt update \u0026\u0026 sudo apt install glow # Fedora/RHEL echo '[charm] name=Charm baseurl=https://repo.charm.sh/yum/ enabled=1 gpgcheck=1 gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo sudo yum install glow ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:1:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" markdown-preview.nvim这款插件支持在 nvim 的终端即可渲染 markdown，底层调用的是 glow 的渲染功能。 我这里配置了快捷键：mp -- :MPToggle: toggle markdown preview open or close. -- :MPOpen: open markdown preview window. -- :MPClose: close markdown preview window. -- :MPRefresh: refresh markdown preview window. return { \"0x00-ketsu/markdown-preview.nvim\", ft = {'md', 'markdown', 'mkd', 'mkdn', 'mdwn', 'mdown', 'mdtxt', 'mdtext', 'rmd', 'wiki'}, cmd = { \"MPToggle\", \"MPOpen\", \"MPClose\", \"MPRefresh\" }, config = function() require('markdown-preview').setup { -- 配置快捷键:mp vim.keymap.set( \"n\", \"mp\", \":MPToggle\u003cCR\u003e\", { silent = true }), glow = { -- When find executable path of `glow` failed (from PATH), use this value instead exec_path = '', style = '', -- Path to glamour JSON style file }, -- Markdown preview term term = { -- reload term when rendered markdown file changed reload = { enable = true, events = { 'InsertLeave', 'TextChanged' }, }, direction = 'vertical', -- choices: vertical / horizontal keys = { close = {'q', '\u003cEsc\u003e'}, refresh = 'r', } } } end } ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:2:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tool"],"content":" docker-compose version: \"3\" services: gitbook: hostname: gitbook container_name: gitbook image: fellah/gitbook pull_policy: always restart: always privileged: true tty: true volumes: - /data/gitbook:/srv/gitbook - /etc/localtime:/etc/localtime ports: - 4000:4000 command: - /bin/bash - -c - | /bin/bash ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:1:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" gitbook","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" SUMMARY.md # Summary * [Introduction](README.md) * [bash](bash.md) ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:1","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" book.jon对于整个网站的风格，可以通过 book.json 的配置进行渲染： { \"plugins\": [ \"-sharing\", \"theme-comscore\" ] } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:2","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 开始部署 npm i gitbook-plugin-theme-default npm i gitbook-plugin-theme-comscore npm i -g gitbook-cli gitbook init . gitbook install gitbook serve . \u0026 Starting server ... Serving book on http://localhost:4000 ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:3","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 删除 publish with gitbookref: https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html 首先，在book的根目录里创建styles文件夹，然后在其中创建website.css文件，添加以下内容: .gitbook-link { display: none !important; } 编辑book.json文件 { \"styles\": { \"website\": \"styles/website.css\" } } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:4","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":null,"content":" 關於我 keep Calm and Markdown; To follow the path: look to the master, follow the master, walk with the master, see through the master, become the master. The world is full of fascinating problems waiting to be solved No problem should ever have to be solved twice Boredom and drudgery are evil Freedom is good Attitude is no substitute for competence ","date":"2024-03-01","objectID":"/about/:1:0","tags":null,"title":"關於","uri":"/about/"},{"categories":null,"content":"William's friends","date":"2024-03-01","objectID":"/friends/","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" Notice 数据保存在 /data/friends.yml ","date":"2024-03-01","objectID":"/friends/:0:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" 基本資訊 - nickname: 菠菜眾長 avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: 不怕萬人阻擋，只怕自己投降 ","date":"2024-03-01","objectID":"/friends/:1:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":["tool"],"content":" setfacl -R -m o::--- /home/ops/shared/ setfacl -m u:spd:x /home/ops setfacl -m u:spd:x /home/ops/shared setfacl -m u:spd:x /home/ops/shared/trading setfacl -R -m u:spd:rx /home/ops/shared/trading/{PublicInfo,lib,Snail,Spider} ","date":"2024-02-26","objectID":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:0:0","tags":["linux","setfacl"],"title":"setfacl 更精准控制文件权限","uri":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":[],"content":" cd /app ./cloudreve --database-script ResetAdminPassword ","date":"2024-01-26","objectID":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/:0:0","tags":[],"title":"cloudreve 修改密码","uri":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/"},{"categories":[],"content":"red: https://www.reddit.com/r/cpp_questions/comments/1953267/how_do_i_learn_c_designarchitecture/ ","date":"2024-01-13","objectID":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/:0:0","tags":[],"title":"reddit: How do I learn C++ Design Architecture","uri":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/"},{"categories":[],"content":"https://gist.github.com/jacksonpradolima/840b4a20c617204a65b15da61e124bf6 ","date":"2024-01-13","objectID":"/2024-01-13-ubuntu-install-source-code-pro/:0:0","tags":[],"title":"ubuntu install source code pro","uri":"/2024-01-13-ubuntu-install-source-code-pro/"},{"categories":[],"content":"C++ 提供了小对象的 RVO（返回值优化），实现了在函数返回中调用构造函数的功能。 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e class BigObject { public: BigObject() : person_names_(std::vector\u003cstd::string\u003e(1000000)) { std::cout \u003c\u003c \"constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } ~BigObject() { std::cout \u003c\u003c \"destructor. \" \u003c\u003c std::endl; } BigObject(const BigObject\u0026 other) { person_names_ = other.person_names_; std::cout \u003c\u003c \"copy constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } private: std::vector\u003cstd::string\u003e person_names_; }; BigObject Foo() { BigObject local_obj; return local_obj; // return std::move(local_obj); } int n {0}; struct C { explicit C(int) {} C(const C\u0026) { ++n; } int x {1}; }; int main() { { BigObject obj = Foo(); } //-----Foo() // : BigObject local_obj -\u003e ctor + copy ctor // : return local_obj -\u003e dtor //BigObject obj // : -\u003e copy ctor // -\u003e dtor // : -\u003e dtor C c1(42); // copy ctor is equivalent to direct-ctor C c2 = C(42); std::cout \u003c\u003c \"n:\" \u003c\u003c n \u003c\u003c std::endl; return 0; } /* g++ -g -fno-elide-constructors -Wall -std=c++11 main.cpp main.cpp: In function ‘int main()’: main.cpp:49:7: warning: variable ‘c2’ set but not used [-Wunused-but-set-variable] 49 | C c2 = C(42); | ^~ ./a.out constructor. 1000000 copy constructor. 1000000 destructor. copy constructor. 1000000 destructor. destructor. n:1 */ /* g++ -g main.cpp ./a.out constructor. 1000000 destructor. n:0 */ ","date":"2024-01-12","objectID":"/2024-01-12-c-copy-elision/:0:0","tags":[],"title":"c++ copy elision","uri":"/2024-01-12-c-copy-elision/"},{"categories":[],"content":"epub2pdf ","date":"2023-11-29","objectID":"/2023-11-29-epub-to-pdf/:0:0","tags":[],"title":"epub to pdf","uri":"/2023-11-29-epub-to-pdf/"},{"categories":["tools"],"content":" 安装 ## CentOS wget https://github.com/sharkdp/bat/releases/download/v0.24.0/bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz tar -xvf bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz cd bat-v0.24.0-x86_64-unknown-linux-gnu cp ./bat ~/local/bin ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:1:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":" 设置 ## cat alias cat='~/local/bin/bat --style=plain' ## help alias bathelp='bat --plain --language=help' help() { \"$@\" --help 2\u003e\u00261 | bathelp } alias -g -- -h='-h 2\u003e\u00261 | bat --language=help --style=plain' alias -g -- --help='--help 2\u003e\u00261 | bat --language=help --style=plain' ## tail -f taillog() { tail -f $1 | bat --paging=never -l log } ## fzf alias fzfx='fzf --preview \"bat --color=always --style=numbers --line-range=:500 {}\"' ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:2:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":"nethogs 可以针对 Linux 操作系统下单独的进程监控网络带宽，可以十分方便地排查当前占用流量过多的进程。 wget https://github.com/raboof/nethogs/archive/refs/tags/v0.8.7.tar.gz tar -xvf v0.8.7.tar.gz cd nethogs-0.8.7 ## 修改安装路径 Makefile make make install #export TERM=linux ln -sfn /usr/local/sbin/nethogs /usr/bin/nethogs ## 非 root 也能使用 ## running nethogs without root ## https://github.com/raboof/nethogs/issues/86 setcap \"cap_net_admin,cap_net_raw=ep\" /usr/sbin/nethogs ## https://github.com/raboof/nethogs/issues/142 setcap cap_net_admin,cap_net_raw,cap_dac_read_search,cap_sys_ptrace+ep /usr/local/sbin/nethogs export TERM=linux ","date":"2023-11-17","objectID":"/2023-11-17-nethogs/:0:0","tags":["linux","nethogs"],"title":"nethogs","uri":"/2023-11-17-nethogs/"},{"categories":["toolsj"],"content":"安装 Docky mkdir -p ~/Downloads/docky cd ~/Downloads/docky wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-sharp2/libgconf2.0-cil_2.24.2-4_all.deb wget http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring-common_3.12.0-1build1_all.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring0_3.12.0-1build1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-keyring-sharp/libgnome-keyring1.0-cil_1.0.0-5_amd64.deb sudo apt install ./*.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/d/docky/docky_2.2.1.1-1_all.deb sudo apt install ./docky_2.2.1.1-1_all.deb ","date":"2023-11-10","objectID":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/:0:0","tags":["linux","docky"],"title":"ubuntu 安装 docky","uri":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/"},{"categories":["tools"],"content":"zsh 出现错误提示 zsh compinit: insecure directories, run compaudit for list 先进入 zsh 环境(选择 n)，然后执行 compaudit |xargs chmod g-w ","date":"2023-11-06","objectID":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/:0:0","tags":["Linux","zsh","compinit"],"title":"zsh compinit: insecure directories, run compaudit for list","uri":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/"},{"categories":["tools"],"content":"nerd font 是一款优秀的字体，提供了大量的图标，可以用于 terminal、vim 等终端显示。 #/bin/bash # install DroidSansMono Nerd Font --\u003e u can choose another at: https://www.nerdfonts.com/font-downloads echo \"[-] Download fonts [-]\" echo \"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip\" wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip unzip DroidSansMono.zip -d ~/.fonts fc-cache -fv echo \"done!\" mkdir -p ~/.fonts wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/SourceCodePro.zip wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip SourceCodePro.zip cd SourceCodePro cp ./* ~/.fonts fc-cache -fv ","date":"2023-11-04","objectID":"/2023-11-04-nerd-font/:0:0","tags":["linux","nerd","fonts","symbolic","saucecodepro"],"title":"nerd font","uri":"/2023-11-04-nerd-font/"},{"categories":[],"content":"alacritty 比 terminator 更加强大。 apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 apt-get update --fix-missing sudo apt install git curl cargo cd /tmp git clone https://github.com/alacritty/alacritty.git cd alacritty/ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh source \"$HOME/.cargo/env\" rustup override set stable sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 cargo build --release cargo build --release sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg sudo desktop-file-install extra/linux/Alacritty.desktop sudo update-desktop-database ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:0:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 tmux 问题 ## https://github.com/alacritty/alacritty/issues/2487 export TERM=xterm-256color ## 或者尝试使用以下配置 export TERM=xterm tmux kill-server ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:1:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 nvim 颜色显示问题 ## https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:2:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" color issues ## tmux.conf ## alacrrity: https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ## https://www.reddit.com/r/tmux/comments/onom6t/nvim_colors_change_if_on_tmux_on_alacritty/ set -g default-terminal 'xterm-256color' set -as terminal-overrides ',xterm*:Tc:sitm=\\E[3m' ## .zshrc ## alacritty export TERM=xterm-256color ## .bashrc ## colo ## .zshrc export TERM=xterm-256color ## .bashrc export TERM=xterm-256color ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:3:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 从 yaml 转换到 toml alacritty migrate -c xxx.yaml ## 或者批量转换 find . -type f -name '*.yaml' | xargs -I {} alacritty migrate -c {} ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:4:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" Ref 一个配置的说明 alacritty.yml ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:5:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":["tools"],"content":" set encoding=utf-8 set termencoding=utf-8 set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr set fileencoding=utf-8 ","date":"2023-10-30","objectID":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:0:0","tags":["linux","vim","nvim","neovim","utf8"],"title":"nvim 打开中文乱码","uri":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["tools"],"content":"我们在设计结构体时，需要慎重考虑内存对齐的问题，因为不同的内存对齐方式对程序的性能有极大的影响。 ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:0:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" CPU 读取内存的最小有效值计算机的内存是按照 byte(8 bits) 进行有序排序，理论上，我们可以在最小有效值为 1 byte 进行随机内存读取。然而，如果每次都是按照这个节奏，每取一个 int（假设为 4byte） 变量，CPU 都需要进行 4 次操作，毫无疑问效率极低。 我们知道 CPU 架构有 32bit 与 64bit 两种，其含义是在 CPU 每次从内存地址取值时，是以对应最小有效内存地址进行快速操作的。简单讲 对于 32bit，最优操作为每次取 4 byte 的内存空间进行识别 对于 64bit，最优操作为每次取 8 byte 的内存空间进行识别 现在的操作系统一般都是 64bit 了，所以每次的最佳取内存地址为 8byte，这也是我们经常说的，内存对齐按照 8byte，也是编译器 gcc 默认采用的大小。 #pragama pack(8) ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:1:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 如果计算 struct 的内存大小 先计算操作系统 CPU 的对齐单位（一般为 8byte），根据结构体成员最大的内存单位，取 两者的最小值作为有效对齐单位(x) 对于结构体的每一个成员，取其大小与有效对齐单位的较小者，作为单个成员的有效单位(e)。第一个成员变量的偏移值从 0 开始，按照每个成员的有效对齐单位排列，不足之处进行补位填充 最后，整个结构体还需要按照有效对齐单位(x)的整数倍进行填充 #include \u003ciostream\u003e using namespace std; #pragma pack(push) #pragma pack(4) struct { int a; double b; short c; } u; #pragma pack(pop) #pragma pack(push) #pragma pack(1) struct { int a; double b; short c; } v; #pragma pack(pop) struct { int a; double b; short c; } x; struct { int a; char b; short c; } y; struct { int a; char b; short c; } __attribute__((packed)) z; int main() { cout \u003c\u003c \"sizeof(u):\" \u003c\u003c sizeof(u) \u003c\u003c endl; cout \u003c\u003c \"sizeof(v):\" \u003c\u003c sizeof(v) \u003c\u003c endl; cout \u003c\u003c \"sizeof(x):\" \u003c\u003c sizeof(x) \u003c\u003c endl; cout \u003c\u003c \"sizeof(y):\" \u003c\u003c sizeof(y) \u003c\u003c endl; cout \u003c\u003c \"sizeof(z):\" \u003c\u003c sizeof(z) \u003c\u003c endl; return 0; } sizeof(u):16, int(4) + double(8) + short(2) = (14/4+1) * 4 = 16 sizeof(v):14, int(4) + double(8) + short(2) = 14/1 = 14 sizeof(x):24 结构体 x 的最大成员 (double)b 的内存占用 8，操作系统64位，则有效对齐单位 x = min(8,8) = 8 对于结构体的每个成员 sizeof(a) = 4 \u003c= 8, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 8, 则按照1的倍数进行偏移，从（4byte）开始，先对齐 8 byte，占用 8 byte，已用: 4 + 4(填充) + 8 = 16 sizeof(c) = 2 \u003c= 8, 则按照2的倍数进行偏移，从上面 16 后面按照 2 的倍数，占用两个字节，已用：16 + 2 = 18 最后，整个结构体再按照 x=8 的倍数对齐，(18/8+1) * 8 = 24，所以整个结构体大小为24字节 内存空间为 xxxx ____ xxxxxxxx xx ______ 4 pad(4) 8 2 pad(6) sizeof(y):8 结构体 y 的最大成员 a 的内存占用 4，操作系统64位，则有效对齐单位 x = min(4,8) = 4 对于结构体的每个成员 sizeof(a) = 4 \u003c= 4, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 4, 则按照1的倍数进行偏移，从（4byte）开始，占用一个字节，已用: 4 + 1 = 5 sizeof(c) = 2 \u003c= 4, 则按照2的倍数进行偏移，从上面 5 后面按照 2 的倍数，占用两个字节，已用：5 + 1(填充) + 2 = 8 最后，整个结构体再按照 x=4 的倍数对齐，刚好为 8，所以整个结构体大小为8字节 sizeof(z):7 我们告诉编译器不用对齐，所以按照实际占用的字节占用 7 byte. ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:2:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 使用 pack 指定对齐可以使用编译器提供的 pack(n) 指定对齐大小： #pragma pack(n) 或者使用压栈的方式 #pragma pack(push, n) #pragma pop() ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:3:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 不同内存对齐影响程序性能 ## 可以看到，在 64 位操作系统中，最佳实践为 8byte 对齐 SampleStructPack1: 1000000000000000000 bytes allocated in 8202 nanoseconds SampleStructPack2: 1200000000000000000 bytes allocated in 276 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 205 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 131 nanoseconds 程序如下： #include \u003ciostream\u003e #include \u003cchrono\u003e #pragma pack (1) struct SampleStructPack1 { bool flag; unsigned int timeout; }; //#pragma pack(0) #pragma pack (2) struct SampleStructPack2 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (4) struct SampleStructPack4 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (8) struct SampleStructPack8 { bool flag; unsigned int timeout; }; // #pragma pack(0) struct SampleStruct { bool flag; unsigned int timeout; }; static const long long MAX_ELEMENTS = 200000000000000000; using namespace std; using namespace std::chrono; void allocate1() { SampleStructPack1 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack1: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate2() { SampleStructPack2 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack2: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate4() { SampleStructPack4 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack4: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate8() { SampleStructPack8 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack8: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void chrono1() { auto begin = high_resolution_clock::now() ; allocate1(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono2() { auto begin = high_resolution_clock::now() ; allocate2(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono4() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono8() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } int main(int argc, char *argv[]) { chrono1(); chrono2(); chrono4(); chrono8(); return 0; } ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:4:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" old-style:[0]我在查看代码的时候，发现有一个 struct 有 长度为0 的数组。 struct data_t { size_t size; int data[0]; }; 如果打印出上面结构体，发现长度正好为 size_t，其中的 data 是不占用内存的。 cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; //sizeof(size_t):8 //sizeof(data_t):8 原来，这样做的目的，是为了可以添加不限长度的数组，通过 malloc 分配内存大小，从而实现在代码中灵活分配数据的目的。 data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:1:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" new-style:[]其实，这是一种比较古老的写法，我们完全可以使用 arr[] (flexible array member) 来替代 struct data_t { size_t size; //In C99 standard this is not neccessary as it supports the arr[] syntax. int data[]; }; 完整的测试代码如下： #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; //This is an old C hack to allow a flexible sized arrays. int data[0]; //In C99 standard this is not neccessary as it supports the arr[] syntax. //int data[]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(10); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:2:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" best-style:[1]上面的做法有一个问题，如果使用编译器选项 -pedantic 会有报错提示： ## 对于 int data[0] main.cpp:11:14: warning: ISO C++ forbids zero-size array ‘data’ [-Wpedantic] 11 | int data[0]; | ^ ## 对于 int data[] main.cpp:13:9: warning: ISO C++ forbids flexible array member ‘data’ [-Wpedantic] 13 | int data[]; | ^~~~ It’s worth pointing out IMO the best way to do the size calculation, which is used in the Raymond Chen article linked above. struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { // 使用 offsetof 计算出 data[size] 占用的大小 data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } 完整的测试代码如下： #include \u003ccstddef\u003e #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(20); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; cout \u003c\u003c \"x.size:\" \u003c\u003c x-\u003esize \u003c\u003c endl; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:3:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" Ref: Array of zero length Why do some structures end with an array of size 1? ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:4:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":"使用 talebook ## 使用 docker 安装 docker pull talebook/talebook git clone https://github.com/talebook/talebook.git cd talebook docker-compose -f docker-compose.yml up -d ## 访问： 127.0.0.1:8080 ## 初次安装会要求设置账户、密码 ## 管理员 ## 账户：admin ## 密码：****** ","date":"2023-10-15","objectID":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:0:0","tags":["linux","talebook","kindle","读书","阅读","在线","图书馆","mobi","pdf"],"title":"talebook 在线个人图书馆 安装指南","uri":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"尝试使用 neovim，可以重复利用 lua 这个编程语言。 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 安装 ## 下载二进制 wget https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz tar -xvf nvim-linux64.tar.gz ## 添加到系统路径 sudo cp -r nvim-linux64 /usr/local/ sudo ln -sfn /usr/local/nvim-linux64/bin/nvim /usr/bin/nvim ## 查看版本 $ nvim --version NVIM v0.9.4 Build type: Release LuaJIT 2.1.1692716794 system vimrc file: \"$VIM/sysinit.vim\" fall-back for $VIM: \"/__w/neovim/neovim/build/nvim.AppDir/usr/share/nvim\" Run :checkhealth for more info ## 打开 nvim，执行 :checkhealth Configuration - WARNING Missing user config file: /home/william/.config/nvim/init.vim - ADVICE: - :help nvim-from-vim Runtime - OK $VIMRUNTIME: /usr/local/nvim-linux64/share/nvim/runtime Performance - OK Build type: Release Remote Plugins - OK Up to date terminal - key_backspace (kbs) terminfo entry: key_backspace= - key_dc (kdch1) terminfo entry: key_dc= - $TERM_PROGRAM=\"tmux\" ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:1:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置nvim 默认会读取初始化文件 init.lua init.vim ## nvim 的配置文件在 mkdir -p ~/.config/nvim cd ~/.config/nvim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置选项主要用到的就是 vim.g、vim.opt、vim.cmd 等 In Vim In Nvim Note let g:foo = bar vim.g.foo = bar set foo = bar vim.opt.foo = bar set foo = vim.opt.foo = true some_vimscript vim.cmd(some_vimscript) ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:1","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 插件管理 lazy.nvimref: lazy-nvim插件管理器基础入门 ## 添加 init.lua vim ~/.config/nvim/init.lua -- bootstrap lazy.nvim -- ./lua/lazynvim-init.lua require(\"lazynvim-init\") ## 设置 lazynvim vim ~/.config/nvim/lua/lazynvim-init.lua -- 1. 准备lazy.nvim模块（存在性检测） -- stdpath(\"data\") -- macOS/Linux: ~/.local/share/nvim -- Windows: ~/AppData/Local/nvim-data local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\" if not vim.loop.fs_stat(lazypath) then vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"https://github.com/folke/lazy.nvim.git\", \"--branch=stable\", -- latest stable release lazypath, }) end -- -- 2. 将 lazypath 设置为运行时路径 -- rtp（runtime path） -- nvim进行路径搜索的时候，除已有的路径，还会从prepend的路径中查找 -- 否则，下面 require(\"lazy\") 是找不到的 vim.opt.rtp:prepend(lazypath) -- 3. 加载lazy.nvim模块 -- require(\"lazy\").setup({}) -- 在 ~/.config/nvim/lua/plugins 安装插件 require(\"lazy\").setup(\"plugins\") ## 打开 nvim 验证 lazynvim :Lazy ## 安装 plugin mkdir -p ~/.config/nvim/lua/plugins vim ~/.config/nvim/lua/plugins/plugin-lualine.lua return { { 'nvim-lualine/lualine.nvim', config = function() require('lualine').setup() end } } vim-plug ## 使用 vim-plug: https://github.com/junegunn/vim-plug ## 存放在 ~/.config/nvim，避免与 vim 冲突 curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ## 需要安装 pynvim ## python3 -m pip install --user --upgrade pynvim ## 安装相关的插件，位置在：~/.config/nvim/plugged vim ~/.config/nvim/init.vim \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"如果vim插件管理器没有安装则自动安装 if empty(glob('~/.config/nvim/autoload/plug.vim')) silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim autocmd VimEnter * PlugInstall --sync | source $MYVIMRC endif \"\" 设置vim可以保存文件修改历史 silent !mkdir -p ~/.config/nvim/tmp/backup silent !mkdir -p ~/.config/nvim/tmp/undo \"\"silent !mkdir -p ~/.config/nvim/tmp/sessions set backupdir=~/.config/nvim/tmp/backup,. set directory=~/.config/nvim/tmp/backup,. if has('persistent_undo') set undofile set undodir=~/.config/nvim/tmp/undo,. endif call plug#begin('~/.config/nvim/plugged') Plug 'sainnhe/everforest' call plug#end() ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:2","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 快捷键","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:3","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 主题配色","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:4","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 以 vimrc 作为基本当然，我们也可以直接使用 .vimrc 作为配置 # CONFIG_PATH=$HOME/.config # ln -s ~/.vim $CONFIG_PATH/nvim # ln -s ~/.vimrc $CONFIG_PATH/nvim/init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:5","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" lsp ## nvim 'iostream' file not found sudo apt install libstdc++-12-dev ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:6","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" python /home/lfang/.config/nvim/lazy/mason/packages/python-lsp-server/venv/pyvenv.cfg home = /home/lfang/anaconda3/bin ## true include-system-site-packages = true version = 3.9.12 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:7","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" Ref: 关于 bufferline.lua 的合理配置 比较规范的一个配置项目：nvim 功能强大 .config Neovim小结 nvim配置文件 (Ubuntu 18.04 测试成功) 从零开始配置 Neovim(Nvim) 使用 init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:3:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":"一直在入坑，却从未爬出来。 Install wget https://mirrors.tuna.tsinghua.edu.cn/gnu/emacs/emacs-29.1.tar.gz tar -xvf emacs-29.1.tar.gz cd emacs-29.1 ## 准备安装环境 sudo apt build-dep emacs ## ./configure --with-x-toolkit=no --with-xpm=ifavailable --with-gif=ifavailable --with-pop DoomEmacs git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d ## 添加到环境变量的可执行路径 export PATH=/home/william/.emacs.d/bin:$PATH 在修改了~/.doom.d/init.el 和 ~/.doom.d/packages.el 后需要执行 doom sync 如果有问题就运行 doom doctor 如果需要更新就运行 doom upgrade 可以在 Emacs 内通过 SPC h d h 来查看文档 可以通过命令查看启动时间：M-x emacs-init-time 字体ref: https://github.com/seagle0128/doom-modeline/issues/310 @bk138 Currently nerd-icons is used in doom-modeline, while all-the-icons has been dropped. You should install nerd-fonts via M-x nerd-icons-install-fonts. Please read REAME. ## 安装 nerd symbol font wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip NerdFontsSymbolsOnly.zip cd NerdFontsSymbolsOnly cp *ttf ~/.local/share/fonts ## 更新字体缓存 fc-cache -fv fc-list |grep -i nerd ## 清理原来的 font cd /home/william/.emacs.d/.local/straight/repos rm all-the-icons.el cd /home/william/.emacs.d/.local/straight/build-29.1 rm -rf all-the-icons ## 重新加载 doom sync \u0026\u0026 doom build ## 安装必要的字体包 M-x all-the-icons-install-fonts M-x nerd-icons-install-fonts ","date":"2023-10-11","objectID":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","Emacs"],"title":"Emacs 入坑","uri":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/"}]
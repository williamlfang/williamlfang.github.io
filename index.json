[{"categories":["programming"],"content":"data cache 在用户调用资源开辟一块缓存区域，保存了中间的计算结果，可以避免重复计算。 ","date":"2024-03-22","objectID":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/:0:0","tags":["data","cache","python","lru"],"title":"data cache 的妙用","uri":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/"},{"categories":["programming"],"content":"AT\u0026T 汇编是 Linux 操作系统默认的汇编语言。熟悉汇编语言能够增强我们对程序运行逻辑的认识，理解程序运行的性能瓶颈。 Ref x86 Assembly Guide Introduction to Compilers and Language Design Function Calls and the Call Stack 你一定要搞明白的C函数调用方式与栈原理 第 1 章 C++ 惯用法 C++ 函数调用栈 ","date":"2024-03-19","objectID":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/:0:0","tags":["AT\u0026t","att","assemble","gcc","g++","c++","c","intel","汇编"],"title":"ATT 汇编语法","uri":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/"},{"categories":["tools"],"content":"我在多年前购买了一款罗技无线蓝牙鼠标 Master 3S，使用感觉是相当得丝滑。不过非常遗憾，我这次过年回家，不小心把鼠标的蓝牙适配器弄丢了，导致最近办公只能使用戴尔赠送的有线鼠标。体验感不是特别好。 今天突发奇想，我原先也有一个旧的罗技蓝牙鼠标（初代Master），何不利用旧的蓝牙适配器来配对这款 Master 3s ？ 官网软件首先遇到的问题是：由于罗技出产配对使用的是鼠标的通道，如果需要用其他蓝色接收器重新配对，则要通过罗技提供的软件进行重新配对的操作。遗憾的是（大部分厂商）都只提供 Window 和 Mac 操作系统下的软件版本，而没有开发 Linux 版本。这导致我无法从官网获取软件支持。 Logi Options+ Linux 开源软件","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:0:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" 遇事不决，google 解决当然，遇事不决，google 解决。我以关键词 Logi Options+ linux 检索，第一个跳出 StackOverflow:Logitech Options on Linux https://askubuntu.com/questions/1206369/logitech-options-on-linux 按照上面的方法，开始安装 solaar sudo apt install solaar solaar ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:1:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" solaar打开 solaar 后，我们接下来需要添加新设备。我们需要把鼠标先关闭，然后再重新开启，这样程序才能识别是新接入的设备。 添加新设, 记得先关闭再重启鼠标 配对成功后，即可看到无线鼠标的设备信息来。 成功配对我的 Master 3S ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:2:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["programming"],"content":"pybind11 allow us to expose c++ class/function to higher abstraction level of python programming language, bringing high performance and flexibility into python. To pass named arguments in python, it’s required to specify argument names in pybind11’s interface. In this post, I will illustrate how to do that. c++ class","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:0:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" header #include \u003cpybind11/pybind11.h\u003e #include \u003cpybind11/embed.h\u003e #include \u003cpybind11/stl.h\u003e #include \u003ciostream\u003e #include \u003ccstdlib\u003e #include \u003ccstdio\u003e // from SnailCore #include \u003cutil/acct_info.hpp\u003e #include \u003cutil/shm.hpp\u003e #include \u003cutil/shm_tool.hpp\u003e #include \u003cutil/shm_status.hpp\u003e #include \u003cutil/shm_struct.hpp\u003e #include \u003cutil/shmv.hpp\u003e #include \u003cutil/time_util.hpp\u003e #include \u003cutil/index_type.hpp\u003e #include \u003cutil/str_util.hpp\u003e ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:1:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" function py::dict pybind11_read_shm_acc(const std::string\u0026 shm_tag) { std::unique_ptr\u003csnail::acct_info_t::shm_reader_t\u003e reader {new snail::acct_info_t::shm_reader_t(shm_tag)}; auto total = reader-\u003esize(); std::cout \u003c\u003c \"total:\" \u003c\u003c total \u003c\u003c std::endl; std::vector\u003cstd::string\u003e client_id, us; std::vector\u003cdouble\u003e beg_balance, curr_balance, enabled_balance, frozen_balance, deposit, margin, frozen_margin, fee, frozen_fee, pos_profit, close_profit; for (size_t i = 0; i \u003c total; ++i) { auto e = reader-\u003esafe_get(i); client_id.emplace_back(e-\u003eclient_id); us.emplace_back(microtime::from_count(e-\u003eus).to_zgc_str()); beg_balance.emplace_back(e-\u003ebeg_balance); curr_balance.emplace_back(e-\u003ecurr_balance); enabled_balance.emplace_back(e-\u003eenabled_balance); frozen_balance.emplace_back(e-\u003efrozen_balance); deposit.emplace_back(e-\u003edeposit); margin.emplace_back(e-\u003emargin); frozen_margin.emplace_back(e-\u003efrozen_margin); fee.emplace_back(e-\u003efee); frozen_fee.emplace_back(e-\u003efrozen_fee); pos_profit.emplace_back(e-\u003epos_profit); close_profit.emplace_back(e-\u003eclose_profit); } py::dict d; d[\"US\"] = us; d[\"ClientID\"] = client_id; d[\"BegBalance\"] = beg_balance; d[\"CurrBalance\"] = curr_balance; d[\"EnabledBalance\"] = enabled_balance; d[\"FrozenBalance\"] = frozen_balance; d[\"Deposit\"] = deposit; d[\"Margin\"] = margin; d[\"FrozenMargin\"] = frozen_margin; d[\"Fee\"] = fee; d[\"FrozenFee\"] = frozen_fee; d[\"PosProfit\"] = pos_profit; d[\"CloseProfit\"] = close_profit; return d; } ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:2:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" class class Account { public: Account(const std::string\u0026 shm_tag, int shm_size, bool continued = false) : _shm_tag{shm_tag} , _shm_size{shm_size} , _continued{false} { _shm_acc.reset(new acct_info_t::shm_writer_t( _shm_tag, _shm_size, _continued )); } ~Account() {} void write(const std::string\u0026 client_id, double beg_balance, double curr_balance, double enabled_balance, double frozen_balance = 0.0, double deposit = 0.0, double margin = 0.0, double frozen_margin = 0.0, double fee = 0.0, double frozen_fee = 0.0, double pos_profit = 0.0, double close_profit = 0.0, uint64_t us = 0 ) { auto e = _shm_acc-\u003eget_slot(); if (!e) { std::cout \u003c\u003c \"failed to get_slot, shm is full\" \u003c\u003c std::endl; return; } e-\u003eus = us == 0 ? microtime::now().count(): us; copy_str(e-\u003eclient_id, client_id.c_str()); e-\u003ebeg_balance = beg_balance; e-\u003ecurr_balance = curr_balance; e-\u003eenabled_balance = enabled_balance; e-\u003efrozen_balance = frozen_balance; e-\u003edeposit = deposit; e-\u003emargin = margin; e-\u003efrozen_margin = frozen_margin; e-\u003efee = fee; e-\u003efrozen_fee = frozen_fee; e-\u003epos_profit = pos_profit; e-\u003eclose_profit = close_profit; _shm_acc-\u003ecommit(e); } py::dict read() { return pybind11_read_shm_acc(_shm_tag); } private: std::string _shm_tag; int _shm_size {0}; bool _continued {false}; std::shared_ptr\u003ctypename acct_info_t::shm_writer_t\u003e _shm_acc; }; pybind11 interfacepybind11 provides by MACRO interfaces of c++. By defining py::arg(\"shm_tag\"), it’s possible to pass named arguments from python into c++’s functions/classes, with default values setting. PYBIND11_MODULE(snail, m) { // Function Interface m.def(\"pybind11_read_shm_acc\", \u0026pybind11_read_shm_acc, R\"pbdoc( read snail::acct_info_t )pbdoc\"); // Class Interface // define Account class py::class_\u003cAccount\u003e(m, \"Account\") // ctor .def(py::init\u003cconst std::string\u0026, int, bool\u003e(), py::arg(\"shm_tag\"), py::arg(\"shm_size\"), py::arg(\"continued\") = false ) .def(\"write\", \u0026Account::write, py::arg(\"client_id\"), py::arg(\"beg_balance\"), py::arg(\"curr_balance\"), py::arg(\"enabled_balance\"), py::arg(\"frozen_balance\") = 0.0, py::arg(\"deposit\") = 0.0, py::arg(\"margin\") = 0.0, py::arg(\"frozen_margin\") = 0.0, py::arg(\"fee\") = 0.0, py::arg(\"frozen_fee\") = 0.0, py::arg(\"pos_profit\") = 0.0, py::arg(\"close_profit\") = 0.0, py::arg(\"us\") = 0 ) .def(\"read\", \u0026Account::read) ; #ifdef VERSION_INFO m.attr(\"__version__\") = MACRO_STRINGIFY(VERSION_INFO); #else m.attr(\"__version__\") = \"dev\"; #endif } python callingNow we can call c++ functions/class interfaces in python. import pandas as pd from wepy.cpp.snail import pybind11_read_shm_acc from wepy.cpp.snail import Account ## Function Interface def read_shm_acc(shm_tag:str) -\u003e pd.DataFrame: data = pybind11_read_shm_acc(shm_tag) return pd.DataFrame(data) ## Class Interface from wepy.cpp.snail import Account acct = Account(shm_tag = \"lfang_acc\", shm_size = 1000) acct.write(client_id = \"lfang\", beg_balance = 1000.0, curr_balance = 1000.0, enabled_balance = 1000.0, deposit = 100) df = pd.DataFrame(acct.read()) df = read_shm_acc(\"lfang_acc\") python-calling ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:3:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["tools"],"content":"nvim 可以利用跳转功能，直接在当前光标下打开文件。如果该文件不存在，则新建一个。 我配置的快捷键是 gf(go file)。 vim.cmd([[ nnoremap \u003csilent\u003e gf :call JumpOrCreateFile()\u003cCR\u003e function! JumpOrCreateFile() \" Get the filename under the cursor let filename = expand(\"\u003ccfile\u003e\") \" Expand the tilde in the file path let expanded_filename = expand(filename) \" Check if the file path starts with \"./\" if expanded_filename =~# '^\\.\\/' \" Get the current directory of the editing file let current_directory = expand('%:p:h') \" Create the full path by appending the relative file path let expanded_filename = current_directory . '/' . expanded_filename endif \" Check if the file exists if !filereadable(expanded_filename) \" Prompt the user for file creation with the full path let choice = confirm('File does not exist. Create \"' . expanded_filename . '\"?', \"\u0026Yes\\n\u0026No\", 1) \" Handle the user's choice if choice == 1 \" Create the file and open it echohl WarningMsg | echo 'Created New File: ' . expanded_filename | echohl None execute 'edit ' . expanded_filename endif else \" File exists, perform normal gf behavior echohl ModeMsg | echo 'Open File: ' . expanded_filename | echohl None execute 'normal! gf' endif endfunction ]]) ","date":"2024-03-18","objectID":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/:0:0","tags":["nvim","cursor","gf","buffer"],"title":"nvim 直接打开当前光标下的文件","uri":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"使用 Hugo + Github 搭建个人博客系统，并托管在 Github Page 服务。 思路 在 Github 创建一个项目用于托管博客代码、markdown 文件等，比如 myblog 在 Github 创建 Page 项目。Page 项目是静态网页渲染，并可以托管在 Github 服务器。这样，我们就可以把网站内容发布到 Github。 这个 Page 的特别之处在于：我们将其项目名称设置为 williamlfang.github.io，即 yourusename.github.io。 Hugo 是一个优秀的静态网页生成框架，提供了灵活的配置。我们可以通过设置不同的主题（theme）来渲染网页，达到内容与形式分离的目地。 由于部分主题的功能需要使用到新特性，我们最好安装 hugo-extended 版本。 ## 需要安装 hugo extended version wget https://github.com/gohugoio/hugo/releases/download/v0.123.8/hugo_extended_0.123.8_linux-amd64.deb sudo dpkg -i hugo_extended_0.123.8_linux-amd64.deb hugo version 步骤","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 建立 Github 项目 在 Github 创建 myblog 项目 原教程是将源仓库与 Page 放在同一个项目，所以需要设置成 public。不过我的做法是将源仓库与发布仓库Page分离，内容托管在 myblog 的 private 项目，然后将 hugo 渲染后的 html 拷贝到发布仓库 Page。 在 Github 创建 williamlfang.github.io 项目 如上所述，需要将发布仓库 Page 设置为 public 开放互联网访问。 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" Hugo 搭建 初始化 hugo 目录 git clone git@github.com:williamlfang/myblog.git ## 初始化项目，如果存在目录，则需要添加 --force hugo new site myblog cd myblog ## 添加主题，这里我使用来 FixIt git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 根据对应 theme 提供的配置文件进行修改，可以查看参考配置 themes/FixIt/hugo.toml vim hugo.toml 比如我的配置是这样的： title 设置博客名称 baseURL 对应域名（如果是托管在 Github Page，则填写https://williamlfang.github.io/） theme 配置相应的名称（需要在 themes/ 目录下） avatar 是头像设置（如果是 FixIt，需要替换为自己的头像文件，在 themes/FixIt/assets/images） 创建博客 markdown 文章，可以使用命令 ## create new post ## 这个命令会调用参数模板，位于 `theme/FixIt/archetypes` ## 我们可以自行修改 hugo new posts/first_post.md ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 添加月历主要是看到这篇优秀的博客，受到启发。于是我也准备在博客添加一个月历，用于查看文章发布的情况。 给 Hugo 博客添加月历功能 https://blog.gimo.me/posts/adding-calendar-view-for-hugo-blog-posts/ 这里主要修改的地方有： 在配置 hugo.toml 添加一个栏目 [menu] [[menu.main]] identifier = \"calendar\" parent = \"\" pre = \"\" post = \"\" name = \"月历\" url = \"/calendar/\" title = \"\" weight = 100 [menu.main.params] icon = \"fa-regular fa-id-card fa-fw fa-sm\" 新建 content/calendar/index.md，设置其布局 --- title: \"月历📅\" date: 2024-03-01T16:00:09+08:00 layout: calendar --- 由于上面设置了 layout: calendar，因此，我们需要添加相关的页面模板。在根目录创建 layouts/page/calendar.html，具体布局可以参考 404.html 修改 calendar css 格式，在根目录创建（或则复制一份 /theme/FixIt/assets/css/_custom.css）到 assets/css/_custom.css // ============================== // Custom style // 自定义样式 // ============================== #calendar { a { color: var(--text-bright); \u0026:hover { text-decoration: none; } } tr { background: var(--background-body); } .fc-daygrid-event { white-space: normal; } .fc-day-sat .fc-daygrid-day-number, .fc-day-sat .fc-col-header-cell-cushion, .fc-day-sun .fc-daygrid-day-number, .fc-day-sun .fc-col-header-cell-cushion { color: #e74c3c; } } calendar 效果图 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 预览与发布 预览效果 ## preview hugo server --disableFastRender 生成静态页面：把 .md 文件转化成 html 页面，并保存到 public。这个就是我们托管在 Github Page 上的网站。后面需要把这个文件夹拷贝到 Page 项目，并进行发布。 ## 准备发布静态 html ，会生成一个 public 目录 hugo 发布静态生成的网站页面。我原来的做法是把 github page 单独放在一个目录，然后通过拷贝的方式进行同步。现在回想起来，这个方法似乎有点多此一举，为何不直接在 public 目录添加一个 submodule 呢，然后把内容推送到 github page 即可？ ## 先生成一个 public 目录 hugo ## 然后添加 submodule git submodule add git@github.com:williamlfang/williamlfang.github.io.git public cd public ## 后面有新的文章更新，只需要添加 public 即可 git add -A git commit -m \"add submodule\" git push origin main ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本可以在项目建立一个脚本，用于一键发布最新变动。 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # GitHub username. USERNAME=williamlfang # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- cd ../${SITE} pwd msg \"Pulling down from ${SITE}\" git pull msg \"Building the website\" cd ../${SOURCE} pwd msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push cp -r public/* ../${SITE} cd ../${SITE} git add -A git commit -m \"$MESSAGE\" git push origin master msg \"We've happily done.\" ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- ## into github-page pushd public msg \"Pulling down from ${SITE}\" git pull popd ## msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push pushd public git add -A git commit -m \"$MESSAGE\" git push origin main popd msg \"We've happily done.\" 使用技巧","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 内容","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 排序 默认以日期排序 通过设置 weight 以改变文章排序（前置功能） --- title: 使用hugo+github搭建博客 weight: 1 \u003c!--实现文章置顶功能--\u003e --- ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 注释1 要创建脚注引用，请在方括号中添加插入符号和标识符 ([^1])。 标识符可以是数字或单词，但不能包含空格或制表符。 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中，脚注按顺序编号。 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注)。 你不一定要在文档末尾添加脚注。可以将它们放在除列表，引用和表格等元素之外的任何位置。 这是一个数字脚注 [^1] 这是一个带标签的脚注 [^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注2 这是一个带标签的脚注3 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 图片","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 路径 在根目录下面有一个 static 目录，当hugo执行时，这个目录会被拷贝到 public 目录下，html 静态页面解析时会从这个路径开始寻找。因此，我们可以利用这一点，把 avatar、logo 等图片放在 static/images 下面，然后就可以使用路径 /images/xxx.png 来引用图片了 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 缩放功能 可以实现图片的全屏放大功能：需要在图片后面添加注释信息。需要注意的是，我在这里使用了相对路径，即与当前文档在同一个目录下面，这有赖于 Hugo(\u003e0.6.2) 提供的 layout/_default/_markup 功能。 ![我的博客](./hugo-fixit.png \"William Fang's Hugo FixIt\") 我的博客 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 代码块","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 自动折叠 配置默认展开的代码块长度 # 代码配置 [params.page.code] # 是否显示代码块的复制按钮 copy = true # 是否显示代码块的编辑按钮 edit = true # 默认展开显示的代码行数 # maxShownLines = 10 maxShownLines = 25 ## \u003c------------- # KaTeX 数学公式 (https://katex.org) [params.page.math] enable = true # 默认行内定界符是 $ ... $ 和 \\( ... \\) inlineLeftDelimiter = \"\" inlineRightDelimiter = \"\" # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 blockLeftDelimiter = \"\" blockRightDelimiter = \"\" # KaTeX 插件 copy_tex copyTex = true # KaTeX 插件 mhchem mhchem = true # Mapbox GL JS 配置 (https://docs.mapbox.com/mapbox-gl-js) ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 数学公式 hugo.toml title = \"William\" # baseURL = \"http://example.org/\" baseURL = \"https://williamlfang.github.io/\" # 网站语言，仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true ## ---------------------------------------------------------------------------\u003e[theme] # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"FixIt\" ## ---------------------------------------------------------------------------\u003c[theme] # [menu] # [[menu.main]] # identifier = \"posts\" # name = \"文章\" # url = \"/posts/\" # weight = 1 # [[menu.main]] # identifier = \"categories\" # name = \"分类\" # url = \"/categories/\" # title = \"\" # weight = 2 # [[menu.main]] # identifier = \"tags\" # name = \"标签\" # url = \"/tags/\" # weight = 3 # # [[menu.main]] # identifier = \"about\" # name = \"关于\" # url = \"about/\" # weight = 20 # icon = \"fa-solid fa-signature\" # [[menu.main.params]] # icon = \"fa-solid fa-signature\" [menu] [[menu.main]] identifier = \"posts\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"文章\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-regular fa-newspaper\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"archives\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"归档\" url = \"/archives/\" # title will be shown when you hover on this menu link title = \"\" weight = 2 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-solid fa-archive\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"categories\" parent = \"\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-folder-tree\" [[menu.main]] identifier = \"tags\" parent = \"\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" [[menu.main]] identifier = \"about\" parent = \"\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 20 [menu.main.params] icon = \"fa-solid fa-signature\" [params] # FixIt 主题版本 version = \"0.2.X\" # 例如：\"0.2.X\", \"0.2.15\", \"v0.2.15\" 等 # 网站描述 # description = \"这是我的 Hugo FixIt 网站\" description = \"William\" # 网站关键词 keywords = [\"Hugo\", \"FixIt\"] # 网站默认主题样式 [\"light\", \"dark\", \"auto\"] defaultTheme = \"auto\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片，用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = true # 是否自动显示外链图标 externalIcon = false # 是否反转导航菜单的顺序 navigationReverse = false # 是否在每个页面标题中添加网站标题 # 请记得在 `hugo.toml` 中设置网站标题 (例如 title = \"title\") withSiteTitle = true # 当网站标题被添加到每个页面标题时的标题分隔符 titleDelimiter = \"-\" # 是否在主页标题中添加网站副标题 # 请记得通过 `params.header.subtitle.name` 设置网站副标题 indexWithSubtitle = false # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 # 你可以将其关闭，但如果你不这样做，我们将不胜感激，因为这是观察 FixIt 受欢迎程度上升的好方法 disableThemeInject = false # 作者配置 [params.author] name = \"\" email = \"\" link = \"\" avatar = \"\" # 公共 Git 仓库信息，仅在 enableGitInfo 设为 true 时有效 [params.gitInfo] # 例如 \"https://github.com/hugo-fixit/docs\" rep","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Programming"],"content":"C++ Hacker’s Guide 是一本介绍编程技巧的实用书籍。 ","date":"2024-03-16","objectID":"/2024-03-16-c-hackers-guide/:0:0","tags":["c++","hacker"],"title":"C++ Hacker's Guide","uri":"/2024-03-16-c-hackers-guide/"},{"categories":["tools"],"content":"我现在基本上都是使用nvim做笔记，大部分的时间都是写 markdown 格式的文档。因此，需要一款能够在终端实时渲染的插件。 ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:0:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" glowglow 是一款可以在终端渲染 markdown 文档的命令 # Debian/Ubuntu sudo mkdir -p /etc/apt/keyrings curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg echo \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list sudo apt update \u0026\u0026 sudo apt install glow # Fedora/RHEL echo '[charm] name=Charm baseurl=https://repo.charm.sh/yum/ enabled=1 gpgcheck=1 gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo sudo yum install glow ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:1:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" markdown-preview.nvim这款插件支持在 nvim 的终端即可渲染 markdown，底层调用的是 glow 的渲染功能。 我这里配置了快捷键：mp -- :MPToggle: toggle markdown preview open or close. -- :MPOpen: open markdown preview window. -- :MPClose: close markdown preview window. -- :MPRefresh: refresh markdown preview window. return { \"0x00-ketsu/markdown-preview.nvim\", ft = {'md', 'markdown', 'mkd', 'mkdn', 'mdwn', 'mdown', 'mdtxt', 'mdtext', 'rmd', 'wiki'}, cmd = { \"MPToggle\", \"MPOpen\", \"MPClose\", \"MPRefresh\" }, config = function() require('markdown-preview').setup { -- 配置快捷键:mp vim.keymap.set( \"n\", \"mp\", \":MPToggle\u003cCR\u003e\", { silent = true }), glow = { -- When find executable path of `glow` failed (from PATH), use this value instead exec_path = '', style = '', -- Path to glamour JSON style file }, -- Markdown preview term term = { -- reload term when rendered markdown file changed reload = { enable = true, events = { 'InsertLeave', 'TextChanged' }, }, direction = 'vertical', -- choices: vertical / horizontal keys = { close = {'q', '\u003cEsc\u003e'}, refresh = 'r', } } } end } ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:2:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tool"],"content":" docker-compose version: \"3\" services: gitbook: hostname: gitbook container_name: gitbook image: fellah/gitbook pull_policy: always restart: always privileged: true tty: true volumes: - /data/gitbook:/srv/gitbook - /etc/localtime:/etc/localtime ports: - 4000:4000 command: - /bin/bash - -c - | /bin/bash ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:1:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" gitbook","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" SUMMARY.md # Summary * [Introduction](README.md) * [bash](bash.md) ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:1","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" book.jon对于整个网站的风格，可以通过 book.json 的配置进行渲染： { \"plugins\": [ \"-sharing\", \"theme-comscore\" ] } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:2","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 开始部署 npm i gitbook-plugin-theme-default npm i gitbook-plugin-theme-comscore npm i -g gitbook-cli gitbook init . gitbook install gitbook serve . \u0026 Starting server ... Serving book on http://localhost:4000 ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:3","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 删除 publish with gitbookref: https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html 首先，在book的根目录里创建styles文件夹，然后在其中创建website.css文件，添加以下内容: .gitbook-link { display: none !important; } 编辑book.json文件 { \"styles\": { \"website\": \"styles/website.css\" } } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:4","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":null,"content":" 關於我 keep Calm and Markdown; To follow the path: look to the master, follow the master, walk with the master, see through the master, become the master. The world is full of fascinating problems waiting to be solved No problem should ever have to be solved twice Boredom and drudgery are evil Freedom is good Attitude is no substitute for competence ","date":"2024-03-01","objectID":"/about/:1:0","tags":null,"title":"關於","uri":"/about/"},{"categories":null,"content":"William's friends","date":"2024-03-01","objectID":"/friends/","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" Notice 数据保存在 /data/friends.yml ","date":"2024-03-01","objectID":"/friends/:0:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" 基本資訊 - nickname: 菠菜眾長 avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: 不怕萬人阻擋，只怕自己投降 ","date":"2024-03-01","objectID":"/friends/:1:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":["tool"],"content":" setfacl -R -m o::--- /home/ops/shared/ setfacl -m u:spd:x /home/ops setfacl -m u:spd:x /home/ops/shared setfacl -m u:spd:x /home/ops/shared/trading setfacl -R -m u:spd:rx /home/ops/shared/trading/{PublicInfo,lib,Snail,Spider} ","date":"2024-02-26","objectID":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:0:0","tags":["linux","setfacl"],"title":"setfacl 更精准控制文件权限","uri":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":[],"content":" cd /app ./cloudreve --database-script ResetAdminPassword ","date":"2024-01-26","objectID":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/:0:0","tags":[],"title":"cloudreve 修改密码","uri":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/"},{"categories":[],"content":"red: https://www.reddit.com/r/cpp_questions/comments/1953267/how_do_i_learn_c_designarchitecture/ ","date":"2024-01-13","objectID":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/:0:0","tags":[],"title":"reddit: How do I learn C++ Design Architecture","uri":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/"},{"categories":[],"content":"https://gist.github.com/jacksonpradolima/840b4a20c617204a65b15da61e124bf6 ","date":"2024-01-13","objectID":"/2024-01-13-ubuntu-install-source-code-pro/:0:0","tags":[],"title":"ubuntu install source code pro","uri":"/2024-01-13-ubuntu-install-source-code-pro/"},{"categories":[],"content":"C++ 提供了小对象的 RVO（返回值优化），实现了在函数返回中调用构造函数的功能。 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e class BigObject { public: BigObject() : person_names_(std::vector\u003cstd::string\u003e(1000000)) { std::cout \u003c\u003c \"constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } ~BigObject() { std::cout \u003c\u003c \"destructor. \" \u003c\u003c std::endl; } BigObject(const BigObject\u0026 other) { person_names_ = other.person_names_; std::cout \u003c\u003c \"copy constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } private: std::vector\u003cstd::string\u003e person_names_; }; BigObject Foo() { BigObject local_obj; return local_obj; // return std::move(local_obj); } int n {0}; struct C { explicit C(int) {} C(const C\u0026) { ++n; } int x {1}; }; int main() { { BigObject obj = Foo(); } //-----Foo() // : BigObject local_obj -\u003e ctor + copy ctor // : return local_obj -\u003e dtor //BigObject obj // : -\u003e copy ctor // -\u003e dtor // : -\u003e dtor C c1(42); // copy ctor is equivalent to direct-ctor C c2 = C(42); std::cout \u003c\u003c \"n:\" \u003c\u003c n \u003c\u003c std::endl; return 0; } /* g++ -g -fno-elide-constructors -Wall -std=c++11 main.cpp main.cpp: In function ‘int main()’: main.cpp:49:7: warning: variable ‘c2’ set but not used [-Wunused-but-set-variable] 49 | C c2 = C(42); | ^~ ./a.out constructor. 1000000 copy constructor. 1000000 destructor. copy constructor. 1000000 destructor. destructor. n:1 */ /* g++ -g main.cpp ./a.out constructor. 1000000 destructor. n:0 */ ","date":"2024-01-12","objectID":"/2024-01-12-c-copy-elision/:0:0","tags":[],"title":"c++ copy elision","uri":"/2024-01-12-c-copy-elision/"},{"categories":[],"content":"epub2pdf ","date":"2023-11-29","objectID":"/2023-11-29-epub-to-pdf/:0:0","tags":[],"title":"epub to pdf","uri":"/2023-11-29-epub-to-pdf/"},{"categories":["tools"],"content":" 安装 ## CentOS wget https://github.com/sharkdp/bat/releases/download/v0.24.0/bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz tar -xvf bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz cd bat-v0.24.0-x86_64-unknown-linux-gnu cp ./bat ~/local/bin ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:1:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":" 设置 ## cat alias cat='~/local/bin/bat --style=plain' ## help alias bathelp='bat --plain --language=help' help() { \"$@\" --help 2\u003e\u00261 | bathelp } alias -g -- -h='-h 2\u003e\u00261 | bat --language=help --style=plain' alias -g -- --help='--help 2\u003e\u00261 | bat --language=help --style=plain' ## tail -f taillog() { tail -f $1 | bat --paging=never -l log } ## fzf alias fzfx='fzf --preview \"bat --color=always --style=numbers --line-range=:500 {}\"' ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:2:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":"nethogs 可以针对 Linux 操作系统下单独的进程监控网络带宽，可以十分方便地排查当前占用流量过多的进程。 wget https://github.com/raboof/nethogs/archive/refs/tags/v0.8.7.tar.gz tar -xvf v0.8.7.tar.gz cd nethogs-0.8.7 ## 修改安装路径 Makefile make make install #export TERM=linux ln -sfn /usr/local/sbin/nethogs /usr/bin/nethogs ## 非 root 也能使用 ## running nethogs without root ## https://github.com/raboof/nethogs/issues/86 setcap \"cap_net_admin,cap_net_raw=ep\" /usr/sbin/nethogs ## https://github.com/raboof/nethogs/issues/142 setcap cap_net_admin,cap_net_raw,cap_dac_read_search,cap_sys_ptrace+ep /usr/local/sbin/nethogs export TERM=linux ","date":"2023-11-17","objectID":"/2023-11-17-nethogs/:0:0","tags":["linux","nethogs"],"title":"nethogs","uri":"/2023-11-17-nethogs/"},{"categories":["toolsj"],"content":"安装 Docky mkdir -p ~/Downloads/docky cd ~/Downloads/docky wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-sharp2/libgconf2.0-cil_2.24.2-4_all.deb wget http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring-common_3.12.0-1build1_all.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring0_3.12.0-1build1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-keyring-sharp/libgnome-keyring1.0-cil_1.0.0-5_amd64.deb sudo apt install ./*.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/d/docky/docky_2.2.1.1-1_all.deb sudo apt install ./docky_2.2.1.1-1_all.deb ","date":"2023-11-10","objectID":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/:0:0","tags":["linux","docky"],"title":"ubuntu 安装 docky","uri":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/"},{"categories":["tools"],"content":"zsh 出现错误提示 zsh compinit: insecure directories, run compaudit for list 先进入 zsh 环境(选择 n)，然后执行 compaudit |xargs chmod g-w ","date":"2023-11-06","objectID":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/:0:0","tags":["Linux","zsh","compinit"],"title":"zsh compinit: insecure directories, run compaudit for list","uri":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/"},{"categories":["tools"],"content":"nerd font 是一款优秀的字体，提供了大量的图标，可以用于 terminal、vim 等终端显示。 #/bin/bash # install DroidSansMono Nerd Font --\u003e u can choose another at: https://www.nerdfonts.com/font-downloads echo \"[-] Download fonts [-]\" echo \"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip\" wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip unzip DroidSansMono.zip -d ~/.fonts fc-cache -fv echo \"done!\" mkdir -p ~/.fonts wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/SourceCodePro.zip wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip SourceCodePro.zip cd SourceCodePro cp ./* ~/.fonts fc-cache -fv ","date":"2023-11-04","objectID":"/2023-11-04-nerd-font/:0:0","tags":["linux","nerd","fonts","symbolic","saucecodepro"],"title":"nerd font","uri":"/2023-11-04-nerd-font/"},{"categories":[],"content":"alacritty 比 terminator 更加强大。 apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 apt-get update --fix-missing sudo apt install git curl cargo cd /tmp git clone https://github.com/alacritty/alacritty.git cd alacritty/ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh source \"$HOME/.cargo/env\" rustup override set stable sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 cargo build --release cargo build --release sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg sudo desktop-file-install extra/linux/Alacritty.desktop sudo update-desktop-database ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:0:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 tmux 问题 ## https://github.com/alacritty/alacritty/issues/2487 export TERM=xterm-256color ## 或者尝试使用以下配置 export TERM=xterm tmux kill-server ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:1:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 nvim 颜色显示问题 ## https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:2:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" color issues ## tmux.conf ## alacrrity: https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ## https://www.reddit.com/r/tmux/comments/onom6t/nvim_colors_change_if_on_tmux_on_alacritty/ set -g default-terminal 'xterm-256color' set -as terminal-overrides ',xterm*:Tc:sitm=\\E[3m' ## .zshrc ## alacritty export TERM=xterm-256color ## .bashrc ## colo ## .zshrc export TERM=xterm-256color ## .bashrc export TERM=xterm-256color ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:3:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 从 yaml 转换到 toml alacritty migrate -c xxx.yaml ## 或者批量转换 find . -type f -name '*.yaml' | xargs -I {} alacritty migrate -c {} ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:4:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" Ref 一个配置的说明 alacritty.yml ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:5:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":["tools"],"content":" set encoding=utf-8 set termencoding=utf-8 set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr set fileencoding=utf-8 ","date":"2023-10-30","objectID":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:0:0","tags":["linux","vim","nvim","neovim","utf8"],"title":"nvim 打开中文乱码","uri":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["tools"],"content":"我们在设计结构体时，需要慎重考虑内存对齐的问题，因为不同的内存对齐方式对程序的性能有极大的影响。 ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:0:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" CPU 读取内存的最小有效值计算机的内存是按照 byte(8 bits) 进行有序排序，理论上，我们可以在最小有效值为 1 byte 进行随机内存读取。然而，如果每次都是按照这个节奏，每取一个 int（假设为 4byte） 变量，CPU 都需要进行 4 次操作，毫无疑问效率极低。 我们知道 CPU 架构有 32bit 与 64bit 两种，其含义是在 CPU 每次从内存地址取值时，是以对应最小有效内存地址进行快速操作的。简单讲 对于 32bit，最优操作为每次取 4 byte 的内存空间进行识别 对于 64bit，最优操作为每次取 8 byte 的内存空间进行识别 现在的操作系统一般都是 64bit 了，所以每次的最佳取内存地址为 8byte，这也是我们经常说的，内存对齐按照 8byte，也是编译器 gcc 默认采用的大小。 #pragama pack(8) ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:1:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 如果计算 struct 的内存大小 先计算操作系统 CPU 的对齐单位（一般为 8byte），根据结构体成员最大的内存单位，取 两者的最小值作为有效对齐单位(x) 对于结构体的每一个成员，取其大小与有效对齐单位的较小者，作为单个成员的有效单位(e)。第一个成员变量的偏移值从 0 开始，按照每个成员的有效对齐单位排列，不足之处进行补位填充 最后，整个结构体还需要按照有效对齐单位(x)的整数倍进行填充 #include \u003ciostream\u003e using namespace std; #pragma pack(push) #pragma pack(4) struct { int a; double b; short c; } u; #pragma pack(pop) #pragma pack(push) #pragma pack(1) struct { int a; double b; short c; } v; #pragma pack(pop) struct { int a; double b; short c; } x; struct { int a; char b; short c; } y; struct { int a; char b; short c; } __attribute__((packed)) z; int main() { cout \u003c\u003c \"sizeof(u):\" \u003c\u003c sizeof(u) \u003c\u003c endl; cout \u003c\u003c \"sizeof(v):\" \u003c\u003c sizeof(v) \u003c\u003c endl; cout \u003c\u003c \"sizeof(x):\" \u003c\u003c sizeof(x) \u003c\u003c endl; cout \u003c\u003c \"sizeof(y):\" \u003c\u003c sizeof(y) \u003c\u003c endl; cout \u003c\u003c \"sizeof(z):\" \u003c\u003c sizeof(z) \u003c\u003c endl; return 0; } sizeof(u):16, int(4) + double(8) + short(2) = (14/4+1) * 4 = 16 sizeof(v):14, int(4) + double(8) + short(2) = 14/1 = 14 sizeof(x):24 结构体 x 的最大成员 (double)b 的内存占用 8，操作系统64位，则有效对齐单位 x = min(8,8) = 8 对于结构体的每个成员 sizeof(a) = 4 \u003c= 8, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 8, 则按照1的倍数进行偏移，从（4byte）开始，先对齐 8 byte，占用 8 byte，已用: 4 + 4(填充) + 8 = 16 sizeof(c) = 2 \u003c= 8, 则按照2的倍数进行偏移，从上面 16 后面按照 2 的倍数，占用两个字节，已用：16 + 2 = 18 最后，整个结构体再按照 x=8 的倍数对齐，(18/8+1) * 8 = 24，所以整个结构体大小为24字节 内存空间为 xxxx ____ xxxxxxxx xx ______ 4 pad(4) 8 2 pad(6) sizeof(y):8 结构体 y 的最大成员 a 的内存占用 4，操作系统64位，则有效对齐单位 x = min(4,8) = 4 对于结构体的每个成员 sizeof(a) = 4 \u003c= 4, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 4, 则按照1的倍数进行偏移，从（4byte）开始，占用一个字节，已用: 4 + 1 = 5 sizeof(c) = 2 \u003c= 4, 则按照2的倍数进行偏移，从上面 5 后面按照 2 的倍数，占用两个字节，已用：5 + 1(填充) + 2 = 8 最后，整个结构体再按照 x=4 的倍数对齐，刚好为 8，所以整个结构体大小为8字节 sizeof(z):7 我们告诉编译器不用对齐，所以按照实际占用的字节占用 7 byte. ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:2:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 使用 pack 指定对齐可以使用编译器提供的 pack(n) 指定对齐大小： #pragma pack(n) 或者使用压栈的方式 #pragma pack(push, n) #pragma pop() ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:3:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 不同内存对齐影响程序性能 ## 可以看到，在 64 位操作系统中，最佳实践为 8byte 对齐 SampleStructPack1: 1000000000000000000 bytes allocated in 8202 nanoseconds SampleStructPack2: 1200000000000000000 bytes allocated in 276 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 205 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 131 nanoseconds 程序如下： #include \u003ciostream\u003e #include \u003cchrono\u003e #pragma pack (1) struct SampleStructPack1 { bool flag; unsigned int timeout; }; //#pragma pack(0) #pragma pack (2) struct SampleStructPack2 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (4) struct SampleStructPack4 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (8) struct SampleStructPack8 { bool flag; unsigned int timeout; }; // #pragma pack(0) struct SampleStruct { bool flag; unsigned int timeout; }; static const long long MAX_ELEMENTS = 200000000000000000; using namespace std; using namespace std::chrono; void allocate1() { SampleStructPack1 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack1: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate2() { SampleStructPack2 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack2: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate4() { SampleStructPack4 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack4: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate8() { SampleStructPack8 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack8: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void chrono1() { auto begin = high_resolution_clock::now() ; allocate1(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono2() { auto begin = high_resolution_clock::now() ; allocate2(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono4() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono8() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } int main(int argc, char *argv[]) { chrono1(); chrono2(); chrono4(); chrono8(); return 0; } ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:4:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" old-style:[0]我在查看代码的时候，发现有一个 struct 有 长度为0 的数组。 struct data_t { size_t size; int data[0]; }; 如果打印出上面结构体，发现长度正好为 size_t，其中的 data 是不占用内存的。 cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; //sizeof(size_t):8 //sizeof(data_t):8 原来，这样做的目的，是为了可以添加不限长度的数组，通过 malloc 分配内存大小，从而实现在代码中灵活分配数据的目的。 data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:1:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" new-style:[]其实，这是一种比较古老的写法，我们完全可以使用 arr[] (flexible array member) 来替代 struct data_t { size_t size; //In C99 standard this is not neccessary as it supports the arr[] syntax. int data[]; }; 完整的测试代码如下： #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; //This is an old C hack to allow a flexible sized arrays. int data[0]; //In C99 standard this is not neccessary as it supports the arr[] syntax. //int data[]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(10); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:2:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" best-style:[1]上面的做法有一个问题，如果使用编译器选项 -pedantic 会有报错提示： ## 对于 int data[0] main.cpp:11:14: warning: ISO C++ forbids zero-size array ‘data’ [-Wpedantic] 11 | int data[0]; | ^ ## 对于 int data[] main.cpp:13:9: warning: ISO C++ forbids flexible array member ‘data’ [-Wpedantic] 13 | int data[]; | ^~~~ It’s worth pointing out IMO the best way to do the size calculation, which is used in the Raymond Chen article linked above. struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { // 使用 offsetof 计算出 data[size] 占用的大小 data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } 完整的测试代码如下： #include \u003ccstddef\u003e #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(20); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; cout \u003c\u003c \"x.size:\" \u003c\u003c x-\u003esize \u003c\u003c endl; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:3:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" Ref: Array of zero length Why do some structures end with an array of size 1? ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:4:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":"使用 talebook ## 使用 docker 安装 docker pull talebook/talebook git clone https://github.com/talebook/talebook.git cd talebook docker-compose -f docker-compose.yml up -d ## 访问： 127.0.0.1:8080 ## 初次安装会要求设置账户、密码 ## 管理员 ## 账户：admin ## 密码：****** ","date":"2023-10-15","objectID":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:0:0","tags":["linux","talebook","kindle","读书","阅读","在线","图书馆","mobi","pdf"],"title":"talebook 在线个人图书馆 安装指南","uri":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"尝试使用 neovim，可以重复利用 lua 这个编程语言。 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 安装 ## 下载二进制 wget https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz tar -xvf nvim-linux64.tar.gz ## 添加到系统路径 sudo cp -r nvim-linux64 /usr/local/ sudo ln -sfn /usr/local/nvim-linux64/bin/nvim /usr/bin/nvim ## 查看版本 $ nvim --version NVIM v0.9.4 Build type: Release LuaJIT 2.1.1692716794 system vimrc file: \"$VIM/sysinit.vim\" fall-back for $VIM: \"/__w/neovim/neovim/build/nvim.AppDir/usr/share/nvim\" Run :checkhealth for more info ## 打开 nvim，执行 :checkhealth Configuration - WARNING Missing user config file: /home/william/.config/nvim/init.vim - ADVICE: - :help nvim-from-vim Runtime - OK $VIMRUNTIME: /usr/local/nvim-linux64/share/nvim/runtime Performance - OK Build type: Release Remote Plugins - OK Up to date terminal - key_backspace (kbs) terminfo entry: key_backspace= - key_dc (kdch1) terminfo entry: key_dc= - $TERM_PROGRAM=\"tmux\" ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:1:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置nvim 默认会读取初始化文件 init.lua init.vim ## nvim 的配置文件在 mkdir -p ~/.config/nvim cd ~/.config/nvim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置选项主要用到的就是 vim.g、vim.opt、vim.cmd 等 In Vim In Nvim Note let g:foo = bar vim.g.foo = bar set foo = bar vim.opt.foo = bar set foo = vim.opt.foo = true some_vimscript vim.cmd(some_vimscript) ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:1","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 插件管理 lazy.nvimref: lazy-nvim插件管理器基础入门 ## 添加 init.lua vim ~/.config/nvim/init.lua -- bootstrap lazy.nvim -- ./lua/lazynvim-init.lua require(\"lazynvim-init\") ## 设置 lazynvim vim ~/.config/nvim/lua/lazynvim-init.lua -- 1. 准备lazy.nvim模块（存在性检测） -- stdpath(\"data\") -- macOS/Linux: ~/.local/share/nvim -- Windows: ~/AppData/Local/nvim-data local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\" if not vim.loop.fs_stat(lazypath) then vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"https://github.com/folke/lazy.nvim.git\", \"--branch=stable\", -- latest stable release lazypath, }) end -- -- 2. 将 lazypath 设置为运行时路径 -- rtp（runtime path） -- nvim进行路径搜索的时候，除已有的路径，还会从prepend的路径中查找 -- 否则，下面 require(\"lazy\") 是找不到的 vim.opt.rtp:prepend(lazypath) -- 3. 加载lazy.nvim模块 -- require(\"lazy\").setup({}) -- 在 ~/.config/nvim/lua/plugins 安装插件 require(\"lazy\").setup(\"plugins\") ## 打开 nvim 验证 lazynvim :Lazy ## 安装 plugin mkdir -p ~/.config/nvim/lua/plugins vim ~/.config/nvim/lua/plugins/plugin-lualine.lua return { { 'nvim-lualine/lualine.nvim', config = function() require('lualine').setup() end } } vim-plug ## 使用 vim-plug: https://github.com/junegunn/vim-plug ## 存放在 ~/.config/nvim，避免与 vim 冲突 curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ## 需要安装 pynvim ## python3 -m pip install --user --upgrade pynvim ## 安装相关的插件，位置在：~/.config/nvim/plugged vim ~/.config/nvim/init.vim \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"如果vim插件管理器没有安装则自动安装 if empty(glob('~/.config/nvim/autoload/plug.vim')) silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim autocmd VimEnter * PlugInstall --sync | source $MYVIMRC endif \"\" 设置vim可以保存文件修改历史 silent !mkdir -p ~/.config/nvim/tmp/backup silent !mkdir -p ~/.config/nvim/tmp/undo \"\"silent !mkdir -p ~/.config/nvim/tmp/sessions set backupdir=~/.config/nvim/tmp/backup,. set directory=~/.config/nvim/tmp/backup,. if has('persistent_undo') set undofile set undodir=~/.config/nvim/tmp/undo,. endif call plug#begin('~/.config/nvim/plugged') Plug 'sainnhe/everforest' call plug#end() ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:2","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 快捷键","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:3","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 主题配色","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:4","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 以 vimrc 作为基本当然，我们也可以直接使用 .vimrc 作为配置 # CONFIG_PATH=$HOME/.config # ln -s ~/.vim $CONFIG_PATH/nvim # ln -s ~/.vimrc $CONFIG_PATH/nvim/init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:5","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" lsp ## nvim 'iostream' file not found sudo apt install libstdc++-12-dev ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:6","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" python /home/lfang/.config/nvim/lazy/mason/packages/python-lsp-server/venv/pyvenv.cfg home = /home/lfang/anaconda3/bin ## true include-system-site-packages = true version = 3.9.12 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:7","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" Ref: 关于 bufferline.lua 的合理配置 比较规范的一个配置项目：nvim 功能强大 .config Neovim小结 nvim配置文件 (Ubuntu 18.04 测试成功) 从零开始配置 Neovim(Nvim) 使用 init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:3:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":"一直在入坑，却从未爬出来。 Install wget https://mirrors.tuna.tsinghua.edu.cn/gnu/emacs/emacs-29.1.tar.gz tar -xvf emacs-29.1.tar.gz cd emacs-29.1 ## 准备安装环境 sudo apt build-dep emacs ## ./configure --with-x-toolkit=no --with-xpm=ifavailable --with-gif=ifavailable --with-pop DoomEmacs git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d ## 添加到环境变量的可执行路径 export PATH=/home/william/.emacs.d/bin:$PATH 在修改了~/.doom.d/init.el 和 ~/.doom.d/packages.el 后需要执行 doom sync 如果有问题就运行 doom doctor 如果需要更新就运行 doom upgrade 可以在 Emacs 内通过 SPC h d h 来查看文档 可以通过命令查看启动时间：M-x emacs-init-time 字体ref: https://github.com/seagle0128/doom-modeline/issues/310 @bk138 Currently nerd-icons is used in doom-modeline, while all-the-icons has been dropped. You should install nerd-fonts via M-x nerd-icons-install-fonts. Please read REAME. ## 安装 nerd symbol font wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip NerdFontsSymbolsOnly.zip cd NerdFontsSymbolsOnly cp *ttf ~/.local/share/fonts ## 更新字体缓存 fc-cache -fv fc-list |grep -i nerd ## 清理原来的 font cd /home/william/.emacs.d/.local/straight/repos rm all-the-icons.el cd /home/william/.emacs.d/.local/straight/build-29.1 rm -rf all-the-icons ## 重新加载 doom sync \u0026\u0026 doom build ## 安装必要的字体包 M-x all-the-icons-install-fonts M-x nerd-icons-install-fonts ","date":"2023-10-11","objectID":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","Emacs"],"title":"Emacs 入坑","uri":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":"网上一份 cs 的阅读书目列表，值得好好沉下心来阅读，为了方便查阅，特地在这里推荐一份： Influential CS BOOKS Most influential books for programmersThese are books considered most influential for programmers from this StackOverflow thread. ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:0:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Why on Github?Cause SO is cathedral, Github is bazzar ;) Long answer: I frequently visit above thread. Over the time, such an active thread is closed, links to book sites are removed and I have to copy/paste/search everytime I go there. I am afraid they might remove it entirely. So, the list is preserved here :) ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:1:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Influential Books List Code Complete (2nd edition) by Steve McConnell The Pragmatic Programmer by Andrew Hunt and David Thomas Structure and Interpretation of Computer Programs by Sussman and Abelson (free pdf) The C Programming Language by Brian Kernighan and Dennis Ritchie Introduction to Algorithms by Cormen, Leiserson, Rivest \u0026 Stein Design Patterns by the Gang of Four Refactoring: Improving the Design of Existing Code by Martin Fowler The Mythical Man Month by Fred Brooks The Art of Computer Programming by Donald Knuth Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman Gödel, Escher, Bach by Douglas Hofstadter Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin Effective C++ by Scott Meyers More Effective C++ by Scott Meyers CODE by Charles Petzold Programming Pearls by Jon Bentley Working Effectively with Legacy Code by Michael C. Feathers Peopleware by Demarco and Lister Coders at Work by Peter Seibel Surely You’re Joking, Mr. Feynman! by Richard Feynman Effective Java 2nd edition by Joshua Bloch Patterns of Enterprise Application Architecture by Martin Fowler The Little Schemer by Matthias Felleisen and Daniel P. Friedman The Seasoned Schemer by Matthias Felleisen and Daniel P. Friedman Why’s (Poignant) Guide to Ruby by why the lucky stiff (free PDF) The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity by Alan Cooper The Art of Unix Programming by Eric S. Raymond Test-Driven Development: By Example by Kent Beck (free PDF) Practices of an Agile Developer by Venkat Subramaniam and Andy Hunt Don’t Make Me Think by Steve Krug Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin Domain Driven Designs by Eric Evans The Design of Everyday Things by Donald Norman Modern C++ Design by Andrei Alexandrescu Best Software Writing I by Joel Spolsky The Practice of Programming by Kernighan and Pike Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt Software Estimation: Demystifying the Black Art by Steve McConnel The Passionate Programmer by Chad Fowler Hackers: Heroes of the Computer Revolution by Steven Levy (free ebook) Algorithms + Data Structures = Programs by Niklaus Wirth (free PDF) Writing Solid Code by Steve Maguire JavaScript - The Good Parts by Douglas Crockford Getting Real by 37 Signals (free PDF) Foundations of Programming by Karl Seguin (free PDF) Computer Graphics: Principles and Practice in C (2nd Edition) by Foley, Dam, Feiner, Hughes Thinking in Java by Bruce Eckel The Elements of Computing Systems by Noam Nisan and Shimon Schocken(free ebook) Refactoring to Patterns by Joshua Kerievsky Modern Operating Systems by Andrew S. Tanenbaum The Annotated Turing by Charles Petzold Things That Make Us Smart by Donald Norman The Timeless Way of Building by Christopher Alexander The Deadline: A Novel About Project Management by Tom DeMarco The C++ Programming Language (3rd edition) by Stroustrup Computer Systems - A Programmer’s Perspective by Bryant and O’Hallaron Agile Principles, Patterns, and Practices in C# by Robert C. Martin Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce Framework Design Guidelines by Brad Abrams Object Thinking by Dr. David West Advanced Programming in the UNIX Environment by W. Richard Stevens Hackers and Painters: Big Ideas from the Computer Age by Paul Graham The Soul of a New Machine by Tracy Kidder CLR via C# by Jeffrey Richter Design Patterns in C# by Steve Metsker Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig About Face - The Essentials of Interaction Design by Alan Cooper Here Comes Everybody: The Power of Organizing Without Organizations by Clay Shirky The Tao of Programming by Geoffrey James (free ebook) Computational Beauty of Nature by Gary William Flake Philip and Alex’s Guide to Web Publishing (free ebook) Object-Oriented Analysis and Design with Applications by Grady Booch ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:2:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Original threadWhat is the single most influential book every programmer should read? If you could go back in time and tell yourself to read a specific book at the beginning of your career as a developer, which book would it be? I expect this list to be varied and to cover a wide range of things. ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:3:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":"报错 crontab -e [08:40:07] vim: error while loading shared libraries: libpython3.9.so.1.0: cannot open shared object file: No such file or directory crontab: \"vim\" exited with status 127 这是因为 vim 编译的时候使用了动态库 libpython3.9.so.1.0，需要拷贝一份到 /usr/lib /usr/lib64 cp /home/ops/vim9/local/lib/libpython3.9.so.1.0 /usr/lib cp /home/ops/vim9/local/lib/libpython3.9.so.1.0 /usr/lib64 如果没有 root 权限，则可以通过 alias 来设置 crontab 命令 alias crontab=\"export VISUAL='export VIMRUNTIME=$HOME/vim9/local/share/vim/vim90; LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc'; crontab\" alias crontab=\"export VISUAL=nvim; crontab\" ","date":"2023-09-22","objectID":"/2023-09-22-crontab-vim-%E6%89%BE%E4%B8%8D%E5%88%B0-so-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["Linux","vim","crontab","so","python"],"title":"crontab vim 找不到 so 的解决方法","uri":"/2023-09-22-crontab-vim-%E6%89%BE%E4%B8%8D%E5%88%B0-so-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["tools"],"content":"设置 tmux 启动后的默认 $SHELL `vim ~/.tmux.conf` set-option -g default-shell /home/lfang/opt/bin/zsh ","date":"2023-09-20","objectID":"/2023-09-20-tmux-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4-zsh/:0:0","tags":["Linux","tmux","zsh","SHELL"],"title":"tmux 设置默认 zsh","uri":"/2023-09-20-tmux-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4-zsh/"},{"categories":["tools"],"content":"vim 更新插件 coc 后运行出现异常： 需要重新安装 coc，然后重新启动 vim 即可。 cd /home/william/.vim/plugged/coc.nvim npm install ","date":"2023-09-18","objectID":"/2023-09-18-vim-coc-%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8/:0:0","tags":["Linux","vim","coc","npm","yarn"],"title":"vim coc 更新出现异常","uri":"/2023-09-18-vim-coc-%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8/"},{"categories":["tools"],"content":"在 Vim 环境中运行 REPL 程序。 使用触发键 \u003cLeader\u003et 对于多个 buffer 的问题，需要改一下绑定键 \" handling multi buffer switch: https://github.com/sillybun/vim-repl/issues/19 tnoremap \u003cLeader\u003en \u003cC-w\u003e:bnext\u003cCR\u003e Plug 'sillybun/vim-repl', { 'for': ['python', 'r'], 'on':'REPLToggle' } \" Vim-repl ------------------------------------------------------------------- let g:repl_program = { \\ 'python': 'ipython', \\ 'default': 'zsh', \\ 'r': 'R', \\ 'lua': 'lua', \\ } let g:repl_width = 120 \"REPL windows width\" let g:repl_predefine_python = { \\ 'numpy': 'import numpy as np', \\ 'matplotlib': 'from matplotlib import pyplot as plt' \\ } let g:repl_python_auto_import = 1 let g:repl_cursor_down = 1 let g:repl_python_automerge = 1 let g:repl_ipython_version = '7' let g:repl_auto_sends = ['class ', 'def ', 'for ', 'if ', 'while ', 'with ', 'async def', '@', 'try'] let g:repl_python_auto_send_unfinish_line = 1 let g:repl_cursor_down = 1 let g:repl_python_auto_import = 1 nnoremap \u003cLeader\u003et :REPLToggle\u003cCr\u003e \" handling multi buffer switch: https://github.com/sillybun/vim-repl/issues/19 tnoremap \u003cLeader\u003en \u003cC-w\u003e:bnext\u003cCR\u003e tnoremap \u003cLeader\u003eh \u003cC-w\u003e\u003cC-h\u003e tnoremap \u003cLeader\u003el \u003cC-w\u003e\u003cC-l\u003e \"let g:repl_width = None \"窗口宽度 \"let g:repl_height = None \"窗口高度 \" ref: http://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter let g:sendtorepl_invoke_key = \"\u003cCR\u003e\" \"传送代码快捷键，默认为\u003cleader\u003ew nnoremap \u003cleader\u003ere :REPLSendSession\u003cCr\u003e let g:repl_position = 3 \"0表示出现在下方，1表示出现在上方，2在左边，3在右边 let g:repl_stayatrepl_when_open = 0 \"打开REPL时是回到原文件（1）还是停留在REPL窗口中（0）\" let g:repl_console_name = 'Vim-REPL' tnoremap \u003cC-h\u003e \u003cC-w\u003e\u003cC-h\u003e tnoremap \u003cC-j\u003e \u003cC-w\u003e\u003cC-j\u003e tnoremap \u003cC-k\u003e \u003cC-w\u003e\u003cC-k\u003e tnoremap \u003cC-l\u003e \u003cC-w\u003e\u003cC-l\u003e \" tnoremap \u003cC-n\u003e \u003cC-w\u003eN tnoremap \u003cScrollWheelUp\u003e \u003cC-w\u003eNk tnoremap \u003cScrollWheelDown\u003e \u003cC-w\u003eNj ","date":"2023-09-16","objectID":"/2023-09-16-vim-repl/:0:0","tags":["Linux","vim","repl","python"],"title":"vim repl","uri":"/2023-09-16-vim-repl/"},{"categories":["tools"],"content":"C++ 是一个静态、强类型的编译型编程语言，变量的生命周期需要在编译器确定。这与动态语言是完全不同的。 Scoping is generally divided into two classes: Static Scoping (也称作 lexical scope) Dynamic Scoping Static scoping is also called lexical scoping. In this scoping, a variable always refers to its top-level environment. This is a property of the program text and is unrelated to the run-time call stack. Static scoping also makes it much easier to make a modular code as a programmer can figure out the scope just by looking at the code. In contrast, dynamic scope requires the programmer to anticipate all possible dynamic contexts. In most programming languages including C, C++, and Java, variables are always statically (or lexically) scoped i.e., binding of a variable can be determined by program text and is independent of the run-time function call stack. #include \u003ciostream\u003e using namespace std; int i {999}; void f() { { int i {10}; // in function scope cout \u003c\u003c \"inside f inner scrope:\" \u003c\u003c i \u003c\u003c endl; } // i not in function scope, will search for it in the GLOBAL SCOPE // do not care who is calling it (other function stack) cout \u003c\u003c \"inside f scrope:\" \u003c\u003c i \u003c\u003c endl; } int main(int argc, char *argv[]) { int i {20}; // int main function scope cout \u003c\u003c \"inside main scrope:\" \u003c\u003c i \u003c\u003c endl; f(); return 0; } 编译后，运行得的的结果是 g++ /tmp/main.cpp -o /tmp/a.out \u0026\u0026 /tmp/a.out inside main scrope: 20 inside f inner scrope: 10 inside f scrope: 999 ","date":"2023-09-16","objectID":"/lexical-scope/:0:0","tags":["c++","scope","static","lexical"],"title":"c++ static/lexical scope","uri":"/lexical-scope/"},{"categories":["tools"],"content":"使用 tmux-fzf 快速搜索窗口。 ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:0:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" 修改 tmux-fzf","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" main.shvim ~/.tmux/plugins/tmux-fzf/main.sh：相当于关闭了其他的选项。 #!/usr/bin/env bash CURRENT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" \u0026\u0026 pwd)\" [[ -z \"$TMUX_FZF_ORDER\" ]] \u0026\u0026 TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" source \"$CURRENT_DIR/scripts/.envs\" ## ============================================== ## only pane item=\"pane\" #items_origin=\"$(echo $TMUX_FZF_ORDER | tr '|' '\\n')\" #if [[ -z \"$TMUX_FZF_MENU\" ]]; then # item=$(printf \"%s\\n[cancel]\" \"$items_origin\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #else # item=$(printf \"menu\\n%s\\n[cancel]\" \"$items_origin\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #fi #[[ \"$item\" == \"[cancel]\" || -z \"$item\" ]] \u0026\u0026 exit ## ============================================== item=$(echo \"$CURRENT_DIR/scripts/$item\" | sed -E 's/$/.sh/') tmux run-shell -b \"$item\" ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:1","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" pane.shvim ~/.tmux/plugins/tmux-fzf/scripts/pane.sh：相当于只针对 switch 执行命令 #!/usr/bin/env bash CURRENT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" \u0026\u0026 pwd)\" source \"$CURRENT_DIR/.envs\" current_pane_origin=$(tmux display-message -p '#S:#{window_index}.#{pane_index}: #{window_name}') current_pane=$(tmux display-message -p '#S:#{window_index}.#{pane_index}') if [[ -z \"$TMUX_FZF_PANE_FORMAT\" ]]; then panes=$(tmux list-panes -a -F \"#S:#{window_index}.#{pane_index}: [#{window_name}:#{pane_title}] #{pane_current_command} [#{pane_width}x#{pane_height}] [history #{history_size}/#{history_limit}, #{history_bytes} bytes] #{?pane_active,[active],[inactive]}\") else panes=$(tmux list-panes -a -F \"#S:#{window_index}.#{pane_index}: $TMUX_FZF_PANE_FORMAT\") fi ## ============================================== ## only switch action=\"switch\" #FZF_DEFAULT_OPTS=\"$FZF_DEFAULT_OPTS --header='Select an action.'\" #if [[ -z \"$1\" ]]; then # action=$(printf \"switch\\nbreak\\njoin\\nswap\\nlayout\\nkill\\nresize\\nrename\\n[cancel]\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #else # action=\"$1\" #fi ## ============================================== ##------------- 其他的复制原来的代码 --------------- ## [[ \"$action\" == \"[cancel]\" || -z \"$action\" ]] \u0026\u0026 exit ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:2","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" tmux.conf 设置使用 prefix-f ## fzf set -g @plugin 'sainnhe/tmux-fzf' ## enable:1, disable:0 TMUX_FZF_PREVIEW=1 # prefix-f TMUX_FZF_LAUNCH_KEY=\"f\" #TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" TMUX_FZF_ORDER=\"pane|window|session\" ##Default value in tmux \u003e= 3.2 TMUX_FZF_OPTIONS=\"-p -w 90% -h 80% -m\" ## menu #TMUX_FZF_MENU=\\ #\"foo\\necho 'Hello!'\\n\"\\ #\"bar\\nls ~\\n\"\\ #\"sh\\nsh ~/test.sh\\n\" ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:2:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":"vim 使用 coc 需要找到 compile_commands.json。 第一种方法，通过命令行添加，会在 build 目录下面自动生成 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 第二种方法，通过修改 CMakeLists.txt SET(CMAKE_EXPORT_COMPILE_COMMANDS ON) IF(EXISTS \"${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json\") EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json ) ENDIF() ","date":"2023-08-25","objectID":"/2023-08-25-vim-coc-%E7%94%9F%E6%88%90-compile_commands.json/:0:0","tags":["vim","coc","cmake","compile"],"title":"vim coc 生成 compile_commands.json","uri":"/2023-08-25-vim-coc-%E7%94%9F%E6%88%90-compile_commands.json/"},{"categories":[],"content":" vim /etc/hosts # Sublime-Bypass 0.0.0.0 sublimetext.com 0.0.0.0 sublimemerge.com 0.0.0.0 sublimehq.com 0.0.0.0 telemetry.sublimehq.com 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 wget https://raw.githubusercontent.com/CITIZENSIXTYNINE/Sublime-Bypass/mistress/sublime-bypass.sh sudo bash ./sublime-bypass.sh ## sublime4 -\u003e Help -\u003e Enter Licence —– BEGIN LICENSE —– Die Socialisten GmbH 10 User License EA7E-800613 51311422 E45F49ED 3F0ADE0C E5B8A508 2F4D9B65 64E1E244 EDA11F0E F9D06110 B7B2E826 E6FDAA72 2C653693 5D80582F 09DCFFB5 113A940C 5045C0CD 5F8332F8 34356CC6 D96F6FDB 4DEC20EA 0A24D83A 2C82C329 E3290B29 A16109A7 EC198EB9 F28EBB17 9C07403F D44BA75A C23C6874 EBF11238 5546C3DD 737DC616 445C2941 —— END LICENSE —— Ref Sublime Text 4 注册汉化 ","date":"2023-08-16","objectID":"/2023-08-16-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/:0:0","tags":[],"title":"sublime4 注册码","uri":"/2023-08-16-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"categories":[],"content":"注意：需要有普通用户写入权限的路径。 ## 查看当前配置 cat /proc/sys/kernel/core_pattern ## 临时 echo \"/tmp/core-%e-%p-%t\" \u003e /proc/sys/kernel/core_pattern ## 使用 sysctl 设置 sysctl -w kernel.core_pattern=/tmp/core-%e-%p-%t %% 单个%字符 %p 所dump进程的进程ID %u 所dump进程的实际用户ID %g 所dump进程的实际组ID %s 导致本次core dump的信号 %t core dump的时间 (由1970年1月1日计起的秒数) %h 主机名 %e 程序文件名 Ref CoreDump设置方式 ","date":"2023-08-02","objectID":"/2023-08-02-linux-coredump-%E8%AE%BE%E7%BD%AE/:0:0","tags":[],"title":"Linux coredump 设置","uri":"/2023-08-02-linux-coredump-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"Linux systemd 学习总结 simple vs oneshot: When you are deciding which service type to choose between simple and oneshot, here is some guidance: Does your service need to complete before any follow-up services run? Use oneshot. Do your follow-up services need to be running while this service does? Use simple. Is this a long-running service? Probably use simple. Do you need to run this service only at shutdown? Use oneshot. Do you need to have multiple separate commands to run? Use oneshot. Ref Simple vs Oneshot - Choosing a systemd Service Type ","date":"2023-08-01","objectID":"/2023-08-01-systemd-%E5%AD%A6%E4%B9%A0/:0:0","tags":["Linux","systemd","oneshot","simple"],"title":"systemd 学习","uri":"/2023-08-01-systemd-%E5%AD%A6%E4%B9%A0/"},{"categories":["tools"],"content":"新加一块 4T 硬盘挂载（非逻辑盘，没有 vgdisplay 的概念，就是简单的挂载到某个路径） fdisk -l lsblk ## 假设以 /dev/sdb 为例 ## 如果此硬盘以前有过分区，则先对磁盘格式化： mkfs -t ext4 /dev/sdb ## 对于新硬盘进行分区操作 ## 由于 fdisk 只能处理 2T 以内的硬盘分区 ## 对于超过 2T 的硬盘，需要使用 parted 进行 GPT 格式分区 parted /dev/sdb ## 进入操作命令 parted (parted) print ## 如果有分区，先删掉，注意数据的备份处理 (parted) #rm 1 ## 创建格式 (parted) mklabel gpt ## 只创建一个分区 (parted) mkpart primary xfs 1 -1 ## 以 s 为单元 (parted) unit s (parted) mkpart primary ext4 0% 100% (parted) q ## 开始挂载的 /data 目录 sudo mkdir -p /data mount /dev/sdb1 /data ## 添加到 /etc/fstab vim /etc/fstab /dev/sdb1 /data ext4 defaults 0 0 ","date":"2023-07-31","objectID":"/2023-07-31-linux-%E6%96%B0%E5%8A%A04t%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E9%9D%9E%E9%80%BB%E8%BE%91%E7%9B%98/:0:0","tags":["Linux","CentOS","fdisk","parted","硬盘","分区"],"title":"Linux 新加4T硬盘挂载（非逻辑盘）","uri":"/2023-07-31-linux-%E6%96%B0%E5%8A%A04t%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E9%9D%9E%E9%80%BB%E8%BE%91%E7%9B%98/"},{"categories":["tools"],"content":" 使用 Win 键调出 keyboard 设置界面 在 Custom Shortcuts 点击添加 flameshot，其中 Name 可以自己写，然后在 Command 填写: /usr/bin/flameshot gui 添加快捷键为 PrtScr 这样，就可以用键盘上面的截屏工具进行截图了 参考：How to change screenshot application to Flameshot on Ubuntu 18.04? ","date":"2023-07-31","objectID":"/2023-07-31-ubuntu-%E8%AE%BE%E7%BD%AE-flameshot-%E5%BF%AB%E6%8D%B7%E9%94%AE/:0:0","tags":["Ubuntu","flameshot","截图"],"title":"Ubuntu 设置 flameshot 快捷键","uri":"/2023-07-31-ubuntu-%E8%AE%BE%E7%BD%AE-flameshot-%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"categories":["tools"],"content":" #!/bin/bash mkfs.ext3 /dev/sda sudo dd bs=4M if=/home/william/Desktop/CentOS-7-x86_64-Minimal-2009.iso of=/dev/sda \u0026\u0026 sync ","date":"2023-07-29","objectID":"/2023-07-29-dd-%E5%88%B6%E4%BD%9C-bios-%E5%90%AF%E5%8A%A8%E7%9B%98/:0:0","tags":["linux","bios","dd"],"title":"dd 制作 bios 启动盘","uri":"/2023-07-29-dd-%E5%88%B6%E4%BD%9C-bios-%E5%90%AF%E5%8A%A8%E7%9B%98/"},{"categories":["tools"],"content":"关于使用 bash/shell 编程的总结。 meta所谓的 meta 指的是 bash/shell 运行准备与环境变量。 ","date":"2023-07-25","objectID":"/2023-07-25-bash%E5%85%A5%E9%97%A8/:0:0","tags":["Linux","bash","shell","gnu","c"],"title":"bash入门","uri":"/2023-07-25-bash%E5%85%A5%E9%97%A8/"},{"categories":["tools"],"content":" sheband #!/bin/bash -xe 这些主要是在 set 有介绍： e: Exit immediately if a command exits with a non-zero status. x: Print commands and their arguments as they are executed. Ref shell命令getopt简介 shell getopt ","date":"2023-07-25","objectID":"/2023-07-25-bash%E5%85%A5%E9%97%A8/:1:0","tags":["Linux","bash","shell","gnu","c"],"title":"bash入门","uri":"/2023-07-25-bash%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":"最近在学习汇编语言，这里做一下简要的记录，主要使用的参考书： Jonathan Bartlett: Learn to Program with Assembly: Foundational Learning for New Programmers Jonathan Bartlett: Programming from the Ground Up CSci 241: Assembly Language Programming MIT Computation Structures 其实，我最早是先看了 PGU，因为这是一本开源书籍，后来才看阅读 LPA，发现 LPA 其实是 PGU 的出版社书籍，是对 PGU 进行更加系统化的整理，并升级了汇编到 x86-64 。所以推荐直接看 LPA 即可。 Ch01：为何学习汇编","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:0:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 理解计算机内部计算机编程语言划分为 High-level programming languages （HLPL） Low-level programming languages （LLPL） 对于大部分的程序员，我们一般都使用 HLPL 进行编程开发，而较少使用（甚至看不懂）LLPL。这是因为随着计算机技术的发展，越来越多的高级编程语言为我们做了太多的事情，使得我们远离底层、面向问题进行编程。HLPL 主要做的事情是： 通过逐层的抽象（Abstract），允许程序员尽量远离计算机底层技术，而直接调用编程语言提供的语法糖进行操作。这些编程语言通过 compiler 或者 interpreter 翻译成机器语言 程序员不再思考计算机内部如何实现指令运算，而只需要按照高级程序语言的规则，把问题空间映射到解决方案空间。 然后，如果我们需要更深入的理解计算机内部的运行机制，理解我们在高级编程语言设计的求解方案如何被映射到计算机的运行指令（机器语言，0-1），就需要站在计算的解读思考，理解操作指令在内部是如何被执行的。 虽然现代计算机已经高度智能化，AI 正如火如荼的渗入我们生活的各个方面。但在底层，计算机其实只能进行有限的运算，理解特定的操作指令，即二进制代码（亦或机器代码）。我们这里说的理解计算机，当然不是直接去看由这些 0-1 所组成的机器代码，而是以人类可以理解的方式阅读机器代码。这就是汇编语言（Assemly Language）。 可以把汇编理解成机器代码的翻译，而且这种关系是一一映射，即一个汇编指令就是代表一条计算机所能执行的最小单元指令，如数字相加： 对于高级语言：a = 0 + 1 对于机器代码：48 83 c7 01 对于汇编语言：addq $1 %rdi .global _start _start: movq $60, %rax movq $0, %rdi addq $1, %rdi syscall ## assembling and linker into executable(elf) as test.asm -o test.o ld test.o -o test ## run ./test echo $? ## disassembly with AT\u0026T objdump -M att -d test.o test.o: file format elf64-x86-64 Disassembly of section .text: 0000000000000000 \u003c_start\u003e: 0: 48 c7 c0 3c 00 00 00 mov $0x3c,%rax 7: 48 c7 c7 00 00 00 00 mov $0x0,%rdi e: 48 83 c7 01 add $0x1,%rdi 12: 0f 05 syscall 通过上面的例子，我们可以知道计算系在底层是如何进行运算的 先给寄存器 %rdi 初始化 然后对寄存器 %rdi 执行 add 指令，这个对应对应了机器代码 83 可见，无论我们是否从事汇编开发，了解一些关于汇编的知识，有助于我们更加深入了解计算机内部的运行机制（英文说法是：under the hood）。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:1:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 学习汇编的好处 know how the computer really works, underneath the hood, fundamentally demystifying the operation of your most basic tool: the processor, how the processor itself thinks about the code better mental model of compiler, debugging, optimization, high-performance-related work ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:2:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编版本：Intel vs AT\u0026T在上面的例子中，我们使用了 objdump 工具用来把二进制代码翻译成汇编语言，其中 -d 表示 disassemle，即反汇编。 -M att 表示使用 AT\u0026T 汇编风格展示 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" ISA：指令集Instrument Set Architecture（ISA）表示计算机可以识别的不同指令架构，主流的有： x86 指令集，包括 x86-32 、x86-64，也称作 AMD（因为最初的 AMD 提出的）。这个大部分 Unix-Linux 使用。 ARM 指令集，主要是手机设备使用。 PowerPC 指令集 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" Intel 与 AT\u0026T 风格虽然有assembler 生成的机器代码都是一样的（才能保证计算机实现的结果的一致且唯一），不同的组织在如何表示 assembly language 风格上却有一定的区别。目前主要有两个风格的汇编代码： Intel 也称作 NASM（Netwide Assembler），这个主要是 Intel 公司在操作手册所使用的的汇编风格。 AT\u0026T 也称作 GAS（GUN Assembler）这个是 Linux 、GCC 所采用的汇编风格。 我们刚才说过，不同汇编语法只是的风格上有所差别，但最近生成的机器代码都是一样的。因此，也可以通过工具将两个汇编风格进行互转。以下是关于两者的参考链接： AT\u0026T Syntax versus Intel Syntax Intel vs. AT\u0026T syntax Differences in Intel (NASM) vs AT\u0026T (GAS) Syntax. Intel AT\u0026T 注释(comment) 使用英文分号：; 使用 #，即 c-style register 不需要前缀 % mov eas, 1 需要带前缀 % movq $1, %eax direction instr dest src mov eas, 1 instr src dest movq $1, %eas memory (address) mov eax,[ebx] mov eax,[ebx+3] movl (%ebx),%eax movl 3(%ebx),%eax ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %r vs %e由于汇编语言的发展经历了漫长的历史过程（最近甚至可以追溯到晶体管），汇编语言在表示寄存器的符号方面也经过多次调整： %rax %eax %ax %ah, %al 可以参考以下链接，介绍相关的历史 x86-64 Machine-Level Programming Ch02：理解计算机如何工作","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" CPU 的组成与运行 可以说，CPU 充其量就是一个机械设备，只要不断电，它都会永不停歇地讯循环执行以上命令。而作为程序员，我们需要告诉 CPU 如何正确地、严格按照我们设计的方案执行。计算机无所谓对错（bug），它们只是一台机器，本身也无法写出 bug，真正写 bug 的是人。我之前看过一篇博客，说的就是我们在写代码时，一定要秉承着没有 bug 的想法，只要我们设计的程序没有 bug，CPU 就一定没有 bug。在计算机底层的机器代码眼里，世界只有 0-1 ，或者说 on-off。 “If you want more effective programmers, you will discover that they should not waste their time debugging, they should not introduce the bugs to start with.” —Edsger Dijkstra, Turing Award Lecture (1972) If you want a single piece of advice to reduce your bug count, it’s this: Re-read your code frequently. After writing a few lines of code (3 to 6 lines, a short block within a function), re-read them. That habit will save you more time than any other simple change you can make. Don’t write bugs Ch03：汇编基础首先介绍一个在 x86-64 架构中，不同的内存模块大小 1 byte (8 bits, 0000 0000)，范围为 0-255，即 ASCII 2 bytes (16 bits)，即 word 、short 4 bytes (32 bits)， 即 double word、long 8 bytes (64 bits)，即 quadword，这是目前主流的 x86-64 系统 以上的内存模块可以理解成 CPU 每次提取（请求）内存的单元，比如对于一个汇编指令 ## 取一个 byte: 00000010 movb $0b10, %rdi ## 取一个 long: 0000'0000 0000'0000 0000'0000 0000'0010 movq $1, %rdi ## 取一个 quadword: 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0010 movq $1, %rdi 而在操作系统层面，为了加快读取内存，往往还会在增加一层抽象，采用 paging 分页的方式，以更大的模块来分配内存，一般来说，默认的 paging size 是 4k(4096 bytes)。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:4:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编语法 .global _start _start: movq $60, %rax movq $123, %rdi syscall 上面一个一个完整的汇编代码，我们可以进行编译，并打印出执行结果： as ch03-demo01.asm -o ch03-demo01.o ld ch03-demo01.o -o ch03-demo01 ./ch03-demo01 echo $? ## 运行结果即为上面的汇编指令： movq $123, %rdi 123 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" global(globl)global （也可以写作 globl，二者是等价的）告诉 linker 此处设定的 label 需要保留以备他用。一般来说，如果没有添加 global 指示，linker 会把当前模块下我们自己设定的变量名忽略，而添加了 global，则要求不要这么做，因为有可能其他的模块有使用到。 特别的，.global _start 是作为可执行的入口，这个一定要保存。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" _start：entry point这个是二进制的入库，相当于 main 在 C/C++ 编程中的作用。无论汇编代码的顺序如何，操作系统在执行目标时，都是从 _start 开始逐行执行汇编代码。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" label表示一个名称，但实际上该名称所在的内存地址起始位置（以及后面紧随的内存），用来给 assembler 找到相应的内存地址。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %rax: system call code%rax (Accumulate) 表示寄存器的作用，通常用来代表系统调用的指令，如上述代码中我们将其设置为 60，这代表 system call 的 sys_exit 代号。 具体的 system call code 可以参考： Linux System Call Table Searchable Linux Syscall Table for x86 and x86_64 Instruction: syscall Return value found in: %rax Syscalls are implemented in functions named as in the Entry point column, or with the DEFINE_SYSCALLx(%name% macro. %rax %rdi: arg0 Name Entry Point Implementation 0 unsigned int fd read sys_read fs/read_write.c 1 unsigned int fd write sys_write fs/read_write.c 2 const char *filename open sys_open fs/open.c 3 unsigned int fd close sys_close fs/open.c 4 const char *filename stat sys_newstat fs/stat.c 5 unsigned int fd fstat sys_newfstat fs/stat.c 6 const char *filename lstat sys_newlstat fs/stat.c … 60 int error_code exit sys_exit kernel/exit.c ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:4","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %rdi: exit status code用于保存系统调用的结果，访问为： 0~255 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:5","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编工具","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" as","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" ld","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编周边（相关工具）","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" hexdump","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" objdump","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" gdb(cgdb)","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:8:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" disassemble Ch04：Assembly Programming","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:8:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 寄存器","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 不同功能的寄存器我们在 [寄存器历史](###%r vs %e)列举了 x86-32 与 x86-64 架构下的寄存器类型。这里做一个总结： general-purpose registers computational %rax: accumulative 累计量 用来执行 system call 的代码 用来保存 mulq 、divq 的结果 %rbx: base indexing，通常用来处理 memory addressing 相关的操作 %rcx : counting register，通过用在 loop %rdx: data register，用来保存数据相关，如对于 mulq、divq 等操作，由于只能通过 register 或者 memory address，通常是先把数值放到 %rdx，然后再与 %rax 进行操作 data-related %rsi: source index %rdi: destination index，可以用来保存 exit status code specific-purpose registers %rip’：instrument point，指向下一个指令的内存地址 %eflags 用来处理跳转指令相关的操作 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 使用不同的字节计算（内存与性能） .global _start _start: ##0000'0001'0000'0010 ## %bh ## %bl ## %bx movw $0b0000000100000010, %bx ## 0000'0001 ## 0000'0010 ## addb %bh, %bl ## 2+1 = 3= 0000'0011 movb $0, %bh ## 0000'0000 movq %rbx, %rdi ## %rbx: 0000'0000|0000'0011 ## %rdi: 0000'0000|0000'0011 = 3 ## ------------ movq $60, %rax syscall ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 运算符 addq: format: addq src dst ## %rdi = %rdi + %ras addq %rax, %rdi subq format: subq src dst ## %rdi = %rdi - %ras subq %rax, %rdi incq：（+1） format: addq dst ## %rdi = %rdi + 1 incq %rdi decq：（-1） format: decq dst ## %rdi = %rdi - 1 decq %rdi mulq format: mulq src mulq %rdi 注意，mulq 和 divq 的作用结果保留在 %rax，而且只能用 register 或者 memory address，不能用普通的 number value divq format: divq src 与 mulq 相同 .global _start .section .text _start: ## rdi ## rax movq $3, %rdi ## 3 movq %rdi, %rax ## 3 add %rdi, %rax ## 3+3=6 mulq %rdi ## 3*6=18 subq %rdi, %rax ## 18-3=15 divq %rdi ## 15/3=5 movq %rax, %rdi ## 5 ## ------------- movq $60, %rax syscall ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 比较 %eflags汇编在很多地方都使用 %eflags 来判断真假，比如 jmp cmp looq，是的，loop 也是通过调用 decq %rcx 是否为 0 来决定循环结束与否。（如果 %rcx 变为 0，则 %eflags 设置为 true（ZF）） 我们可以通过 ZF 或者 CF 进行跳转，但是这个有点不直观 jz jnz jc jnc cmp本质上，cmp 做的事情跟 %eflags 是相关的 通过寄存器相减，得到一个值 判断这个值是否为 0 然后进行 ZF 判断， 但是，有意思的是，cmp 此时不会重置寄存器 需要注意的是，由于 cmp 在实现上，是通过 dst 减去 src 的值来判断 %eflags，所以如果遇到一个寄存器与一个字面数值对比，一定要把字面数值放在前面，然后减法的操作是无效的 可以这样理解 在操作上： cmpq %rax, %rbx 在内部实现上： subq %rax, %rbx ## using %elags to jmp je : %rax == %rbx jne ja：jump Above for %rax \u003e %rbx jae jb：jump Below for %rax \u003c %rbx jbe ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 跳转在介绍不同寄存器的时候，我们区分了 general 与 specific ，其中有一个寄存器 %rip 指向下一个指令的内存地址，我们可以使用 jmp 来调整。本质上，jmp 是直接找到对应 label 上的内存地址，然后跳转到那里执行指令。 因此，我们可以利用这一点，实现代码的跳转与循环。 .global _start _start: movq $25, %rax jmp thelabel somewhere: movq %rax, %rdi jmp anotherlabel label1: addq %rbx, %rax movq $5, %rbx jmp here labellabel: syscall anotherlabel: movq $60, %rax jmp labellabel thelabel: movq %rax, %rbx jmp there here: divq %rbx jmp somewhere there: addq $5, %rbx jmp label1 anywhere: jmp thelabel %rax %rbx %rdi _start 25 thelabel 25 there 5+25=30 label1 30+25=55 5 here 55/5=11 somewhere 11 anotherlabel 60 labellabel (syscall) 数据 bit 操作","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" stack 与 function","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编函数","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:4","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 系统调用","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:5","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 模块与链接 Ch05：计算机架构与设计","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:6","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["tools"],"content":"安装 python3.11 的一个软件包 pycrypto 时，出现一个报错，导致无法安装相关依赖包。 根据这篇问答Could not build wheels for pycrypto, which is required to install pyproject.toml-based projects - ERROR Try running pip install setuptools wheel before installing requirements.txt. Some legacy projects require these packages to build wheels for pyproject.toml based projects. If that doesn’t work, you might look into pycryptodome as a replacement for this dependency as mentioned in this thread. 这个看起来依然无效，然后找到文中提到的参考链接，提示有可能是 pycrypto 这个包年久失修，而 python3.11 又恰好更新了一些基础包（比如longint类型数据），从而导致安装报错。 前往链接：Failed installing pycrypto with pip This is a workaround rather than a solution, but it is still useful, because according to this post on the “Issues” section of the pycrypto official repository, it seems the package has not been maintained at all in the last years. And their recommendation is to install pycryptodome instead, since it still creates a Crypto package with the same namespace, so it is expected to work with source code based on the pycrypto libraries. pip uninstall pycrypto pip install pycryptodome 可以在 github 上看到 pycrypto 确实已经停止更新了：Stop creating issues - this project is dead! #173 PyCrypto 2.x is unmaintained, obsolete, and contains security vulnerabilities. See https://www.pycrypto.org/ for details. The following is provided for historical/reference purposes only. Move to a fork like pycryptodome 另外一个新项目是 cryptography ","date":"2023-07-18","objectID":"/2023-07-18-python3.11-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-pycrypto/:0:0","tags":["python3","pycrypto","longintrepr.h"],"title":"python3.11 无法安装 pycrypto","uri":"/2023-07-18-python3.11-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-pycrypto/"},{"categories":[],"content":" History and Spirit of C and C++ History and Spirit of C - Olve Maudal Dennis M. Ritchie Linux like original Unix ","date":"2023-07-14","objectID":"/2023-07-14-%E6%9C%89%E5%85%B3-unix-c-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/:0:0","tags":[],"title":"有关 unix c 的一些历史故事","uri":"/2023-07-14-%E6%9C%89%E5%85%B3-unix-c-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/"},{"categories":[],"content":"使用 vim-latex 编辑并生成 pdf 文件。 Install","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:0:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":[],"content":" xelatex sudo apt-get install texlive-xetex latex-cjk-all ## okular 用于预览 pdf 文件 sudo apt-get install okular ","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:1:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":[],"content":" vim-latex-preview \" 使用 F6 自动调用命令 noremap \u003csilent\u003e \u003cF6\u003e :LLPStartPreview\u003cCR\u003e \" LaTex \" A Vim Plugin for Lively Previewing LaTeX PDF Output Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' } \"\" 配置 \"\" xelatex \"\" okular \"\" LaTex, Using: LLPStartPreview autocmd Filetype tex setl updatetime=1 let g:livepreview_previewer = '/usr/bin/okular' let g:livepreview_engine = '/usr/bin/xelatex' Make \\documentclass{article} \\usepackage{xeCJK} \\begin{document} \\title{APM源码笔记{}} \\author{菜刀} \\maketitle %\\today \\end{document} `` ```bash xelatex test.tet ","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:2:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":["tools"],"content":"nagios 是一款用于监控远程机器状态的开源软件，使用了服务端-客户端的设计架构。 本文将详细介绍服务端与客户端的安装步骤。 其中，特别需要注意的是： 目前 NRPE 只能支持 openssl-1.1.1 版本的 ssl 功能，否则会出现错误 ccxhAMXP.o: In function `get_dh2048': /tmp/nrpe-4.1.0/src/./../include/dh.h:33: undefined reference to `DH_set0_pqg' collect2: error: ld returned 1 exit status make[1]: *** [nrpe] Error 1 make[1]: Leaving directory `/tmp/nrpe-4.1.0/src' make: *** [all] Error 2 ... undefined reference to `SSL_get1_peer_certificate' nagios 依赖 apache 提供的 httpd，管理页面位于: http://127.0.0.1:80/nagios/。 NRPE 的服务端不需要安装以下功能： ## below only for host-client ## make install-config \u0026\u0026 \\ ## make install-inetd \u0026\u0026 \\ ## make install-init \u0026\u0026 \\ ## make install-groups-users nagcmd 用户 groupadd nagcmd usermod -G nagcmd nagios usermod -G nagcmd apache chown nagios:nagcmd /usr/local/nagios/var/rw chown nagios:nagcmd /usr/local/nagios/var/rw/nagios.cmd systemctl restart nagios perl 实现命令行自动安装依赖包 # export PERL_MM_USE_DEFAULT=1 \u0026\u0026 \\ # # cpan -i Digest::MD5 \u0026\u0026 \\ # # cpan -i Nagios::Config \u0026\u0026 \\ # perl -MCPAN -e \"install Digest::MD5\" \u0026\u0026 \\ # perl -MCPAN -e \"install Nagios::Config\" \u0026\u0026 \\ yum -y install perl-App-cpanminus.noarch export PERL_CPANM_OPT=\"--prompt --reinstall -l ~/perl5 --mirror http://cpan.cpantesters.org\" cpanm Digest::MD5 cpanm Nagios::Config 在安装 nagios-graph 的时候，一定要注意允许修改 nagios.cfg nagios.cfg Modify the Nagios configuration? [n] y Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg] Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg] ``` apache Modify the Apache configuration? [n] y Path of Apache configuration directory? [/etc/httpd/conf.d] 整个过程如下： checking required PERL modules Carp...1.26 CGI...3.63 Data::Dumper...2.145 Digest::MD5...2.52 File::Basename...2.84 File::Find...1.20 MIME::Base64...3.13 POSIX...1.30 RRDs...1.4008 Time::HiRes...1.9725 checking optional PERL modules GD...2.49 Nagios::Config...36 checking nagios installation found nagios exectuable at /usr/local/nagios/bin/nagios found nagios init script at /etc/init.d/nagios checking web server installation found apache executable at /usr/sbin/httpd Destination directory (prefix)? [/usr/local/nagios] Location of configuration files (etc-dir)? [/usr/local/nagios/etc/nagiosgraph] Location of executables? [/usr/local/nagios/libexec] Location of CGI scripts? [/usr/local/nagios/sbin] Location of documentation (doc-dir)? [/usr/local/nagios/docs/nagiosgraph] Location of examples? [/usr/local/nagios/docs/nagiosgraph/examples] Location of CSS and JavaScript files? [/usr/local/nagios/share] Location of utilities? [/usr/local/nagios/docs/nagiosgraph/util] Location of state files (var-dir)? [/var/nagios] Location of RRD files? [/var/nagios/rrd] Location of log files (log-dir)? [/var/nagios] Path of log file? [/var/nagios/nagiosgraph.log] Path of CGI log file? [/var/nagios/nagiosgraph-cgi.log] Base URL? [/nagios] URL of CGI scripts? [/nagios/cgi-bin] URL of CSS file? [/nagios/nagiosgraph.css] URL of JavaScript file? [/nagios/nagiosgraph.js] URL of Nagios CGI scripts? [/nagios/cgi-bin] Path of Nagios performance data file? [/tmp/perfdata.log] username or userid of Nagios user? [nagios] username or userid of web server user? [apache] Modify the Nagios configuration? [n] y Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg] Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg] Modify the Apache configuration? [n] y Path of Apache configuration directory? [/etc/httpd/conf.d] configuration: ng_prefix /usr/local/nagios ng_etc_dir /usr/local/nagios/etc/nagiosgraph ng_bin_dir /usr/local/nagios/libexec ng_cgi_dir /usr/local/nagios/sbin ng_doc_dir /usr/local/nagios/docs/nagiosgraph ng_examples_dir /usr/local/nagios/docs/nagiosgraph/examples ng_www_dir /usr/local/nagios/share ng_util_dir /usr/local/nagios/docs/nagiosgraph/util ng_var_dir /var/nagios ng_rrd_dir /var/nagios/rrd ng_log_dir /var/nagios ng_log_file /var/nagios/nagiosgraph.log ng_cgilog_file /var/nagios/nagiosgraph-cgi.log ng_url /nagios ng_cgi_url /nagios/cgi-bin ng","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-core sudo yum -y install httpd php gd gd-devel perl postfix \u0026\u0026 \\ yum -y install perl perl-CGI \u0026\u0026 \\ sudo useradd nagios -p nagios \u0026\u0026 \\ sudo groupadd nagcmd \u0026\u0026 \\ sudo usermod -G nagcmd nagios \u0026\u0026 \\ sudo usermod -G nagcmd apache export NAGIOS_CORE_VERSION=4.4.13 cd /tmp \u0026\u0026 \\ wget -O nagioscore.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-${NAGIOS_CORE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagioscore.tar.gz \u0026\u0026 \\ cd nagioscore-nagios-${NAGIOS_CORE_VERSION} \u0026\u0026 \\ ./configure \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ make install-daemoninit \u0026\u0026 \\ make install-config \u0026\u0026 \\ make install-commandmode \u0026\u0026 \\ make install-webconf ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-plugin NAGIOS_PLUGIN_VERSION=2.4.5 cd /tmp \u0026\u0026 \\ wget --no-check-certificate -O nagios-plugins.tar.gz https://github.com/nagios-plugins/nagios-plugins/releases/download/release-${NAGIOS_PLUGIN_VERSION}/nagios-plugins-${NAGIOS_PLUGIN_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-plugins.tar.gz \u0026\u0026 \\ cd nagios-plugins-${NAGIOS_PLUGIN_VERSION} \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl=/usr/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-nrpe NAGIOS_NRPE_VERSION=4.1.0 cd /tmp \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1t.tar.gz \u0026\u0026 \\ tar -xvf openssl-1.1.1t.tar.gz \u0026\u0026 \\ cd openssl-1.1.1t \u0026\u0026 \\ ./config --prefix=/usr/local --openssldir=/etc/ssl --libdir=lib enable-ssl3 enable-ssl3-method enable-weak-ssl-ciphers -DOPENSSL_NO_GOST zlib shared \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/bin/openssl /usr/bin/openssl \u0026\u0026 \\ ln -sfn /usr/local/include/openssl/ /usr/include/openssl \u0026\u0026 \\ echo \"/usr/local/lib/\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig \u0026\u0026 \\ wget --no-check-certificate -O nagios-nrpe.tar.gz https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-${NAGIOS_NRPE_VERSION}/nrpe-${NAGIOS_NRPE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-nrpe.tar.gz \u0026\u0026 \\ cd nrpe-${NAGIOS_NRPE_VERSION} \u0026\u0026 \\ export LDFLAGS=-L/usr/local/lib \u0026\u0026 \\ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ ## below only for host-client ## make install-config \u0026\u0026 \\ ## make install-inetd \u0026\u0026 \\ ## make install-init \u0026\u0026 \\ ## make install-groups-users rm -rf /tmp/nagios* ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 ## 启动 http 服务 sudo systemctl restart httpd ## 生成密码 sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin New password: Re-type new password: Adding password for user nagiosadmin ## 启动服务 systemctl enable nagios systemctl start nagios systemctl status nagios ## 开放端口 #firewall-cmd --add-service=http #firewall-cmd --add-service=https #firewall-cmd --reload 检查一下插件是否已经安装好 ## 远程服务在 192.168.1.162:5666 /usr/local/nagios/libexec/check_nrpe -H 192.168.1.162 -p 5666 ## 这时候会调用远程客户端命令，如果显示以下内容则说明匹配成功了 NRPE v4.0.3 这样，可以访问: http://127.0.0.1:80/nagios/。 \u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e \u003chtml\u003e\u003chead\u003e \u003ctitle\u003e401 Unauthorized\u003c/title\u003e \u003c/head\u003e\u003cbody\u003e \u003ch1\u003eUnauthorized\u003c/h1\u003e \u003cp\u003eThis server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn't understand how to supply the credentials required.\u003c/p\u003e \u003c/body\u003e\u003c/html\u003e ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 添加监控客户机器可以参考 /usr/local/nagios/etc/objects/localhost.cfg， 比如这个客户端 /usr/local/nagios/etc/research-machines/m2.cfg # 中间的内容块是用于设置设备信息的 define host { # use 关键字表示使用的模版，模版将在后续讲解，此处使用的是 linux-server 模版 use linux-server # host_name 关键字表示机器的名字，也是在 Web 界面中显示的名字 host_name M2 # alias 表示机器的别名，一般用作机器别名的描述 alias M2@WuyaCapital # address 设置该机器的 IP 地址，以便与数据的获取与被动监控的请求 address 192.168.1.162 # 最大的尝试次数，也就是在某服务监控出错再次运行监控命令获取数据的次数 max_check_attempts 3 # 检测的时间段 check_period 24x7 # 发送消息提醒的时间间隔 notification_interval 30 # 发送消息提醒的时间段 notification_period 24x7 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Current Users check_command check_nrpe!check_users check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Total Procs check_command check_nrpe!check_total_procs check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } 同时，我们需要修改命令 vim /usr/local/nagios/etc/objects/commands.cfg # 'check_NRPE' command definition define command{ command_name check_nrpe command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -p $ARG1$ -c $ARG2$ } 客户端 sudo yum -y install zlib-devel xinetd sudo useradd nagios -p nagios ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:5:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-plugin同服务端的安装: nagios-plugin ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:6:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-nrpe NAGIOS_NRPE_VERSION=4.1.0 cd /tmp \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1t.tar.gz \u0026\u0026 \\ tar -xvf openssl-1.1.1t.tar.gz \u0026\u0026 \\ cd openssl-1.1.1t \u0026\u0026 \\ ./config --prefix=/usr/local --openssldir=/etc/ssl --libdir=lib enable-ssl3 enable-ssl3-method enable-weak-ssl-ciphers -DOPENSSL_NO_GOST zlib shared \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/bin/openssl /usr/bin/openssl \u0026\u0026 \\ ln -sfn /usr/local/include/openssl/ /usr/include/openssl \u0026\u0026 \\ echo \"/usr/local/lib/\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig \u0026\u0026 \\ wget --no-check-certificate -O nagios-nrpe.tar.gz https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-${NAGIOS_NRPE_VERSION}/nrpe-${NAGIOS_NRPE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-nrpe.tar.gz \u0026\u0026 \\ cd nrpe-${NAGIOS_NRPE_VERSION} \u0026\u0026 \\ export LDFLAGS=-L/usr/local/lib \u0026\u0026 \\ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ ## below only for host-client make install-config \u0026\u0026 \\ make install-inetd \u0026\u0026 \\ make install-init \u0026\u0026 \\ make install-groups-users rm -rf /tmp/nagios* ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:7:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 systemctl enable xinetd systemctl restart xinetd systemctl status xinetd systemctl enable nrpe systemctl restart nrpe systemctl status nrpe ## 检查是否已经启动 nrpe netstat -at | egrep \"nrpe|5666\" ## 检查服务是否启程 /usr/local/nagios/libexec/check_nrpe -H localhost NRPE v4.1.0 ## 检查插件是否可用 /usr/local/nagios/libexec/check_nrpe -H localhost -c check_users USERS OK - 5 users currently logged in |users=5;5;10;0 ## 修改客户端监控项目与内容 vim /usr/local/nagios/etc/nrpe.cfg # The following examples allow user-supplied arguments and can # only be used if the NRPE daemon was compiled with support for # command arguments *AND* the dont_blame_nrpe directive in this # config file is set to '1'. This poses a potential security risk, so # make sure you read the SECURITY file before doing this. ### MISC SYSTEM METRICS ### # command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10 command[check_load]=/usr/local/nagios/libexec/check_load -r -w .15,.10,.05 -c .30,.25,.20 command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1 command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 # The following examples allow user-supplied arguments and can # only be used if the NRPE daemon was compiled with support for # command arguments *AND* the dont_blame_nrpe directive in this # config file is set to '1'. This poses a potential security risk, so # make sure you read the SECURITY file before doing this. ### MISC SYSTEM METRICS ### command[check_users]=/usr/local/nagios/libexec/check_users -w $ARG1$ -c $ARG2$ #command[check_load]=/usr/local/nagios/libexec/check_load $ARG1$ #command[check_disk]=/usr/local/nagios/libexec/check_disk $ARG1$ #command[check_swap]=/usr/local/nagios/libexec/check_swap $ARG1$ #command[check_cpu_stats]=/usr/local/nagios/libexec/check_cpu_stats.sh $ARG1$ #command[check_mem]=/usr/local/nagios/libexec/custom_check_mem -n $ARG1$ ## 允许接入的服务器ip allowed_hosts=127.0.0.1 allowed_hosts=192.168.1.162 ## 日志文件 log_file=/usr/local/nagios/var/nrpe.log ## 允许传递参数 ## 这样服务器可以调用参数：/usr/local/nagios/libexec/check_nrpe -H127.0.0.1 -p56118 -c check_users -a \"2 10\" ## 在 command.cfg 可以这样使用参数传递：command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -p $ARG1$ -c $ARG2$ -a $ARG3$ ## 在 colo.cfg 调用命令：check_command check_nrpe!56118!check_users!\"2 10\" ## dont_blame_nrpe=1 编写 nagios-plugin","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:8:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" show-users Show Users show_users show_users.sh ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 代码 #!/bin/bash # # Copyright Hari Sekhon 2007 # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA # # Nagios Plugin to list all currently logged on users to a system. # Modified by Rob MacKenzie, SFU - rmackenz@sfu.ca # Added the -w and -c options to check for number of users. version=0.3 # This makes coding much safer as a varible typo is caught # with an error rather than passing through set -u # Note: resisted urge to use \u003c\u003c\u003c, instead sticking with | # in case anyone uses this with an older version of bash # so no bash bashers please on this # Standard Nagios exit codes OK=0 WARNING=1 CRITICAL=2 UNKNOWN=3 usage(){ echo \"usage: ${0##*/} [--simple] [ --mandatory username ] [ --unauthorized username ] [ --whitelist username ]\" echo echo \"returns a list of users on the local machine\" echo echo \" -s, --simple show users without the number of sessions\" echo \" -m username, --mandatory username\" echo \" Mandatory users. Return CRITICAL if any of these users are not\" echo \" currently logged in\" echo \" -b username, --blacklist username\" echo \" Unauthorized users. Returns CRITICAL if any of these users are\" echo \" logged in. This can be useful if you have a policy that states\" echo \" that you may not have a root shell but must instead only use \" echo \" 'sudo command'. Specifying '-u root' would alert on root having\" echo \" a session and hence catch people violating such a policy.\" echo \" -a username, --whitelist username\" echo \" Whitelist users. This is exceptionally useful. If you define\" echo \" a bunch of users here that you know you use, and suddenly\" echo \" there is a user session open for another account it could\" echo \" alert you to a compromise. If you run this check say every\" echo \" 3 minutes, then any attacker has very little time to evade\" echo \" detection before this trips.\" echo echo \" -m,-u and -w can be specified multiple times for multiple users\" echo \" or you can use a switch a single time with a comma separated\" echo \" list.\" echo \" -w integer, --warning integer\" echo \" Set WARNING status if more than INTEGER users are logged in\" echo \" -c integer, --critical integer\" echo \" Set CRITICAL status if more than INTEGER users are logged in\" echo echo echo \" -V --version Print the version number and exit\" echo exit $UNKNOWN } simple=\"\" mandatory_users=\"\" unauthorized_users=\"\" whitelist_users=\"\" warning_users=0 critical_users=0 while [ \"$#\" -ge 1 ]; do case \"$1\" in -h|--help) usage ;; -V|--version) echo $version exit $UNKNOWN ;; -s|--simple) simple=true ;; -m|--mandatory) if [ \"$#\" -ge 2 ]; then if [ -n \"$mandatory_users\" ]; then mandatory_users=\"$mandatory_users $2\" else mandatory_users=\"$2\" fi shift else usage fi ;; -b|--blacklist) if [ \"$#\" -ge 2 ]; then if [ -n \"$unauthorized_users\" ]; then unauthorized_users=\"$unauthorized_users $2\" else unauthorized_users=\"$2\" fi shift else usage fi ;; -a|--whitelist) if [ \"$#\" -ge 2 ]; then if [ -n \"$whitelist_users\" ]; then whitelist_users=\"$whitelist_users $2\" else whitelist_users=\"$2\" fi shift else usage fi ;; -w|--warning) if [ \"$#\" -ge 2 ]; then if [ $2 -ge 1 ]; then warning_users=$2 fi shift else usage fi ;; -c|--critical) if [ \"$#\" -ge 2 ]; then if [ $2 -ge 1 ]; then critical_users=$2 fi shift else usage fi ;; *) usage ;; esac shift done mandatory_users=\"`echo $mandatory_users | tr ',' ' '`\" unauthorized_users=\"`echo $unauthorized_users | tr","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:1","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 Plugin worked properly. Just set below things. On Nagios Server: * Create a file \"show_users\" in your libexec directory. * Copy all the \"show_users.txt\" contents in \"show_users\" file * chmod 755 show_users * chown nagios:nagios show_users * Open your host configuration file \u0026 type below configuration. define service{ use generic-service ; Inherit values from a template host_name Dell NFS Server service_description Logged Users check_command check_nrpe!show_users On NRPE Client: * Copy show_users file in \"libexec\" directory * vim nrpe.cfg, add below line command[show_users]=/usr/local/nagios/libexec/show_users Save \u0026 Exit \u0026 restart NRPE/Xinetd service That's it. ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:2","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 nagios-graph 参考这个博客:Steps to Install Nagiosgraph for Nagios Core on CentOS 7 安装的时候，一定要记得允许修改 nagios 与 apache 配置，不要一键到底 locate /etc/httpd/conf/httpd.conf ## cgi ## 先安装 perl-core yum install -y perl-core ## 进入 perl 命令行模式，开始安装 perl -MCPAN -e shell 1) install Digest::MD5 2) install Nagios::Config ## 修改权限 chmod 777 -R /usr/local/nagios ## 修改 templates.cfg, 一定要改成 /nagios/cgi-bin/.... define service { name graphed-service action_url /nagios/cgi-bin/show.cgi?host=$HOSTNAME$\u0026service=$SERVICEDESC$' onMouseOver='showGraphPopup(this)' onMouseOut='hideGraphPopup()' rel='/nagiosgraph/cgi-bin/showgraph.cgi?host=$HOSTNAME$\u0026service=$SERVICEDESC$\u0026period=week\u0026rrdopts=-w+450+-j register 0 } ## 测试打开 http://127.0.0.1:8080/nagios/cgi-bin/showconfig.cgi ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:10:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 pnp4nagios 开源监控解决方案Nagios+Cacti+PNP4Nagios+NConf+NDOUtils+Nagvis（三）pnp4nagios安装 sudo /etc/init.d/npcd restart systemctl restart npcd systemctl restart httpd ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 pnp4nagios cd /tmp wget -O pnp4nagios.tar.gz https://github.com/lingej/pnp4nagios/archive/0.6.26.tar.gz tar -xvf pnp4nagios.tar.gz cd pnp4nagios-0.6.26 ./configure --with-rrdtool=/usr/bin/rrdtool --with-perfdata-dir=/usr/local/nagios/share/perfdata --with-perfdata-spool-dir=/usr/local/nagios/share/spool --with-nagios-user=nagios --with-nagios-group=nagios make all make install make install-webconf make install-config make install-init 配置 cd /usr/local/pnp4nagios/etc mv misccommands.cfg-sample misccommands.cfg mv nagios.cfg-sample nagios.cfg mv rra.cfg-sample rra.cfg cd /usr/local/pnp4nagios/etc/pages/ mv web_traffic.cfg-sample web_traffic.cfg cd ../check_commands mv check_all_local_disks.cfg-sample check_all_local_disks.cfg mv check_nrpe.cfg-sample check_nrpe.cfg mv check_nwstat.cfg-sample check_nwstat.cfg ## 启动服务 sudo /etc/init.d/npcd restart systemctl restart npcd systemctl restart httpd ## 修改 /usr/local/nagios/etc/objects/templates.cfg cp /usr/local/nagios/etc/objects/templates.cfg /usr/local/nagios/etc/objects/templates.cfg.orig ## ---------------------------------------------- vim /usr/local/nagios/etc/objects/templates.cfg define host { name host-pnp register 0 action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$\u0026srv=_HOST_' class='tips' rel='/pnp4nagios/index.php/popup?host=$HOSTNAME$\u0026srv=_HOST_ process_perf_data 1 } define service { name srv-pnp register 0 action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$\u0026srv=$SERVICEDESC$' class='tips' rel='/pnp4nagios/index.php/popup?host=$HOSTNAME$\u0026srv=$SERVICEDESC$ process_perf_data 1 } define host{ name gchost use host-pnp max_check_attempts 1 normal_check_interval 2 retry_check_interval 1 check_period 24x7 contact_groups myself_group notification_interval 2 notification_period 24x7 notification_options d,u,r check_command check-host-alive } define service{ name myself_temp use srv-pnp max_check_attempts 2 normal_check_interval 2 retry_check_interval 1 check_period 24x7 notification_interval 2 notification_period 24x7 notification_options w,u,c,r contact_groups myself_group check_command check-host-alive register 0 } ## 修改 /usr/local/nagios/etc/nagios.cfg cd /usr/local/nagios/etc/nagios.cfg /usr/local/nagios/etc/nagios.cfg.orig ## ------------------------------------- vim /usr/local/nagios/etc/nagios.cfg process_performance_data=1 enable_environment_macros=1 host_perfdata_file=/usr/local/pnp4nagios/var/host-perfdata service_perfdata_file=/usr/local/pnp4nagios/var/service-perfdata host_perfdata_file_template=DATATYPE::HOSTPERFDATA\\tTIMET::$TIMET$\\tHOSTNAME::$HOSTNAME$\\tHOSTPERFDATA::$HOSTPERFDATA$\\tHOSTCHECKCOMMAND::$HOSTCHECKCOMMAND$\\tHOSTSTATE::$HOSTSTATE$\\tHOSTSTATETYPE::$HOSTSTATETYPE$ service_perfdata_file_template=DATATYPE::SERVICEPERFDATA\\tTIMET::$TIMET$\\tHOSTNAME::$HOSTNAME$\\tSERVICEDESC::$SERVICEDESC$\\tSERVICEPERFDATA::$SERVICEPERFDATA$\\tSERVICECHECKCOMMAND::$SERVICECHECKCOMMAND$\\tHOSTSTATE::$HOSTSTATE$\\tHOSTSTATETYPE::$HOSTSTATETYPE$\\tSERVICESTATE::$SERVICESTATE$\\tSERVICESTATETYPE::$SERVICESTATETYPE$\\tSERVICEOUTPUT::$SERVICEOUTPUT$ host_perfdata_file_mode=a service_perfdata_file_mode=a host_perfdata_file_processing_interval=15 service_perfdata_file_processing_interval=15 host_perfdata_file_processing_command=process-host-perfdata-file service_perfdata_file_processing_command=process-service-perfdata-file ## 修改 /usr/local/nagios/etc/objects/commands.cfg cp /usr/local/nagios/etc/objects/commands.cfg /usr/local/nagios/etc/objects/commands.cfg.orig ## -------------------------------------------------- vim /usr/local/nagios/etc/objects/commands.cfg define command{ command_name process-service-perfdata-file command_line /usr/local/pnp4nagios/libexec/process_perfdata.pl --bulk=/usr/local/pnp4nagios/var/service-perfdata } define command{ command_name process-host-perfdata-file command_line /usr/local/pnp4nagios/libexec/process_perfdata.pl --bulk=/usr/local/pnp4nagios/var/host-perfdata } ## 修改 apache 配置 /etc/httpd/conf/httpd.conf cd /etc/httpd/conf/httpd.conf /etc/httpd","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:1","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" grafana nagios+grafana https://www.centlinux.com/2019/02/install-grafana-pnp4nagios-centos-7.html cd /tmp wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.0.0-1.x86_64.rpm ## 安装 grafana sudo yum install grafana-enterprise-10.0.0-1.x86_64.rpm systemctl daemon-reload systemctl enable grafana-server.service systemctl start grafana-server.service systemctl restart grafana-server.service ## 安装 PNP plugin sudo grafana-cli plugins install sni-pnp-datasource # service firewalld restart # firewall-cmd --permanent --add-port=3000/tcp # firewall-cmd --reload # service firewalld restart ## 下载 api cd /usr/local/pnp4nagios/share/application/controllers/ wget -O api.php \"https://github.com/lingej/pnp-metrics-api/raw/master/application/controller/api.php\" systemctl restart grafana-server.service ## 配置 pnp4nagios cp /etc/httpd/conf.d/pnp4nagios.conf /etc/httpd/conf.d/pnp4nagios.conf.orig sed -i '/Allow from all/a\\ Allow from 127.0.0.1 ::1' /etc/httpd/conf.d/pnp4nagios.conf sed -i '/Require valid-user/a\\ Require all granted' /etc/httpd/conf.d/pnp4nagios.conf sed -i '/Require valid-user/a\\ Require ip 127.0.0.1 ::1' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/Allow from all/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthName/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthType Basic/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthUserFile/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/Require valid-user/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf systemctl restart httpd.service ## 配置 grafana, 首次登录，账户:admin，密码:admin ## 配置 pnp data source ## 生成密码，使用这个在 grafana 登录 pnp htpasswd -b /usr/local/nagios/etc/htpasswd.users nagiosadmin ********* ## 打开页面, http://127.0.0.1:3000 ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:2","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 企业微信通知 企业微信对于机器人与群助手的渲染不一样，导致 \\n 的判断不同 if re.search('Robot', str(type(w)), re.IGNORECASE): msgx = cli.args.msg.replace('\\\\n', '\\n') else: msgx = cli.args.msg.replace('\\\\n', '\u003cbr\u003e').replace('\\n', '\u003cbr\u003e') 参考： 4 Steps to Define Nagios Contacts With Email and Pager Notification Creating a new e-mail contact nagios macro 介绍如何使用 nagios 宏定义：using macro in commans 建立 python 通知脚本 from wepy.utils.init import * if __name__ == '__main__': ## ------------------------------------------- cli = CliParser(\"wechat from command line\") cli.add(\"who\", type=str, default='wx_test') cli.add(\"msg\", type=str, default=\"\") cli.add(\"level\", type=str, default='info') cli.show() ## ------------------------------------------- if cli.args.who not in globals(): msg = f\"\"\" {cli.args.who=} does not exist \"\"\" log.err(msg) raise Exception(msg) w = globals().get(cli.args.who) if re.search('Robot', str(type(w)), re.IGNORECASE): msgx = cli.args.msg.replace('\\\\n', '\\n') else: msgx = cli.args.msg.replace('\\\\n', '\u003cbr\u003e').replace('\\n', '\u003cbr\u003e') w.send(msgx, cli.args.level) 修改 generic-contact这个是模板，我们可以通过继承来实现具体的 contact1 vim /usr/local/nagios/etc/objects/templates.cfg define contact { name generic-contact ; The name of this contact template service_notification_period 24x7 ; service notifications can be sent anytime host_notification_period 24x7 ; host notifications can be sent anytime # service_notification_options w,u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events service_notification_options u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events host_notification_options d,u,r,f,s ; send notifications for all host states, flapping events, and scheduled downtime events # service_notification_commands notify-service-by-email,notify-service-by-wechat ; send service notifications via email # host_notification_commands notify-host-by-email,notify-host-by-wechat ; send host notifications via email service_notification_commands notify-service-by-wechat ; send service notifications via email host_notification_commands notify-host-by-wechat ; send host notifications via email register 0 ; DON'T REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE! } 修改 contact vim /usr/local/nagios/etc/objects/contacts.cfg define contact { contact_name nagiosadmin ; Short name of user use generic-contact ; Inherit default values from generic-contact template (defined above) alias Nagios Admin ; Full name of user # email nagios@localhost ; \u003c\u003c***** CHANGE THIS TO YOUR EMAIL ADDRESS ****** email william.lian.fang@gmail.com ; \u003c\u003c***** CHANGE THIS TO YOUR EMAIL ADDRESS ****** host_notification_commands notify-host-by-wechat host_notification_options d,u,r host_notification_period 24x7 service_notification_commands notify-service-by-wechat service_notification_options w,u,c,r ; 可以修改不同的设置 service_notification_period 24x7 } define contact { contact_name test ; Short name of user use generic-contact ; Inherit default values from generic-contact template (defined above) alias Nagios Dev ; Full name of user email william.lian.fang@gmail.com ; host_notifications_enabled 1 service_notifications_enabled 1 host_notification_period 24x7 service_notification_period 24x7 host_notification_options d,u,r,f,s,n service_notification_options w,u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events host_notification_commands notify-host-by-wechat-test service_notification_commands notify-service-by-wechat-test } 还可以设置 contact-groups vim /usr/local/nagios/etc/objects/contacts.cfg define contactgroup { contactgroup_name admins alias Nagios Administrators members nagiosadmin,test } 添加监控 commands vim /usr/local/nagios/etc/objects/commands.cfg ##### notify-host-by-wechat command definition define command{ command_name notify-host-by-wechat command_line /usr/local/python3/bin/python3 /app/wechat_cli.py --who='wx_test' --msg=$(/usr/bin/printf \"%b\" \"***** Nagios *****\\n","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:3","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" Docker 安装 nagios4","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios docker pull jasonrivers/nagios docker run --rm --name nagios4 -p 0.0.0.0:8080:80 jasonrivers/nagios:latest ## 我们需要配置一个用户，我们让docker容器中的nagios配置文件跟虚拟机磁盘建立联系 mkdir -p /opt/nagios4/etc docker cp nagios4:/opt/nagios/etc /opt/nagios4/ 然后退出这个 docker (ctl-c)。接下来我们需要给账户设置密码，使用了 htpasswd 这个工具。 ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 apache2 与 httpd ## ubuntu sudo apt install apache2 ## CentOS sudo yum install httpd ## 生成密码 sudo htpasswd -c /opt/nagios4/etc/htpasswd.users nagiosadmin New password: Re-type new password: Adding password for user nagiosadmin ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 docker run -d --name nagios4 -p 0.0.0.0:8080:80 -v /opt/nagios4/etc:/opt/nagios/etc jasonrivers/nagios:latest 现在可以使用账号访问网页：http://127.0.0.1:8080/。 使用","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 nagios4/etc通过指定目录，实现以任意添加 *.cfg 文件的方式来增加客户端监控项目。 mkdir -p /opt/nagios4 sudo docker cp nagios4:/opt/nagios/etc /opt/nagios4 vim /opt/nagios4/etc/nagios.cfg #cfg_dir=/opt/nagios/etc/servers #cfg_dir=/opt/nagios/etc/printers #cfg_dir=/opt/nagios/etc/switches #cfg_dir=/opt/nagios/etc/routers cfg_dir=/opt/nagios/etc/colo-machines cfg_dir=/opt/nagios/etc/research-machines ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 添加 host可以参考 /opt/nagios/etc/objectes/localhost.cfg， 比如这个客户端 /opt/nagios4/etc/research-machines/m2.cfg # 中间的内容块是用于设置设备信息的 define host { # use 关键字表示使用的模版，模版将在后续讲解，此处使用的是 linux-server 模版 use linux-server # host_name 关键字表示机器的名字，也是在 Web 界面中显示的名字 host_name M2 # alias 表示机器的别名，一般用作机器别名的描述 alias M2@WuyaCapital # address 设置该机器的 IP 地址，以便与数据的获取与被动监控的请求 address 192.168.1.162 # 最大的尝试次数，也就是在某服务监控出错再次运行监控命令获取数据的次数 max_check_attempts 3 # 检测的时间段 check_period 24x7 # 发送消息提醒的时间间隔 notification_interval 30 # 发送消息提醒的时间段 notification_period 24x7 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Current Users check_command check_nrpe!check_users check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Total Procs check_command check_nrpe!check_total_procs check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } 同时，我们需要修改命令 vim /opt/nagios4/etc/objects/command.cfg # 'check_NRPE' command definition define command{ command_name check_nrpe command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ } 客户端安装 nrpe","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:5:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 vim /etc/nagios/nrpe.cfg command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10 command[check_load]=/usr/local/nagios/libexec/check_load -r -w .15,.10,.05 -c .30,.25,.20 command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1 command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 allowed_hosts=127.0.0.1,192.168.1.82 systemctl enable nrpe systemctl start nrpe ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:6:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 测试 ## 服务器测试 /opt/nagios/libexec/check_nrpe -H 192.168.1.162 -p 5666 -c check_total_procs PROCS CRITICAL: 605 processes | procs=605;150;200;0; Ref Nagios on CentOS 7 ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:7:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"由于换了一台戴尔 xps 工作机，需要重新安装 R。在此顺便记录一下过程。 ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:0:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" apt-get sudo apt-get install \\ gfortran \\ libcurl4-gnutls-dev \\ libreadline-dev \\ libbz2-dev \\ liblzma-dev \\ libpcre++-dev \\ libpango1.0-dev sudo apt-get install \\ libfreetype6-dev \\ libpng-dev \\ libtiff5-dev \\ libjpeg-dev \\ libmariadbclient-dev ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:1:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" textlive sudo apt-get install texlive sudo apt-get install texlive-fonts-extra wget http://mirrors.ctan.org/fonts/inconsolata.zip unzip inconsolata.zip cp -Rfp inconsolata/* /usr/share/texmf mktexlsr ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:2:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" install export R_VERSION=R-4.3.1 cd /tmp \u0026\u0026 \\ wget --no-check-certificate https://cran.r-project.org/src/base/R-4/${R_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf ${R_VERSION}.tar.gz \u0026\u0026 \\ cd ${R_VERSION} \u0026\u0026 \\ ./configure \\ --prefix=/usr/local/R-4/${R_VERSION} \\ --enable-memory-profiling \\ --enable-R-shlib \\ --with-blas \\ --with-lapack \\ --with-x=no \u0026\u0026 \\ make \u0026\u0026 sudo make install \u0026\u0026 \\ ln -sfn /usr/local/R-4/${R_VERSION}/bin/R /usr/bin/R \u0026\u0026 \\ ln -sfn /usr/local/R-4/${R_VERSION}/bin/Rscript /usr/bin/Rscript \u0026\u0026 \\ rm -rf /tmp/${R_VERSION}* ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:3:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":"一份 CS 专业的自学手册：Open Source Society University ","date":"2023-07-04","objectID":"/2023-07-04-cs--open-source-society-university/:0:0","tags":["CS","open source","university"],"title":"CS: Open Source Society University","uri":"/2023-07-04-cs--open-source-society-university/"},{"categories":["tools"],"content":"Docker 提供了一些新功能，这些只有通过 buildx 插件才能完成。 - [X] 处理Snail6Ops使用 Docker plugin 更新要求 buildx 插件升级的问题 (2023-06-29 19:42:10) - [X] docker ERROR: BuildKit is enabled but the buildx component is missing or broken (2023-06-29 19:42:56) - [X] export DOCKER_BUILDKIT=1 (2023-06-29 19:43:20) airflow ## 需要安装插件 ## ref: https://docs.docker.com/engine/install/centos/ sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-buildx-plugin docker-compose-plugin 另外在 docker-compose.yaml 配置 airflow: hostname: airflow container_name: airflow image: 192.168.1.162:5000/airflow:v1.0 ## 不能用 previlleged，·普通用户也可以, 为了 /var/run/docker.socket privileged: false tty: true volumes: - /var/run/docker.sock:/var/run/docker.sock ## docker-in-docker - /run/buildkit/buildkitd.sock:/run/buildkit/buildkitd.sock ## docker-in-docker - /run/containerd/containerd.sock:/run/containerd/containerd.sock - /usr/bin/docker:/bin/docker ## docker 可执行，如果有 so 也需要 mount - ~:/mnt - /data:/data - /fs:/fs ## /fs in docker-in-docker - /mnt/cephfs:/root/cephfs ## 可以在 docker-in-docker 使用 cephs - ~/git/jobs/dags:/app/dags ## for dags # - ~/mysql:/var/lib/mysql ## for mysql ports: - \"18080:8080\" ## web command: - /bin/bash - -c - | /usr/sbin/init pull_policy: always restart: always docker buildx export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 DOCKER_BUILDKIT=1 docker build ... ","date":"2023-06-29","objectID":"/2023-06-29-docker-buildx/:0:0","tags":["docker","buildx","airflow"],"title":"docker buildx","uri":"/2023-06-29-docker-buildx/"},{"categories":["tools"],"content":"需要在 ~/.zshrc 添加以下配置，然后重新执行 source ~/.zshrc 即可 setopt no_nomatch ","date":"2023-06-26","objectID":"/2023-06-26-zsh-no-match-found-for-/:0:0","tags":["Linux","zsh","source"],"title":"zsh no match found for *","uri":"/2023-06-26-zsh-no-match-found-for-/"},{"categories":["tools"],"content":"通过设置 cpu 的运行模式，可以调整机器性能。 ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:0:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":" 常用模式 ondemand：系统默认的超频模式，按需调节，内核提供的功能，不是很强大，但有效实现了动态频率调节，平时以低速方式运行，当系统负载提高时候自动提高频率。以这种模式运行不会因为降频造成性能降低，同时也能节约电能和降低温度。一般官方内核默认的方式都是 ondemand。 interactive：交互模式，直接上最高频率，然后看 CPU 负荷慢慢降低，比较耗电。Interactive 是以 CPU 排程数量而调整频率，从而实现省电。InteractiveX 是以 CPU 负载来调整 CPU 频率，不会过度把频率调低。所以比 Interactive 反应好些，但是省电的效果一般。 conservative：保守模式，类似于 ondemand，但调整相对较缓，想省电就用他吧。Google 官方内核，kang 内核默认模式。 smartass：聪明模式，是 I 和 C 模式的升级，该模式在比 interactive 模式不差的响应的前提下会做到了更加省电。 performance：性能模式！只有最高频率，从来不考虑消耗的电量，性能没得说，但是耗电量。 powersave 省电模式，通常以最低频率运行。 userspace：用户自定义模式，系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节 CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置 Hotplug：类似于 ondemand, 但是 cpu 会在关屏下尝试关掉一个 cpu，并且带有 deep sleep，比较省电。 ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:1:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":" 安装软件 sudo apt-get install cpufrequtils sudo apt-get install sysfsutils ## 查看 CPU 状态 cpufreq-info ## 查看频率信息 cpupower frequency-info ## 把 cpu 调整到性能模式 sudo cpufreq-set -g performance ## 通过设置默认模式，防止重启后恢复 sudo vim /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ## 填写 performance ## 或者全局设置 sudo vim /etc/default/cpufrequtils GOVERNOR=\"performance\" ## 重启配置生效 systemctl restart cpufrequtils ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:2:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":"最近公司给原来的服务器添加了一块 8T 的 DellSAS 硬盘，原来存放数据。由于Linux采用了逻辑硬盘LLVM的方式来组织多块硬盘，我们需要通过以下步骤，实现把新购硬盘添加到系统的逻辑硬盘，并通过磁盘扩容，增加目录 /data 的存储空间。 扩展 8T 硬盘 ## 查看当前可用磁盘 fdisk -l ## 查看磁盘分区情况 lsblk ## 加入对于新硬盘 /dev/sdb 进行操作 sudo parted /dev/sdb ## 查看 (parted) print # rm 用于删除 # (parted) rm 1 (parted) mklabel gpt ## 创建分区 ## 只有一卷 (parted) mkpart primary xfs 1 -1 ## 以 s 为单位 (parted) unit s ## 扩展 100% (parted) mkpart primary ext4 2048s 100% (parted) mkpart primary ext4 0% 100% (parted) align-check optimal 1 ## 退出 quit 接着，我们可以分区 ## 开始分区 sudo mkfs.ext4 /dev/sdb1 pvcreate /dev/sdb1 pvdisplay 新磁盘添加到逻辑盘 主要参考了网站的教程：手把手教你给 CentOS 7 添加硬盘及扩容(LVM) ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:0:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["tools"],"content":" 添加物理分区 ## 使用 fdisk 查看新添加的硬盘信息：/dev/sdc: 8T fdisk -l ## 对新盘进行分区处理 fdisk /dev/sdc ## 主要使用命令 1. n: 添加新的物理分区 2. p: 选择主分区类型(1-4, 如果已经使用了 1（对应 /dev/sdc1），就选择 2，以此类推) 3. 起始扇区: 默认 4. Last扇区: 默认 5. t: 修改分区, 选择 1-4， 对应 /dev/sdc1-4 6. L: 列出所有的分区ID, 8e 为 Linux LVM 7. 8e: 8. w: 将修改写入磁盘 ## 使用 partprobe 命令重新读取分区表 partprobe ## 查看修改后的结果 fdisk -l ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:1:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["tools"],"content":" 添加逻辑分区 # 创建新物理卷前查看 PV pvdisplay # 创建 PV, 对应 /dev/sdc1, /dev/sdc2,... pvcreate /dev/sdc1 # 再次查看，可看到新的 PV pvdisplay # 查看卷组 vgdisplay --- Volume group --- VG Name VolGroup ## 对应的 vg 名称 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 20 VG Access read/write VG Status resizable MAX LV 0 Cur LV 10 Open LV 9 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.27 TiB PE Size 4.00 MiB Total PE 1907074 Alloc PE / Size 1906176 / 7.27 TiB Free PE / Size 898 / 3.51 GiB VG UUID WZIDPF-5X39-1qac-L9oP-jCQm-C9im-pQBfs4 # 将新的 PV 加入 VolGroup 组卷，使用 vgdisplay 获取得到的 `VG Name` vgextend VolGroup /dev/sdc1 vgdisplay ## 查看当前逻辑磁盘的空间大小 lvdisplay ## 查看系统可用空间大小 vgdisplay 磁盘扩容 ## 查看文件路径对应的逻辑分卷 df Filesystem Size Used Avail Use% Mounted on /dev/mapper/VolGroup-LogVol07 689G 149G 506G 23% / tmpfs 79G 842M 78G 2% /dev/shm /dev/sda1 477M 184M 269M 41% /boot /dev/mapper/VolGroup-LogVol08 5.1T 3.4T 1.5T 71% /data /dev/mapper/VolGroup-LogVol06 1008G 610G 347G 64% /home /dev/mapper/VolGroup-LogVol01 59G 335M 56G 1% /opt /dev/mapper/VolGroup-LogVol02 59G 52M 56G 1% /private /dev/mapper/VolGroup-LogVol03 118G 1.1G 111G 1% /tmp /dev/mapper/VolGroup-LogVol04 355G 15G 322G 5% /usr /dev/mapper/VolGroup-LogVol05 217G 87G 119G 43% /var ## 查看系统可用空间大小 vgdisplay ## 开始进行磁盘扩展，增加 500G 到 /dev/mapper/VolGroup-LogVol08（也就是 /data） lvextend -L +500G /dev/mapper/VolGroup-LogVol08 xfs_growfs /dev/mapper/VolGroup-LogVol08 ## CentOS6 使用命令 resize2fs df -h 参考链接 linux新增大于2T硬盘，分区并挂载 Linux磁盘扩容后处理（parted） ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:2:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":[],"content":"vim 使用中文输入法，中文输入法，中文算法 ","date":"2023-06-09","objectID":"/2023-06-09-vim-%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/:0:0","tags":[],"title":"vim 使用中文输入法","uri":"/2023-06-09-vim-%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":["tools"],"content":"coc.vim 配置，实现自动跳出补全功能。 注释掉：suggest.noselect 注释掉：suggest.autoTrigger // 不能设置 // \"suggest.noselect\": false, // \"suggest.autoTrigger\": false, // \"suggest.triggerAfterInsertEnter\": true { // Enable preselect feature on neovim, default: `true` \"suggest.enablePreselect\": true, // Add preview option to `completeopt`, default: `false` \"suggest.enablePreview\": true, // completion automatically select the first completed // 不能设置 // \"suggest.noselect\": false, // \"suggest.autoTrigger\": false, // \"suggest.triggerAfterInsertEnter\": true \"diagnostic.checkCurrentLine\": true, // min word for trigger preview \"suggest.minTriggerInputLength\": 1, // Target to show hover information, default is floating window when possible. \"coc.preferences.hoverTarget\": \"preview\", // Auto close preview window on cursor move., default: `true` \"coc.preferences.previewAutoClose\": true, // Coc.Prettier --------------------------------------------------------------- \"prettier.singleQuote\": true, \"prettier.trailingComma\": \"all\", \"prettier.bracketSpacing\": false, // Coc.Python ----------------------------------------------------------------- \"python.linting.pylintEnabled\": false, \"python.linting.enabled\": true, \"python.pythonPath\": \"/home/william/anaconda3/bin/python3\", \"pyright.inlayHints.variableTypes\": false, \"python.linting.flake8Enabled\": true, \"python.linting.flake8Args\": [ \"--max-line-length=120\", \"--ignore=E203,E221,E251,E266,E302,E305,E402,W503,F401,F403,F405\" ], // https://github.com/fannheyward/coc-pyright/blob/master/package.json \"python.analysis.diagnosticSeverityOverrides\": { \"reportWildcardImportFromLibrary\": \"none\", \"reportOptionalMemberAccess\": \"none\" } // coc.markdown \"markdownlint.config\": { \"default\": true, \"line_length\": false, \"no-inline-html\": { \"allowed_elements\": [\"pre\"] }, \"ul-indent\": { \"indent\": 4 } }, //coc.clangd \"clangd.path\": \"~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin/clangd\" } ","date":"2023-06-08","objectID":"/2023-06-08-coc-settings.json/:0:0","tags":["vim","coc.vim","coc","settings"],"title":"coc settings.json","uri":"/2023-06-08-coc-settings.json/"},{"categories":[],"content":" -w 1860 -h 2480 -dpi 300 -idpi -2 -m 0,0,0,0 -fc -y ","date":"2023-06-07","objectID":"/2023-06-07-kindle-scribe/:0:0","tags":[],"title":"kindle scribe","uri":"/2023-06-07-kindle-scribe/"},{"categories":["tools"],"content":"解锁「无限阅读」medium 新方式。 ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:0:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" bypass-paywalls-chrome这个目前还能用： bypass-paywalls-chrome ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:1:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" Medium unlimitedRef: git 网页 具体步骤很简单： 下载压缩包 解压 从 chrome 操作 Extension -\u003e Load unpacked -\u003e 选择文件目录 重新打开 chrome 即可无限阅读。 ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:2:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" Remove Medium这是一款 Chrome 插件 Remove Medium.com Overlays ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:3:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":"通过配置 tmux 与 vim 的组合键，可以使用一套统一的快捷键来操作二者。 ctrl-j ctrl-k ctrl-h ctrl-l prefix: ctrl-space \u003cprefix\u003e ctrl-l ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:0:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":" tmux 设置 ## vim ~/.tmux.conf ## 安装 vim-tmux-navigator: \u003cprefix\u003e-I set -g @plugin 'christoomey/vim-tmux-navigator' ## 设置 \u003cprefix\u003e #-- bindkeys --# # prefix key (Ctrl+Space) set -g prefix ^Space unbind ^b bind Space send-prefix ## 设置快捷键 ## vim-tmux ------------------------------------------------------------------ is_vim=\"ps -o state= -o comm= -t '#{pane_tty}' \\ | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?g?(view|n?vim?x?)(diff)?$'\" is_fzf=\"ps -o state= -o comm= -t '#{pane_tty}' \\ | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?fzf$'\" bind -n C-h run \"($is_vim \u0026\u0026 tmux send-keys C-h) || \\ tmux select-pane -L\" bind -n C-j run \"($is_vim \u0026\u0026 tmux send-keys C-j) || \\ ($is_fzf \u0026\u0026 tmux send-keys C-j) || \\ tmux select-pane -D\" bind -n C-k run \"($is_vim \u0026\u0026 tmux send-keys C-k) || \\ ($is_fzf \u0026\u0026 tmux send-keys C-k) || \\ tmux select-pane -U\" bind -n C-l run \"($is_vim \u0026\u0026 tmux send-keys C-l) || \\ tmux select-pane -R\" ## clear terminal Ctr-x bind-key -n C-x if-shell \"$is_vim\" \"send-keys C-l\" \"send-keys C-l\" ## clear terminal \u003cprefix\u003e Ctrl-l bind C-l send-keys 'C-l' bind-key -T copy-mode-vi 'C-h' select-pane -L bind-key -T copy-mode-vi 'C-j' select-pane -D bind-key -T copy-mode-vi 'C-k' select-pane -U bind-key -T copy-mode-vi 'C-l' select-pane -R bind-key -T copy-mode-vi 'C-\\' select-pane -l ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:1:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":" vim 设置 \" vim-tmux ------------------------------------------------------------------- Plug 'christoomey/vim-tmux-navigator' let g:tmux_navigator_no_mappings = 1 noremap \u003csilent\u003e \u003cc-h\u003e :\u003cC-U\u003eTmuxNavigateLeft\u003ccr\u003e noremap \u003csilent\u003e \u003cc-j\u003e :\u003cC-U\u003eTmuxNavigateDown\u003ccr\u003e noremap \u003csilent\u003e \u003cc-k\u003e :\u003cC-U\u003eTmuxNavigateUp\u003ccr\u003e noremap \u003csilent\u003e \u003cc-l\u003e :\u003cC-U\u003eTmuxNavigateRight\u003ccr\u003e ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:2:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":"vim8 以上版本支持在当前编辑界面直接打开终端，以方便执行命令行操作。 ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:0:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":" 在 vim 中打开 terminal ## 默认位于上端 :term :below term ## 默认由于左端 :vertical term :vertical below term ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:1:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":" 更多设置 tb：terminal below tr：terminal right Ctrl-D：close terminal \" terminal ------------------------------------------------------------------- function! PutTermPanel(buf, side, size) abort \" new term if no buffer if a:buf == 0 term else execute \"sp\" bufname(a:buf) endif \" default side if wrong argument if stridx(\"hjklHJKL\", a:side) == -1 execute \"wincmd\" \"J\" else execute \"wincmd\" a:side endif \" horizontal split resize if stridx(\"jkJK\", a:side) \u003e= 0 if ! a:size \u003e 0 resize 6 else execute \"resize\" a:size endif return endif \" vertical split resize if stridx(\"hlHL\", a:side) \u003e= 0 if ! a:size \u003e 0 vertical resize 6 else execute \"vertical resize\" a:size endif endif endfunction function! s:ToggleTerminal(side, size) abort let tpbl=[] let closed = 0 let tpbl = tabpagebuflist() \" hide visible terminals for buf in filter(range(1, bufnr('$')), 'bufexists(bufname(v:val)) \u0026\u0026 index(tpbl, v:val)\u003e=0') if getbufvar(buf, '\u0026buftype') ==? 'terminal' silent execute bufwinnr(buf) . \"hide\" let closed += 1 endif endfor if closed \u003e 0 return endif \" open first hidden terminal for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) \u0026\u0026 index(tpbl, v:val)\u003c0') if getbufvar(buf, '\u0026buftype') ==? 'terminal' call PutTermPanel(buf, a:side, a:size) return endif endfor \" open new terminal call PutTermPanel(0, a:side, a:size) endfunction \" Toggle terminal - bottom nnoremap \u003csilent\u003e tb :call \u003cSID\u003eToggleTerminal('J', 10)\u003cCR\u003e \" Toggle terminal - right nnoremap \u003csilent\u003e tr :call \u003cSID\u003eToggleTerminal('L', 120)\u003cCR\u003e \" close terminal: Ctrl-D ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:2:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":"最近在整合 tmux-vim 的开发环境，准备把之前的 prefix 从 ctrl-k 更改为 ctrl-i，结果发现无法完成命令行的自动补全功能。在网上查了一下，原来是因为系统把 ctrl-i 与 TAB 键都当做一个操作指令了，从而导致按下 TAB 的时候，实际上是执行 ctrl-i，如果多次敲击，则会产生两条指令：ctr-i ctri-i，这个恰好了显示 tmux 的 sidebar 功能，反而不是完成自动补全了。 具体的可以参考这个 StackOverflow 的回答，Tab issues with Vim while running Tmux: I haven’t really configured anything in tmux besides remapping C-b to C-i. set -g prefix C-i unbind C-b bind C-i send-prefix While Tab and the Control-i are usually distinguished in GUI environment, they generate the same character in tty-based environments like terminal emulators. That character is U+0009, which is the Tab control character. It is represented as the single byte 0x09 in ASCII, UTF-8 and many other encodings. All of the “C0 control codes” (ASCII 0-31) have keyboard equivalents that combine the Control key with another key (mostly letters, but also some symbols). The Tab control character is generated by Control-i. You can verify that (at least) tmux considers C-i and Tab to be the same by looking at the output of tmux show-options -g | grep prefix. You will see it has set your prefix to the key named Tab, even though you specified it as C-i in your configuration. You can also notice the same canonicalization in the output of tmux list-keys | grep prefix. You may want to pick a different prefix if you do not want to type Tab twice when you want to send one to programs running inside tmux. ","date":"2023-05-28","objectID":"/2023-05-28-tmux-tab-%E4%B8%8E-ctr-i-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%86%B2%E7%AA%81/:0:0","tags":["tmux","tab","prefix"],"title":"tmux tab 与 ctr i 快捷键冲突","uri":"/2023-05-28-tmux-tab-%E4%B8%8E-ctr-i-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%86%B2%E7%AA%81/"},{"categories":["tools"],"content":"为了支持 markdown 的相关功能 可以按照标题级别进行折叠 支持高亮代码块 文本自动补全功能 实时预览功能 ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:0:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" coc-markdownlint","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 添加插件，实现语法自动检查 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" Coc \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" extensions let g:coc_global_extensions = ['coc-tsserver', 'coc-json', 'coc-yaml', \\ 'coc-clangd', 'coc-pyright', 'coc-jedi', \\ 'coc-html', 'coc-css', 'coc-xml', \\ 'coc-emmet', 'coc-snippets', \\ 'coc-markdownlint', 'coc-highlight'] ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:1","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 自定义部分功能在 vim 执行命令 :CocConfig 跳出 coc-settings.json。具体的检查规则可以参考默认配置文件：coc-markdownlint/schemas/markdownlint-config-schema.json，找到这个规则 \"default\": true, \"properties\": { \"line_length\": { \"description\": \"Number of characters\", \"type\": \"integer\", \"minimum\": 1, \"default\": 80 }, 去掉段落长度的检查。通常我们写 markdown 不可能把每一行限制在 80 个字符串的长度，因此需要将改检查功能关闭。 // coc.markdown \"markdownlint.config\": { \"default\": true, \"line_length\": false, \"no-inline-html\": { \"allowed_elements\": [\"pre\"] }, \"ul-indent\": { \"indent\": 4 } }, ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:2","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 标题折叠按照标题不同的级别进行折叠，有助于更加清晰的把握文章的框架。这里我比较推荐 vim-minimd，可以实现 Space: Fold or unfold the current header. n-Space: Fold all headers of level n. Tab or ]h Jump to next header. Shift-Tab Jump to previous header. 具体的指令如下： nmap :MiniMDToggleFold nmap :MiniMDNext nmap :MiniMDPrev nmap ]h :MiniMDNext nmap [h :MiniMDPrev nnoremap = :MiniMDPromote nnoremap - :MiniMDDemote nmap :MiniMDTaskToggle vmap :MiniMDTaskToggle 同时，为了可以利用原来的 markdown 语法进行高亮，可以设置 let g:default_markdown_syntax = 1。这个需要配合插件 tpope/vim-markdown \" markdown -------------------------------------------------------------------- Plug 'godlygeek/tabular' \" 这个显示有点问题 \" Plug 'preservim/vim-markdown' \" 用这个可以高亮语法 Plug 'tpope/vim-markdown' let g:vim_markdown_folding_disabled=1 \" 这里面有部分是不支持的 \" let g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'handlebars', \" \\ 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php', \" \\ 'python', 'ruby', 'sass', 'xml', 'html', 'c++=cpp'] let g:markdown_fenced_languages = ['bash=sh', 'python', 'ruby', 'c++=cpp', \\ 'xml', 'html', 'css', 'ruby', 'r', 'vim', \\ 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php'] let g:vim_markdown_math = 1 let g:vim_markdown_toc_autofit = 1 let g:markdown_syntax_conceal = 1 \" 支持按照原来的 markdown 语法进行高亮 let g:default_markdown_syntax = 1 Plug 'shushcat/vim-minimd' \" Space Fold or unfold the current header. \" nSpace Fold all headers of level n. ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:2:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 自动补全通过识别 tmux 页面的文本，进行自动补全。 Plug 'prabirshrestha/async.vim' Plug 'prabirshrestha/asyncomplete.vim' Plug 'wellle/tmux-complete.vim' let g:tmuxcomplete#asyncomplete_source_options = { \\ 'name': 'tmuxcomplete', \\ 'whitelist': ['*'], \\ 'config': { \\ 'splitmode': 'words', \\ 'filter_prefix': 1, \\ 'show_incomplete': 1, \\ 'sort_candidates': 0, \\ 'scrollback': 0, \\ 'truncate': 0 \\ } \\ } let g:tmuxcomplete#trigger = 'omnifunc' imap \u003cc-space\u003e \u003cPlug\u003e(asyncomplete_force_refresh) inoremap \u003cexpr\u003e \u003cCR\u003e pumvisible() ? asyncomplete#close_popup() . \"\\\u003cCR\u003e\" : \"\\\u003cCR\u003e\" ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:3:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 更加专注的写作现在能真正静下心来、完整而严禁的写作时间，其实是非常珍贵的。一方面是由于外部的干扰因素太多，无法给以写作足够的空间和时间；另一方面，我们内心也变得浮躁，难以静心进行深度思考。 这时候，我们希望能在工具上，对这些干扰因素进行限制，期待能营造一个良好的写作氛围（希望如此）。 goyo 这个就是为了此目的而生的，可以让我们在写作时，只需要面对一个屏幕，不用在意周遭环境。 进入模式：\u003cLeader\u003egy 退出模式：\u003cLeader\u003egy Plug 'junegunn/limelight.vim' Plug 'junegunn/goyo.vim' function! s:goyo_enter() if executable('tmux') \u0026\u0026 strlen($TMUX) silent !tmux set status off silent !tmux list-panes -F '\\#F' | grep -q Z || tmux resize-pane -Z endif set noshowmode set noshowcmd set scrolloff=999 Limelight \" ... endfunction function! s:goyo_leave() if executable('tmux') \u0026\u0026 strlen($TMUX) silent !tmux set status on silent !tmux list-panes -F '\\#F' | grep -q Z \u0026\u0026 tmux resize-pane -Z endif set showmode set showcmd set scrolloff=5 Limelight! \" ... endfunction \" 进入goyo模式后自动触发limelight，退出则关闭 autocmd! User GoyoEnter nested call \u003cSID\u003egoyo_enter() \"进入goyo模式后自动触发limelight,退出后则关闭 autocmd! User GoyoLeave nested call \u003cSID\u003egoyo_leave() \"Goyo \" Color name (:help cterm-colors) or ANSI code let g:limelight_conceal_ctermfg = 'Gray' let g:limelight_conceal_ctermfg = 240 \" Color name (:help gui-colors) or RGB color let g:limelight_conceal_guifg = 'DarkGray' let g:limelight_conceal_guifg = '#777777' \" 包含的前后段的数量 let g:limelight_paragraph_span = 2 \" Set it to -1 not to overrule hlsearch let g:limelight_priority = -1 \" Goyo配置 let g:goyo_width = 80 let g:goyo_height = 90 let g:goyo_linenr = 0 \" limelight键盘映射 nmap \u003cLeader\u003egy :Goyo\u003cCR\u003e ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:4:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" markdown-previewvim 支持对 markdown 文档执行实时的渲染，并通过浏览器打开。同时，在页面浏览器模式中，页面会随着当前光标自动随行移动，非常便捷。 安装插件 Plug 'iamcco/markdown-preview.nvim' 在 vim 执行命令 :PlugInstall :call mkdp#util#install() 设置 显示网页地址，可以在终端直接打开，这个有助于远程文本在本地打开： let g:mkdp_echo_preview_url = 1 设置网页地址，默认是本地地址：let g:mkdp_echo_preview_url = 1 设置访问端口，默认是随机，我们可以把端口固定下来，方便打开页面：let g:mkdp_port = '1111' 设置页面主题颜色，一般是黑色模式：let g:mkdp_theme = 'dark' 默认打开网页：let g:mkdp_browser = '/usr/bin/firefox' 使用 开启Mardown预览 :MarkdownPreview 关闭Mardown预览 :MarkdownPreviewStop \" example ------------------------- nmap \u003cLeader\u003emp \u003cPlug\u003eMarkdownPreview nmap \u003cLeader\u003ems \u003cPlug\u003eMarkdownPreviewStop nmap \u003cLeader\u003emt \u003cPlug\u003eMarkdownPreviewToggle `` \" markdown-preview Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app \u0026\u0026 yarn install' } \" set to 1, nvim will open the preview window after entering the markdown buffer \" default: 0 let g:mkdp_auto_start = 0 \" set to 1, the nvim will auto close current preview window when change \" from markdown buffer to another buffer \" default: 1 let g:mkdp_auto_close = 1 \" set to 1, the vim will refresh markdown when save the buffer or \" leave from insert mode, default 0 is auto refresh markdown as you edit or \" move the cursor \" default: 0 let g:mkdp_refresh_slow = 0 \" set to 1, the MarkdownPreview command can be use for all files, \" by default it can be use in markdown file \" default: 0 let g:mkdp_command_for_global = 0 \" set to 1, preview server available to others in your network \" by default, the server listens on localhost (127.0.0.1) \" default: 0 let g:mkdp_open_to_the_world = 1 \" use custom IP to open preview page \" useful when you work in remote vim and preview on local browser \" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9 \" default empty let g:mkdp_open_ip = '' \" specify browser to open preview page \" for path with space \" valid: `/path/with\\ space/xxx` \" invalid: `/path/with\\\\ space/xxx` \" default: '' let g:mkdp_browser = '/usr/bin/firefox' \" set to 1, echo preview page url in command line when open preview page \" default is 0 let g:mkdp_echo_preview_url = 1 \" a custom vim function name to open preview page \" this function will receive url as param \" default is empty let g:mkdp_browserfunc = '' function OpenMarkdownPreview (url) execute \"silent ! firefox --new-window \" . a:url endfunction let g:mkdp_browserfunc = 'OpenMarkdownPreview' \" options for markdown render \" mkit: markdown-it options for render \" katex: katex options for math \" uml: markdown-it-plantuml options \" maid: mermaid options \" disable_sync_scroll: if disable sync scroll, default 0 \" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle' \" middle: mean the cursor position alway show at the middle of the preview page \" top: mean the vim top viewport alway show at the top of the preview page \" relative: mean the cursor position alway show at the relative positon of the preview page \" hide_yaml_meta: if hide yaml metadata, default is 1 \" sequence_diagrams: js-sequence-diagrams options \" content_editable: if enable content editable for preview page, default: v:false \" disable_filename: if disable filename header for preview page, default: 0 let g:mkdp_preview_options = { \\ 'mkit': {}, \\ 'katex': {}, \\ 'uml': {}, \\ 'maid': {}, \\ 'disable_sync_scroll': 0, \\ 'sync_scroll_type': 'middle', \\ 'hide_yaml_meta': 1, \\ 'sequence_diagrams': {}, \\ 'flowchart_diagrams': {}, \\ 'content_editable': v:false, \\ 'disable_filename': 0, \\ 'toc': {} \\ } \" use a custom markdown style must be absolute path \" like '/Users/username/markdown.css' or expand('~/markdown.css') let g:mkdp_markdown_css = '' \" use a custom highlight style must absolute path \" like '/Users/username/highlight.css' or expand('~/highlight.css') let g:mkdp_highlight_css = '' \" use a custom port to start server or empty for random let g:mkdp_port = '1111' \" preview page title \" ${name} will be replace with the file name let g:mkdp_page_title = '「${name}」' \" recognized filetypes \" these filetypes will have MarkdownPr","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:5:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["toolsj"],"content":"通过 Ctrl-f 查找并以 vim 打开目标文件 ## 在 ~/.zshrc ## fzf : Ctr-f ------------------------------------------------- # .zshrc example function __fsel_files() { setopt localoptions pipefail no_aliases 2\u003e /dev/null eval find ./ -type f -print | fzf -m \"$@\" | while read item; do echo -n \"${(q)item} \" done local ret=$? echo return $ret } function fzf-vim { selected=$(__fsel_files) if [[ -z \"$selected\" ]]; then zle redisplay return 0 fi zle push-line # Clear buffer BUFFER=\"vim $selected\"; zle accept-line } zle -N fzf-vim bindkey \"^f\" fzf-vim ","date":"2023-05-27","objectID":"/2023-05-27-vim-fzf-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/:0:0","tags":["vim","fzf","zsh"],"title":"vim fzf 打开文件","uri":"/2023-05-27-vim-fzf-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"由于公司有一台机器R7的系统版本较低，只有glibc-2.17，而且无法升级（为了兼容的问题）。为了可以让 coc.vim 可以使用 clangd 进行代码补全，需要找对与这个版本 glibc-2.17 相对应的 clangd。 CentOS7 与 Ubuntu16.04 使用这个版本 clang++llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04 ## https://github.com/llvm/llvm-project/releases/tag/llvmorg-13.0.0 wget https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz ","date":"2023-05-27","objectID":"/2023-05-27-glibc-2.17-%E4%B8%8E-clangd/:0:0","tags":["glibc","clangd","clang","llvm","ubuntu-16.04"],"title":"glibc 2.17 与 clangd","uri":"/2023-05-27-glibc-2.17-%E4%B8%8E-clangd/"},{"categories":["tools"],"content":"遇到一个奇怪的现象，对于 vim 9 的配色方案 color-scheme，我在普通的终端是可以显示主题配置。但是一旦通过 tmux 启动，则会失效。查找原因，发现是 tmux 没有使用配置方案，导致这个问题出现。 修改 ~/.tmux.conf set -g default-terminal \"xterm-256color\" 同时，还是无法显示，这需要使用参数 tmux -2 ## 或者可以写一个 alias alias tnew='tmux -2 -u new -s' 这个命令的作用在于 -2 Force tmux to assume the terminal supports 256 colours. This is equivalent to -T 256. 我写了一个小脚本 rsyncx.to.colo.sh #!/bin/bash if [ $# != 1 ] then echo \"usage: rsyncx.to.colo.sh \u003ccololid\u003e\" exit 1 fi ## ----------------------- colo=$1 echo \"sending to $colo\" ## ----------------------- rsync -Parzvl ./.vim $colo:~/ rsync -Parzvl ./vim9 $colo:~/ ## tmux 会引发 vim color scheme 错误 ## https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode ssh $colo \"egrep '.*default-terminal.*xterm-256color.*' ~/.tmux.conf || echo -e 'set -g default-terminal \\\"xterm-256color\\\"' \u003e\u003e ~/.tmux.conf\" ","date":"2023-05-27","objectID":"/2023-05-27-tmux-%E5%AF%BC%E8%87%B4-vim-color-scheme-%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["tmux","vim","color","terminal"],"title":"tmux 导致 vim color scheme 无法显示的问题","uri":"/2023-05-27-tmux-%E5%AF%BC%E8%87%B4-vim-color-scheme-%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":"在配置 vim9 的时候，发现无法同步带有 https 的项目，这时候需要配置 git config --global http.sslverify false ","date":"2023-05-27","objectID":"/2023-05-27-git-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-https-%E7%9A%84%E8%A7%A3%E5%86%B3/:0:0","tags":["git","https"],"title":"git 无法连接 https 的解决","uri":"/2023-05-27-git-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-https-%E7%9A%84%E8%A7%A3%E5%86%B3/"},{"categories":["tools"],"content":"安装 vim9，并使用 coc.vim 实现代码补全。我把常用的一些插件也放在这里，方便大家参考。 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:0:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装注意事项安装 vim9 遇到了一些坑，这里先说一下： 不一定需要最新版本的 python3。我原来为了安装最新版本的 python3.11，而去升级 glibc-2.28 以上版本。但是呢，其实这个系统(Centos7.6)内核只支持到 glibc-2.18，升级到这个版本以上的话，会导致其他的可执行程序出现问题，比如 ls: relocation error: /home/ops/vim9/local/lib/libc.so.6: symbol __tunable_get_val, version glibc_private not defined in file ld-linux-x86-64.so.2 with link time reference 这是因为系统与 glibc 有非常严格的版本关系，在不同的 glibc 版本编译出来的可执行，往往内存空间是不一样的。严重的时候，甚至会引起 segment fault 的错误。这篇 Stack OverFlow 的问答真是解释了这个问题，并且极力不推荐随意升级 glibc，尤其是系统层面的环境路径：safely upgrade glibc on CentOS 7 上面说道不需要最新版本的 python3，那目前我尝试过可用的版本，可以是 python3.9.0 另外，在编译 python 的时候，一定要加上命令 export LDFLAGS=-rdynamic 同时，我们也不要更新太高版本的 nodejs，这个同样要求我们升级 glibc，目前可以的版本是 node-v16.20.0 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:1:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装过程下面开始介绍安装 vim9 的完整过程，我默认把 vim 安装到 home 下面的 vim9 文件夹。使用的时候，通过指定可执行的路径。 export VIM9_PATH=$HOME/vim9 mkdir -p ${VIM9_PATH}/local/{bin,lib} mkdir -p $HOME/tmp ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 openssl这个主要是为了给 python 使用 cd $HOME/tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=${VIM9_PATH}/local/openssl --openssldir=${VIM9_PATH}/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make -j \u0026\u0026 make install \\ rm -rf $HOME/tmp/openssl* ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:1","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 python3.9 export PYTHON_VERSION=3.9.0 cd $HOME/tmp \u0026\u0026 \\ wget --no-check-certificate https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ tar -xvf Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ cd Python-${PYTHON_VERSION} \u0026\u0026 \\ export LDFLAGS=-rdynamic \u0026\u0026 \\ CFLAGS=\"-I${VIM9_PATH}/local/openssl/include\" LDFLAGS=\"-L${VIM9_PATH}/local/openssl/lib64\" \\ ./configure \\ --enable-shared \\ --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=${VIM9_PATH}/local \\ --with-openssl=${VIM9_PATH}/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:2","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 lua cd $HOME/tmp \u0026\u0026 wget --no-check-certificate http://www.lua.org/ftp/lua-5.4.4.tar.gz \u0026\u0026 \\ tar -xvf lua-5.4.4.tar.gz \u0026\u0026 \\ cd lua-5.4.4 \u0026\u0026 \\ sed -i 's|^INSTALL_TOP=.*|INSTALL_TOP= ${VIM9_PATH}/local|g' Makefile \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:3","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 perl这个我暂时不需要，就没安装了 wget http://www.cpan.org/src/5.0/perl-5.14.2.tar.gz \u0026\u0026 \\ tar -xzf perl-5.14.2.tar.gz \u0026\u0026 \\ cd perl-5.14.2 # -d: default # -e: escapte question ./Configure –des -Dprefix=/home/william/vim9/local make #make test make install ## 如果 vim 需要 perl 支持 ## 则添加这个选项 --enable-perlinterp=$HOME/vim9/local/bin/perl ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:4","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 vim cd /tmp \u0026\u0026 \\ git clone https://github.com/vim/vim.git \u0026\u0026 \\ cd vim \u0026\u0026 \\ git pull origin master \u0026\u0026 \\ make clean distclean export VIM9_PATH=$HOME/vim9 export LD_LIBRARY_PATH=${VIM9_PATH}/local/lib:$LD_LIBRARY_PATH export PATH=$HOME/vim9/local/bin:${VIM9_PATH}/local/bin:${VIM9_PATH}/local/node-v16.20.0-linux-x64/bin:$PATH ./configure --prefix=$HOME/vim9/local \\ --with-features=huge \\ --enable-multibyte \\ --enable-python3interp=yes \\ --with-python3-command=$HOME/vim9/local/bin/python3 \\ --with-python3-config-dir=$($HOME/vim9/local/bin/python3-config --configdir) \\ --enable-luainterp=yes \\ --with-lua-prefix=$HOME/vim9/local \\ --enable-cscope \\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"william\" \\ --enable-fail-if-missing ## --enable-perlinterp=/home/ops/vim9/local/bin/perl make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:5","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 nodejs由于 coc.vim 需要 nodejs 支持 cd $HOME/vim9/local ## 直接下载二进制，可以省掉安装步骤（还挺费时间的） cd /tmp wget https://nodejs.org/dist/latest-v16.x/node-v16.20.0-linux-x64.tar.gz tar -xvf node-v16.20.0-linux-x64.tar.gz cp -r node-v16.20.0-linux-x64 $HOME/vim9/local export VIM9_PATH=$HOME/vim9 export LD_LIBRARY_PATH=${VIM9_PATH}/local/lib:$LD_LIBRARY_PATH export PATH=$HOME/vim9/local/bin:${VIM9_PATH}/local/bin:${VIM9_PATH}/local/node-v16.20.0-linux-x64/bin:$PATH ## 安装 yarn npm install -g yarn ## 如果 coc.vim 是离线安装，则可以执行 ## ~/.vim/plugged/coc.nvim/是我的coc.nvim插件的安装目录 cd ~/.vim/plugged/coc.nvim/ yarn install yarn build ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:6","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 配置 vim","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" alias #alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH vim -u $HOME/.vimrc.coc' #alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc' alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc' 注意，对于新安装的 vim，需要退出当前 ssh 连接后，重新登录才可以生效。 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:1","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 解决 tmux 配色无效生效的冲突 ## tmux 会引发 vim color scheme 错误 ## https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode egrep '.*default-terminal.*xterm-256color.*' ~/.tmux.conf || echo -e 'set -g default-terminal \\\"xterm-256color\\\"' \u003e\u003e ~/.tmux.conf 同时，还是无法显示，这需要使用参数 tmux -2 ## 或者可以写一个 alias alias tnew='tmux -2 -u new -s' ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:2","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 vim.plugin curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:3","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" coc.vim coc.vim 只是提供一个调用接口，所有的代码补全与检查功能都是由 lsp 提供。而为了能够处理 cpp 文件，我们一定要确保在 coc-settings.json 里面配置的 clangd 能够正确运行，否则运行命令 : CocCommand clangd.install 会报错：coc client failed to connected ## 务必确保 clangd 的服务端是可以正常启动的 ## 如果有报错，需要找到对应版本的 clangd 二进制 ## 然后在 `coc-settings.json` 进行设置 pwd /home/william/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin ./clangd clangd is a language server that provides IDE-like features to editors. It should be used via an editor plugin rather than invoked directly. For more information, see: https://clangd.llvm.org/ https://microsoft.github.io/language-server-protocol/ clangd accepts flags on the commandline, and in the CLANGD_FLAGS environment variable. I[17:56:41.885] clangd version 16.0.2 (https://github.com/llvm/llvm-project 18ddebe1a1a9bde349441631365f0472e9693520) I[17:56:41.885] Features: linux+grpc I[17:56:41.885] PID: 17226 I[17:56:41.885] Working directory: /home/william/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin I[17:56:41.885] argv[0]: ./clangd I[17:56:41.885] Starting LSP over stdin/stdout 如果报错没有找到 clangd ，则需要我们自己安装。这个命令需要打开一个test.cpp文件再执行: CocCommand clangd.install 具体的配置可以通过帮助命令 :h g:coc_data_home 来获取，比如在 .vimrc 设置 存放 coc 配置路径coc-settings.json：let g:coc_config_home=~/.vim 存放 coc 插件路径coc-clang等：let g:coc_data_home=~/.config/coc g:coc_config_home *g:coc_config_home* Configure the directory which will be used to look for user's `coc-settings.json`, default: Windows: `~/AppData/Local/nvim` Other: `~/.config/nvim` g:coc_data_home *g:coc_data_home* Configure the directory which will be used to for data files(extensions, MRU and so on), default: Windows: `~/AppData/Local/coc` Other: `~/.config/coc` 打开命令 :CocConfig 进行配置 { // Enable preselect feature on neovim, default: `true` \"suggest.enablePreselect\": true, // Add preview option to `completeopt`, default: `false` \"suggest.enablePreview\": true, // completion automatically select the first completed \"suggest.noselect\": false, // \"suggest.triggerAfterInsertEnter\": true \"diagnostic.checkCurrentLine\": true, // min word for trigger preview \"suggest.minTriggerInputLength\": 1, // Target to show hover information, default is floating window when possible. \"coc.preferences.hoverTarget\": \"preview\", // Auto close preview window on cursor move., default: `true` \"coc.preferences.previewAutoClose\": true, // Coc.Prettier --------------------------------------------------------------- \"prettier.singleQuote\": true, \"prettier.trailingComma\": \"all\", \"prettier.bracketSpacing\": false, // Coc.Python ----------------------------------------------------------------- \"python.linting.pylintEnabled\": false, \"python.linting.flake8Enabled\": true, \"python.linting.enabled\": true, \"python.pythonPath\": \"/home/william/anaconda3/bin/python3\", \"pyright.inlayHints.variableTypes\": false, \"clangd.path\": \"~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin/clangd\" } ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:4","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" zsh-vim-fzf 搜索并打开目标文件在 zsh 使用 fzf 搜索目标文件，并调用 vim 打开。我设置的快捷键为 Ctrl-f ## vim ~/.zshrc ## fzf : Ctr-f ------------------------------------------------- # .zshrc example function __fsel_files() { setopt localoptions pipefail no_aliases 2\u003e /dev/null eval find ./ -type f -print | fzf --reverse -m \"$@\" | while read item; do echo -n \"${(q)item} \" done local ret=$? echo return $ret } function fzf-vim { selected=$(__fsel_files) if [[ -z \"$selected\" ]]; then zle redisplay return 0 fi zle push-line # Clear buffer BUFFER=\"vim $selected\"; zle accept-line } zle -N fzf-vim bindkey \"^f\" fzf-vim ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:5","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" .vimrc set nocompatible \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" noremap \u003cF2\u003e :Autoformat\u003cCR\u003e nnoremap \u003csilent\u003e\u003cF3\u003e :call \u003cSID\u003eToggleColorColumn()\u003ccr\u003e \" Show Column nmap \u003cF4\u003e :ALEDetail\u003cCR\u003e \" ALE detail info nmap \u003csilent\u003e\u003cF5\u003e :NERDTreeToggle\u003cCR\u003e \" Nerd nmap \u003csilent\u003e\u003cF8\u003e :TagbarToggle\u003cCR\u003e \" Tagbar nnoremap \u003csilent\u003e\u003cF9\u003e :call asyncrun#quickfix_toggle(5)\u003ccr\u003e\" Show build window \" nnoremap \u003csilent\u003e\u003cF10\u003e :AsyncRun -cwd=\u003croot\u003e cd `pwd`/build \u0026\u0026 bash ../kickstart.sh \u003ccr\u003e nnoremap \u003csilent\u003e\u003cF10\u003e :AsyncRun -cwd=\u003croot\u003e cd `pwd`/build \u0026\u0026 bash ../kickstart.sh \u0026\u0026 make install \u003ccr\u003e map \u003cF12\u003e :%s/\\t/ /g\u003cCR\u003e \" imap tt \u003cEsc\u003e \" ff to exit insert mode \" 定义快捷键的前缀，即\u003cLeader\u003e let mapleader=\";\" let maplocalleader=\";\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" Plug \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" call plug#begin() \" Code completion ------------------------------------------------------------- Plug 'neoclide/coc.nvim', {'branch': 'release'} \" Color Theme ----------------------------------------------------------------- Plug 'sainnhe/everforest' Plug 'frazrepo/vim-rainbow' Plug 'mechatroner/rainbow_csv' let g:disable_rainbow_hover = 1 let g:rainbow_comment_prefix = '#' \" Status Bar ------------------------------------------------------------------ Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' \"\" Adding extras. \"\" Uncomment the following line If you have installed the powerline fonts. \"\" It is good for airline layer. let g:airline_powerline_fonts = 1 let g:airline_theme='everforest' \" AIRLINE SETTINGS let g:airline#extensions#tabline#show_close_button = 0 \"\" AIRLINE SETTINGS let g:airline#extensions#tabline#show_close_button = 0 \" let g:airline#extensions#tabline#buffer_nr_show = 1 \" 不要显示 index let g:airline#extensions#tabline#buffer_idx_mode = 1 nmap \u003cleader\u003e1 \u003cPlug\u003eAirlineSelectTab1 nmap \u003cleader\u003e2 \u003cPlug\u003eAirlineSelectTab2 nmap \u003cleader\u003e3 \u003cPlug\u003eAirlineSelectTab3 nmap \u003cleader\u003e4 \u003cPlug\u003eAirlineSelectTab4 nmap \u003cleader\u003e5 \u003cPlug\u003eAirlineSelectTab5 nmap \u003cleader\u003e6 \u003cPlug\u003eAirlineSelectTab6 nmap \u003cleader\u003e7 \u003cPlug\u003eAirlineSelectTab7 nmap \u003cleader\u003e8 \u003cPlug\u003eAirlineSelectTab8 nmap \u003cleader\u003e9 \u003cPlug\u003eAirlineSelectTab9 \" let g:airline_skip_empty_sections = 1 let g:airline_skip_empty_sections = 1 let g:airline#extensions#tabline#fnamemod = ':t' \"\"let g:airline#extensions#syntastic#enabled = 0 let g:airline_detect_iminsert=1 let g:airline#extensions#tmuxline#enabled = 0 let g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#tabline#show_tabs = 1 let g:airline#extensions#tabline#show_buffers = 1 let g:airline#extensions#tabline#show_tab_nr = 0 let g:airline#extensions#tabline#tab_nr_type = 1 \" tab number let g:airline#extensions#tabline#show_splits = 0 let g:airline#extensions#wordcount#enabled = 0 \"let g:airline_theme='base16' \" let g:airline_powerline_fonts = 1 let g:airline#extensions#tagbar#enabled = 1 \" END AIRLINE SETTINGS let g:airline#extensions#tabline#show_tabs = 0 \" Nerd Tree-------------------------------------------------------------------- Plug 'scrooloose/nerdtree' Plug 'preservim/nerdcommenter' \" nerdtree 从当前文件目录打开 autocmd BufEnter * lcd %:p:h \"如果想打开vim时自动打开NERDTree，可以如下设定 \" autocmd vimenter * NERDTree \" 显示行号 let NERDTreeShowLineNumbers=1 let NERDTreeAutoCenter=1 \" 是否显示隐藏文件 \" 在终端启动vim时，共享NERDTree let g:nerdtree_tabs_open_on_console_startup=1 \" 忽略以下文件的显示 let NERDTreeIgnore=['\\.pyc','\\~$','\\.swp'] \" 显示书签列表 let NERDTreeShowBookmarks=1 \"NERDTree配置 let NERDChristmasTree=1 \"显示增强 let NERDTreeAutoCenter=1 \"自动调整焦点 let NERDTreeShowFiles=1 \"显示文件 let NERDTreeShowLineNumbers=1 \"显示行号 let NERDTreeHightCursorline=1 \"高亮当前文件 let NERDTreeShowHidden=1 \"显示隐藏文件 let NERDTreeMinimalUI=0 \"不显示'Bookmarks' label 'Press ? for help' let NERDTreeWinSize=30 \"窗口宽度 \" let NERDTreeQuitOnOpen = 1 let NERDTreeMinimalUI = 1 let NERDTreeDirArrows = 1 set autochdir let N","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:4:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":"移动 tmux-window ## 使用 Shift-\u003e 或者 Shift\u003c- 移动 ## tmux2 bind-key -n S-Left swap-window -t -1 bind-key -n S-Right swap-window -t +1 ## tmux3 bind-key -n S-Left swap-window -t -1\\; select-window -t -1 bind-key -n S-Right swap-window -t +1\\; select-window -t +1 ","date":"2023-05-24","objectID":"/2023-05-24-tmux-%E7%A7%BB%E5%8A%A8-window/:0:0","tags":["terminal","tmux","window","panel"],"title":"tmux 移动 window","uri":"/2023-05-24-tmux-%E7%A7%BB%E5%8A%A8-window/"},{"categories":["tools"],"content":"注册回调函数，一旦 DAG 触发相关条件，会执行该回调函数 ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:0:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" 支持 DAG 与 Operator可以在 DAG 或者 单独一个 Operator(Task) 里面定义回调，入参使用为 on_failure_callback=[callback_func_1, callback_func_2] ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:1:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" Callback TypesThere are five types of task events that can trigger a callback: Name Description on_success_callback Invoked when the task succeeds on_failure_callback Invoked when the task fails sla_miss_callback Invoked when a task misses its defined SLA on_retry_callback Invoked when the task is up for retry on_execute_callback Invoked right before the task begins executing. 同时，在 airflow2.6.0 以上版本，还可以支持多个回调函数，将其放入一个 list 即可 As of Airflow 2.6.0, callbacks now supports a list of callback functions, allowing users to specify multiple functions to be executed in the desired event. Simply pass a list of callback functions to the callback args when defining your DAG/task callbacks: e.g on_failure_callback=[callback_func_1, callback_func_2] from docker.types import Mount from airflow import DAG from airflow.utils.dates import days_ago from airflow.decorators import task from airflow.operators.bash import BashOperator from airflow.operators.python import PythonOperator from airflow.providers.docker.operators.docker import DockerOperator from wepy.utils.init import * import pendulum local_tz = pendulum.timezone(\"Asia/Shanghai\") DEFAULT_ARGS = { 'owner' : 'william', 'email' : 'xxx@xxx.com', 'email_on_failure' : False, 'email_on_retry' : False, 'depends_on_past' : False, 'retries' : 3, 'retry_delay' : timedelta(minutes=1) } def dag_failure_alert(context): msg = f\"\"\"DAG has failed, --------------------- {context} --------------------- {context.get('dag')=} {context.get('dag_run')=} --------------------- {context.get('task')=} {context.get('task_instance')=} \"\"\" log.err(msg) wx_test.send(msg, 'error') def task_failure_alert(context): msg = f\"\"\"Task has failed, task_instance_key_str: {context['task_instance_key_str']} \"\"\" log.err(msg) wx_test.send(msg, 'error') def checking(): if not cal.is_today_trading(): raise Exception(\"Not TradingDay.\") with DAG( dag_id = \"hello\", default_args = DEFAULT_ARGS, schedule = \"*/1 * * *\", start_date = datetime(2023, 1, 1, tzinfo=local_tz), catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['hello'], on_failure_callback = [dag_failure_alert], ) as dag: checking = PythonOperator( task_id = 'checking', python_callable = checking, dag = dag, on_failure_callback = [task_failure_alert], ) checking ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:2:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" 正确做法","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:0:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" colo cd ~ mkdir tbt2snap.recover cd tbt2snap.recover git init --bare ./tbt2snap.recover.git ## bare 仓库不保存具体内容，需要我们通过设置 post-receive 来同步远程仓库内容 ## 通过这个控制从 master pull 到哪个目录 ./tbt2snap.recover.git cd hooks touch post-receive chmod +x post-receive vim post-receive #/bin/bash GIT_WORK_TREE=/home/ops/tbt2snap.recover git checkout -f master tree -L 2 . ├── clear.sh ├── README.md ├── release.sh ├── tbt2snap.recover.git │ ├── branches │ ├── config │ ├── description │ ├── HEAD │ ├── hooks │ ├── index │ ├── info │ ├── logs │ ├── objects │ └── refs └── template ├── colo.conf ├── hub.conf ├── hub.csv ├── run.hub.sh ├── run.t2s2.sh ├── run.term.sh ├── t2s2.conf └── terms.csv 8 directories, 15 files ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:1:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" local ## git 作为下一层仓库，通过 post-receive 控制同步内容 git remote add colo116 ssh://ops@192.168.1.177:61116/home/ops/tbt2snap.recover/tbt2snap.recover.git git push colo116 ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:2:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" remote mkdir tools.git cd tools.git ls -alh git init --bare cd hooks touch post-receive chmod +x post-receive vim post-receive #/bin/bash GIT_WORK_TREE=./ git checkout -f master #while read oldrev newrev ref #do # branch=´echo $ref | cut -d/ -f3´ # GIT_WORK_TREE=../ git checkout -f $branch #done ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:3:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" local git clone git@192.168.1.171:lfang/tools.git cd tools vim readme.md git add readme.md git commit -m 'add readme' git remote add colo110 ssh://192.168.1.177:61110/home/ops/tmp/tools.git git push ssh://ops@192.168.1.177:61110/home/ops/tmp/tools.git ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:4:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" remote这样，我们在 remote 机器即可看到变动 git log commit 7bf73f38fad70da7116842ee73dc4f02cc44c932 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Fri May 19 15:25:34 2023 +0800 add readme ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:5:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":"修改 airflow 默认的时区 ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:0:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":" 修改 airflow.cfg 配置 sed -i \"s|^default_timezone = .*|default_timezone = Asia/Shanghai|g\" airflow.cfg sed -i \"s|^default_ui_timezone = .*|default_ui_timezone = Asia/Shanghai|g\" airflow.cfg ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:1:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":" 在 DAG 设定时区 from docker.types import Mount from airflow import DAG from airflow.utils.dates import days_ago from airflow.decorators import task from airflow.operators.bash import BashOperator from airflow.operators.python import PythonOperator from airflow.providers.docker.operators.docker import DockerOperator from wepy.utils.init import * import pendulum local_tz = pendulum.timezone(\"Asia/Shanghai\") ## 设置时区 DEFAULT_ARGS = { 'owner' : 'william', 'email' : 'lfang@wuyacapital.com', 'email_on_failure' : False, 'email_on_retry' : False, 'retries' : 3, 'retry_delay' : timedelta(minutes=1) } with DAG( dag_id = \"pretrading.all.csv\", default_args = DEFAULT_ARGS, schedule = \"35 08,20 * * 1-5\", start_date = datetime(2023, 1, 1, tzinfo=local_tz), ## 指定时区 catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['pretrading', 'all.csv'], ) as dag: ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:2:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"airflow 允许为一个相同的 DAG 配置多个 schedule from airflow.datasets import Dataset with DAG( dag_id = \"pretrading.all.csv\", default_args = DEFAULT_ARGS, # schedule = \"35 08 * * 1-5\", schedule = [Dataset(\"*/5 * * * 1-5\"), Dataset(\"9 18 * * 1-5\")], start_date = datetime(2023, 1, 1), catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['pretrading', 'all.csv'], ) as dag: ","date":"2023-05-18","objectID":"/2023-05-18-airflow-dag-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAschedule/:0:0","tags":["airflow","schedule","Dataset","多个"],"title":"airflow DAG 配置多个schedule","uri":"/2023-05-18-airflow-dag-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAschedule/"},{"categories":["tools"],"content":" airflow-in-docker 千万不能用 previlleged ，这个会导致无法 mount /var/run/docker.socket ## root 执行 ## 不能用 previlleged，·普通用户也可以 docker run -dit \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/bin/docker:/bin/docker \\ --name=airflow \\ --pull=always \\ -p 18080:8080 \\ 10.32.111.107:5000/airflow:v1.0 如果是 dockerfile （本质上是普通用户，所以不用 root）不用完 previlleged version: \"3\" services: airflow: container_name: airflow image: 10.32.111.107:5000/airflow:v1.0 ## 不能用 previlleged，·普通用户也可以, 为了 /var/run/docker.socket privileged: false tty: true volumes: - ~:/mnt - /var/run/docker.sock:/var/run/docker.sock ## docker-in-docker - /usr/bin/docker:/bin/docker ## docker 可执行，如果有 so 也需要 mount - /mnt/cephfs:/root/cephfs ## 可以在 docker-in-docker 使用 cephs - ~/git/jobs/dags:/app/dags ## for dags # - ~/mysql:/var/lib/mysql ## for mysql ports: - \"18080:8080\" ## web command: - /bin/bash - -c - | /usr/sbin/init pull_policy: always restart: always ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:1:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":" DAG 使用 DockerOperator注意，在 airflow 处于 docker-in-docker 的情况下，这时候我们需要特殊处理 DockerOperator docker_url: \"unix://var/run/docker.sock\" network_mode: host，应该为 outside 的 host 网络 mounts: 这个最重要，决定了 docker-in-docker 能够有读取相关路径的权限，需要注意的是，这时候我们需要把 dockeroperator 理解成在 host 机器运行，所以的路径对应的是 host 的路径 from docker.types import Mount qry_ctp = DockerOperator( task_id = 'docker_qry_ctp', docker_url = \"unix://var/run/docker.sock\", image = '10.32.111.107:5000/tradingops/myctp.sx1:stable', container_name = 'task___qry_ctp', api_version = 'auto', auto_remove = 'success', ## 'success', 'force', 'never' network_mode = \"host\", command = \"\", mounts = [ Mount( source='/mnt/cephfs', ## 这个是 host 的路径 target='/root/cephfs', ## 这个是 Docker-in-Docker 的路径 type='bind' ), ], mount_tmp_dir = False, ) 当然，如果有 commnad，我们可以使用 单个命令，直接 comnand 多个命令，使用 /bin/bash -c '\u003ccommand1\u003e \u003ccommand2\u003e' rsync_tora = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo114:/home/ops/tora.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromTORA \"\"\" rysnc_xele_sh = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo109:/home/ops/xeleq.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromXELEQ/SH \"\"\" rysnc_xele_sz = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo110:/home/ops/xeleq.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromXELEQ/SZ \"\"\" rsync_info = DockerOperator( task_id = 'docker_rsync_info', docker_url = \"unix://var/run/docker.sock\", image = '10.32.111.107:5000/r7:v1.0', container_name = 'task_rsync_info', api_version = 'auto', auto_remove = 'success', ## 'success', 'force', 'never' network_mode = \"host\", mount_tmp_dir = False, mounts = [ Mount( source='/mnt/cephfs', ## 这个是 host 的路径 target='/root/cephfs', ## 这个是 Docker-in-Docker 的路径 type='bind' ), ], command = f\"\"\" /bin/bash -c ' {rsync_tora} {rysnc_xele_sh} {rysnc_xele_sz} ' \"\"\" ) ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:2:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":" DAG 使用 BashOperator如果使用 BashOperator，这相对简单，直接调用 docker run 即可 qry_ctp = BashOperator( task_id = 'docker_qry_ctp', bash_command = \"\"\" docker run --pull=always --privileged=true \\ --name=myctp.sx1 --rm=true \\ 10.32.111.107:5000/tradingops/myctp.sx1:stable \"\"\" ) ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:3:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":"处理 matplotlib 中文字体无法显示的问题 ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:0:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" 下载需要的字体 ## 先下载字体 git clone https://github.com/dolbydu/font.git ## 支持中文字体的在 unicode cd unicode tree -L 1 . ├── Adobe Fangsong Std.otf ├── Adobe Heiti Std.otf ├── Adobe Kaiti Std.otf ├── Adobe Song Std.otf ├── FangSong.ttf ├── FZYingBiXingShu-S16S.ttf ├── FZYingBiXingShu-S16T.ttf ├── Kaiti.ttf ├── Lisu.TTF ├── Microsoft Yahei Bold.ttf ├── Microsoft Yahei.ttf ├── SimHei.ttf ├── SimSun.ttc ├── STCaiyun.TTF ├── STFangsong.TTF ├── STHupo.TTF ├── STKaiti.TTF ├── STLiti.TTF ├── STSong.TTF ├── STXihei.TTF ├── STXingkai.TTF ├── STXinwei.TTF ├── STZhongsong.TTF └── YouYuan.TTF ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:1:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" 拷贝到 matplotlib 文件夹 ## 查看 matplotlib 路径 import matplotlib matplotlib.matplotlib_fname() '/usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/matplotlibrc' ## 字体文件位于上一层 cd /usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf 现在，我们把刚才下载得到的字体拷贝在这个文件夹 cp ~/git/font/unicode/* /usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf 然后，还需要更新 matplotlib 的字体缓存文件夹，否则还是无法更新字体 import matplotlib print(matplotlib.get_cachedir()) '/root/.cache/matplotlib' ## 删除字体缓存 rm -rf /root/.cache/matplotlib 这时候，重新启动 python 即可 matplotlib.matplotlib_fname() from matplotlib import font_manager font_set = {f.name for f in font_manager.fontManager.ttflist} for f in font_set: print(f) 现在，我们可以指定字体了 plt.rcParams[\"font.sans-serif\"]=[\"Microsoft YaHei\"] #设置字体 plt.rcParams[\"axes.unicode_minus\"]=False #该语句解决图像中的“-”负号的乱码问题 ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:2:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" rpm -U http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm yum install -y git ","date":"2023-05-08","objectID":"/2023-05-08-centos-update-git-2.20/:0:0","tags":["centos","git"],"title":"centos update git 2.20","uri":"/2023-05-08-centos-update-git-2.20/"},{"categories":["tools"],"content":" terminate called after throwing an instance of 'std::runtime_error' what(): locale::facet::_S_create_c_locale name not valid 需要安装中文包支持，因为 CTP 采用了中文接口 # Set the locale RUN apt-get clean \u0026\u0026 \\ apt-get update \u0026\u0026 \\ apt-get install -y locales locales-all \u0026\u0026 \\ locale-gen zh_CN.GB18030 ","date":"2023-05-06","objectID":"/2023-05-06-ubuntu-ctp-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/:0:0","tags":["ctp","ubuntu","locale"],"title":"ubuntu ctp 中文问题","uri":"/2023-05-06-ubuntu-ctp-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" # 版本列表：https://www.sqlite.org/chronology.html # 下载源码 wget --no-check-certificate https://www.sqlite.org/src/tarball/sqlite-3.39.3.tar.gz # 编译 tar zxvf sqlite-3.39.3.tar.gz cd sqlite-3.39.3 export CFLAGS=\"-DSQLITE_ENABLE_FTS3 \\ -DSQLITE_ENABLE_FTS3_PARENTHESIS \\ -DSQLITE_ENABLE_FTS4 \\ -DSQLITE_ENABLE_FTS5 \\ -DSQLITE_ENABLE_JSON1 \\ -DSQLITE_ENABLE_LOAD_EXTENSION \\ -DSQLITE_ENABLE_RTREE \\ -DSQLITE_ENABLE_STAT4 \\ -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT \\ -DSQLITE_SOUNDEX \\ -DSQLITE_TEMP_STORE=3 \\ -DSQLITE_USE_URI \\ -O2 \\ -fPIC\" export PREFIX=\"/usr/local\" #LIBS=\"-lm\" ./configure --disable-tcl --enable-shared --enable-tempstore=always --prefix=\"$PREFIX\" LIBS=\"-lm\" ./configure --enable-shared --enable-tempstore=always --prefix=\"$PREFIX\" make \u0026\u0026 make install # 替换系统低版本 sqlite3 mv /usr/bin/sqlite3 /usr/bin/sqlite3_old ln -s /usr/local/bin/sqlite3 /usr/bin/sqlite3 echo \"/usr/local/lib\" \u003e /etc/ld.so.conf.d/sqlite3.conf ldconfig sqlite3 -version ","date":"2023-04-25","objectID":"/2023-04-25-sqlite-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/:0:0","tags":["airflow","sqlite","centos"],"title":"sqlite 源代码编译","uri":"/2023-04-25-sqlite-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/"},{"categories":["tools"],"content":"使用 airflow 管理工作流。 Install ## 设置 DAG 目录 export AIRFLOW_HOME=/root/app ## 不显示 example 案例 export AIRFLOW__CORE__LOAD_EXAMPLES=False airflow db init ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:0:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 添加用户 ## 需要确保 $AIRFLOW_HOME 是存在的，否则触发不同的 db，会导致数据库匹配不对，进而引发账户-密码错误 airflow users create \\ --username admin \\ --firstname admin \\ --lastname admin \\ --role Admin \\ --email admin@example.org ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:1:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 启动 ## 启动 webserver airflow webserver -p 8080 -D ## 启动 scheduler airflow scheduler -D ## 1. vim ariflow.cfg default_timezone = utc 修改为 default_timezone = Asia/Shanghai default_ui_timezone = UTC 修改为 default_ui_timezone = Asia/Shanghai ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:2:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 测试 ## 先用 Python 测试代码 python hello.py airflow tasks list hello airflow tasks test hello print_date airflow tasks test hello py_say_hello 20230514 ## 启动一个 dag airflow dags list airflow dags trigger pretrading.all.csv ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:3:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 切换 db 数据库airflow 内置的默认数据库是 sqlite，这个主要是为了方便测试，不需要额外的配置即可启动 airflow。但是这种情况下，只能使用 SequencialOperator，无法实现并行化，因此官方不推荐。 我们可以修改数据库为 Postgre 或者 MySQl，进行实现并行化。 ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:4:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" MySQL","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:4:1","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" MariaDB ## 需要这个 so 放在 /app libmysqlclient.so.18 setenforce 0 getenforce vim /etc/selinux/config SELINUX=disabled # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=disabled # SELINUXTYPE= can take one of three two values: # targeted - Targeted processes are protected, # minimum - Modification of targeted policy. Only selected processes are protected. # mls - Multi Level Security protection. SELINUXTYPE=targeted sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 sudo yum localinstall -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm sudo yum install -y mysql-community-server sudo systemctl start mysqld ## 首次安装的密码 grep \"temporary password\" /var/log/mysqld.log ## 如果办法登录 ## 则使用一下方法，可以直接 mysql -u root -p 不用输秘密 Open and edit /etc/my.cnf or /etc/mysql/my.cnf, depending on your distribution. Add skip-grant-tables under [mysqld] Restart MySQL You should be able to log in to MySQL now using the below command mysql -u root -p Run mysql\u003e flush privileges; Set new password by ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword'; Go back to /etc/my.cnf and remove/comment skip-grant-tables Restart MySQL Now you will be able to login with the new password mysql -u root -p ## 报错：Your password does not satisfy the current policy requirements mysql\u003e SHOW VARIABLES LIKE 'validate_password%'; +--------------------------------------+--------+ | Variable_name | Value | +--------------------------------------+--------+ | validate_password_check_user_name | OFF | | validate_password_dictionary_file | | | validate_password_length | 8 | | validate_password_mixed_case_count | 1 | | validate_password_number_count | 1 | | validate_password_policy | MEDIUM | | validate_password_special_char_count | 1 | +--------------------------------------+--------+ 7 rows in set (0.00 sec) mysql\u003e SET GLOBAL validate_password_length = 6; mysql\u003e SET GLOBAL validate_password_policy = LOW; mysql -uroot -p CREATE DATABASE IF NOT EXISTS airflow DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; create user 'airflow'@'%' identified by 'xxxxxxxx'; grant all privileges on airflow.* to airflow@localhost identified by 'xxxxxxxx'; grant all privileges on airflow.* to 'airflow'@'%' identified by 'xxxxxxxx'; flush privileges; select user,authentication_string,host from mysql.user; +---------------+-------------------------------------------+-----------+ | user | authentication_string | host | +---------------+-------------------------------------------+-----------+ | root | *51F9815BB277B91759503A29D46EC9364D361F1C | localhost | | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost | | mysql.sys | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost | | airflow | *51F9815BB277B91759503A29D46EC9364D361F1C | % | +---------------+-------------------------------------------+-----------+ 4 rows in set (0.00 sec) executor = LocalExecutor sql_alchemy_conn = mysql://airflow:xxxxxxxx@localhost:3306/airflow?charset=utf8 #初始化数据库 #如果前面的两个utf8没写好，可能会出现/airflow/lib/python3.7/encodings/cp1252.py错误 # 若之前使用sqllite初始化过,需要 # 重置数据库 airflow db reset # 初始化数据库 airflow db init ## 1067 - Invalid default value for ‘update_at‘ ## MySQLdb.OperationalError: (1067, \"Invalid default value for 'updated_at'\") set GLOBAL sql_mode ='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' Ref","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:5:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" yum remove nginx-mod* yum install nginx-mod* yum install nginx systemctl enable nginx systemctl start nginx ","date":"2023-04-25","objectID":"/2023-04-25-nginx-%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/:0:0","tags":[],"title":"nginx 部署小记","uri":"/2023-04-25-nginx-%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":"总结一下 tmux 的使用技巧与相关配置。 ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:0:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 配置","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:1:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" tmux3 特别注意注意，千万一定要把 set -g @split-statusbar-mode 'off' set -g @plugin 'charlietag/tmux-split-statusbar' run-shell /home/william/.tmux/plugins/tmux-split-statusbar/tmux-split-statusbar.tmux set -g @plugin 'charlietag/tmux-split-statusbar' set -g @split-statusbar-mode 'off' # [ on | off] set -g @split-statusbar-bindkey '-n F11' # [ M-s | -n F11 | ... ] # bindkey for toggle statusbar-mode # define yourself just like bind-key, default: M-s set -g @split-status-hide-bindkey '-n F12' # [ M-d | -n F12 | ... ] # bindkey for status-left / status-right hiding # define yourself just like bind-key, default: M-d ## ============================================================================= set -g pane-border-status bottom ## 只显示简单的正在运行命令 # set -g pane-border-format \"#P #T #{pane_current_command} \" ## 显示正在运行的命令所有参数 # set -g pane-border-format '#(ps --no-headers -t #{pane_tty} -o args -O-c)' set -g pane-border-format '#P #T #(ps --no-headers -t #{pane_tty} -o args -O-c) \u003e' ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:1:1","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 快捷键设置 prefix-s: 快速切换 sessions ## switch between sessoin bind-key s choose-session prefix-o: 快速重命名 panel ## rename-window bind-key o command-prompt -I \"#W\" \"rename-window '%%'\" prefix-f: 调用 fzf 快速查找 panel, 需要关闭原来的 tmux-fzf, 参考：tmux and fzf: fuzzy tmux session/window/pane switcher 建立一个可执行文件 #!/bin/bash # customizable LIST_DATA=\"#{window_name} #{pane_title} #{pane_current_path} #{pane_current_command}\" FZF_COMMAND=\"fzf-tmux -p --delimiter=: --with-nth 4 --color=hl:2\" # do not change TARGET_SPEC=\"#{session_name}:#{window_id}:#{pane_id}:\" # select pane LINE=$(tmux list-panes -a -F \"$TARGET_SPEC $LIST_DATA\" | $FZF_COMMAND) || exit 0 # split the result args=(${LINE//:/ }) # activate session/window/pane tmux select-pane -t ${args[2]} \u0026\u0026 tmux select-window -t ${args[1]} \u0026\u0026 tmux switch-client -t ${args[0]} 在 .tmux.conf 配置 ## fzf # set -g @plugin 'sainnhe/tmux-fzf' ## prefix-f # TMUX_FZF_LAUNCH_KEY=\"f\" # TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" ## menu # TMUX_FZF_MENU=\\ # \"foo\\necho 'Hello!'\\n\"\\ # \"bar\\nls ~\\n\"\\ # \"sh\\nsh ~/test.sh\\n\" bind-key f run-shell -b /home/william/.tmux/tmux-switch-pane.sh ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:2:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 配置","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:0","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":" 快捷键 ctr-n 向下移动 ctr-p 向上移动 tmux zsh ctr-t ctr-r alt-c vim vim ** \u003ctab\u003e: 进入模糊匹配 ;ff \"fzf \" This is the default option: \" - Preview window on the right with 50% width \" - CTRL-/ will toggle preview window. \" - Note that this array is passed as arguments to fzf#vim#with_preview function. \" - To learn more about preview window options, see `--preview-window` section of `man fzf`. let g:fzf_preview_window = ['right:50%', 'ctrl-/'] \" Preview window on the upper side of the window with 40% height, \" hidden by default, ctrl-/ to toggle let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/'] \" Empty value to disable preview window altogether let g:fzf_preview_window = [] \" [Buffers] Jump to the existing window if possible let g:fzf_buffers_jump = 1 \" [[B]Commits] Customize the options used by 'git log': let g:fzf_commits_log_options = '--graph --color=always --format=\"%C(auto)%h%d %s %C(black)%C(bold)%cr\"' \" [Tags] Command to generate tags file let g:fzf_tags_command = 'ctags -R' \" [Commands] --expect expression for directly executing the command let g:fzf_commands_expect = 'alt-enter,ctrl-x' \" Mapping selecting mappings nmap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-n) xmap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-x) omap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-o) nmap \u003cC-p\u003e :Files\u003cCR\u003e nmap \u003cC-e\u003e :Buffers\u003cCR\u003e nmap \u003cleader\u003eff :Files\u003cCR\u003e let g:fzf_action = { 'ctrl-e': 'edit' } \" Insert mode completion imap \u003cc-x\u003e\u003cc-k\u003e \u003cplug\u003e(fzf-complete-word) imap \u003cc-x\u003e\u003cc-f\u003e \u003cplug\u003e(fzf-complete-path) imap \u003cc-x\u003e\u003cc-l\u003e \u003cplug\u003e(fzf-complete-line) \" call fzf ","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:1","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":" 预览窗口 ## install highlight sudo apt-get install highlight antigen bundle unixorn/fzf-zsh-plugin@main export FZF_DEFAULT_COMMAND=\"--exclude={.git,.idea,.vscode,.sass-cache,node_modules,build}\" export FZF_DEFAULT_OPTS=\"--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2\u003e /dev/null | head -500'\" ","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:2","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"C++ Core Guidelines git 项目编译成 pdf 文件。 git clone https://github.com/isocpp/CppCoreGuidelines.git cd CppCoreGuidelines pandoc CppCoreGuidelines.md -f markdown -t epub3 -s -o CppCoreGuidelines.epub pandoc CppCoreGuidelines.md -f markdown -t latex -s -o CppCoreGuidelines.pdf ","date":"2023-04-16","objectID":"/2023-04-16-c-core-guidelines/:0:0","tags":["c++","core","guide"],"title":"c++ core guidelines","uri":"/2023-04-16-c-core-guidelines/"},{"categories":["tools"],"content":"实现在 tmux 对窗口的重命名 使用快捷键prefix + :(shift+,), 输入rename-window \u003cnew-name\u003e 绑定一个新的快捷键来操作：prefix+o bind-key o command-prompt -I \"#W\" \"rename-window '%%'\" ","date":"2023-04-15","objectID":"/2023-04-15-tmux-%E7%AA%97%E5%8F%A3%E9%87%8D%E5%91%BD%E5%90%8D-rename-window/:0:0","tags":["tmux","rename","window"],"title":"tmux 窗口重命名:rename window","uri":"/2023-04-15-tmux-%E7%AA%97%E5%8F%A3%E9%87%8D%E5%91%BD%E5%90%8D-rename-window/"},{"categories":["tools"],"content":"申万行业分类作为国内比较权威的A股分类标准，对于研究股票具有重要的参考价值。我们观察到，目前市面上（至少免费层面）没有一个相对完善、完整的历史数据与每日更新数据。 号称国内数据之王的万得，一方面对于用户提取的数据量有严格的限制，这导致我们在复原历史数据的过程经常会触发阈值；另一方面，我们发现万得会确实部分数据，以及存在臭名昭著的脏数据问题。比如，万得由于授权原因，无法提供上交所科创板股票的申万行业分类数据；再比如，这个票 000008.SZ，我们通过申万网站查询该票的历史变更情况： 可以查询到该票其实应该数据机械设备，相应的申万行业代码为 801890.SI，但是万得竟然标注为 801050.SI。 而根据《申万行业分类2014标准》这个代码对应的行业是 有色金属，简单查询这个股票即可以这个完全没有涉及金属业务，明显存在数据错误。 我们之前依赖一个 HF 的 stock.industry 数据库，后面发现这个也是完全瞎扯，他们直接利用现在的行业代码去更新历史的数据，没有考虑这个票在历史可能存在的主营业务发生变化、或者产生了重组，申万会相应的调整行业分类。 如何找思路最简单的思路是：去申万官网查看是否提供历史数据。不过很遗憾，这个数据其实算收费项目，对方并不提供历史的行业分类数据。 ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:0:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 技多不压身凡事难不倒一个会爬虫的开发，我查看发现申万网站提供了股票历史的分类记录，可以通过该记录条款，逐一地把历史的分类数据还原。 下载得到的数据是这样的： ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:1:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 犹抱琵琶半遮面查看上面的数据，我们发现申万只提供了内部的行业代码（如 000001.SZ 最近的行业代码是 480301，这个表示： 一级行业分类是银行 二级行业分类是股份制银行II 三级行业分类是股份制银行III 现在有点麻烦的是，研究员希望我们提供对应的申万指数代码，即我们经常看到的 801780.SI(一级行业代码)。 目前的情况是，我们已经得到申万内部的一个行业代码，需要将其映射到外部常用的申万指数代码。这个肯定需要从其他地方获取相关的信息。 ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:2:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 柳暗花明又一村这时候需要用梯子查找信息了。经过一番摸鱼后，发现几个宝贝玩意： 申万分别在 2011、2014、2021 发现了三份研究报告，介绍了申万行业指数的编制规则与调整说明 其中 2011、2014 的两份报告中，有明确说明内部行业代码与对应的指数代码，我们可以利用这个信息做一个映射 而在 2021 的这份数据，则没有对照表，我发现聚宽提供了一份行业名称与指数代码的对照表，那么我们可以通过名称找到对应的指数代码 目前看，食材都已就绪。 如何清洗数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:3:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 去读 pdf 数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:4:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 清洗数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:5:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 生成目标数据 数据入库","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:6:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 开通企业微信应用 登录企业微信网站:https://work.weixin.qq.com/ ‘应用管理 -\u003e (自建)创建应用’, 配置相关的应用名称 查看应用的 AgentID, Secret 设置\"企业可信IP\" “接收消息”(主要用于接收来自企业微信的信息,然后转发到我们自己的服务器) 记住上面的 Token, EncodingAESKey, URL 暂时先不用填(先测试,后面再补充) ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:0:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 启动服务 ~/anaconda3/bin/python web.py -p=5000 -t=\"\u003c应用上面的Token\u003e\" -a=\"\u003c应用上面的EncodingAESKey\u003e\" -c=\"\u003c企业CorpID\u003e\" 可以测试一下 curl http://127.0.0.1:5000 {\"detail\":[{\"loc\":[\"query\",\"msg_signature\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"timestamp\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"nonce\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"echostr\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"}]} ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 开通 nginx 外部访问 在阿里云开通相关的端口 5000 防火墙打开 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=5000/tcp --permanent systemctl stop firewalld.service 修改 nginx.conf 有可能是 sudo vim /etc/nginx/nginx.conf server { listen 80; location /wechat { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:5000; } } server { listen 80; server_name robot.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:4000; } } ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:2:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 企业微信回调测试打开网页:https://open.work.weixin.qq.com/wwopen/devtool/interface/combine, “建立连接 -\u003e 测试回调模式” URL: http://47.98.117.71:5000 URL: http://robot.wuyacapital.com \u003c这个没有回文也没问题\u003e Token: \u003cToken\u003e EncodingAESKey: \u003cEncodingAESKey\u003e EchoStr: 123456 ToUserName: \u003ccorpid\u003e ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:3:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 补充应用 URL即把上面测试通过的 URL 填入即可 ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:4:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":"使用 python 接口调用 openapi chatgpt。 注册 OpenAI 账户","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:0:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 使用 LA VPN（不能用香港VPN）","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:1:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 使用 Google 账户","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:2:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 获取 SMS （Indonesia）Ref: https://sms-activate.org/getNumber。最低充值2刀(可以使用支付宝)。 左侧选择 OpenAI -\u003e Indonesia -\u003e 等待短信消息， 如果不成功，可以点击右侧关闭，重新更新手机号（不收钱）。 ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:3:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 获取 API-keyRef: https://platform.openai.com/account/api-keys ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:4:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" Chrome 安装插件Ref: chrome-extension://jgjaeacdkonaoafenlfkkkmbaopkbilf/options.html python demo目前版本还只能使用 model=\"gpt-3.5-turbo\", 新版本 gpt-4.0 需要申请 waiting-list。 另外，调用接口需要梯子。 ## 以下均需要使用梯子 p4 ~/anaconda3/bin/python3 -m pip install openai p4 ipython import os import openai openai.api_key = OPEN_API_KEY completion = openai.ChatCompletion.create( model=\"gpt-3.5-turbo\", messages=[ {\"role\": \"user\", \"content\": \"show me the futures of programming.\"} ] ) print(completion.choices[0].message.content) ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:5:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":"在 C++ 中，由于存在多重继承的结构，往往会导致第三层继承类会拷贝顶级父类的多个成员变量，这将导致调用成员函数时，编译器不知道需要调用哪个成员，进而引发编译错误。 多重继承 ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:0:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":" 存在多个成员变量 #include \u003ccmath\u003e #include \u003ciostream\u003e class A { public: A() {} void echo() { std::cout \u003c\u003c \"a:\" \u003c\u003c a \u003c\u003c std::endl; } protected: int a {10}; }; class B: public A {}; class C: public A {}; class D: public B, public C {}; int main() { D d; d.echo(); return 0; } ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:1:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":" virtual base class我们需要把 class B 和 class C 对于 class A 的继承申明为 virtual base class，使用对于基类 class A 的成员拷贝只有一份 class A { public: A() {} void echo() { std::cout \u003c\u003c \"a:\" \u003c\u003c a \u003c\u003c std::endl; } protected: int a {10}; }; class B: public virtual A {}; class C: public virtual A {}; class D: public B, public C {}; Ref https://www.simplilearn.com/tutorials/cpp-tutorial/virtual-base-class-in-cpp ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:2:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":"观察到 ssh 会在一定时间的超时后，自动退出。 timed out waiting for input: auto-logout 我已经把相关的 ssh 设置对核对过，是没有问题的。 参考这个博客：终端 timed out waiting for input: auto-logout 解决 原来是有一个 TIMEOUT 的参数 echo $TIMEOUT 120 怪不得会自动退出。既然如此，则改之。 vim ~/.bashrc vim /etc/profile ## 设置成 0 就是不要超时退出 export TIMEOUT=0 ","date":"2023-02-27","objectID":"/2023-02-27-ssh-auto-logout-%E8%87%AA%E5%8A%A8%E8%B6%85%E6%97%B6%E9%80%80%E5%87%BA/:0:0","tags":["ssh","auto","logout","timeout"],"title":"ssh auto logout 自动超时退出","uri":"/2023-02-27-ssh-auto-logout-%E8%87%AA%E5%8A%A8%E8%B6%85%E6%97%B6%E9%80%80%E5%87%BA/"},{"categories":["tools"],"content":"行情调优 参看链接：证券行情接收效率调优全攻略来了 随着极速行情普及，客户接收证券行情时的一些问题也开始显现。比如，客户主机CPU频率不够，没有采用高性能的网卡，没有配置CPU绑核，没有做CPU的隔离等等的问题都会引起客户在接收极速行情时没有处于一种良好的状态，而不良好的接收状态直接就会引起客户端接收的丢包。盛立科技集合这些年在服务客户过程中遇到的相关问题，将八年调试心得做一汇总，干货满满，在此分享给大家以便客户后续在遇到类似的情况可以做一些参考。 在客户端接收极速行情时一般对于接收的客户端都有一些基本的要求，典型的配置要求是CPU 3.6G及以上，高性能网卡Solarflare 2522 Plus 。在这样配置接近的情况下才是一个接收客户端的基本起点，当然如果客户采用超频机那么就是一种更好的选择，这样客户可以获得更高的速度。 针对客户端接收服务器在达到典型配置的情况下，盛立证券行情系统的优化主要可以分为以下几个方向： 机器平台方面的调优。 高性能网卡加速方面的调优。 接收程序方面的调优。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:0:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 机器平台的调优一般服务器的CPU都支持自动睿频，而服务器的CPU一般默认运行于ondemand模式，会有中断开销，睿频的时候提升下降也是有额外的开销，特别是对于一些低端cpu比如C2350,C2338,N2800这些低价独服的CPU，影响更大。可以通过具体的命令查看当前机器的cpu五种工作模式以及频率。 除了cpu的工作模式的调优外， 我们还应该注意系统的调优，通过tuned-adm list命令来查看目前tuned支持的工作模式。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:1:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 高性能网卡加速方面的调优目前市面上典型的高性能网卡的供应商有Solarflare/Mellanox/Exablaze等。但从稳定性与性能以及易用性多个方面来考虑的话还是Solarflare X2522是比较合适的选择。我们做过一些简单的测试， 以intel普通10G网卡与solarflar 2522 plus 在 3.5G主频下， 大约相差一个数量级(20-50us 对 2-5us)的样子。 在使用Solarflare网卡时如果需要获得更优的性能（在正确安装好相应的高性能驱动的前提下）还需要注意以下一些事项： 开启大页机制 采用CPU核的绑定方案 采用绑核方案时，可以把要绑的核先进行隔离；需要先测定当前网卡与CPU核心的亲缘性，需绑在跟网卡亲缘性好的cpu核心上 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:2:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 接受程序方面的调优1、可以考虑对可执行文件在编译生成时添加优化选项， 比如 - 1)gcc优化参数优化级别。 - 2)使用gcc -Q –help=optimizers命令查看开启的优化项目。 2、采用内联函数：在内联函数被调用前，使用inline关键字修饰内联函数定义，同时在编译时打开对内联函数的优化。 3、消除循环的低效率。例如需要执行多次（在循环里）但是结果不会改变的计算，可以将这类计算移动到代码前面不会被多次求值的部分。 4、系统调用会导致进程从用户态切换到内核态，开销通常较大。部分系统调用可能在微秒级别或以上，尽量避免系统调用可以大幅提高我们的程序性能。 5、内存初始化程序在使用new或者malloc等分配内存后，这些内存可能并未在物理内存中分配。我们可采用初始化的方式将这些内存分配到物理内存中，避免运行过程中使用这些内存时引起缺页中断。 6、算术运算和浮点数乘除法或浮点运算相对于整型的加减运算，性能开销较高。我们可留意是否能将这些耗时的运算转换为整型加减或者位运算来提升性能，或者避免乘除法和浮点运算。 7、在逻辑运算符‘||’和‘\u0026\u0026’中，我们可以利用与短路和或断路特性，对条件进行排序。例如‘||’中更容易为真的条件放在前面，‘\u0026\u0026’中更容易为假的条件放在前面。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:3:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":"自动清理超过一定时间的文件 #!/usr/bin/env bash mkdir -p $HOME/log LOG_FILE=$HOME/log/$(date +\"%Y%m%d.MyLog.log\") exec \u0026\u003e \u003e(tee -a \"$LOG_FILE\") is_init=false msg () { echo -e \"------------------------------------------------------------------\" if [ !is_init ]; then is_init=true echo -e \"\u003e\u003e $(date +'%Y-%m-%d %H:%M:%S') \u003c\u003c '$0'\" fi echo -e \"\u003e\u003e $(date +'%Y-%m-%d %H:%M:%S') \u003c\u003c '$1'\" echo -e \"-----------------------------------------------------------------\" } msg \"Run autoclear.sh\" #datadir=$HOME/data datadir=/data xday=$(date -d \"-30 days\" +\"%Y%m%d\") for f in `ls $datadir`; do tmpdate=`date -r $datadir/$f \"+%Y%m%d\"` if [[ $tmpdate \u003c $xday ]]; then echo \"##==\u003e now rm $f ==\u003e [[ $tmpdate \u003c $xday ]]\" if [[ $f == *\"tar.bz2\"* ]]; then rsync -avPzr $datadir/$f ops:/data/Xtp/FromZZ.SZ fi rm -rf $datadir/$f fi done msg \"Done!\" ","date":"2023-02-21","objectID":"/2023-02-21-autoclear-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E6%96%87%E4%BB%B6/:0:0","tags":["autoclear","过期","清理"],"title":"autoclear 自动清理过期文件","uri":"/2023-02-21-autoclear-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E6%96%87%E4%BB%B6/"},{"categories":[],"content":" 小宝影院小宝影院提供在线视频观看，有不少美剧、电影资源。 ","date":"2023-02-18","objectID":"/2023-02-18-%E5%B8%B8%E7%94%A8%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/:1:0","tags":["音乐","电影"],"title":"常用音频、视频网站推荐","uri":"/2023-02-18-%E5%B8%B8%E7%94%A8%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"},{"categories":["tool"],"content":"设置 prompt 的颜色 export PS1=\"[\\[\\e[00;32m\\]\\u@Colo114@\\[\\e[00;31m\\]cma\\[\\e[00m\\]:\\[\\e[00;32m\\]\\w\\[\\e[00m\\]\\[\\e[00m\\]]\\$ \" ","date":"2023-02-15","objectID":"/2023-02-15-bashrc-prompt-%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/:0:0","tags":["Linux","bash","bashrc","prompt"],"title":"bashrc prompt 颜色设置","uri":"/2023-02-15-bashrc-prompt-%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/"},{"categories":[],"content":"clickhouse 检查某张表的数据最后修改时间，通过判断以决定是否同步数据。 select max(modification_time) from system.parts where table='sse_cv_snaps' and database='raven'; ","date":"2023-02-14","objectID":"/2023-02-14-clickhouse-%E6%A3%80%E6%9F%A5%E8%A1%A8%E6%9C%80%E8%BF%91%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/:0:0","tags":[],"title":"clickhouse 检查表最近修改时间","uri":"/2023-02-14-clickhouse-%E6%A3%80%E6%9F%A5%E8%A1%A8%E6%9C%80%E8%BF%91%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/"},{"categories":["tools"],"content":"通过获取进程 PID 来杀死进程。 killx () { list=$(ps aux | grep -i $1| grep -v grep |grep -v color) if [ -n \"$list\" ]; then dead=$(ps aux | grep -i $1| grep -v grep| grep -v color | awk '{print $2}') echo \"Killing... $1\" echo $dead |xargs kill -9 else echo \"Not running $1\" fi } ","date":"2023-02-09","objectID":"/2023-02-09-killx/:0:0","tags":["kill","killx"],"title":"killx","uri":"/2023-02-09-killx/"},{"categories":["tools"],"content":"VSPID:1483936 https://kiwivm.64clouds.com/1483936/main-exec.php?mode=blacklistcheck ","date":"2023-02-01","objectID":"/2023-02-01-bwg-%E6%A3%80%E6%9F%A5-ip-%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/:0:0","tags":["bwg","vps"],"title":"bwg 检查 IP 是否被墙","uri":"/2023-02-01-bwg-%E6%A3%80%E6%9F%A5-ip-%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/"},{"categories":["tools"],"content":"systemd 可以制作端口转发（secure-tunnel，也称作 port-forwarding），如systemd 实现端口转发。但是这个只能支持单个任务；当然，如果是多个任务，我们可以多写几个 service 文件即可。但是，这个不是最优选择，因为存在大量的重复配置。那么自然而然地，我们想到使用模板来进行配置，这样可以把共同的部分抽象出来，实现模板化操作。 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:0:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 建立服务模板到目录下面进行操作 -rw-r--r--. 1 root root 416 Jan 19 15:04 port-forwarding@.service -rw-r--r--. 1 root root 85 Jan 19 14:49 port-forwarding@ops.r7 -rw-r--r--. 1 root root 86 Jan 19 15:01 port-forwarding@ops.r13 cd /usr/lib/systemd/system 首先建立一个 service 文件，里面通过配置模板，运行多开服务 vim port-forwarding@.service 这个服务模板的内容如下： [Unit] Description=Setup Port-Forwarding to %I After=network.target [Service] ## 使用用户执行命令 User=william Environment=\"LOCAL_ADDR=localhost\" EnvironmentFile=/usr/lib/systemd/system/port-forwarding@%i ExecStart=/usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes ${TARGET} ${CMD1} ${CMD2} ${CMD3} ${CMD4} ${CMD5} # Restart every \u003e5 seconds to avoid StartLimitInterval failure Restart=always # Restart=on-failure RestartSec=5s [Install] WantedBy=multi-user.target 这里，我们指定了 EnvironmentFile=/usr/lib/systemd/system/port-forwarding@%i，这是一个模板化的参数 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:1:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 服务配置接下来，我们只需要编写服务配置即可 ## cat port-forwarding@ops.r7 TARGET=R7 CMD1='-R *:62114:127.0.0.1:22' CMD2='-R *:63115:127.0.0.1:22' CMD3= CMD4= CMD5= ## 注意，这种模板只能配置一个端口转发，可以理解成只监控一个端口的活跃状态 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:2:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 启动服务 systemctl daemon-reload ## 启动某个服务 systemctl enable port-forwarding@ops.r7.service systemctl enable port-forwarding@ops.r13.service systemctl list-units |grep port systemctl start port-forwarding@ops.r7.service systemctl start port-forwarding@ops.r13.service systemctl status port-forwarding@ops.r7.service ● port-forwarding@ops.r7.service - Setup Port-Forwarding to ops.r7 Loaded: loaded (/usr/lib/systemd/system/port-forwarding@.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2023-01-19 15:05:03 CST; 16min ago Main PID: 16980 (ssh) CGroup: /docker/72915ff761ba3a0adee44ce36ae26f124f87a73aad3456a2bb515c0ca54e7a4f/system.slice/system-port\\x2dforwarding.slice/port-forwarding@ops.r7.service └─16980 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60178:192.168.1.177:22 R7 ‣ 16980 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60178:192.168.1.177:22 R7 Jan 19 15:05:03 mon.machine systemd[1]: Started Setup Port-Forwarding to ops.r7. systemctl status port-forwarding@ops.r13.service ● port-forwarding@ops.r13.service - Setup Port-Forwarding to ops.r13 Loaded: loaded (/usr/lib/systemd/system/port-forwarding@.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2023-01-19 15:05:00 CST; 16min ago Main PID: 16894 (ssh) CGroup: /docker/72915ff761ba3a0adee44ce36ae26f124f87a73aad3456a2bb515c0ca54e7a4f/system.slice/system-port\\x2dforwarding.slice/port-forwarding@ops.r13.service └─16894 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60183:192.168.1.183:22 R13 ‣ 16894 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60183:192.168.1.183:22 R13 Jan 19 15:05:00 mon.machine systemd[1]: Started Setup Port-Forwarding to ops.r13. ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:3:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":"vim9 配置 YCM 自动补全功能。 cd ~/.vim/plugged git clone https://github.com/ycm-core/YouCompleteMe.git git submodule update --init --recursive ## 添加 ssl vim ~/.vim/plugged/YouCompleteMe/third_party/ycmd/build.py import ssl ssl._create_default_https_context = ssl._create_unverified_context python3 ./install.py --clang-completer --force-sudo --verbose ## vim .vimrc \" ycm 指定 ycm_extra_conf.py let g:ycm_global_ycm_extra_conf = ‘xxxxxx/.ycm_extra_conf.py’ 后面的路径是 YCM 插件目录里的 .ycm_extra_conf.py 文件的位置 比如 '~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py' ","date":"2023-01-13","objectID":"/2023-01-13-vim9-%E5%AE%89%E8%A3%85-ycm/:0:0","tags":["Linux","vim","ycm","python3","clang"],"title":"vim9 安装 YCM","uri":"/2023-01-13-vim9-%E5%AE%89%E8%A3%85-ycm/"},{"categories":["tools"],"content":"命令行安装 R stringi 软件包 RUN cd /tmp \u0026\u0026 \\ wget --no-check-certificate https://github.com/gagolews/stringi/archive/master.zip -O stringi.zip \u0026\u0026 \\ unzip stringi.zip \u0026\u0026 \\ sed -i '/\\/icu..\\/data/d' stringi-master/.Rbuildignore \u0026\u0026 \\ R CMD build stringi-master \u0026\u0026 \\ R CMD INSTALL `ls -alh |grep tar |cut -d' ' -f11` ","date":"2023-01-10","objectID":"/2023-01-10-r-%E5%AE%89%E8%A3%85-stringi-%E5%8C%85/:0:0","tags":["Docker","R","devtools","stringi","stringr"],"title":"R 安装 stringi 包","uri":"/2023-01-10-r-%E5%AE%89%E8%A3%85-stringi-%E5%8C%85/"},{"categories":["tools"],"content":"在登录 ssh 的时候，经常会遇到 timed out waiting for input: auto-logout，甚至都没有这个提醒，就直接断线的情况。我们需要修改默认超时参数。 ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" server端 # 设置服务器向 SSH 客户端连接会话发送频率和时间. vi /etc/ssh/sshd_config，添加如下两行 # 启用客户端活动检查，每 60 秒检查一次，3 次不活动断开连接 ClientAliveInterval 60 ClientAliveCountMax 3 # ClientAliveInterval 指定了服务器端向客户端请求消息的时间间隔, 默认是 0, 不发送。设置 60 表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了。 # ClientAliveCountMax 表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开。正常情况下, 客户端不会不响应，使用默认值 3 即可。 #重新启动 SSH 服务 service sshd reload ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" client 端 # 1、$TMOUT 系统环境变量 # 用以下命令判断是否是否设置了该参数 echo $TMOUT # 如果输出空或 0 表示不超时，大于 0 的数字 n 表示 n 秒没有收入则超时。此时则是 100 秒。 # 修改方法 # 系统层面：/etc/profile # 用户层面：~/.bashr vi /etc/profile （当然也可以在其它配置文件配置，涉及到环境变量配置文件读取优先级的问题） # ---------------------------- export TMOUT=600 # ---------------------------- # 将以上 600 修改为 0 就是设置不超时 source /etc/profile # 让配置立即生效 # 同时可以修改 ~/.ssh/config Host * TCPKeepAlive yes ServerAliveInterval 60 ServerAliveCountMax 30 ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":"从源代码编译安装 Vim9.2。 export LDFLAGS=\"-rdynamic\" cd /tmp \u0026\u0026 \\ yum install perl-ExtUtils-Embed ruby ruby-devel -y \u0026\u0026 \\ yum clean all \u0026\u0026 \\ rm -rf /var/cache/yum/* \u0026\u0026 \\ wget --no-check-certificate http://www.lua.org/ftp/lua-5.4.4.tar.gz \u0026\u0026 \\ tar -xvf lua-5.4.4.tar.gz \u0026\u0026 \\ cd lua-5.4.4 \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/lua* \u0026\u0026 \\ cd /tmp \u0026\u0026 \\ git clone https://github.com/vim/vim.git \u0026\u0026 \\ cd vim \u0026\u0026 \\ git pull origin master \u0026\u0026 \\ make clean distclean \u0026\u0026 \\ ./configure --prefix=/usr/local/vim9 \\ --with-features=huge \\ --enable-multibyte \\ --enable-rubyinterp=yes \\ --enable-python3interp=yes \\ --with-python3-command=/usr/local/python3/bin/python3 \\ --with-python3-config-dir=$(/usr/local/python3/bin/python3-config --configdir) \\ --enable-perlinterp=yes \\ --enable-luainterp=yes \\ --with-lua-prefix=/usr/local \\ --enable-cscope\\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"william\" \\ --enable-fail-if-missing \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/vim9/bin/vim /usr/bin/vim \u0026\u0026 \\ echo \"/usr/local/vim9/bin\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/vim* ","date":"2022-12-12","objectID":"/2022-12-12-vim--%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:0:0","tags":["Linux","vim","vim8","python"],"title":"Vim: 源代码编译安装","uri":"/2022-12-12-vim--%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":"在 Docker 环境安装 RabbitMQ version: \"3\" services: rabbitmq: container_name: rabbitmq image: docker.io/rabbitmq:3.11-management privileged: true shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} - RABBITMQ_DEFAULT_USER=william - RABBITMQ_DEFAULT_PASS=********** volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} - /home/william:/mnt ports: - \"5672:5672\" - \"15672:15672\" ## web #pull_policy: always restart: always 可以访问网站：rabbitmq 查看不同的版本，这里我们选择带有 management 的版本，这个提供了 web gui 的管理界面 可以在 docker-compose 配置用户与密码 配置端口转发 可以访问 IP:15672（如 http://127.0.0.1:15672/ ）进入管理界面 ","date":"2022-11-29","objectID":"/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/:0:0","tags":["docker","docker-compose","RabbitMQ","消息中间件"],"title":"docker 安装 RabbitMQ","uri":"/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/"},{"categories":["tools"],"content":"一些常用的 ~/.ssh/config 设置 Host * ServerAliveInterval 60 IdentitiesOnly=yes StrictHostKeyChecking=no ## ========================================== Host lfang.r8 HostName 192.168.1.xxxx Port 22 User lfang ServerAliveInterval 60 保持 60 秒持续向服务器发送心跳，从而保持 ssh 持续连接状态 StrictHostKeyChecking=no 去掉严格检查，如果一些服务器的 IP 发生了变化，可以通过 ssh-keygen -R xx.xx.xx.xx 去掉，或者修改 ~/.ssh/known_hosts，而这个则通过设置，直接忽略相关的报警，可以迅速的进行重新匹配。 ","date":"2022-11-25","objectID":"/2022-11-25-ssh-config-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/:0:0","tags":["ssh","key","config"],"title":"ssh config 的一些常用设置","uri":"/2022-11-25-ssh-config-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"允许一个 Docker container 获取主机的 systemctl 权限。 ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:0:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":" 使用 Docker run docker run --name mon.machine -dit \\ --privileged=true \\ -v /:/mnt \\ -v /run/dbus/system_bus_socket:/run/dbus/system_bus_socket:ro \\ -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\ -p 31022:22 \\ --shm-size=20gb \\ 10.32.111.107:5000/pydev:v1.0 /sbin/init ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:1:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":" 使用 Docker-compose version: \"3\" services: mon.machine: container_name: mon.machine image: 10.32.111.107:5000/pydev:v1.0 privileged: true shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} - /home/william:/mnt ports: - \"22222:22\" command: - /bin/bash - -c - | cat /mnt/.ssh/id_rsa.pub \u003e\u003e ~/.ssh/authorized_keys git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs /usr/sbin/init pull_policy: always restart: always 这里需要注意： 配置 privileged: true 在 command 需要先初始化，然后再执行其他的命令 privileged: true command: - /bin/bash - -c - | cat /mnt/.ssh/id_rsa.pub \u003e\u003e ~/.ssh/authorized_keys git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs /usr/sbin/init ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:2:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":"通过添加 tail -f /dev/null 保持刷新，使得容器始终处于活跃状态（alive），否则一旦命令执行完成，就会立即停止了。这样对于一些任务，我们往往想要其保持状态，方便进去容器内部进行调试。 version: \"3\" services: mon.machine: container_name: mon.machine image: 10.32.111.107:5000/pydev:v1.0 privileged: false shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} ports: - \"31022:22\" command: - /bin/bash - -c - | git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs tail -f /dev/null pull_policy: always restart: always ","date":"2022-11-24","objectID":"/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/:0:0","tags":["docker","docker-compose","command","alive"],"title":"docker compose command 保持容器处于活跃状态alive","uri":"/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/"},{"categories":["tools"],"content":"由于 Dockerfile 使用了多层构建的方式，对于没有改动的命令行，就不会在执行重新构建了。如果我们需要在 Dockerfile 保持更新 git pull，可以有两种方式 docker build 的时候使用 --no-cache 选项，但是这个是全局范围的配置，一旦设置，需要全部重新构建，往往显得十分臃肿 docker-compose 还支持提供 --build-arg 的选项，可以把一些参数传递到 Dockerfile 里面。 这里有一个小技巧，如果我们每次构建的时候，传递的参数是一个与时间相关的，则在每次构建的时候都会传递不同的参数，从而保证了在该参数之后的构建是会保持更新与构建的。 ## ensure latest wepy ARG BUILD_DATE RUN --mount=type=ssh \\ mkdir -p ~/git \u0026\u0026 cd ~/git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ cd ~/git/wepy \u0026\u0026 \\ bash ./install.venv.sh \u0026\u0026 \\ rm -rf ~/git/wepy ## ---------------------------------------------------------------------------- ## build export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 DOCKER_BUILDKIT=1 docker build \\ --ssh default \\ --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%S') \\ -t pydev:v1.0 . ## ---------------------------------------------------------------------------- ","date":"2022-11-24","objectID":"/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/:0:0","tags":["docker","docker-compose","RUN"],"title":"docker compose 保持 git pull 最新代码","uri":"/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/"},{"categories":["tools"],"content":"在升级 Python3.11 过程中遇到一些问题，这里顺手记录一下。 需要安装 bzip2-devel yum install -y bzip2* 找到 _bz2 sudo find / -name '*_bz2*' /mnt/.local/share/Trash/files/anaconda3.9/lib/python3.9/lib-dynload/_bz2.cpython-39-x86_64-linux-gnu.so ## 找到对应的需要处理的 python 版本路径 cd /usr/local/python3/lib/python3.11/lib-dynload ## 安装版本修改 cp _bz2.cpython-39-x86_64-linux-gnu.so _bz2.cpython-311-x86_64-linux-gnu.so 找到 libbz2.so.1.0 sudo find / -name 'libbz2.so.1.0' python11 目前还不能支持 numba ","date":"2022-11-24","objectID":"/2022-11-24-python3.11-%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/:0:0","tags":["python","python3.11"],"title":"Python3.11 避坑指南","uri":"/2022-11-24-python3.11-%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"为了在 Docker 镜像里面下载私有 git 项目代码，我们需要告诉 Dockerfile 如何调用主机的 ssh 公钥。 ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:0:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" Dockerfile #syntax=docker/dockerfile:1.0.0-experimental ## 假设私有 git 网站是：192.168.1.171， ## 如果是 github，替换成 github.com RUN mkdir -p ~/.ssh \u0026\u0026 \\ chmod 700 ~/.ssh \u0026\u0026 \\ ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts \u0026\u0026 \\ RUN --mount=type=ssh \u0026\u0026 \\ mkdir -p ~/git \u0026\u0026 cd ~/git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ cd wepy \u0026\u0026 \\ bash ./install.venv.sh \u0026\u0026 \\ rm -rf ~/git/wepy 这里需要注意： 在 Dockerfile 第一行（前面不能有其他注释）添加 #syntax=docker/dockerfile:1.0.0-experimental 添加 ssh-keyscan 避免 unknown host 错误 使用 Run --mount=type=ssh XXX 执行需要的命令 另外，我们在上层的 Dockerfile 不能有以下命令，这个会干扰 git 的权限问题 echo \"Host *\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ echo \" ServerAliveInterval 60\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ echo \" ServerAliveInterval 60\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:1:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" Docker build ## ---------------------------------------------------------------------------- ## build export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 # DOCKER_BUILDKIT=1 proxychains4 docker build --ssh default -t datamgr:v1.0 . DOCKER_BUILDKIT=1 docker build --ssh default -t datamgr:v1.0 . ## ---------------------------------------------------------------------------- 这里需要注意： 使用 ``DOCKER_BUILDKIT=1 开启实验性功能（–mount`） ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:2:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":"对于在 fdisk 显示，但是没有添加到已经挂载目录的磁盘空间，我们需要进行对剩余磁盘空间的挂载操作。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:0:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" fdisk -l 查看当前磁盘空间 fdisk -l 可以看到，这时候 /dev/sda 一共有 200G 空间，但实际占用的磁盘只有19G(19,921,920)。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:1:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" vgdisplay 显示当前可用逻辑卷空间 发现可以空间（Free PE / Size) 为空。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:2:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" lvdisplay 查看分卷的名称 --- Logical volume --- LV Path /dev/centos/root LV Name root VG Name centos LV UUID RJXQ4v-eiWR-Mddv-afWi-JFcm-I2pk-dk78jm LV Write Access read/write LV Creation host, time localhost, 2022-10-11 18:10:29 +0800 LV Status available # open 1 LV Size \u003c117.00 GiB Current LE 29951 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:0 --- Logical volume --- LV Path /dev/centos/swap LV Name swap VG Name centos LV UUID o6bndH-Tev1-1nLj-l3ZW-HKE5-UncQ-69aBLQ LV Write Access read/write LV Creation host, time localhost, 2022-10-11 18:10:29 +0800 LV Status available # open 2 LV Size 2.00 GiB Current LE 512 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:1 可以看到，根目录/ 对应的路径是 /dev/centos/root，我们就是需要扩展这个分卷空间。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:3:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" fdisk 初始化未未挂磁盘 fdisk /dev/sda 初始化完成后，会看到多了一个 /dev/sda3. ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:4:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" pvcreate 添加到逻辑卷 pvcreate /dev/sda3 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:5:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" vgextend vgextend /dev/sda3 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:6:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" lvextend lvextend -L +100G /dev/mapper/centos-root ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:7:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" 新磁盘 pvcreate /dev/sda pvdisplay # 将新的 PV 加入 VolGroup 组卷，使用 vgdisplay 获取得到的 `VG Name` vgextend centos /dev/sda ## 查看当前逻辑磁盘的空间大小 lvdisplay ## 查看系统可用空间大小 vgdisplay ## 增加一个 vg lvs lvcreate -L1024G -n data centos lvs mkfs.xfs /dev/mapper/centos-data mkdir -p /data mount /dev/mapper/centos-data /data ## 设置自动挂载 vim /etc/fstab /dev/mapper/centos-data /data xfs defaults 0 0 ## 逻辑卷扩容 ## 查看系统可用空间大小 vgdisplay ## 开始进行磁盘扩展，增加 500G 到 /dev/mapper/centos-data（也就是 /data） lvextend -L +500G /dev/mapper/centos-data xfs_growfs /dev/mapper/centos-data ## CentOS6 使用命令 resize2fs df -h ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:8:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" 如果不是逻辑卷 lvm，则直接挂载 ## 查看 fdisk -l ## 新建分区 fdisk /dev/sda n -\u003e 1 -\u003e 8e -\u003e w ## 格式化 mkfs.ext4 /dev/sda1 ## 直接挂载到　/data mkdir -p /data mount /dev/sda1 /data vi /etc/fstab /dev/sda1 /data ext4 defaults 0 0 RefLinux 将剩余未分区的磁盘空间挂载 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:9:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":"在一个 Docker 里面调用系统命令 systemctl ## 启动的时候添加 /sbin/init ## 不是 /usr/sbin/init/ 因为有可能找不到 docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 wuya-centos7-r4.0:v1.0 /sbin/init docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 192.168.1.88:5000/wuya/centos7-r4.0:v1.0 /sbin/init ## 运行的时候添加 bash docker exec -it rshiny bash sudo systemctl start rstudio-server sudo systemctl start shiny-server ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8-systemctl/:0:0","tags":["docker","systemctl","systemd","Linux"],"title":"Docker 使用 systemctl","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8-systemctl/"},{"categories":["tools"],"content":"居家必备之 Docker 运维总结。 安装 Docker","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:0:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:1:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:2:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 安装 sudo yum install docker.io 或者使用国内 daocloud 一键安装命令： ## daocloud curl -sSL https://get.daocloud.io/docker | sh 搭建私有 DockerHub","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:3:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 建立 registry ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry ## 为了防止不小心删掉，我们将其挂载到 /data/Docker/registry 这个目录下 mkdir -p /data/Docker/registy docker run --name docker.registry \\ -d -p 5000:5000 \\ -v /data/Docker/registy:/tmp/registry \\ registry docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --permanent--add-port=5000/tcp firewall-cmd --reload ## 如果出现错误 ## -i docker0: iptables: no chain/target/match by that name. ## Ref:https://blog.csdn.net/xujiamin0022016/article/details/108124725 systemctl restart docker ## 测试访问 curl http://127.0.0.1:5000/v2/ ## 返回 {} 说明正常运行了 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:4:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 配置需要配置 daemon.json 允许访问本地使用 DockerHub sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"192.168.1.183:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } 这里需要注意需要重启 docker 服务 systemctl restart docker ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:5:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 测试 ## 查看当前有哪些 images docker image ls docker tag hello-world 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing ## 可以看一下是不是有这个 repo 了 curl http://192.168.1.183:5000/v2/_catalog 常用命令 编写 Dockerfile","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:6:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" Centos7.9可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 查看 centos https://hub.docker.com/_/centos?tab=tags\u0026page=1\u0026ordering=last_updated FROM centos:centos7.9.2009 MAINTAINER WuyaCapital LABEL Remarks=\"CentOS7.9 Develop\u0026Testing Environment @WuyaCapital\" RUN yum -y install \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ openssl-devel libcurl-devel RUN mkdir -p /shared/trading /data ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" EXPOSE 22 80 WORKDIR /home CMD /bin/bash 命令说明： CMD 指定容器启动时执行的命令，注意，和RUN的区别是：RUN是在打包过程中执行的命令。镜像中只能有一条CMD指令，如果有多个CMD指令，则以最后一条为准，所以我们可以覆盖基础镜像中定义的CMD指令。CMD指令支持三种格式： CMD [\"executable\", \"param1\", \"param2\"] 使用exec执行，这是使用CMD的首选方法 CMD command param1 param2 使用/bin/sh -c执行 CMD [\"param1\", \"param2\"] 提供给ENTRYPOINT的默认参数 注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。 ENTRYPOINT 容器启动入口，即容器启动后执行的命令，不会被CMD指令覆盖，如果存在ENTRYPOINT，那么CMD指令会充当ENTRYPOINT的参数。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:7:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 搭建 docker build -t wuya-centos7:v1.0 . docker image ls ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run --name mycentos7 --net=host -dit wuya-centos7:v1.0 ## 启动实例 docker exec -it mycentos7 /bin/bash 发布 Docker","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:8:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 打包一个容器 docker commit -a \"william\" -m \"wuya-centos7:v1.0\" [container_id] image_id:version 当然，也可以直接打包成一个压缩包 ## 打包 docker save wuya-centos7:v1.0 \u003e mycetnos7.tar ## 加载 docker load -i mycetnos7.tar 我们也可以选择发布到 Dockerhub docker tag wuya-centos7:v1.0 192.168.1.183:5000/wuya/centos7:v1.0 docker push 192.168.1.183:5000/wuya/centos7:v1.0 docker pull 192.168.1.183:5000/wuya/centos7:v1.0 curl http://192.168.1.183:5000/v2/_catalog curl http://192.168.1.183:5000/v2/wuya/centos7/tags/list 这样，我们可以建立一个新的容器了 ## 记得修改 vim /etc/docker/daemon.json docker pull 192.168.1.183:5000/wuya/centos7:v1.0 docker image ls docker run -dit --name testing 192.168.1.183:5000/wuya/centos7:v1.0 docker ps -a docker exec -it testing /bin/bash Q\u0026A","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:9:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" build 的时候无法使用 pip 直接安装程序 这个是因为 Docker 的 DNS 没有识别到，需要处理一下。 Ref:[Can’t install pip packages inside a docker container with Ubuntu](https://stackoverflow.com/questions/28668180/cant-install-pip-packages-inside-a-docker-container-with-ubuntu) ## 编辑 sudo vim /etc/default/docker ## 添加 DNS DOCKER_OPTS=\"--dns 8.8.8.8\" ## 重启 sudo systemctl restart docker ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:10:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 参考链接：https://github.com/rocker-org/rocker/issues/206 https://hub.docker.com/r/rocker/rstudio ## 新建 Docker docker run -d --name rstudio -v $HOME:/home/`whoami` -e USER=lfang -e PASSWORD=****** -p 58787:8787 rocker/tidyverse docker exec -it rstudio /bin/bash 用户：lfang 密码：****** 端口：58787 ## 添加用户，需要进入 docker 添加用户 docker exec -it rstudio /bin/bash sudo adduser tester sudo passwd tester ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E8%A1%8C-rstudio/:0:0","tags":["docker","rstudio"],"title":"Docker 运行 rstudio","uri":"/2022-11-23-docker-%E8%BF%90%E8%A1%8C-rstudio/"},{"categories":["tools"],"content":"通过 Docker 搭建一个可用的 openwrt ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:0:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":" 安装 ip addr sudo ip link set eno1 promisc on sudo docker network create -d macvlan --subnet=192.168.3.0/24 --gateway=192.168.3.1 -o parent=eno1 macnet docker network inspect macnet docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 sudo docker run -d --restart always --name openwrt --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init sudo docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' ## 必须是这个 option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.3.101' option gateway '192.168.3.1' option dns '192.168.3.1' option broadcast '192.168.3.255' config interface 'vpn0' option ifname 'tun0' option proto 'none' sudo docker restart openwrt 密码：password ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:1:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":" 宿主机与 Docker(openwrt) 无法通信 参考：在docker中运行openwrt #4 sudo ip link add link eno1 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.3.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ## 以下可能有错误 ======================= # #sudo ip route del default #删除默认路由 # sudo ip route add default via 192.168.3.105 dev hMACvLAN # 设置静态路由 # sudo echo \"nameserver 192.168.3.1\" \u003e /etc/resolv.conf # 设置静态 dns 服务器 # ping 192.168.3.105 # # 或者使用 nmcli # nmcli connection add type macvlan dev eno1 mode bridge ifname hMACvLAN autoconnect yes save yes docker import https://downloads.openwrt.org/releases/19.07.0/targets/x86/64/openwrt-19.07.0-x86-64-generic-rootfs.tar.gz openwrt:19.07.0 sudo docker run -d –restart unless-stopped –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 –name openwrt /sbin/init sudo docker run –restart always –name openwrt –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init 无法访问国内网址： dns 选择：pdnsd：208.67.222.222(Open DNS) https://github.com/coolsnowwolf/lede/issues/5520 关闭 “系统” -\u003e “启动项” -\u003e “19”(firewall 需要禁止) “网络” -\u003e “接口” -\u003e “防火墙” -\u003e “区域”(需要全部选择接受) 然后在\"自定义规则里面\"，填写 iptables -t nat -I POSTROUTING -j MASQUERADE 在 “服务” -\u003e “PassWall” -\u003e “模式” TCP默认模式： GFW 列表 UDP默认模式：GFW 列表 路由器TCP：GFW（这个GFW模式就可以） 路由器UDP：GFW（这个GFW模式就可以） 5.手机连接 a. IP 手动： IP地址：192.168.3.29（自己手机的固定IP） 子网掩码：255.255.255.0 路由器：192.168.3.101（需要和openwrt路由器一样） b. 配置DNS，需要先删除掉原来的 手动：192.168.3.101（需要和openwrt路由器一样） William-Ubuntu 安装 ip add ## 如果原来有网卡，需要删除掉 sudo ifconfig hMACvLAN down sudo ip link delete hMACvLAN sudo ip link set enp0s31f6 promisc on ## 如果有，需要删掉 docker network ls docker network rm macnet docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=enp0s31f6 macnet docker network inspect macnet docker run -d \\ --restart always \\ --name openwrt \\ --network macnet \\ --privileged \\ registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 \\ /sbin/init docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.1.101' ## docker ip，可以打开监控界面 option gateway '192.168.1.1' option dns '192.168.1.1' config interface 'vpn0' option ifname 'tun0' option proto 'none' docker restart openwrt ## 管理界面密码 密码：password sudo ip link add link enp0s31f6 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.1.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:2:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":"搭建企业内部使用的仓库。 安装 Docker Register ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry mkdir -p /data/Docker/registy docker run --name docker.registry -d -p 5000:5000 -v /data/Docker/registy:/tmp/registry --restart unless-stopped registry docker update --restart=always \u003ccontaier_id\u003e docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=5000/tcp --permanent firewall-cmd --reload ## 测试访问 curl http://192.168.1.135:5000/v2/ 使用 ## 测试 docker tag hello-world 192.168.1.135:5000/testing docker push 192.168.1.135:5000/testing ## 查看所有镜像 curl http://10.32.111.107:5000/v2/_catalog ## 查看镜像的所有tag curl http://10.32.111.107:5000/v2/william-centos7-gcc9/tags/list 远程如果出现报错 http: server gave HTTP response to HTTPS client 对于 CentOS 需要修改： vim /usr/lib/systemd/system/docker.service ## 添加 --insecure-registry 10.32.111.107:5000 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 10.32.111.107:5000 或者可以直接修改（如果是空的，需要创建） ## 编辑 /etc/docker/daemon.json ## 添加 \"insecure-registries\" 里面的 \"docker.williamlfang.com:58080\" sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"https://mirror.baidubce.com\", \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"docker.williamlfang.com:58080\", \"192.168.1.88:5000\", \"192.168.1.183:5000\", \"10.32.111.107:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } sudo systemctl restart docker ## 获取镜像 docker pull docker.williamlfang.com:58080/testing Using default tag: latest latest: Pulling from testing Digest: sha256:90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 Status: Downloaded newer image for docker.williamlfang.com:58080/testing:latest docker.williamlfang.com:58080/testing:latest 添加账户密码认证","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:0:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" 安装 htpasswd sudo yum install -y httpd-tools mkdir /etc/docker/auth htpasswd -Bbn tradeops passwd \u003e /etc/docker/auth/htpasswd ## 测试是否需要认证 curl http://192.168.1.88:5000/v2/ {\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"authentication required\",\"detail\":null}]} ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:1:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" login docker login -u tradeops 192.168.1.88:5000 docker logout 192.168.1.88:5000 ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:2:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" 添加 insecure { \"registry-mirrors\": [ \"http://hub-mirror.c.163.com\", \"https://docker.mirrors.ustc.edu.cn\", \"https://registry.docker-cn.com\" ], \"insecure-registries\" : [ \"192.168.1.162:5000\", \"10.32.111.107:5000\" ] } ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:3:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" airflow 处理 docker 问题 ## 需要在 airflow 执行 docker logout 192.168.1.88:5000 ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:4:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":"居家必备之 Docker 使用总结。 安装","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:0:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" UbuntuUbuntu 操作系统的安装步骤可以参考官网说明 卸载旧版本 sudo apt-get remove docker docker-engine docker.io containerd runc Reading package lists... Done Building dependency tree Reading state information... Done Package 'docker-engine' is not installed, so not removed Package 'docker' is not installed, so not removed Package 'containerd' is not installed, so not removed Package 'docker.io' is not installed, so not removed Package 'runc' is not installed, so not removed 0 upgraded, 0 newly installed, 0 to remove and 43 not upgraded. 添加软件源 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - echo $(lsb_release -cs) Linux Mint Releases Version Codename Package base 19.1 Tessa Ubuntu Bionic 19 Tara Ubuntu Bionic 18.3 Sylvia Ubuntu Xenial 18.2 Sonya Ubuntu Xenial # sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu Bionic stable\" 开始安装 sudo apt-get update sudo apt install docker.io 设置启动服务 sudo systemctl start docker ## 添加开机启动 sudo systemctl enable docker 查看 Docker 版本 docker --version Docker version 19.03.6, build 369ce74a3c Docker 后台服务需要具有 sudo 权限。为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。 ## 建立 docker 组 sudo groupadd docker ## 把当前用户添加到 docker 组 sudo usermod -aG docker $USER 然后先退出账户(logout)，再次登录(login)即可使用 docker 命令了 运行试试看 docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 0e03bdcc26d7: Pull complete Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 如果还有出现以下的报错，需要修改权限 WARNING: Error loading config file: /home/william/.docker/config.json: stat /home/william/.docker/config.json: permission denied sudo chown william:william /home/william/.docker -R 由于某些原因，国内访问 Docker 的软件源速度是比较慢的。幸好，我们可以更改指定的源，使用国内阿里云或者网易可以大大的加速访问速度。 ## 修改 docker 配置文件 sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\" ], \"debug\" : true, \"experimental\" : true } sudo systemctl restart docker.service ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" CentOS 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update 安装 sudo yum install docker.io 也可以使用国内 daocloud 一键安装命令： ## 阿里 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ## daocloud curl -sSL https://get.daocloud.io/docker | sh 加入 docker 用户组命令 sudo usermod -aG docker trader 添加启动 sudo systemctl enable docker sudo systemctl start docker 运行测试 sudo docker run hello-world 基础概念 编写 Dockerfile可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 FROM centos:7 MAINTAINER WilliamFang LABEL Remarks=\"CentOS7.5 Develop\u0026Testing Environment\" RUN yum -y install vim git sudo \u0026\u0026 yum -y install make \u0026\u0026 \\ yum -y install gcc gcc-c++ kernel-devel \u0026\u0026 \\ yum -y install cmake bzip2 htop tldr pigz pbzip2 \u0026\u0026 \\ yum -y install bzip2-devel.x86_64 \u0026\u0026 \\ yum -y install libxslt-devel libffi-devel openssl-devel libcurl-devel ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" 然后使用命令开始搭建 sudo docker build -t myctp:v1.0 . 然后就可以看到 docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE myctp v1.0 91b0c32f2935 2 minutes ago 564MB centos 7 b5b4d78bc90c 7 weeks ago 203MB 现在，我们就可以愉快的使用 Docker 进行测试了 ## 查看当前运行的 docker container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 说明当前还没有生成相应的实例。我们可以启动使用命令启动 ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run -dit -v /home/william:/mnt myctp:v1.0 /bin/bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2b40845d0309 myctp:v1.0 \"/bin/bash\" 4 seconds ago Up 3 seconds upbeat_montalcini docker run --name rshiny -dit -e USER=rshiny -e PASSWORD=ilovewuya -p 58787:8787 -p 53838:3838 wuya-centos7:v1.0 ## 添加用户，需要进入 docker 添加用户 docker exec -it rshiny /bin/bash sudo adduser tester sudo passwd tester 然后开始启动 ## 挂载到实例 docker exec -it b3c220b3c9c6 /bin/bash [root@b3c220b3c9c6 /]# whoami root [root@b3c220b3c9c6 /]# gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper Target: x86_64-redhat-linux Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux Thread model: posix gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) [root@b3c220b3c9c6 /]# 退出会依然可以看到程序在运行中 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b3c220b3c9c6 myctp:v1.0 \"/bin/bash\" 2 minutes ago Up 2 minutes gallant_bell ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 删除 ## 列出所有 docker ps -aq #＃ 删除指定 id docker rm ## 删除 image docker rmi 列出所有容器 ID docker ps -aq 查看所有运行或者不运行容器 docker ps -a 停止所有的 container（容器），这样才能够删除其中的 images： docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) 如果想要删除所有 container（容器）的话再加一个指令： docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) 查看当前有些什么 images docker images 删除 images（镜像），通过 image 的 id 来指定删除谁 docker rmi \u003cimage id\u003e 想要删除 untagged images，也就是那些 id 为的 image 的话可以用 docker rmi $(docker images | grep \"^\u003cnone\u003e\" | awk \"{print $3}\") 要删除全部 image（镜像）的话 docker rmi $(docker images -q) 强制删除全部 image 的话 docker rmi -f $(docker images -q) 从容器到宿主机复制 docker cp tomcat：/webapps/js/text.js /home/admin docker cp 容器名: 容器路径 宿主机路径 从宿主机到容器复制 docker cp /home/admin/text.js tomcat：/webapps/js docker cp 宿主路径中文件 容器名 容器路径 删除所有停止的容器 docker container prune 删除所有不使用的镜像 docker image prune --force --all或者docker image prune -f -a 停止、启动、杀死、重启一个容器 docker stop Name或者ID docker start Name或者ID docker kill Name或者ID docker restart name或者ID 发布 docker为了方便移植，Docker 允许我们通过两个方式来分享配置好的运行环境。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:3:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" Docker Hub通过使用 Docker Hub 来发布。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:4:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 提交 docker commit -a \"william\" -m \"myctp:v0.1\" -p myctp.new myctp:v0.1 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:5:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 导出 docker save -o myctp.v0.1.tar myctp:v0.1 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:6:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 导入 docker run -d --name myctp -it -v /home/william:/mnt myctp:v0.1 /bin/zsh ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:7:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 运行 docker exec -it myctp.new /bin/zsh ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:8:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 提交 Docker Hub docker login UserName: williamlfnag Password: ************ ## 标记需要处理的image docker tag myctp:v0.1.2 williamlfang/myctp REPOSITORY TAG IMAGE ID CREATED SIZE myctp v0.1.2 9c41f991a440 13 minutes ago 4.57GB williamlfang/myctp latest 9c41f991a440 13 minutes ago 4.57GB myctp v0.1.1 59c7bc923b02 3 days ago 4.02GB myctp v0.1 e8a31774a8c6 4 days ago 2.49GB centos 7 b5b4d78bc90c 8 weeks ago 203MB docker push williamlfang/myctp docker pull williamlfang/myctp 使用 williamlfang ## 显示当前可用镜像 docker image ls ## 如果没有 williamlfang/myctp docker pull williamlfang/myctp ## 再次确认已经下载到本地 docker image ls ## 基于此镜像生成 container docker run -d --name myctp.dockerhub -it williamlfang/myctp /bin/zsh ## 查看 docker 目前的所有 container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dcc7924f4c1a williamlfang/myctp \"/bin/zsh\" 4 seconds ago Up 3 seconds myctp.dockerhub c57d4de5205b f03a8c4cf617 \"/bin/zsh\" 12 days ago Exited (255) 4 minutes ago myctp b50399b23d5b myctp:v0.1 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.test 11953e12a6b5 e2c0099752c8 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.new ## 进入 container 操作 docker exec -it myctp.dockerhub /bin/zsh 以下就是进入我们的操作系统后的截图显示 ⚡ root@centos7  /  j myctp anaconda-post.log bin data dev etc home lib lib64 log media mnt opt proc root run sbin srv sys tmp usr var /root/myCTP build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src ⚡ root@centos7  myCTP  ll build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src total 64K drwxr-xr-x 11 root root 4.0K Jul 4 17:06 . dr-xr-x--- 1 root root 4.0K Jul 13 17:27 .. drwxr-xr-x 4 root root 4.0K Jul 4 16:59 build -rw-r--r-- 1 root root 5.6K Jul 4 16:51 CMakeLists.txt drwxr-xr-x 2 root root 4.0K Jul 4 16:37 config -rw-r--r-- 1 root root 5.0K Jul 4 16:37 CTP踩坑记.md drwx------ 3 root root 4.0K Jul 4 17:06 data drwxr-xr-x 5 root root 4.0K Jul 4 16:42 deps drwxr-xr-x 10 root root 4.0K Jul 4 16:37 include drwxr-xr-x 11 root root 4.0K Jul 4 16:59 libs drwx------ 4 root root 4.0K Jul 4 17:06 log drwxr-xr-x 2 root root 4.0K Jul 4 16:39 scripts drwxr-xr-x 10 root root 4.0K Jul 4 16:37 src 使用技巧可以执行变量名称 ## 增加额外运行参数 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_simnow \\ -v /home/william/mkdata:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 重新打 tag docker tag 8557026cb47e[原来的image id] registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 报错无法删除 ## Ref: https://stackoverflow.com/questions/38118791/can-t-delete-docker-image-with-dependent-child-images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker rmi c565603bc87f # 设置日志文件 docker tag 29db0d77705f registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker push registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker pull registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=colo_gtja \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_hf \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_zz \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker exec -it ctpmd /bin/bash ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:9:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":"由于在 Dockerfile 里面需要支持新的语法规则（experimental以支持 –mount=），我们需要同步更新 docker-compose 到 v2 版本。 wget \"https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-$(uname -s)-$(uname -m)\" sudo cp docker-compose-Linux-x86_64 /usr/local/bin/docker-compose Docker Compose version v2.1.1 ","date":"2022-11-23","objectID":"/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/:0:0","tags":["docker","docker-compose","ubuntu"],"title":"Ubuntu 更新 docker compose 2.1.1","uri":"/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/"},{"categories":["tools"],"content":"在 Dockerfile 使用 ssh 秘钥，可以访问相应权限的项目 ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:0:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Dockerfile # syntax=docker/dockerfile:experimental FROM william-centos7-gcc9:v1.0 MAINTAINER William LABEL Remarks=\"DataMgr @WuyaCapital\" # add credentials on build RUN mkdir -p -m 0700 ~/.ssh \u0026\u0026 \\ ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts # ADD ./requirements.txt /app/requirements.txt # RUN pip install -r requirements.txt RUN --mount=type=ssh \\ mkdir -p git \u0026\u0026 cd git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ echo `ls -alh` CMD [\"/usr/sbin/init\"] 这里需要注意： 在开头添加 # syntax=docker/dockerfile:experimental 在 RUN 命令后面添加 --mount=type=ssh ，之后是正常的 bash 命令语句 ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:1:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Docker 命令执行 DOCKER_BUILDKIT=1 docker build --ssh default -t 如果出现了以下的报错，先不要慌，可能是网络解析不通畅： =\u003e ERROR resolve image config for docker.io/docker/dockerfile:experimental 0.1s ------ \u003e resolve image config for docker.io/docker/dockerfile:experimental: ------ failed to solve with frontend dockerfile.v0: failed to solve with frontend gateway.v0: unexpected status code https://docker.mirrors.ustc.edu.cn/v2/docker/dockerfile/manifests/experimental: 403 Forbidden ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:2:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Docker-compose 执行","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:3:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" 结果查看 [+] Building 277.1s (10/12) =\u003e [internal] load build definition from Dockerfile 0.0s =\u003e =\u003e transferring dockerfile: 38B 0.0s =\u003e [internal] load .dockerignore 0.0s =\u003e =\u003e transferring context: 2B 0.0s =\u003e resolve image config for docker.io/docker/dockerfile:experimental 1.6s =\u003e CACHED docker-image://docker.io/docker/dockerfile:experimental@sha256:600e5c62eedff338b3f7a0850beb7c05866e0ef27b2d2e8c02aa468e78496ff5 0.0s =\u003e [internal] load build definition from Dockerfile 0.0s =\u003e =\u003e transferring dockerfile: 38B 0.0s =\u003e [internal] load metadata for docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e [1/5] FROM docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e =\u003e resolve docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e [internal] load build context 0.0s =\u003e =\u003e transferring context: 38B 0.0s =\u003e [2/5] RUN mkdir -p -m 0700 ~/.ssh \u0026\u0026 ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts 0.5s =\u003e [3/5] ADD ./requirements.txt /app/requirements.txt 0.1s =\u003e [4/5] RUN pip3 install -r requirements.txt ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:4:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":"使用 Dockerfile，从源代码开始搭建一个基本的 Docker Image，为其他应用提供基础服务。 ","date":"2022-11-22","objectID":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/:0:0","tags":["Docker","Dockerfile","image","container","部署","基础","数据","python","gcc"],"title":"制作一个基本Docker镜像","uri":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/"},{"categories":["tools"],"content":" Dockerfile FROM centos:centos7.9.2009 MAINTAINER William LABEL Remarks=\"CentOS7.9 Develop\u0026Testing Environment @WuyaCapital\" RUN yum update -y \u0026\u0026 yum install -y \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ bzip2 mlocate sqlite-devel \\ openssl-devel libcurl-devel chrony \\ wget dmidecode net-tools openssh-server perl-CPAN perl-IPC-Cmd RUN yum install -y kde-l10n-Chinese \u0026\u0026 \\ yum reinstall -y glibc-common \u0026\u0026 \\ localedef -c -f GB18030 -i zh_CN zh_CN.GB18030 \u0026\u0026 \\ updatedb RUN cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-2.18.tar.gz \u0026\u0026 \\ tar -xvf glibc-2.18.tar.gz \u0026\u0026 \\ cd glibc-2.18 \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* RUN cd /tmp \u0026\u0026 mkdir gcc9 \u0026\u0026 cd gcc9 \u0026\u0026 \\ wget --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz \u0026\u0026 \\ tar zxvf gcc-9.2.0.tar.gz \u0026\u0026 \\ cd gcc-9.2.0 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 \u0026\u0026 \\ tar jxvf gmp-6.1.0.tar.bz2 \u0026\u0026 \\ tar zxvf mpc-1.0.3.tar.gz \u0026\u0026 \\ tar jxvf mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ tar jxvf isl-0.18.tar.bz2 \u0026\u0026 \\ ln -s gmp-6.1.0 gmp \u0026\u0026 \\ ln -s mpfr-3.1.4 mpfr \u0026\u0026 \\ ln -s mpc-1.0.3 mpc \u0026\u0026 \\ ln -s isl-0.18 isl \u0026\u0026 \\ sudo ./configure --prefix=/usr/local/gcc9 --enable-bootstrap --enable-checking=release --enable-languages=c,c++ --disable-multilib \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ echo \"export PATH=/usr/local/gcc9/bin:$PATH\" \u003e\u003e /etc/profile.d/gcc.sh \u0026\u0026 \\ source /etc/profile.d/gcc.sh \u0026\u0026 \\ ln -sv /usr/local/gcc9/include/ /usr/include/gcc \u0026\u0026 \\ echo \"/usr/local/gcc9/lib64\" \u003e\u003e /etc/ld.so.conf.d/gcc.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ ldconfig -p |grep gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/g++ /usr/bin/g++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/gcc /usr/bin/gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/c++ /usr/bin/c++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/cc /usr/bin/cc \u0026\u0026 \\ rm -rf /tmp/gcc* RUN cd /tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/openssl/include/openssl /usr/include/openssl \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \u0026\u0026 \\ echo \"/usr/local/openssl/lib64\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/openssl* RUN cd /tmp \u0026\u0026 wget --no-check-certificate https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tar.xz \u0026\u0026 \\ tar -xvf Python-3.11.0.tar.xz \u0026\u0026 \\ cd Python-3.11.0 \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=/usr/local/python3 \\ --with-openssl=/usr/local/openssl \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \u0026\u0026 \\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \u0026\u0026 \\ python3 -m ssl \u0026\u0026 \\ rm -rf /tmp/Python* ENV TZ Asia/Shanghai RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone RUN mkdir -p /shared/trading /data ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" EXPOSE 22 80 WORKDIR /app CMD [\"/usr/sbin/init\"] ","date":"2022-11-22","objectID":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/:1:0","tags":["Docker","Dockerfile","image","container","部署","基础","数据","python","gcc"],"title":"制作一个基本Docker镜像","uri":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/"},{"categories":["tools"],"content":"从源代码开始编译、安装 Python3.11，由于从这个版本之后，Python 采用了 SSL 的加密方式，需要依赖 openssl-1.1.1。同时，如果我们开启了 --enable-optimization 优化选项，还需要依赖 gcc9 以上版本才能支持，否则会一直出现报错。 ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:0:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装依赖包 yum update -y \u0026\u0026 yum install -y \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ bzip2 mlocate sqlite-devel \\ zlib zlib-devel libffi-devel \\ openssl-devel libcurl-devel chrony \\ wget dmidecode net-tools openssh-server openssh-client perl-CPAN perl-IPC-Cmd \u0026\u0026 \\ yum clean all \u0026\u0026 \\ rm -rf /var/cache/yum/* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:1:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 glibc cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-2.18.tar.gz \u0026\u0026 \\ tar -xvf glibc-2.18.tar.gz \u0026\u0026 \\ cd glibc-2.18 \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr \\ --disable-profile \\ --enable-add-ons \\ --with-headers=/usr/include \\ --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:2:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 gcc9 cd /tmp \u0026\u0026 mkdir gcc9 \u0026\u0026 cd gcc9 \u0026\u0026 \\ wget --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz \u0026\u0026 \\ tar zxvf gcc-9.2.0.tar.gz \u0026\u0026 \\ cd gcc-9.2.0 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 \u0026\u0026 \\ tar jxvf gmp-6.1.0.tar.bz2 \u0026\u0026 \\ tar zxvf mpc-1.0.3.tar.gz \u0026\u0026 \\ tar jxvf mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ tar jxvf isl-0.18.tar.bz2 \u0026\u0026 \\ ln -s gmp-6.1.0 gmp \u0026\u0026 \\ ln -s mpfr-3.1.4 mpfr \u0026\u0026 \\ ln -s mpc-1.0.3 mpc \u0026\u0026 \\ ln -s isl-0.18 isl \u0026\u0026 \\ sudo ./configure --prefix=/usr/local/gcc9 \\ --enable-bootstrap \\ --enable-checking=release \\ --enable-languages=c,c++ \\ --disable-multilib \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ echo \"export PATH=/usr/local/gcc9/bin:$PATH\" \u003e\u003e /etc/profile.d/gcc.sh \u0026\u0026 \\ source /etc/profile.d/gcc.sh \u0026\u0026 \\ ln -sv /usr/local/gcc9/include/ /usr/include/gcc \u0026\u0026 \\ echo \"/usr/local/gcc9/lib64\" \u003e\u003e /etc/ld.so.conf.d/gcc.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ ldconfig -p |grep gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/g++ /usr/bin/g++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/gcc /usr/bin/gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/c++ /usr/bin/c++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/cc /usr/bin/cc \u0026\u0026 \\ rm -rf /tmp/gcc* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:3:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 openssl cd /tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/openssl/include/openssl /usr/include/openssl \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \u0026\u0026 \\ echo \"/usr/local/openssl/lib64\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/openssl* 这里需要注意： 指定了安装路径：``–prefix=/usr/local/openssl，这个在安装 Python` 的时候使用 ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:4:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 Python 3.11 export PYTHON_VERSION=3.11.1 cd /tmp \u0026\u0026 \\ # wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ wget --no-check-certificate https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ tar -xvf Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ cd Python-${PYTHON_VERSION} \u0026\u0026 \\ export LDFLAGS=-rdynamic \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure \\ --enable-shared \\ --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=/usr/local/python3 \\ --with-openssl=/usr/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \u0026\u0026\\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \u0026\u0026 \\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip \u0026\u0026 \\ echo \"export PATH=/usr/local/python3/bin:$PATH\" \u003e\u003e /etc/profile.d/python3.sh \u0026\u0026 \\ echo \"/usr/local/python3/lib\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ python3 -m ssl \u0026\u0026 \\ rm -rf /tmp/Python* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:5:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 如何搭建 Stock.Daily 数据Created: November 18, 2022 10:09 PM Last Edited Time: November 18, 2022 11:43 PM Type: Technical Spec 对于股票研究与交易，我们需要一份内容正确且规则统一的历史数据 ，尽可能的降低数据噪音，避免因为数据错误导致的谬误，提高实证研究的可靠性与准确性。 根据现有的数据，我们复原了2014年1月至今的股票日频数据（stock.daly），运用统一的规则，对历史数据与每日更新的实盘数据进行获取、清洗、转换、验证、入库。 本文档旨在介绍股票日盘数据库的整理规则与入库标准，以供参考。 数据概览","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:0:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据来源 历史数据（2014.01.01 ~ 2022.11.18） PreClose、OHLC、Volume、Turnover 来自交易所 上海：根据购买的交易所历史数据（Day.csv） 深圳：从深交所网站爬虫获取 UpperLimit、LowerLimit：来自 RiceQuant api 获取 每日更新数据（2022-11-18起） PreClose、UpperLimit、LowerLimit：来自交易柜台查询（xtp_info, xeleq_info） OHLC、Volume、Turnover 来自万得落地数据库（MySQL）、交易所网站爬虫 BeginDay、EndDay：爬虫交易所股票列表 TotalShare、FloatAShare：万得落地数据库（MySQL）、交易所网站爬虫 STStatus：根据股票名称是否包含 ST|退 判断，实盘数据来自交易柜台查询、历史数据来自网易财经 Net163Scraper ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:1:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 每日更新时间：18:30/19:30","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:2:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据库格式 CREATE TABLE stock.daily ( `TradingDay` Date, `Exchange` LowCardinality(String), `Category` Enum('X'=0,'FUTURES'=1,'STOCK'=2,'BOND'=3,'FUND'=4), `Product` Enum('X'=0,'STK'=1,'ETF'=2,'INDEX'=3), `Symbol` LowCardinality(String), `PreClose` Nullable(Float32), `Open` Nullable(Float32), `High` Nullable(Float32), `Low` Nullable(Float32), `Close` Float32, `UpperLimit` Nullable(Float32), `LowerLimit` Nullable(Float32), `Volume` Nullable(UInt64), `Amount` Nullable(Float64), `BeginDay` Nullable(Date), `EndDay` Nullable(Date), `STStatus` Enum('TRUE'=1,'FALSE'=0) DEFAULT 0, `TradeStatus` Enum('X'=0,'NEW'=1,'TRADING'=2,'SUSPENDED'=3), `TotalShare` Nullable(Float32), `FloatAShare` Nullable(Float32) ) ENGINE = MergeTree ORDER BY (TradingDay, Exchange, Symbol) SETTINGS index_granularity = 8192 ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:3:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 字段说明 Category 与 Product 用于区分不同交易市场 FUTURES：期货类 STOCK：证券类 STK INDEX BOND：债券类 FUND：基金类 ETF PreClose : 交易所除权除息后的昨收，可结合 LastClose 计算复权因子（AdjFactor） BeginDay : 股票上市日期 EndDay : 股票退市日期 STStatus : 股票是否出于 ST 状态（ST|S|*ST|SST|退市），每日根据股票名称是否包含ST或退来判断 TradeStatus : 当天的交易状态 NEW : 上市第一日 TRADING : 正常交易 SUSPENDED : 当日停牌 TotalShare : 总股本（万得对应：TOT_SHARE_TODAY） FloatAShare : 流通股（总股本减去限售股） ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:4:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据清洗规则 对于没有涨跌停的合约（上市前五日），统一设置涨跌停价格为 UPPER_LIMIT_PX_THRES = 999999.999 LOWER_LIMIT_PX_THRES = 0.001 df.fillna({'UpperLimit': self.UPPER_LIMIT_PX_THRES}, inplace = True) df.fillna({'LowerLimit': self.LOWER_LIMIT_PX_THRES}, inplace = True) df.loc[((df['days'] \u003c= 5) | (df.TradeStatus.isin(['NEW']))) \u0026 (df.UpperLimit \u003c= 0.01), 'UpperLimit'] = self.UPPER_LIMIT_PX_THRES df.loc[((df['days'] \u003c= 5) | (df.TradeStatus.isin(['NEW']))) \u0026 (df.LowerLimit \u003c= 0.01), 'LowerLimit'] = self.LOWER_LIMIT_PX_THRES 对于停牌的股票： 有可能拿不到当日的数据，这时候需要先把当日所有的合约补齐（TRADING + SUSPENDED） _day = cal.ymd(df.TradingDay.values[0]) sql = f\"\"\" select Exchange,Symbol, OnlistingDay, DelistingDay from bardata.listing where OnlistingDay \u003c= '{_day}' and DelistingDay \u003e '{_day}' \"\"\" df_listing = ch.read(sql) ## 先合成所有的上市合约 df = pd.merge(df, df_listing, on = 'Symbol', how = 'outer', suffixes = ['', '_listing']) 使用上一次有效交易日的收盘价作为当天的 OHLC，Volume = 0, Turnover = 0.0, UpperLimit = LowerLimit = PreClose ## 获取上一次有效交易日的数据 sql = f\"\"\" select stock.daily.* from stock.daily as a, (select Symbol, max(TradingDay) as LastDay from stock.daily where TradingDay \u003c '{_day}' and Volume \u003e 0 group by Symbol) as b where a.Symbol = b.Symbol and a.TradingDay = b.LastDay and BeginDay \u003c= '{_day}' and EndDay \u003e '{_day}' \"\"\" df_last = self.ch.read(sql) ## 然后使用上一次最后交易的数据来补充 df = pd.merge(df, df_last, on = 'Symbol', how = 'outer', suffixes = ['', '_last']) l = ['PreClose', 'Open', 'High', 'Low', 'Close', 'UpperLimit', 'LowerLimit', 'Volume', 'Amount', 'STStatus', 'TradeStatus', 'TotalShare', 'FloatAShare'] for col in l: if col in ['Volume', 'Amount']: val = 0 elif col in ['PreClose', 'Open', 'High', 'Low', 'Close', 'UpperLimit', 'LowerLimit']: val = df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col])) | (df.Volume \u003c= 0.0001)), \"Close_last\"] elif col in ['TradeStatus']: val = 'SUSPENDED' else: val = df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col])) | (df.Volume \u003c= 0.0001)), f\"{col}_last\"] df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col]) | (df.Volume \u003c= 0.0001))), col] = val 对于指数，统一设置： for col in ['Open', 'High', 'Low']: df.loc[(df.Product == 'INDEX') \u0026 (df[col] \u003c= 0.0001), col] = df.loc[(df.Product == 'INDEX') \u0026 (df[col] \u003c= 0.0001), 'Close'] for col in ['UpperLimit', 'LowerLimit', 'TotalShare', 'FloatAShare']: df.loc[df.Product == 'INDEX', col] = np.nan df.loc[df.Product == 'INDEX', 'TradeStatus'] = 'TRADING' df.loc[df.Product == 'INDEX', 'STStatus'] = False STStatue 规则： _day = cal.ymd(df.TradingDay.values[0])[:10] df_xtp = self.read_xtp_info(_day) df = pd.merge(df, df_xtp, left_on = ['Symbol'], right_on = ['Symbol'], how = 'left', suffixes = ['', '_xtp']) df['STStatus'] = df['TickerName'].apply( lambda x: True if re.search(r\"sT|St|st|ST|退|退市|^退\", str(x), re.IGNORECASE) else False ) 其他字段设置： df['Category'] = df[['Category', 'Symbol']].apply( lambda x: self.convert_category( x[0] if x[0] in self.CATEGORY_DICT else self.guess_category_from_symbol(x[1]) ), axis = 1) df['Product'] = df[['Product', 'Symbol']].apply( lambda x: self.convert_product( x[0] if not pd.isna(x[0]) else self.guess_product_from_symbol(x[1]) ), axis = 1) df['STStatus'] = df['STStatus'].apply(lambda x: 1 if x else 0) df['TradeStatus'] = df['TradeStatus'].apply(self.convert_tradestatus) ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:5:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 入库前检查规则 PreClose, Open, High, Low, Close, UpperLimit, LowerLimit, (Amount/Volume), 这几个应该是同一个数量级； TotalShare, FloatAShare, FreeShare, (NetAsset/Close) 应该是差不多是一个。 检查项目： 1. vwap vs close 2. turnover = Volume/FloatAShare \u003c 1.0， 3. lower_limit \u003c= px \u003c= upper_limit 4. pb \u003e 0.2(去掉负的 NetAsset) 5. 涨跌停幅度（去掉新股） 6. 关于 TotalShare vs TotalShareToday: 前面是全部股本,后面是当日股本,比如 TotalShare \u003c FloatAShare: --------------------------- TradingDay Symbol TotalShare FloatAShare 2020-10-19 603882.SH 457,884,577.000000 459,487,577.000000 7. 如果是 ST, 涨跌幅是 5% 可以再加两个检查， 1. 就是'STK'里TradeStatus不应该出现'X'(我这边现在就是用Suspen来判断股票不交易)。 2. 也可以检查一下每天，Volume=0, Amount=0和TradeStatus='Sus' 是不是同一批股票 对于index的检查(000016.SH, 000300.SH, 000905.SH, 000852.SH, 000985.CSI)暂时只需要检查这五个就行了。 1. 每天都有数据 2. PreClose, Open, High, Low, Close，Volume, Amount不能有NaN。UpperLimit, LowerLimit，Totalshare, FloatAshares强制是NaN. 历史数据 每日更新数据","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:6:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":[],"content":"ADSP(Algo + Data Structure = Programming) 是一个优秀的播客网站，经常邀请一些编程界的大佬的探讨技术性话题，截止目前（2022-10-20）已经录制正好100期节目了。 该网站同时还提供了音频下载，方便用户离线收听。不过对于懒人如我者（程序员福利），当然想着使用脚本来自动化下载了。话不多说，show the code。 import bs4 import re import requests import os from datetime import datetime links = [] for i in range(1,21): if i == 1: url = f\"https://adspthepodcast.com\" else: url = f\"https://adspthepodcast.com/blog/page{i}/\" rsp = requests.get(url) soup = bs4.BeautifulSoup(rsp.text, 'html.parser').find_all('a') links.extend([link.get('href') for link in soup if 'Episode' in link.get('href')]) for k in links: url = f\"https://adspthepodcast.com/{k}\" print(f\"{datetime.now()} processing url ==\u003e {url}\") rsp = requests.get(url) soup = bs4.BeautifulSoup(rsp.text, 'html.parser') ## 这里需要查看一下 soup 里面具体的格式 ## 发现 section 这个地方出现了下载链接 res = soup.find_all(name='section')[0].find('script').get('src') res = re.sub(r\".js\", r\".mp3\", res) ## 提取title # title = re.sub('.*(episode.*mp3).*', '\\\\1', res) title = '-'.join(res.split('?')[0].split('/')[-1].split('-')[1:]) filename = f'/home/william/Downloads/ADSP/{title}' if os.path.isfile(filename): continue mp3 = requests.get(res) with open(filename, 'wb') as f: f.write(mp3.content) print(f\"{datetime.now()} saved file ==\u003e {filename}\") ","date":"2022-10-22","objectID":"/2022-10-22-adsp-%E4%B8%8B%E8%BD%BDmp3/:0:0","tags":["ADSP","mp3","python"],"title":"ASDP 下载mp3","uri":"/2022-10-22-adsp-%E4%B8%8B%E8%BD%BDmp3/"},{"categories":["tools"],"content":"之前一直有遇到需要转换 bash 字符串大小写的问题。 exch=sh ## 大写 echo ${exch^^} exch=SH ## 小写 echo ${exch,,} ","date":"2022-09-23","objectID":"/2022-09-23-bash-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/:0:0","tags":["bash","大小写"],"title":"bash 大小写转换","uri":"/2022-09-23-bash-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/"},{"categories":["tools"],"content":"使用 VIm 打开 Ansi 颜色的文件。 ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:0:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":" 使用 vim.plug Plug 'powerman/vim-plugin-AnsiEsc' \"autocmd BufRead * AnsiEsc :AnsiEsc ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:1:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":" 直接安装 git clone https://github.com/powerman/vim-plugin-AnsiEsc.git cp -r vim-plugin-AnsiEsc ~/.vim vim -R +AnsiEsc # 或者 :AnsiEsc ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:2:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"In this document we discuss best practices for using EASTL. The primary emphasis is on performance with a secondary emphasis on correctness and maintainability. Some best practices apply only to some situations, and these will be pointed out as we go along. In order to be easily digestible, we present these practices as a list of items in the tone of the Effective C++ series of books. ","date":"2022-09-13","objectID":"/2022-09-13-eastl-best-practices/:0:0","tags":["c++"],"title":"eastl best practices","uri":"/2022-09-13-eastl-best-practices/"},{"categories":["tools"],"content":" set autochdir let NERDTreeChDirMode=2 nnoremap \u003cleader\u003en :NERDTree .\u003cCR\u003e so that NERDTree always opens in the current folder. With the 1st line, the working directory is always the one where the active buffer is located. With the 2nd line, I make sure the working directory is set correctly. With the 3rd line, I hit \u003cleader\u003en to open NERDTree. ","date":"2022-09-13","objectID":"/2022-09-13-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/:0:0","tags":["vim","nerdtree"],"title":"nerdtree 自动切换到当前目录","uri":"/2022-09-13-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/"},{"categories":["tools"],"content":"解决密码输入正确，但是依然报错的问题。 jupyter notebook list ## 生成配置文件，输入密码 ## 但是需要修改配置，否则会出现密码错误: Invalid credentials cd ~ jupyter notebook --generate-config jupyter-notebook password jupyter notebook --no-browser --port 58888 ## 要把把 passwor 和 token 都设置为空字符串 vim jupyter_notebook_config.py c.NotebookApp.password = u'' c.NotebookApp.token = '' c.NotebookApp.open_browser = False c.NotebookApp.ip = '0.0.0.0' c.NotebookApp.port = 58888 ","date":"2022-09-13","objectID":"/2022-09-13-jupyter-%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/:0:0","tags":["ipython","jupyter"],"title":"jupyter 输入密码错误","uri":"/2022-09-13-jupyter-%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/"},{"categories":["tools"],"content":"通过配置 ipython 以获得更好的编辑体验。 ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:0:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" prompt 设置","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:1:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 配置文件 ~/anaconda3/bin/ipython profile create [ProfileCreate] Generating default config file: '/home/william/.ipython/profile_default/ipython_config.py' [ProfileCreate] Generating default config file: '/home/william/.ipython/profile_default/ipython_kernel_config.py' cd ~/.ipython/profile_default/ vim ipython_config.py ## 修改颜色 ## Set the color scheme (NoColor, Neutral, Linux, or LightBG). # Choices: any of ['Neutral', 'NoColor', 'LightBG', 'Linux'] (case-insensitive) # Default: 'Neutral' # c.InteractiveShell.colors = 'Neutral' c.InteractiveShell.colors = 'NoColor' 或者启动的时候指定颜色方案 ~/anaconda3/bin/ipython --colors=NoColor 或者运行时设置 [1] %colors nocolor ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:1:1","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 定制配置在 ``~.ipython/profile_default/ipython_config.py` 添加 # ~/anaconda3/bin/ipython profile create # vim ~/.ipython/profile_default/ipython_config.py from IPython.terminal.prompts import Prompts, Token import os class MyPrompt(Prompts): def in_prompt_tokens(self, cli=None): # custom path = os.path.basename(os.getcwd()) user = os.environ['USER'] return [ (Token.Prompt, ''), (Token.PromptNum, f\"{path}❯ \"), (Token.Prompt, 'In ['), (Token.PromptNum, str(self.shell.execution_count)), (Token.Prompt, ']'), (Token.Prompt, ': '), ] ## ==================================================== c = get_config() c.TerminalInteractiveShell.prompts_class = MyPrompt c.InteractiveShell.colors = 'NoColor' c.TerminalIPythonApp.display_banner = False ## ==================================================== \"\"\" 如果需要运行时设置，可以使用以下命令 ip = get_ipython() ip.prompts = MyPrompt(ip) \"\"\" ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:2:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":[],"content":"RSS 提供了订阅式的信息获取机制，我们可以按照自己感兴趣的话题，订阅高质量的博客网站。对比于推送式（系统推荐），这能够拓展我们的信息边界，而不是陷入信息茧房。 RSS","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:0:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" Chrome 工具","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" RSS FinderRss Finder ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:1","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" slick-rssslick-rss ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:2","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" Thunderbird","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:2:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" RssHubRssHub ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 安装可以参考 官网教程 sudo yum install docker docker-compose sudo systemctl start docker wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml ## 配置 vim docker-compose.yml # 也可以是你喜欢的编辑器 docker volume create redis-data docker-compose up -d ## 访问 curl 127.0.0.1:1200 ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:1","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 设置阿里云访问 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=1200/tcp --permanent systemctl stop firewalld.service 然后需要在阿里云-【安全组】-选择开放 1200 端口访问。 接着设置阿里云域名解析 记录类型：A 主机记录：rss （.wuyacapital.com） 记录值：阿里IP（不带端口，需要通过nginx配置） ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:2","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 配置 nginx cd /etc/nginx vim nginx.conf ## 尽量在前面添加 ## 在 htpp {} 里面 server { listen 80; server_name rss.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:1200; } } systemctl restart nginx nginx -s reload 现在可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:3","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 添加 httpscertbot 常用的 RSS 资源 Chrome 工具RSS Finderslick-rssThunderbirdRssHub安装设置阿里云访问配置 nginx添加 https ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:4","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":["tools"],"content":"conflicts with clear screen #9 Since I misunderstood README and lost a bit of time figuring this out, I want to clarify what can be done to restore behavior. If you use tpm, put restoring bind after calling package manager: run '~/.tmux/plugins/tpm/tpm' bind-key -n C-l if-shell \"$is_vim\" \"send-keys C-l\" \"send-keys C-l\" (if you don’t use tpm - just do not put “bind-key -n C-l” line in config) Do this part of README in vimrc (also wo C-l line) let g:tmux_navigator_no_mappings = 1 nnoremap \u003csilent\u003e \u003cC-h\u003e :TmuxNavigateLeft\u003ccr\u003e nnoremap \u003csilent\u003e \u003cC-j\u003e :TmuxNavigateDown\u003ccr\u003e nnoremap \u003csilent\u003e \u003cC-k\u003e :TmuxNavigateUp\u003ccr\u003e ","date":"2022-09-13","objectID":"/2022-09-13-tmux-vim-%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-ctrl-l-%E6%B8%85%E5%B1%8F/:0:0","tags":["tmux","vim"],"title":"tmux vim 导致无法使用 ctrl l 清屏","uri":"/2022-09-13-tmux-vim-%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-ctrl-l-%E6%B8%85%E5%B1%8F/"},{"categories":["tools"],"content":"通过在 Linux 系统配置一个超级用户程序，获取 root 权限 c程序 一定要使用普通用户 // super.c // -------- #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e int main(void) { setuid(0); clearenv(); system(\"export PATH=/sbin:/bin:/usr/bin:/usr/local/bin:$PATH; export TERM=linux; /bin/bash\"); } 编译 一定要使用普通用户 gcc super.c -o super 这里可以试一下执行程序，发现依然是当前用户 [trader@localhost ~]$ ll total 16 -rwxrwxr-x 1 trader trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [trader@localhost trader]$ whoami trader 权限下面，我们来设置这个可执行程序的权限，使得其可以在普通用户的环境中，也是可以使用默认的 root 权限运行的。 使用 root 权限修改可执行程序： sudo chown root super sudo chmod ug+s super sudo chmod a+x super 如此一来，我们便可以通过执行 super 自动获取 root 权限了 [trader@localhost ~]$ ll total 16 -rwsrwsr-x 1 root trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [root@localhost trader]# whoami root [root@localhost trader]# mkdir -p /usr/test [root@localhost trader]# rm -rf /usr/test [root@localhost trader]# 添加用户到 sudoers sudo vim /etc/sudoers ## 多个命令用逗号分割 ## NOPASSWD 表示不用输入密码 ops ALL=(ALL) NOPASSWD:/usr/bin/bash ","date":"2022-09-13","objectID":"/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/:0:0","tags":["linux","c","root"],"title":"linux 设置超级用户程序","uri":"/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/"},{"categories":[],"content":"最近在写一个集合竞价的下单算法，里面用到了集合竞价逐笔行情、撮合可能的成交价格与数量、自己预计下单对市场的影响、在一个绑定CPU的时间线程判断临近集合竞价结束执行下单。感觉挺花心血，为了提高撮合的性能，连续两个周末在测试各个环节消耗的时间，优化相应的撮合算法，与小刘讨论如何减少尝试下单的次数等。然后在不同的情况下，使用 simu 进行系统的测试，得到正确且快速的结果。 本来心想着高高兴兴上实盘，结果遇到一个莫名其妙的 bug，两个几乎在同时启动的策略程序，在相同的时间里执行了下单，导致 gw 报单出现重复订单。整个事情看起来有点神奇，理论上应该两个程序是不能同时启动的，而是后面一个程序会先杀掉前面的程序。但是由于一些运维上面的原因，导致这个间歇时间有点长，后起的程序没有成功杀掉前面的程序。 今天的事情搞得心情有点不太好，甚至怀疑自己写的程序有点问题。后面也排除了这个原因。但是整个事情对自己的影响还是挺大的，有点想要辞职的冲动了。 最近团队在转型，人手又不够，自己得处理一堆非交易相关的事情，面对的券商又不是很给力，经常出错。可以说这段时间是非常艰难了，简直在浪费时间与生命。这跟自己原先想做交易的想法完全南辕北辙，相差甚远。 也许有了勇气，我会致辞的。现在做的不一定是自己想要的，中年人唯一的倔强，应该是勇敢一搏吧。 ","date":"2022-09-13","objectID":"/2022-09-13-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%97%A0%E5%8A%9B%E6%84%9F/:0:0","tags":[],"title":"第一次无力感","uri":"/2022-09-13-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%97%A0%E5%8A%9B%E6%84%9F/"},{"categories":["tools"],"content":"通过 nginx 实现端口转发 安装 nginx with stream ## 如果是从源代码安装，需要在编译时候配置 ./configure --prefix=/opt/apps/nginx --with-stream make \u0026\u0026 make install ## 或者直接用下面的命令安装 #执行下面的命令，根据提示完成安装 wget https://raw.githubusercontent.com/helloxz/nginx-cdn/master/nginx.sh \u0026\u0026 bash nginx.sh #安装完成后执行下面的命令让环境变量生效 source /etc/profile #执行下面的命令查看nginx信息 nginx -V ## 在版本 1.9 以上会出现 --with-stream，即可证明可以用 sshd 断隧道功能了 配置端口转发 cd /etc/nginx vim nginx.conf ## stream 是与 http 通级别的 #... ... #... ... events { use epoll; worker_connections 65535; } #stream配置 stream { #将12345端口转发到192.168.1.23的3306端口 server { listen 12345; proxy_connect_timeout 1h; proxy_timeout 1h; proxy_pass 192.168.1.23:3306; } #将tcp 1022端口转发到192.168.1.23 22端口 server { listen 1022 reuseport; proxy_timeout 1h; proxy_pass 192.168.1.23:22; } #将udp 53端口转发到192.168.1.23 53端口 server { listen 53 udp reuseport; proxy_timeout 1h; proxy_pass 192.168.1.23:53; } #ipv4转发到ipv6 server { listen 9135; proxy_connect_timeout 10s; proxy_timeout 30s; proxy_pass [2607:fcd0:107:3cc::1]:9135; } } http { #... ... #... ... } listen：后面填写源端口（也就是当前服务器端口），默认协议为TCP，可以指定为UDP协议 proxy_connect_timeout：连接超时时间 proxy_timeout：超时时间 proxy_pass：填写转发目标的IP及端口号 这样，我们可以访问 nginx 所在网络的指定端口，去访问目标机器 nginx -s reload ssh -p 1022 user@127.0.0.1 ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E5%AE%9E%E7%8E%B0-sshd-%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/:0:0","tags":["ngix","sshd","端口转发"],"title":"nginx 实现 sshd 的端口转发功能","uri":"/2022-09-13-nginx-%E5%AE%9E%E7%8E%B0-sshd-%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":"通过配置，运行直接在浏览器访问网站二级域名，实现对指定端口的服务程序的访问。 ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:0:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 服务程序假设我们有一项服务程序，如 RssHub 可以参考 官网教程 sudo yum install docker docker-compose sudo systemctl start docker wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml ## 配置 vim docker-compose.yml # 也可以是你喜欢的编辑器 docker volume create redis-data docker-compose up -d ## 访问 curl 127.0.0.1:1200 为了可以通过访问阿里云的二级域名，即在浏览器直接打开可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:1:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 设置阿里云访问 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=1200/tcp --permanent systemctl stop firewalld.service 然后需要在阿里云-【安全组】-选择开放 1200 端口访问。 接着设置阿里云域名解析 记录类型：A 主机记录：rss （.wuyacapital.com） 记录值：阿里IP（不带端口，需要通过nginx配置） ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:2:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 配置 nginx cd /etc/nginx vim nginx.conf ## 尽量在前面添加 ## 在 htpp {} 里面 server { listen 80; server_name rss.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:1200; } } systemctl restart nginx nginx -s reload 在 http{} 里面增加一个 server 配置 server_name 指定阿里云二级域名：rss.wuyacapital.com 在location 填写指定代理转发的服务程序端口 1200：proxy_pass http://127.0.0.1:1200 现在可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:3:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 添加 httpscertbot ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:4:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":"使用 v2ray 实现江湖失传已久的轻功。 安装 v2ray 服务器 bash \u003c(curl -s -L https://git.io/v2ray.sh) 可以顺便给 vps 测速 ## superspeed bash \u003c(curl -Lso- https://git.io/superspeed) ————————————————————————SuperSpeed 全面测速版————————————————————————— 使用方法: bash \u003c(curl -Lso- https://git.io/superspeed) 查看全部节点: https://git.io/superspeedList 节点更新日期: 2019/12/23 脚本更新日期: 2020/03/09 —————————————————————————————————————————————————————————————————————— 选择测速类型: 1. 三网测速 (各取部分节点) 2. 取消本次测速 3. 电信节点测速 4. 联通节点测速 5. 移动节点测速 请输入数字选择: 1 —————————————————————————————————————————————————————————————————————— ID 测速服务器信息 上传速度 下载速度 延迟 3633 电信|上海　128.98 Mbit/s 384.05 Mbit/s 160.994 ms 24012 电信|内蒙古呼和浩特　66.38 Mbit/s 49.28 Mbit/s 198.881 ms 27377 电信|北京５Ｇ　116.61 Mbit/s 321.02 Mbit/s 161.536 ms 17145 电信|安徽安徽合肥　124.96 Mbit/s 373.35 Mbit/s 144.317 ms 27594 电信|广东广州５Ｇ　4.84 Mbit/s 23.16 Mbit/s 197.118 ms 27810 电信|广西南宁　60.62 Mbit/s 119.87 Mbit/s 172.267 ms 27575 电信|新疆乌鲁木齐　71.01 Mbit/s 147.04 Mbit/s 206.973 ms 26352 电信|江苏南京５Ｇ　141.18 Mbit/s 365.73 Mbit/s 138.398 ms 5396 电信|江苏苏州　141.03 Mbit/s 335.99 Mbit/s 138.572 ms 7509 电信|浙江杭州　112.69 Mbit/s 63.09 Mbit/s 210.463 ms 28225 电信|湖南长沙　98.16 Mbit/s 135.78 Mbit/s 188.638 ms 3973 电信|甘肃兰州　65.89 Mbit/s 30.87 Mbit/s 181.112 ms 19076 电信|重庆　55.81 Mbit/s 111.58 Mbit/s 252.101 ms 24447 联通|上海５Ｇ　117.29 Mbit/s 107.46 Mbit/s 187.886 ms 5103 联通|云南昆明　18.49 Mbit/s 7.01 Mbit/s 341.216 ms 5145 联通|北京　114.97 Mbit/s 278.81 Mbit/s 160.176 ms 9484 联通|吉林长春　111.22 Mbit/s 273.19 Mbit/s 174.654 ms 2461 联通|四川成都　78.93 Mbit/s 190.73 Mbit/s 201.194 ms 27154 联通|天津５Ｇ　129.92 Mbit/s 342.59 Mbit/s 155.246 ms —————————————————————————————————————————————————————————————————————— 测试完成, 本次测速耗时: 7 分 52 秒 当前时间: 2020-03-18 18:02:46 # 三网测速中为避免节点数不均及测试过久，每部分未使用所有节点， # 如果需要使用全部节点，可分别选择三网节点检测。 # Superspeed.sh wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh chmod +x superspeed.sh ./superspeed.sh ## SuperBench.sh ## 一键检测VPS的CPU、内存、负载、IO读写、机房带宽等脚本 wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash #或者 curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash ## Zench ## Zench可以看作是Bench.sh 和 SuperBench的结合版本，加入 Ping 以及 路由测试 功能，会生成测评报告，可以很方便地分享给其他朋友看自己的测评数据 wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh \u0026\u0026 bash ZBench-CN.sh # 项目：https://github.com/FunctionClub/ZBench -------------------------------------------------------------------------- CPU 型号 : QEMU Virtual CPU version (cpu64-rhel6) CPU 核心数 : 2 CPU 频率 : 2699.998 MHz 总硬盘大小 : 20.4 GB (2.6 GB Used) 总内存大小 : 1007 MB (240 MB Used) SWAP大小 : 259 MB (3 MB Used) 开机时长 : 0 days, 3 hour 42 min 系统负载 : 1.78, 0.57, 0.20 系统 : CentOS 7.7.1908 架构 : x86_64 (64 Bit) 内核 : 4.10.4-1.el7.elrepo.x86_64 虚拟化平台 : kvm -------------------------------------------------------------------------- 硬盘I/O (第一次测试) : 389 MB/s 硬盘I/O (第二次测试) : 622 MB/s 硬盘I/O (第三次测试) : 568 MB/s -------------------------------------------------------------------------- 节点名称 IP地址 下载速度 延迟 CacheFly 205.234.175.175 112MB/s 0.433 ms ping: speedtest.tokyo.linode.com: Name or service not known Usage: ping [-aAbBdDfhLnOqrRUvV64] [-c count] [-i interval] [-I interface] [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] [hop1 ...] destination Usage: ping -6 [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-p pattern] [-Q tclass] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] destination Linode, Tokyo, JP ms Linode, Singapore, SG 139.162.23.4 12.1MB/s 180.628 ms Linode, London, UK 176.58.107.39 17.6MB/s 135.277 ms Linode, Frankfurt, DE 139.162.130.8 15.5MB/s 144.360 ms Linode, Fremont, CA 50.116.14.9 58.2MB/s 10.185 ms Softlayer, Dallas, TX 173.192.68.18 54.2MB/s 32.237 ms Softlayer, Seattle, WA 67.228.112.250 62.5MB/s 26.613 ms Softlayer, Frankfurt, D","date":"2022-09-13","objectID":"/2022-09-13-v2ray%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:0","tags":["v2ray"],"title":"v2ray配置教程","uri":"/2022-09-13-v2ray%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["tools"],"content":"重新学习 git。 安装 配置:configgit 要求给出开发人员的基本信息： 名字 邮件 这是为了更好的最终文件修改人。这个配置可以是全局、或者单独针对某个项目。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:0:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" global git config --global user.name \"william\" git config --global user.email \"william.x.x@gmail.com\" 使用","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:1:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 新建空项目:init mkdri testing cd testing git init Initialized empty Git repository in /tmp/testing/.git/ ls -alh ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:2:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 添加文件:add git add readme.md git add install.sh ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:3:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 提交修改:commit git commit -m \"init project and add readme\" [master (root-commit) f78741f] init project and add readme 2 files changed, 2 insertions(+) create mode 100644 install.sh create mode 100644 readme.md ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:4:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看当前状态:status echo \"hello, world\" \u003e\u003e readme.md echo \"this is new line\" \u003e\u003e readme.md git status On branch master Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: readme.md no changes added to commit (use \"git add\" and/or \"git commit -a\") ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:5:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看不同:diff git diff readme.md diff --git a/readme.md b/readme.md index 63173a9..cea5572 100644 --- a/readme.md +++ b/readme.md @@ -1 +1,3 @@ # git testing +hello, world +this is new line ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:6:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看日志:loggit 处理的是每一次修改的快照(snapshot)，为每一次的修改生成一次 log 条目，用于查看该次修改的日志说明。 git log commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:7:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 回滚:resetHEAD 表示当前版本号，可以使用 HEAD^ 返回上一个版本，或者 HEAD~n 返回之前n个版本 ## 上一个版本，也可以用 HEAD~n，其中n表示之前多少个log git reset --hard HEAD^ HEAD is now at f78741f init project and add readme git log commit f78741f31fe3f5600a8c003aa456744668a09da2 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 当然，如果我们想恢复之前的第二个修改，在上面的 git log 我们知道这个版本的修改 commit id commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme 所以我们还是可以在不同的 commit id 来回跳转的 ## 一般写前面几位就可以了，不需要整个 id #git reset --hard 3a0003085047a83783a7fff67b3904ccd2154ff0 git reset --hard 3a0003 commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 我们看到，当前的版本又重新回到的最近的修改了。Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git 仅仅是把 HEAD 从指向对应的 commit id。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:8:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 重看log:reflog像上面那样，如果我们 reset 了 HEAD，结果把屏幕清除了，导致我们记不起之前的 commit id。该怎么办呢？其实 git 提供了对每次修改的记录查新，可以很方便的看到每次操作的历史记录 git reflog 3a00030 (HEAD -\u003e master) HEAD@{0}: reset: moving to 3a0003 f78741f HEAD@{1}: reset: moving to HEAD^ 3a00030 (HEAD -\u003e master) HEAD@{2}: commit: modify readme f78741f HEAD@{3}: commit (initial): init project and add readme 从上面的记录我们看到，reset: moving to HEAD^ 是我们把 HEAD 往前回滚了一次，到了 f78741f ，这时候 3a00030 就是后面一条最新的版本，所以还是可以回滚到这个版本的 git reset --hard 3a0003 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:9:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 撤销修改:checkout有时候，我们对于修改的文件，想要丢弃，恢复到原先的状态。这时候可以使用 checkout ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 在工作区未提交如果我们的修改只是在工作区，则可以直接丢弃修改即可 git status . On branch master nothing to commit, working tree clean echo \"add extra line\" \u003e\u003e readme.md git status . On branch master Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: readme.md no changes added to commit (use \"git add\" and/or \"git commit -a\") 从上面我们看出来，当前工作区有一个 modified 没有提交到缓存区 Changes not staged for commit。如果我们想放弃本次修改，可以直接使用命令 checkout git checkout readme.md git status On branch master nothing to commit, working tree clean 可以看到，本次修改已经被丢弃，当前分支是干净的。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:1","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 已经 add 到缓存区如果修改已经提交到了缓存区，我们可以用 reset HEAD filename 将缓存区(stage)退回到与当前分支一样的状态(HEAD)，然后在用 checkout 丢弃修改 echo \"add extra line\" \u003e\u003e readme.md git add readme.md git status . On branch master Changes to be committed: (use \"git reset HEAD \u003cfile\u003e...\" to unstage) modified: readme.md 看到上面的已经被 add 到了缓存区。那么，我们可以用 reset HEAD \u003cfile\u003e 命令将其从缓存区放弃 ## 先将其从缓存区放弃 git reset HEAD readme.md ## 然后在从工作区放弃 git checkout readme.md ## 现在查看状态已经是干净的了 git status On branch master nothing to commit, working tree clean ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:2","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 已经 commit 到分支对于已经提交到分支的修改，我们可以用 reset commit_id 退回到上一个版本（这个 commit_id 指的是上一个版本号）。 echo \"add extra line3\" \u003e\u003e readme.md git add readme.md git commit -m \"add extra line3 into readme\" git log commit 18529d695e8e4ce797f7878135369a11ef658549 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 11:07:35 2022 +0800 add extra line3 in readme commit 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 10:54:59 2022 +0800 add extra line in readme commit 3a0003085047a83783a7fff67b3904ccd2154ff0 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 我们发现本次修改已经在当前分支了，log 已经能查询本次修改。那么，我们可以退回上一次的修改，commit_id 对应是 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e git reset --hard 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e git log commit 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 10:54:59 2022 +0800 add extra line in readme commit 3a0003085047a83783a7fff67b3904ccd2154ff0 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 现在已经没有 line3 的修改记录了。 如果没有添加 –hard 这表示本次修改依然保留在工作区 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:3","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":[],"content":"在 C++ std::thread 创建的时候，绑定 cpu 核。 //先申明一个 thread std::thread _thr; #define FOR_EACH_ALGO(FUNC) \\ for (auto\u0026 e : _symbols) \\ { \\ auto single_eng = e.second.get(); \\ for (auto\u0026 exec : single_eng-\u003ealgos()) \\ { \\ auto algo = reinterpret_cast\u003cexec_algo_cv_alpha_t*\u003e(exec); \\ algo-\u003eFUNC(_ac); \\ } \\ } std::thread( [this]() { const auto\u0026 cfg = _shell-\u003econf(); if (cfg.has(\"auction_cpu\")) { int cpuid = std::stoi(cfg(\"auction_cpu\")); cpu_set_t cpuset; CPU_ZERO(\u0026cpuset); CPU_SET(cpuid, \u0026cpuset); int rtn = pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), \u0026cpuset); if (rtn != 0) L_err(\"fail to call pthread_setaffinity_np, error rtn:\", rtn); else L_inf(\"succ to call pthread_setaffinity_np\"); DBG({ print_cpu_affinity(cpuid); }) } while (true) { _ac.ntime = to_ntime(microtime().now().count()); if (_ac.ntime \u003e _ac.end_ntime + 10) { FOR_EACH_ALGO(on_auction_deactivate) break; } if (_ac.ntime \u003e= _ac.insert_ntime \u0026\u0026 _ac.ntime \u003c= _ac.end_ntime \u0026\u0026 !_ac.is_triggered) { _ac.is_triggered = true; FOR_EACH_ALGO(on_auction_activate) } std::this_thread::sleep_for(std::chrono::microseconds(10)); } L_inf(\"end of engine thread, ntime:\", _ac.ntime); }).swap(_thr); // 从主线程分离 _thr.detach(); // 在析构停止 if (_thr.joinable()) _thr.join(); 有一个小工具可以查看是否绑核成功 void print_cpu_affinity(int coreid) { cpu_set_t mask; long nproc; if (::sched_getaffinity(0, sizeof(cpu_set_t), \u0026mask) == -1) { L_inf(\"fail to sched_getaffinity:\", coreid); } nproc = sysconf(_SC_NPROCESSORS_ONLN); if (coreid \u003c 0) { for (int i = 0; i \u003c nproc; i++) L_inf(\"cpu afffinity core:\", i, \", is_set:\", CPU_ISSET(i, \u0026mask)); } else { L_inf(\"cpu afffinity core:\", coreid, \", is_set:\", CPU_ISSET(coreid, \u0026mask)); } } ","date":"2022-09-13","objectID":"/2022-09-13-c-thread-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%97%B6%E7%BB%91%E6%A0%B8/:0:0","tags":["c++","thread","pthread"],"title":"c++ thread 线程创建时绑核","uri":"/2022-09-13-c-thread-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%97%B6%E7%BB%91%E6%A0%B8/"},{"categories":["tools"],"content":" mkdir -p ~/Downloads/docky cd ~/Downloads/docky wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-sharp2/libgconf2.0-cil_2.24.2-4_all.deb wget -c http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1_amd64.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring-common_3.12.0-1build1_all.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring0_3.12.0-1build1_amd64.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-keyring-sharp/libgnome-keyring1.0-cil_1.0.0-5_amd64.deb sudo apt-get install ./*.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/d/docky/docky_2.2.1.1-1_all.deb sudo apt-get install ./docky_2.2.1.1-1_all.deb ","date":"2022-09-13","objectID":"/2022-09-13-ubuntu20-%E5%AE%89%E8%A3%85-docky/:0:0","tags":["ubuntu","docky"],"title":"ubuntu20 安装 docky","uri":"/2022-09-13-ubuntu20-%E5%AE%89%E8%A3%85-docky/"},{"categories":["tools"],"content":"Ubuntu 可以 ping 别人，无法从外面 ping 自己。需要修改网络设置。 cd /etc/netplan vim 1-network-manager-all.yaml # Let NetworkManager manage all devices on this system network: version: 2 renderer: NetworkManager ethernets: enp0s31f6: dhcp4: no addresses: [192.168.1.88/24] gateway4: 192.168.1.1 nameservers: addresses: [114.114.114.114] sudo netplan apply ","date":"2022-09-13","objectID":"/2022-09-13-ubuntu-%E5%8F%AF%E4%BB%A5-ping-%E5%88%AB%E4%BA%BA%E6%97%A0%E6%B3%95%E4%BB%8E%E5%A4%96%E9%9D%A2-ping-%E8%87%AA%E5%B7%B1/:0:0","tags":["ubuntu","ping","network","网络"],"title":"ubuntu 可以 ping 别人,无法从外面 ping 自己","uri":"/2022-09-13-ubuntu-%E5%8F%AF%E4%BB%A5-ping-%E5%88%AB%E4%BA%BA%E6%97%A0%E6%B3%95%E4%BB%8E%E5%A4%96%E9%9D%A2-ping-%E8%87%AA%E5%B7%B1/"},{"categories":["tools"],"content":" —– BEGIN LICENSE —– Mifeng User Single User License EA7E-1184812 C0DAA9CD 6BE825B5 FF935692 1750523A EDF59D3F A3BD6C96 F8D33866 3F1CCCEA 1C25BE4D 25B1C4CC 5110C20E 5246CC42 D232C83B C99CCC42 0E32890C B6CBF018 B1D4C178 2F9DDB16 ABAA74E5 95304BEF 9D0CCFA9 8AF8F8E2 1E0A955E 4771A576 50737C65 325B6C32 817DCB83 A7394DFA 27B7E747 736A1198 B3865734 0B434AA5 —— END LICENSE —— ","date":"2022-09-13","objectID":"/2022-09-13-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/:0:0","tags":["subl","sublime"],"title":"Sublime4 注册码","uri":"/2022-09-13-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"categories":[],"content":"把 git 改成 ssh，这样可以直接 push，而不需要输入账户和密码。 git remote set-url origin git@github.com:williamlfang/williamlfang.github.io.git ","date":"2022-09-13","objectID":"/2022-09-13-git-%E4%BF%AE%E6%94%B9-https-%E4%B8%BA-ssh/:0:0","tags":["git","ssh","https"],"title":"git 修改 https 为 ssh","uri":"/2022-09-13-git-%E4%BF%AE%E6%94%B9-https-%E4%B8%BA-ssh/"},{"categories":["tools"],"content":"在 Ubuntu 机器连接远程 Windows 虚拟机 ","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:0:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":" 安装 FreeRDP sudo apt-get install -y freerdp2-x11 xfreerdp --help FreeRDP - A Free Remote Desktop Protocol Implementation See www.freerdp.com for more information Usage: xfreerdp [file] [options] [/v:\u003cserver\u003e[:port]] Syntax: /flag (enables flag) /option:\u003cvalue\u003e (specifies option with value) +toggle -toggle (enables or disables toggle, where '/' is a synonym of '+') /a:\u003caddin\u003e[,\u003coptions\u003e] Addin /action-script:\u003cfile-name\u003e Action script /admin Admin (or console) session +aero Enable desktop composition /app:\u003cpath\u003e or ||\u003calias\u003e Remote application program /app-cmd:\u003cparameters\u003e Remote application command-line parameters /app-file:\u003cfile-name\u003e File to open with remote application /app-guid:\u003capp-guid\u003e Remote application GUID /app-icon:\u003cicon-path\u003e Remote application icon for user interface /app-name:\u003capp-name\u003e Remote application name for user interface /app-workdir:\u003cworkspace path\u003e Remote application workspace path /assistance:\u003cpassword\u003e Remote assistance password /auto-request-control Automatically request remote assistance input control +async-channels Enable Asynchronous channels (experimental) +async-input Enable Asynchronous input +async-update Enable Asynchronous update /audio-mode:\u003cmode\u003e Audio output mode +auth-only Enable Authenticate only -authentication Disable Authentication (experimental) +auto-reconnect Enable Automatic reconnection /auto-reconnect-max-retries:\u003cretries\u003e Automatic reconnection maximum retries, 0 for unlimited [0,1000] +bitmap-cache Enable bitmap cache /bpp:\u003cdepth\u003e Session bpp (color depth) /buildconfig Print the build configuration /cert:[deny,ignore,name:\u003cname\u003e,tofu,fingerprint:\u003chash\u003e:\u003chash as hex\u003e [,fingerprint:\u003chash\u003e:\u003canother hash\u003e]] Certificate accept options. Use with care! * deny ... Automatically abort connection if the certificate does not match, no user interaction. * ignore ... Ignore the certificate checks altogether (overrules all other options) * name ... Use the alternate \u003cname\u003e instead of the certificate subject to match locally stored certificates * tofu ... Accept certificate unconditionally on first connect and deny on subsequent connections if the certificate does not match * fingerprints ... A list of certificate hashes that are accepted unconditionally for a connection /cert-deny [deprecated, use /cert:deny] Automatically abort connection for any certificate that can not be validated. /cert-ignore [deprecated, use /cert:ignore] Ignore certificate /cert-name:\u003cname\u003e [deprecated, use /cert:name:\u003cname\u003e] Certificate name /cert-tofu [deprecated, use /cert:tofu] Automatically accept certificate on first connect /client-build-number:\u003cnumber\u003e Client Build Number sent to server (influences smartcard behaviour, see [MS-RDPESC]) /client-hostname:\u003cname\u003e Client Hostname to send to server -clipboard Disable Redirect clipboard /codec-cache:[rfx|nsc|jpeg] Bitmap codec cache -compression Disable compression /compression-level:\u003clevel\u003e Compression level (0,1,2) +credentials-delegation Enable credentials delegation /d:\u003cdomain\u003e Domain -decorations Disable Window decorations /disp Display control /drive:\u003cname\u003e,\u003cpath\u003e Redirect directory \u003cpath\u003e as named share \u003cname\u003e. Hotplug support is enabled with /drive:hotplug,*. This argument provides the same function as \"Drives that I plug in later\" option in MSTSC. +drives Enable Redirect all mount points as shares /dvc:\u003cchannel\u003e[,\u003coptions\u003e] Dynamic virtual channel /dynamic-resolution Send resolution updates when the window is resized /echo Echo channel -encryption Disable Encryption (experimental) /encryption-methods:[40,][56,][128,][FIPS] RDP standard security encryption methods /f Fullscreen mode (\u003cCtrl\u003e+\u003cAlt\u003e+\u003cEnter\u003e toggles fullscreen) -fast-path Disable fast-path input/output +fipsmode Enable FIPS mode /floatbar[:sticky:[on|off],default:[visible|hidden],show: [always|fullscreen||window]] floatbar is disabled by default (when enabled defaults to sticky in fullscreen mode) -fonts Disable smooth fonts (ClearType) /frame-ack:\u003cnumber\u003e Number of frame acknowledgement /from","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:1:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":" 使用 xfreerdp /w:1920 /h:1080 /u:\"Administrator\" /p:xxxxxxxxx /v:10.32.233.100:3389 ","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:2:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":"对于非 git 的 ops 用户，如果需要 clone 一个项目，我们可以通过添加 Deploy Keys 来开放权限。 ","date":"2022-09-10","objectID":"/2022-09-10-git-%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/:0:0","tags":["git","ops","运维"],"title":"git 添加非用户权限","uri":"/2022-09-10-git-%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"},{"categories":["tools"],"content":"记录一下那些年里，我追随的博客们。 ","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:0:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" CS and Programming","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:1:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Linux","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:2:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" C++","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:3:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Python","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:4:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" R","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:5:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Stat","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:6:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Financial","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:7:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" 其他","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:8:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":"上交所提供了证券、可转债、ETF 等多个交易品种。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:0:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 上交所技术公司上交所技术公司（上证所信息网络有限公司）是上交所旗下的技术开发公司，负责上交所技术开发、提供开发文档等。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:1:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 技术文档可以通过[产品服务] -\u003e [业务文档]找到页面，查找相关的接口说明书。 可转债技术参考：[上海证券交易所 LDDS 系统债券 Level-2 行情接口说明书](上海证券交易所 LDDS 系统债券 Level-2 行情接口说明书) 上海可转债推送的逐笔委托自2021年12月1日日变更为原始订单数据，而不是之前的撮合完成后剩余的订单数据。比如，一个市价单，按照原来的方式，是直接完成了撮合，不再推送该逐笔委托；而在新转债行情系统，则会先推送逐笔委托，然后再推送逐笔成交。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:1:1","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 上交所交易规则","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:2:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 市价单参考：沪深交易所市价单。 上交所市价单包括 最优五档剩余撤销 最优五档剩余转限价(以最后成交价为报单价格) ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:2:1","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["books"],"content":"推荐一些我常用的电子书网址。 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:0:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" https://book-searcher.eu.org/","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:1:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 乐知堂藏书我是在一次搜索一本电子书的时候，发现了乐知堂藏书。这个网站提供了相对较新的书单，而且支持 azw3 格式。 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:2:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 恩京的书房","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:3:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" kindle8可以通过baidu网盘下载 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:4:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 书舟搜索","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:5:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 书籍知识库","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:6:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 计算机中文书籍","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:7:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 资源帝","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:8:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["Tools"],"content":"Terminator 是一款优秀的 Linux 终端模拟器。 ","date":"2022-04-24","objectID":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/:0:0","tags":["linux","terminator","onedark"],"title":"Terminator 配置方案","uri":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/"},{"categories":["Tools"],"content":" 配置 OneDark 方案 vim ~/.config/terminator [global_config] focus = system window_state = maximise title_hide_sizetext = True title_transmit_bg_color = \"#d30102\" enabled_plugins = TerminatorThemes, TerminalShot, LaunchpadCodeURLHandler suppress_multiple_term_dialog = True title_use_system_font = False title_font = FiraCode Nerd Font 8 [keybindings] copy = \u003cPrimary\u003ec paste = \u003cAlt\u003ev [profiles] [[default]] background_image = None background_color = \"#282c34\" background_type = transparent background_darkness = 0.85 cursor_color = \"#bbbbbb\" foreground_color = \"#abb2bf\" scrollbar_position = hidden palette = \"#000000:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#b2b2b2:#50536b:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#dfdfdf\" use_system_font = False font = FiraCode Nerd Font Mono 12 icon_bell = False show_titlebar = False copy_on_selection = True [[One dark]] background_image = None background_color = \"#282c34\" background_type = transparent background_darkness = 0.85 cursor_color = \"#bbbbbb\" foreground_color = \"#abb2bf\" scrollbar_position = hidden palette = \"#000000:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#b2b2b2:#50536b:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#dfdfdf\" use_system_font = False font = FiraCode Nerd Font Mono 12 icon_bell = False show_titlebar = False copy_on_selection = True [layouts] [[default]] [[[child1]]] parent = window0 profile = One dark type = Terminal [[[window0]]] parent = \"\" type = Window [plugins] ","date":"2022-04-24","objectID":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/:1:0","tags":["linux","terminator","onedark"],"title":"Terminator 配置方案","uri":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/"},{"categories":["tool"],"content":"作为 IT 开发人员，我们常常需要了解新的技术，学习新的技能。从个人的经验看，我偏向于通过 Google 和 YouTube 获取新信息，一方面是原生的英文文档更新相对比较及时，另外这些渠道的分享资源相对比较优质。 YouTube 上面有大量的技术分享视频、各种专业的会议视频（如CppCon），在本篇博文，我简单介绍几种获取 YouTube 视频的方法。 ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:0:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" AddonCropRef:https://addoncrop.com/v2/youtube-downloader/ ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:1:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" Chrome 下载插件之前有一个非常优秀的 YouTube 视频下载网站，savefrom，非常遗憾的被迫关闭了。但是这个网站提供了一种下载 YouTube 视频的思路：可以通过插件的形式，把需要下载的视频作为缓存，进行拼接保存下来。 下载Youtube视频的几种常用方法和软件 有比较详细的介绍： 首先给你的Chrome安装上Tampermonkey 然后在Greasyfork安装本地Youtube下载器激活即可。 ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:2:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" yt-dlp 命令行youtube-dl 是一个十分优秀的命令行下载视频的工具，而这款 yt-dlp 则是基于其而增强功能的升级版，使用起来也很简单。 我写了一个简单的 bash 脚本，可以循环下载整个视频列表。 #!/bin/bash url=\"https://www.youtube.com/watch?v=SbQVY-JOrgg\u0026list=PLHTh1InhhwT6VxYHtoWIvOup9gz0p95Qr\u0026index=8\u0026t=26s\" while true do yt-dlp --playlist-start 1 --yes-playlist --write-sub --sub-format \"ass/srt/best\" --convert-subs \"srt\" $url status=$? if [[ $status = 0 ]]; then exit fi done ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:3:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["programming"],"content":"基于 Linux 守护进程服务 systemd 实现了端口转发功能，这里有一个小坑，为了保证系统监控到 ssh，需要程序驻留在主进程，也就是不能添加 -f 这个参数选项。 ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:0:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":["programming"],"content":" 配置 service ## CentOS cd /usr/lib/systemd/system ## Ubuntu cd /etc/systemd/system ## 创建服务 vim port_forwarding.service [Unit] Description=PordForwaring-Daemon After=syslog.target network.target Wants=network.target [Service] Type=simple ## 使用用户执行命令 User=william Restart=on-failure RestartSec=5s ## 注意不能添加 -f 的选项 #ExecStartPre= ExecStart=/usr/bin/ssh -NC -o \"PubkeyAuthentication=yes\" -o \"StrictHostKeyChecking=false\" -o \"ServerAliveInterval 60\" -o \"ServerAliveCountMax 100\" -o \"ExitOnForwardFailure=True\" -R *:10088:localhost:22 lfang@192.168.1.178 #ExecStartPost= [Install] WantedBy=multi-user.target ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:1:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":["programming"],"content":" 启动服务 systemctl daemon-reload systemctl enable port_forwarding.service systemctl start port_forwarding.service systemctl status port_forwarding.service ## 查看运行日志 journalctl -u port_forwarding.service ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:2:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":"hacking C++ 提供了大量学习 C++ 的资源链接，其中 List of Educational Videos 收集了相关的 YouTube 网站视频，并且对相关的内容做了分类整理。 ","date":"2022-04-11","objectID":"/2022-04-11-hacking-c-youtube-%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB/:0:0","tags":[],"title":"hacking c++：YouTube 视频分享","uri":"/2022-04-11-hacking-c-youtube-%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB/"},{"categories":["Tools"],"content":"在 Kindle 上面最优的阅读体验，首选肯定是官方支持的 azw3 格式。但是当我们需要阅读一些论文或者电子书籍的时候，往往可以获取得到的只有 PDF 格式的电子版。PDF 一般是以 A4 样式存在，对于小屏幕的电子设置，往往阅读体验不是特(hen)别(zao)好(gao)。 直观的想法就是，我们可以通过某种方式，把 A4 大小的电子文档，通过一定的分割方式，转化成适合小屏幕阅读的格式。所谓的[某种格式]，其实就是利用了 OCR 的文字识别功能，通过算法整合，形成新的电子文档。 这款开源神器，K2pdfopt ，应运而生。 ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:0:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" 安装网站上提供了编译好的可执行文件，直接下载到本地，即可使用。 ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:1:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" 使用 ./K2pdfopt your_file.pdf ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:2:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" epub to mobi alias kindle.mobi='for book in *.epub; do echo \"Converting $book\"; ebook-convert \"$book\" \"$(basename \"$book\" .epub).mobi\"; done' alias kindle.pdf='for book in *.pdf; do echo \"Converting $book\"; yes \"\" | /home/william/k2pdfopt ${book}; done' ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:3:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["programming"],"content":"通过在 Ubuntu 系统安装 Deepin，可以实现使用微信、企业微信、QQ 等多款社交工具。 ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:0:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 安装 Deepin 套件访问官网deepin-wine，可以发现很多的宝藏工具。 首次使用需要先添加仓库 wget -O- https://deepin-wine.i-m.dev/setup.sh | sh 后面就可以直接安装需要的软件了，具体的名称可以从列表获取得到。比如，我们需要安装微信 apt install com.qq.weixin.deepin ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:1:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 微信字体为方框（显示不正常）","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 终极方法发现之前的方法都是不对的，需要这样处理。主要是参考了这篇博客：关于Ubuntu 20.04 安装Deepin Wine Wechat后输入框中文方框。 ## 1. 先查看使用的字体 vim ~/.deepinwine/Deepin-WeChat/system.reg ## 查找使用的字体，发现需要使用 SimSun \"MS Shell Dlg\"=\"SimSun\" \"MS Shell Dlg 2\"=\"Tahoma\" ## 2. 那就下载一份相关的字体 ## SimSun: https://github.com/micmro/Stylify-Me/blob/main/.fonts/SimSun.ttf wget https://github.com/micmro/Stylify-Me/blob/main/.fonts/SimSun.ttf cp SimSun.ttf ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/ ## 3. 执行注册表 WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/system.reg ## 4. 重启wechat即可解决 综合上述，写了一个简单的脚本 ## ============================================================= ## 杀掉某个指定的进程 ## killx program_name killx () { list=$(ps aux | grep -i $1| grep -v color | awk '{print $2}') if [ -n \"$list\" ]; then echo \"Killing... $1\" echo $list | xargs kill -9 else echo \"Not running $1\" fi } ## ============================================================= ## ============================================================= wechat() { killx wechat killx wine cp ~/SimSun.ttf ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/ ## wine 的可执行图标位于 ## /opt/apps/com.qq.weixin.deepin/entries/applications WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/system.reg /opt/apps/com.qq.weixin.deepin/files/run.sh \u0026 } ## ============================================================= ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:1","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 无效方法需要我们修改默认的系统字体 cd /opt/deepinwine/tools/ ll total 2.1M drwxr-xr-x 2 root root 4.0K Mar 29 00:18 . drwxr-xr-x 4 root root 4.0K Oct 24 2020 .. -rwxr-xr-x 1 root root 2.1K Dec 9 19:25 add_hotkeys -rwxr-xr-x 1 root root 112K Feb 23 2016 app-uninstaller.exe -rwxr-xr-x 1 root root 15K Dec 20 14:44 fontconfig -rwxr-xr-x 1 root root 714 Dec 9 19:25 get_tray_window -rwxr-xr-x 1 root root 6.3K Dec 9 19:25 kill.sh -rwxr-xr-x 1 root root 1.1K Dec 9 19:25 log.sh -rwxr-xr-x 1 root root 898 Dec 9 19:25 map_device.sh -rwxr-xr-x 1 root root 19K Dec 20 14:44 QQGameRunner -rwxr-xr-x 1 root root 808 Dec 9 19:25 register_font.sh -rwxr-xr-x 1 root root 22K Mar 29 00:13 run.sh -rwxr-xr-x 1 root root 12K Mar 29 00:13 run_v2.sh -rwxr-xr-x 1 root root 13K Mar 29 00:13 run_v3.sh -rwxr-xr-x 1 root root 14K Mar 29 00:18 run_v4.sh -rwxr-xr-x 1 root root 13K Dec 9 19:25 sendkeys.exe -rwxr-xr-x 1 root root 2.4K Dec 9 19:25 sendkeys.sh -rwxr-xr-x 1 root root 1.5K Dec 9 19:25 SetDpi.sh -rwxr-xr-x 1 root root 3.1K Feb 22 2016 uninstall.sh -rwxr-xr-x 1 root root 1.9M Dec 20 14:44 updater 这里，我们需要修改 #安装需要的字体 sudo apt-get install -y ttf-wqy-microhei sudo apt-get install -y ttf-wqy-zenhei sudo apt-get install -y xfonts-wqy #解决微信无法查看发送图片问题 sudo apt install libjpeg68:i386 #参考：https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/136 #终极解决方案 #上述方式略微有一些缺陷，修复如下： #在run.sh/v2/v3/v4的开头，添加如下： export LC_ALL=zh_CN.UTF-8 如果以上步骤还是不行，则可以尝试下面的方法： ## 到 https://github.com/qiuhuachuan/fonts/blob/main/MSYH.TTC 下载字体 wget https://github.com/qiuhuachuan/fonts/blob/main/MSYH.TTC ## 拷贝到指定位置 cp MSYH.TTC ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/msyh.ttc ## 将字体注册到 Wine vim ~/.deepinwine/Deepin-WeChat/font.reg ## 复制一下内容 REGEDIT4 [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes] \"MS Shell Dlg\"=\"msyh\" \"MS Shell Dlg 2\"=\"msyh\" [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink] \"Lucida Sans Unicode\"=\"msyh.ttc\" \"Microsoft Sans Serif\"=\"msyh.ttc\" \"MS Sans Serif\"=\"msyh.ttc\" \"Tahoma\"=\"msyh.ttc\" \"Tahoma Bold\"=\"msyhbd.ttc\" \"msyh\"=\"msyh.ttc\" \"Arial\"=\"msyh.ttc\" \"Arial Black\"=\"msyh.ttc\" ## 在命令行执行以下操作 ## 如果提示有 wine 程序在执行，需要全部kill掉 WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/font.reg ## 现在重新运行微信就可以显示中文字体了 ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:2","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":"vim 素有「编辑器之神」的称呼。对于 「Linux-er」，vim 是我们日常写代码的得力助手。 当然，这个「助手」并非那么「听话」，有时还很「高冷」。据说 SO 上面关于 Vim 问答最活跃的一个帖子，是如何退出。 我曾经也是一名小白。从一开始的「恐vim」心态，逐渐变成「爱不释手」，这过程中所经历的曲折不尽其数。为了让自己更加熟悉 Vim，也为了后来者有所参数，我决定以博客的形式，记录自己在使用 Vim 过程中所思所想、所感所悟，希望对自己有所总结，对他人有所启发。 文中主要以使用工具的实践为导向，介绍相关的插件与配置。 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:0:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Ref之所以先把参考资源相关的连接放在前面，是因为我在修炼 Vim 的道路上，得到了这些前辈高手的指点与启发。在这里表示诚挚的感谢！ 所需即所获：像 IDE 一样使用 vim：这篇博文可以说是我的启蒙之光了，从非常使用的角度指导如何配置 Vim，使之成为一个得力的工具。我的大部分配置都参考了这个神作。在此向作者表示敬意！ ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:1:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 打开大文件 \" ref:https://vim.fandom.com/wiki/Faster_loading_of_large_files \" 处理 vim 打开大文件较慢的问题 \" file is large from 10mb let g:LargeFile = 1024 * 1024 * 10 \"10MB augroup LargeFile au! autocmd BufReadPre * let f=getfsize(expand(\"\u003cafile\u003e\")) | if f \u003e g:LargeFile || f == -2 | call LargeFile() | endif augroup END function! LargeFile() \" no syntax highlighting etc set eventignore+=FileType \" save memory when other file is viewed setlocal bufhidden=unload \" is read-only (write with :w new_filename) setlocal buftype=nowrite \" no undo possible setlocal undolevels=-1 \" display message autocmd VimEnter * echo \"The file is larger than \" . (g:LargeFile / 1024 / 1024) . \" MB, so some options are changed (see .vimrc for details).\" endfunction ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:2:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" YouCompleteMe(YCM)对于经常使用 Vim 编辑 C++ 项目，我们需要一款得力的自动补全工具。 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 使用 Plug 安装（大概有不行） Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --go-completer --js-completer', 'on': [] } ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:1","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 使用 git 安装(可行方案) ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:2","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 配置","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:3","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" NerdTree","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:4:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Seiya: 透明化背景 Plug 'miyakogi/seiya.vim' \"使用命令:SeiyaEnable,SeiyaDisable let g:seiya_auto_enable=1 \"默认启动 seiya ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:5:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" tagbar","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:6:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Vim-Tmux 补全 插件：tmux-complete.vim 功能：允许用户在编辑 vim 文件的时候，自动补全 Tmux 出现的字段 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:7:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 安装 Plug 'prabirshrestha/async.vim' Plug 'prabirshrestha/asyncomplete.vim' Plug 'wellle/tmux-complete.vim' let g:tmuxcomplete#asyncomplete_source_options = { \\ 'name': 'tmuxcomplete', \\ 'whitelist': ['*'], \\ 'config': { \\ 'splitmode': 'words', \\ 'filter_prefix': 1, \\ 'show_incomplete': 1, \\ 'sort_candidates': 0, \\ 'scrollback': 0, \\ 'truncate': 0 \\ } \\ } \"\" 设置：解决 enter 不能新起一行的问题 let g:tmuxcomplete#trigger = 'omnifunc' imap \u003cc-space\u003e \u003cPlug\u003e(asyncomplete_force_refresh) inoremap \u003cexpr\u003e \u003cCR\u003e pumvisible() ? asyncomplete#close_popup() . \"\\\u003cCR\u003e\" : \"\\\u003cCR\u003e\" ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:7:1","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Devicons ## 首先需要安装 nerd-fond git clone https://github.com/ryanoasis/nerd-fonts.git cd nerd-fonts bash ./install.sh ## 需要设置 Terminator 的字体为 FiraCode Nerd Font Mono ## 然后安装插件即可显示 Plug 'ryanoasis/vim-devicons' ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:8:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":"Sublim4 更新了一些功能，需要重新制作一个破解版。 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:0:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":" 破解Patch-Sublime-License-Message Open sublime_text.exe in any hex editor. Search HEX-template -\u003e B2690031C9E8E0A5170084C07410488D0DFBFE68004883C428E9025517009048 Replace it to -\u003e B2690031C9909090909090909090909090909090909090909090909090909048 Save. This is nop call function for show message. This is not hacking software! Working on 28.05.2021 UPDATED!!! For Linux (Tested on Arch Linux) Search HEX-template -\u003e 50befcd82000baab10210031ffe8bd79180084c07416488b05b9ed4a00bea7ae210031ff31d231c94158ffe058 Replace it to -\u003e 909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090 Save. Working on 10.02.2021 for Sublime Text Build 4113 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:1:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":" 禁止更新 ## vim /etc/hosts 127.0.0.1 www.sublimetext.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 127.0.0.1 www.sublimetext.com 127.0.0.1 sublimetext.com 127.0.0.1 sublimehq.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:2:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":"「黑客」似乎不是一个好词。我们往往望文生义，以为带着「黑」字，这个称呼便不是什么善茬。而现实中，各路媒体也略有偏见的报道以这个旗子做掩护的各种「黑料」，这导致我们以为「黑客」真的挺「黑」。 其实，「黑客」是一个英译词，词根是 「hack」。原本的意思是「带有攻击性的创造」，即通过拆解复杂事物以获得更全面的认识，并加以改造，使用符合自己的使用目的。而这个被改造的功能，往往也物品原有的功能不尽相同。故谓之「破坏性创造」。传播媒体大肆渲染的，其实是另外一种活动，「crack」，即「恶意的破坏、窃取利益」等。很明显，这两者的词性完全相反。 The basic difference is this: hackers build things, crackers break them. 在计算机领域，「黑客」不仅仅指代一群特殊身份的人，还表示由这群人所组合而成的文化氛围。「黑客」成长于互联网分享的时代，受益于开源软件运动，对技术痴迷，钦佩大牛，推崇共享的精神。在当前，「黑客」精神已经渗透到社会生活的各个领域。 今天刚好在网上看到 ESR 多年前写的博客，讨论是什么是「黑客」，怎样成为一名合格且优秀的「黑客」，收益良多！ ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:0:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 什么是黑客黑客文件起源于上世纪六七十年代，与互联网分享、叛逆、创新、创造等时代特征融为一体： There is a community, a shared culture, of expert programmers and networking wizards that traces its history back through decades to the first time-sharing minicomputers and the earliest ARPAnet experiments. The members of this culture originated the term ‘hacker’. Hackers built the Internet. Hackers made the Unix operating system what it is today. Hackers make the World Wide Web work. If you are part of this culture, if you have contributed to it and other people in it know who you are and call you a hacker, you’re a hacker. 黑客已经不再局限计算机领域，已经成为人们的一种精神 The hacker mind-set is not confined to this software-hacker culture. There are people who apply the hacker attitude to other things, like electronics or music — actually, you can find it at the highest levels of any science or art. Software hackers recognize these kindred spirits elsewhere and may call them ‘hackers’ too — and some claim that the hacker nature is really independent of the particular medium the hacker works in. But in the rest of this document we will focus on the skills and attitudes of software hackers, and the traditions of the shared culture that originated the term ‘hacker’. 再次强调，黑客与「害客」不同： There is another group of people who loudly call themselves hackers, but aren’t. These are people (mainly adolescent males) who get a kick out of breaking into computers and phreaking the phone system. Real hackers call these people ‘crackers’ and want nothing to do with them. Real hackers mostly think crackers are lazy, irresponsible, and not very bright, and object that being able to break security doesn’t make you a hacker any more than being able to hotwire cars makes you an automotive engineer. Unfortunately, many journalists and writers have been fooled into using the word ‘hacker’ to describe crackers; this irritates real hackers no end. The basic difference is this: hackers build things, crackers break them. ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:1:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 黑客精神 To follow the path: look to the master, follow the master, walk with the master, see through the master, become the master. The world is full of fascinating problems waiting to be solved No problem should ever have to be solved twice Boredom and drudgery are evil Freedom is good Attitude is no substitute for competence ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:2:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 如何成为黑客1. Learn how to program. 2. Get one of the open-source Unixes and learn to use and run it. 3. Learn how to use the World Wide Web and write HTML. 4. If you don’t have functional English, learn it. ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:3:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" Ref: ESR: How To Become A Hacker Peter Norvig: Teach Yourself Programming in Ten Years ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:4:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":"最近在看这本经典书籍，可谓是言简意赅，却句句提纲挈领，读后非常有收获。所以决定写一篇读书笔记，以表敬意！ ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:0:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" Chap.4 Interfaces/接口","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" prototype/原型 It’s not usually until you’ve build and used a version of the program that you understand the issues well enough to get the design right. 在真实的软件开发过程中，我们经常从业务部门接到开发需求。理想的情况是：该需求是明确、且可以验证的。然而很多的时候，往往业务人员并不是特别清楚自己的想法，我们只有在一次次地与他们的沟通中，才能发现真正的业务需求，并逐步在脑海里形成一个初步的开发原型，我们对业务的理解也是在这个不断尝试的过程中渐渐清楚，决定需要采用哪种数据结构与算法，设计怎样的模式来更好的实现需要。 prototype 这个单词原来有草稿的意思，用在这里代表对需求逐步探索和逐步靠近的过程。 ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:1","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" Ref: exercises from the book Writing Clean Code and the Practice of Programming ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Linux"],"content":"设置 coredump 保存的文件路径。 ## echo 后面内容最好不要带上引号，有的系统会把引号也带入 ## 通过设置 core 文件的名称以及路径，程序 coredump 的时候就会在指定路径按照指定的规则命名生成 core 文件。 ## 可以在 core_pattern 模板中使用变量见下面的列表： ## - %% 单个 % 字符 ## - %p 所 dump 进程的进程 ID ## - %u 所 dump 进程的实际用户 ID ## - %g 所 dump 进程的实际组 ID ## - %s 导致本次 core dump 的信号 ## - %t core dump 的时间 (由 1970 年 1 月 1 日计起的秒数) ## - %h 主机名 ## - %e 程序文件名 ## 临时修改 echo /usr/core_log/core_%e_%t_%p \u003e /proc/sys/kernel/core_pattern ## 永久修改在 /etc/sysctl.conf ## 在该文件的最后加上两行： kernel.core_pattern = /var/core_log/core_%e_%t_%p kernel.core_uses_pid = 0 ## 可以使用以下命令，使修改结果马上生效。 /usr/sbin/sysctl -p ## 临时修改 ulimit-c unlimited ## 永久修改：打开 /etc/security/limits.conf 文件，在该文件的最后加上两行 ## 配置好后，放回原目录，重启 reboot。 ## 下面是我的配置 @root soft core unlimited @root hard core unlimited gdb 打开 core 文件时，有显示没有调试信息，因为之前编译的时候没有带上 -g 选项，没有调试信息是正常的，实际上它也不影响调试 core 文件。因为调试 core 文件时，符号信息都来自符号表，用不到调试信息。 查看堆栈使用 bt 或者 where 命令 此时，frame addr(帧数) 或者简写如上，f 1 跳转到 core 堆栈的第 1 帧。因为第 0 帧是 libc 的代码，已经不是我们自己代码了。 当然，现实环境中，coredump 的场景肯定远比这个复杂，都是逻辑都是一样的，我们需要先找到 coredump 的位置，再结合代码以及 core 文件推测 coredump 的原因。 ","date":"2022-03-10","objectID":"/2022-03-10-%E8%AE%BE%E7%BD%AE-coredump-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/:0:0","tags":["coredump"],"title":"设置 coredump 文件路径","uri":"/2022-03-10-%E8%AE%BE%E7%BD%AE-coredump-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"},{"categories":["Programming","Trading"],"content":"在金融市场交易中，我们可以获取两类行情： 基于订单、成交的逐笔行情 对订单薄进行切片得到的快照行情 我们可以利用以上数据复原订单薄「orderbook」。 ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:0:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" 利用 TtickByTick","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:1:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" 利用 Snapshot","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Talk is cheap sliu: 这样啊，就是之前每一个没有trade的价位上，我们本来算了一个max(snap1_vol-snap2_vol,0)视作cxl，现在新加一个max(snap2_vol-snap1_vol,0)视作order吧 这样一来，假如一个价位的order从10到了20，那么我们就用一个10的order去消一下outstanding ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:1","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Show me code 计算两个 snaps1、snaps2 之间的 vwap 设 $\\Delta Volume = Volume_2 - Volume_1$ 如果 $\\Delta Volume = 0$， sliu: 计算 cxl 的订单，刷新一下ob，然后用 cxl 噢！有一个点，我忽略了，如果完全没有Turnover，但是挂单超过了我们的outstanding，其实也应该撮合的 否则$\\Delta Volume \\neq 0$，需要计算 vwap $$ \\begin{align} vwap \u0026= \\frac{\\Delta Turnover}{\\Delta Volume} \\newline \u0026= \\frac{Turnover_2 - Turnover_1}{Volume_2 - Volume_1}\\end{align} $$ 我们可以对比 vwap 与 snaps1.ap1，来判断这是主动买方向还是主动卖方向（用来提取 snap1 的价格）。区分主动买/主动卖的目的，在于找到哪些是 full_traded，哪些是 partial_traded 的情况 if $vwap \\gt snaps1.ap1$，判断为主动买，需要找到卖单序列（snaps.ask_px）: full ：从 snaps1.ask_px[0] 开始直到 snaps1.ask_px[i] \u003c vwap part：snaps1.ask_px[j] \u003e vwap 且不在 snap2.ask_px 里面的，从 snaps1.ask_px[j] \u003e vwap 开始处理，遇到 snaps2.ask_px[j] \u003e= snaps1.ask_px[i] 且 snaps2.ask_qty[j] != 0 就停止搜索；如果没有找到，使用最后遇到的 snaps2.ask_qty[j] else if $snaps1.bp1 \\lt vwap \\lt snaps.ap1$，特殊情况，发现序列都是空的，使用 snap1.bp1 与 snaps.ap1，然后转化成第一种情况处理 else if $vwap \\lt snaps1.bp1$，判断为主动卖，需要找到买单序列（snaps1.bid_px）: full ：从 snaps1.bid_px[i] \u003c vwap 开始直到 snaps1.bid_px[0] part：snaps1.ask_px[j] \u003e vwap 且不在 snap2.ask_px 里面的，从 snaps1.bid_px[j] \u003c vwap 开始处理，遇到 snaps2.bid_px[j] \u003c= snaps1.bid_px[i] 且 snaps2.bid_qty[j] != 0 就停止搜索；如果没有找到，使用最后遇到的 snaps2.bid_qty[j] 我们知道， 对于 full_trade 的序列，已经推算出 trade 与 cxl 的情况 (solve_equation) 但是对于 part_trade 的序列，我们还需要使用 snaps2 上面的同一个价格档位的 qty 来计算从 snaps1 变成 snaps2 过程中发生的 cxl_qty 标记为 part_snaps_qty_vec，且记录 if (part_snaps_qty_vec.empty()) { rsp.cxl_qty = std::max(qty_vec[i] - rsp.trade_qty, 0); } else { rsp.cxl_qty = std::max(qty_vec[i] - rsp.trade_qty - part_snaps_qty_vec[i], 0); } 这样，我们一共有 using px_qty_t = std::pair\u003cdouble/*px*/, int/*qty*/\u003e; std::vector\u003cpx_qty_t\u003e full_vec; std::vector\u003cpx_qty_t\u003e part_vec; // NOTE[20220317 14:57:42]: 用来确定对应价位上面的 cxl 数量 std::vector\u003cint\u003e part_snaps_qty_vec; double full_vwap {.0}; int full_idx { 0}; int part_vwap {.0}; int part_idx { 0}; 虚拟的 rsp 数据结构为 struct fake_rsp_t { double px {.0}; int order_qty {0}; // 订单的挂单数量，需要乘以 q 表示这个订单有多少概率排在我们订单前面 int trade_qty {0}; // int cxl_qty {0}; // int leaves_qty {0}; // 前面一个 snaps 剩余的数量，表示一定会排在我们订单前面的数量 bool is_long {false}; friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const fake_rsp_t\u0026 rsp) { os \u003c\u003c \"px:\" \u003c\u003c rsp.px \u003c\u003c \", order_qty:\" \u003c\u003c rsp.order_qty \u003c\u003c \", trade_qty:\" \u003c\u003c rsp.trade_qty \u003c\u003c \", cxl_qty:\" \u003c\u003c rsp.cxl_qty \u003c\u003c \", leaves_qty:\" \u003c\u003c rsp.leaves_qty \u003c\u003c std::endl; return os; } }; 撮合 撮合的前半部分就是生成这些东西来和outstanding撮合 后半部分是我们自己的order进来，先和新ob撮合，生成rsp和outstanding撮合 如果完了还有剩的，就计算一个wait然后进入outstanding 那个时候的wait就是max{0, vol_1 - trade - cxl} + max{0, vol_2 - max{0, vol_1 - trade - cxl}} * q max{0, vol_1 - trade - cxl} + max{0, vol_2 - max{0, vol_1 - trade - cxl}} * q 里面其实 max{0, vol_2 - max{0, vol_1 - trade - cxl}} 就是你这里的order吧 lfang：leaves_qty 相当于表示上次还剩多少肯定排在我们订单前面，然后再用一个 q 的概率表示在新 snaps2 上面的订单排在前面的可能性 所以 wait_qty = rsp.leaves_qty + rsp.order_qty * q ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:2","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Ref How to manage a local order book correctly Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth. Buffer the events you receive from the stream. Get a depth snapshot from https://api.binance.com/api/v3/depth?symbol=BNBBTC\u0026limit=1000 . Drop any event where u is \u003c= lastUpdateId in the snapshot. The first processed event should have U \u003c= lastUpdateId+1 AND u \u003e= lastUpdateId+1. While listening to the stream, each new event’s U should be equal to the previous event’s u+1. The data in each event is the absolute quantity for a price level. If the quantity is 0, remove the price level. Receiving an event that removes a price level that is not in your local order book can happen and is normal. ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:3:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming"],"content":"so that NERDTree always opens in the current folder. set autochdir let NERDTreeChDirMode=2 nnoremap \u003cleader\u003en :NERDTree .\u003cCR\u003e With the 1st line, the working directory is always the one where the active buffer is located. With the 2nd line, I make sure the working directory is set correctly. With the 3rd line, I hit \u003cleader\u003en to open NERDTree. ","date":"2022-01-12","objectID":"/2022-01-12-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/:0:0","tags":["Linux","vim","nerdtree"],"title":"NerdTree 自动切换到当前目录","uri":"/2022-01-12-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/"},{"categories":["Programming"],"content":"cin 不要明文显示","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"通过隐藏实现，可以很好的避免执行命令被监控到。 ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:0:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mymain #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003ctermios.h\u003e #include \u003cunistd.h\u003e using namespace std; int main() { termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); string passwd; getline(cin, passwd); cout \u003c\u003c passwd \u003c\u003c endl; return 0; }//main ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:1:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" myssh #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(void) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string cmd; // std::cout \u003c\u003c cmd \u003c\u003c std::endl; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:2:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mysync #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(int argc, char* argv[]) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string srcpath; std::cout \u003c\u003c \"srcpath: \"; std::cin \u003e\u003e srcpath; std::string destpath; std::cout \u003c\u003c \"destpath: \"; std::cin \u003e\u003e destpath; std::cout \u003c\u003c std::endl; std::string cmd; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:3:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"由于 Realtek 2.5Gb 网卡比较新，CentOS 无法识别出来，需要单独手动安装。","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":"由于 CentOS7 无法识别最新的 Realtek 网卡，我们需要通过单独安装一个内核程序才能使用网卡。 ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:0:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":" 安装依赖 elrepo-release-7.0-5.el7.elrepo.noarch.rpm kernel-3.10.0-1160.el7.x86_64.rpm kmod-r8125-9.003.05-1.el7_8.elrepo.x86_64.rpm linux-firmware-20200421-79.git78c0348.el7.noarch.rpm rpm -Uvh .*rpm reboot ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:1:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":" 识别网卡 nmtui Reference 这个更简单：Centos安装拓展PCIe网卡驱动 超贴心）Centos7 安装 2.5G 网卡驱动（Realtek 3000）_音程的博客 CentOS 添加网卡 没有对应网卡配置文件解决方法 ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:2:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":"python 本地安装 requirements.txt","date":"2021-08-23","objectID":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/","tags":["Linux","python","pip"],"title":"python 本地安装 requirements.txt","uri":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/"},{"categories":["Programming"],"content":" # pip download -r requirements.txt # pip install --no-index --find-links=./ -r requirements.txt pybind11 pandas requests clickhouse_driver==0.2.1 paramiko loguru xlrd==1.2.0 clickhouse-cli ","date":"2021-08-23","objectID":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/:0:0","tags":["Linux","python","pip"],"title":"python 本地安装 requirements.txt","uri":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/"},{"categories":["Programming"],"content":"Centos 安装与使用 clickhouse 数据库","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"Clickhouse 是一款高性能的列式存储数据库。 安装参考官网安装页面。 ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 源代码安装可以通过下载源代码的方式进行安装，网址： # export LATEST_VERSION=`curl https://api.github.com/repos/ClickHouse/ClickHouse/tags 2\u003e/dev/null | grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | head -n 1` export LATEST_VERSION=21.8.4.51 wget https://repo.clickhouse.tech/tgz/stable/clickhouse-common-static-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-common-static-dbg-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-server-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-client-${LATEST_VERSION}.tgz tar -xzvf clickhouse-common-static-$LATEST_VERSION.tgz sudo bash clickhouse-common-static-$LATEST_VERSION/install/doinst.sh tar -xzvf clickhouse-common-static-dbg-$LATEST_VERSION.tgz sudo bash clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh tar -xzvf clickhouse-server-$LATEST_VERSION.tgz sudo bash clickhouse-server-$LATEST_VERSION/install/doinst.sh sudo /etc/init.d/clickhouse-server start tar -xzvf clickhouse-client-$LATEST_VERSION.tgz sudo bash clickhouse-client-$LATEST_VERSION/install/doinst.sh 配置 server 的配置文件位于：/etc/clickhouse-server config.xml users.xml client ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 设置访问 IP默认只能在本机访问，可以修改 /etc/clickhouse-server/config.xml \u003c!-- Default values - try listen localhost on IPv4 and IPv6. --\u003e \u003c!-- \u003clisten_host\u003e::1\u003c/listen_host\u003e \u003clisten_host\u003e127.0.0.1\u003c/listen_host\u003e --\u003e \u003c!-- Default values - try listen localhost on IPv4 and IPv6. --\u003e \u003clisten_host\u003e::1\u003c/listen_host\u003e \u003clisten_host\u003e0.0.0.0\u003c/listen_host\u003e ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 添加 admin 管理员取消用户管理的注释： \u003c!-- User can create other users and grant rights to them. --\u003e \u003c!-- \u003caccess_management\u003e1\u003c/access_management\u003e --\u003e \u003c!-- User can create other users and grant rights to them. --\u003e \u003caccess_management\u003e1\u003c/access_management\u003e ## 使用 default 账户登录并创建其他用户 clickhouse-client -h 127.0.0.1 -u default --password ilove ## 创建账户 CREATE USER lfang IDENTIFIED WITH plaintext_password BY 'XIA...qq' DEFAULT ROLE ALL; ## 权限 GRANT all ON default to lfang; ## 使用新账户登录，可以看到数据库了 clickhouse-client -h 127.0.0.1 -u lfang --password data101 :) show databases; SHOW DATABASES Query id: 005f9f65-7183-4dcc-b3b6-5187685c168c ┌─name────┐ │ default │ └─────────┘ 1 rows in set. Elapsed: 0.003 sec. 使用 clickhouse-client -h 127.0.0.1 -u default --password ilove ~/anaconda3/bin/python3 -m pip install clickhouse-cli ~/anaconda3/bin/clickhouse-cli -h 127.0.0.1 -p8123 -u default -Pilove ~/anaconda3/bin/clickhouse-cli -h 192.168.1.101 -p8123 -u default -Pilove show databases; 技巧","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"Linux 解压 zip 遇到中文乱码的解决方法。","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":" 一招解决 unar ","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:1:0","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":" 无效方法windows中压缩的zip包，如果含有中文，在linux下解压时会出现乱码，刚才就出现了这个问题。 搜得一个帖子， 解决了乱码问题。帖子来源： http://www.ubuntuchina.com/viewthread.php?tid=7356。 ubuntu linux 压缩文件zip中文乱码问题在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压，中文文件名会出现乱码。 虽然2005年就有人把这报告为bug, 但是info-zip的官方网站没有把自动识别编码列入计划，可能他们不认为这是个问题。Sun对java中存在N年的zip编码问题，采用了同样的处理方式。 有2种方式解决问题： 通过unzip行命令解压，指定字符集 unzip -O CP936 xxx.zip (用GBK, GB18030也可以) 有趣的是unzip的manual中并无这个选项的说明, unzip –help对这个参数有一行简单的说明。 在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件 /etc/environment中加入2行 UNZIP=\"-O CP936\" ZIPINFO=\"-O CP936\" 这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。 采用了上面的第一个方法，问题解决。 另一方法为采用java的jar命令解压zip包 JAR 解压 jar xvf file.name ","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:2:0","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":"Rstudio with ldap","date":"2021-08-11","objectID":"/2021-08-11-rstudio-server-with-ldap/","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/2021-08-11-rstudio-server-with-ldap/"},{"categories":["Programming"],"content":"To install Rstudio in CentOS system, we need to run following commands: wget https://download2.rstudio.org/server/centos7/x86_64/rstudio-server-rhel-1.4.1717-x86_64.rpm yum install rstudio-server-rhel-1.4.1717-x86_64.rpm sudo rstudio-server restart sudo cp /etc/pam.d/login /etc/pam.d/rstudio ","date":"2021-08-11","objectID":"/2021-08-11-rstudio-server-with-ldap/:0:0","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/2021-08-11-rstudio-server-with-ldap/"}]
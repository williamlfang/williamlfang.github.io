[{"categories":[],"content":"前两天在 B 站看了一个视频， 介绍了目前国内 AI 领域做得非常不错的一家公司，也是量化界的领头羊-幻方。其中，谈到他们开发大模型 deepseek 已经拥有非常强劲的实力，能够满足大部分场景下的 AGI 使用，比如机器人、自动化代码生成器等。联想到之前我在网上看到 avante.nvim 这个插件可以为 nvim 带来 AI 辅助功能，当时由于国内还无法使用国外开发的大模型工具，所以就不了了之了。现在终于可以在国内合理合法的使用 AI 在 nvim 中辅助编程了。 购买 API 服务第一个步骤是需要购买 API 服务，然后获取 key，这样我们就可以在 nvim 中调用密钥发送请求了。 得到密钥后，需要设置环境变量 ##=============================================================================[deepseek: openai] ## https://platform.deepseek.com/api_keys: sk-******************************a7c export OPENAI_API_KEY=sk-******************************a7c ##============================================================================= avante.nvimavante 提供了接入多个大模型应用 API 的配置，比如 openai、claude，而 deepseek 为了跟 openai 保持一致接口，也是采用了 openai 的方式。因此我们看到上面配置的密钥格式是 openai 的格式。 ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:0:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" 配置这里我把自己使用的配置粘贴上来 return { \"yetone/avante.nvim\", event = \"VeryLazy\", lazy = true, version = false, -- set this if you want to always pull the latest change opts = { provider = \"openai\", auto_suggestions_provider = \"openai\", -- Since auto-suggestions are a high-frequency operation and therefore expensive, -- it is recommended to specify an inexpensive provider or even a free provider: copilot openai = { endpoint = \"https://api.deepseek.com/v1\", model = \"deepseek-chat\", timeout = 30000, -- Timeout in milliseconds temperature = 0, max_tokens = 4096, [\"local\"] = false, }, }, behaviour = { auto_suggestions = false, -- Experimental stage auto_set_highlight_group = true, auto_set_keymaps = true, auto_apply_diff_after_generation = false, support_paste_from_clipboard = true, minimize_diff = true, -- Whether to remove unchanged lines when applying a code block }, mappings = { --- @class AvanteConflictMappings diff = { ours = \"co\", theirs = \"ct\", all_theirs = \"ca\", both = \"cb\", cursor = \"cc\", next = \"]x\", prev = \"[x\", }, suggestion = { accept = \"\u003cM-l\u003e\", next = \"\u003cM-]\u003e\", prev = \"\u003cM-[\u003e\", dismiss = \"\u003cC-]\u003e\", }, jump = { next = \"]]\", prev = \"[[\", }, submit = { normal = \"\u003cCR\u003e\", insert = \"\u003cC-s\u003e\", }, -- NOTE: The following will be safely set by avante.nvim ask = \"\u003cleader\u003eaa\", edit = \"\u003cleader\u003eae\", refresh = \"\u003cleader\u003ear\", focus = \"\u003cleader\u003eaf\", toggle = { default = \"\u003cleader\u003eat\", debug = \"\u003cleader\u003ead\", hint = \"\u003cleader\u003eah\", suggestion = \"\u003cleader\u003eas\", repomap = \"\u003cleader\u003eaR\", }, sidebar = { apply_all = \"A\", apply_cursor = \"a\", switch_windows = \"\u003cTab\u003e\", reverse_switch_windows = \"\u003cS-Tab\u003e\", remove_file = \"d\", add_file = \"@\", }, files = { add_current = \"\u003cleader\u003eac\", -- Add current buffer to selected files }, }, hints = { enabled = true }, -- if you want to build from source then do `make BUILD_FROM_SOURCE=true` build = \"make\", -- build = \"powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false\" -- for windows dependencies = { \"nvim-treesitter/nvim-treesitter\", \"stevearc/dressing.nvim\", \"nvim-lua/plenary.nvim\", \"MunifTanjim/nui.nvim\", { \"nvim-treesitter/nvim-treesitter\", opts = { highlight = { enable = true, additional_vim_regex_highlighting = false, }, ensure_installed = { \"markdown\", \"markdown_inline\", \"bash\", \"python\", \"lua\", \"javascript\", \"typescript\", \"html\", \"css\", }, }, }, --- The below dependencies are optional, \"nvim-tree/nvim-web-devicons\", -- or echasnovski/mini.icons \"zbirenbaum/copilot.lua\", -- for providers='copilot' { -- support for image pasting \"HakonHarnes/img-clip.nvim\", event = \"VeryLazy\", opts = { -- recommended settings default = { embed_image_as_base64 = false, prompt_for_file_name = false, drag_and_drop = { insert_mode = true, }, -- required for Windows users use_absolute_path = true, }, }, }, -- { -- -- Make sure to set this up properly if you have lazy=true -- 'MeanderingProgrammer/render-markdown.nvim', -- -- branch = \"main\", -- -- commit = \"82184c4a3c3580a7a859b2cb7e58f16c10fd29ef\", -- -- opts = { -- -- file_types = { \"markdown\", \"Avante\" }, -- -- }, -- -- ft = { \"markdown\", \"Avante\" }, -- -- highlight = { -- -- enabled = true, -- -- theme = \"github\", -- or \"monokai\", \"onedark\", etc. -- -- background = true, -- -- }, -- -- code_blocks = { -- -- highlight = true, -- -- theme = \"github\", -- Match your colorscheme -- -- }, -- }, }, } 由于我使用的是 markview 这款插件来渲染 markdown，因此就没有使用上面注释部分中的 render-markdown。 return { \"OXY2DEV/markview.nvim\", enabled = true, lazy = true, -- Recommended event = \"BufRead\", ft = {\"markdown\"}, -- If you decide to lazy-load anyway dependencies = { \"nvim-treesitter/nvim-treesitter\", \"nvim-tree/nvim-web-devicons\" }, config = function() local presets = require(\"markview.presets\"); require(\"markview\").setup({ filetypes = { \"markdown\", \"quarto\", \"rmd\" }, headings = presets.headings.marker, checkboxes = presets.checkboxes.nerd, -- Initial plugin state, -- true = show preview -- falss = don't show preview initial_state = true, }) end, } ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:1:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" 操作我一开始犯了一个迷糊：avante 写的是使用 \u003cleader\u003eaa 启动对话。我以为这里的 leader 就是我自己设置的 leader 键位，即 ;。但是后来发现 avante 配置的 leader 其实对应的应该是 Space 空格键，所以如果启动对话，需要敲击的键位是：\u003cSpace\u003eaa。 ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:2:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" 效果最近在测试升级 glibc，其中有一个测试条件需要过滤：针对 nss 的一个条件判断，我们不需要添加测试，否则 glibc 无法通过编译。其中使用的语法就是 bash 的正则表达式，但是混合了特殊符号。即使对于一个非常熟悉 bash 语法的程序员，在处理正则表达式时也常常感到心累，大概是因为其复杂的语法。 比如这里（代码位于 glibc-2.30/scripts/test-installation.pl） if ($name ne \"nss_ldap\" \u0026\u0026 $name ne \"db1\" \u0026\u0026 $name ne \"thread_db\" \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\") { $link_libs .= \" -l$name\"; $versions{$name} = $version; } 我们想使用 sed 添加一个条件， \u0026\u0026 $name ne \"nss_test2\"。一开始我尝试自己去写正则表达式，但是两次都失败了，得不到想要的结果。于是想到让 AI 试试看，便把上面那段代码粘贴到一个临时的脚本文件，然后简单描述了我需要得到的效果，至于怎么处理，就交给 AI 了。 use `sed` to add one more condition: $name ne \"nss_test2\" 让我十分震惊的是，AI 竟然很快就给出了答案，而且还详细说明分析的思路，并且把运行的结果也展示出来。 sed 信息 Datetime: 2025-01-12 21:24:59 Model: openai/deepseek-chat Selected files: test.sh Selected code: \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\") { use sed to add one more condition: $name ne “nss_test2” I’ll provide a sed command that will add the new condition while preserving the existing formatting. Here’s the sed command to run: sed -i '/\u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\"/s/\u0026\u0026 $name ne \"libgcc_s\"/\\\u0026\\\u0026 $name ne \"nss_test2\" \\\u0026\\\u0026 $name ne \"libgcc_s\"/' test.sh This command: Looks for the specific line containing both “nss_test1” and “libgcc_s” conditions Replaces just the “libgcc_s” condition part with “nss_test2” followed by the original “libgcc_s” condition Maintains proper spacing and formatting Uses -i flag to edit the file in-place After running this command, the line will become: \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"nss_test2\" \u0026\u0026 $name ne \"libgcc_s\") { ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:3:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" 一个bug不过对于生产的代码，我们还是需要进行判断，因为 AI 也是有可能出错的，而且还一本正经的给出解释。 比如下面的一个代码块，我需要去掉一个判断(glibc-2.30/sysdeps/posix/shm-directory.h) /* Validate the filename. */ \\ if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ { \\ __set_errno (errno_for_invalid); \\ return retval_for_invalid; \\ } \\ 这个是 glibc 自 2.21 版本开始使用的 shm_open 命令，用于验证文件名称是否合法。但是这个对于带有子目录路径的文件名（如 spdm/spdx_param），直接给出了一个错误的判断。这个 bug 需要把该判断去掉，重新编译 glibc。 我尝试让 AI 做这个事情，尝试了几次都没有得到结果，但是 AI 自我解释里竟然说可以得到结果，真的有点绷不住。所以对于生产环境的代码，我们一定要人工检查之后再允许上线。 Bug Datetime: 2025-01-12 21:24:25 Model: openai/deepseek-chat Selected files: test.sh Selected code: \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\") { add one more condition: $name ne “nss_test2” I’ll add the new condition to the if statement in test.sh. Here’s the SEARCH/REPLACE block: Filepath: test.sh Replace lines: 3-3 \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"nss_test2\" \u0026\u0026 $name ne \"libgcc_s\") { This adds the new condition $name ne \"nss_test2\" to the existing chain of conditions, maintaining the same format and style as the other conditions. Datetime: 2025-01-12 21:24:59 Model: openai/deepseek-chat Selected files: test.sh Selected code: \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\") { use sed to add one more condition: $name ne “nss_test2” I’ll provide a sed command that will add the new condition while preserving the existing formatting. Here’s the sed command to run: sed -i '/\u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"libgcc_s\"/s/\u0026\u0026 $name ne \"libgcc_s\"/\\\u0026\\\u0026 $name ne \"nss_test2\" \\\u0026\\\u0026 $name ne \"libgcc_s\"/' test.sh This command: Looks for the specific line containing both “nss_test1” and “libgcc_s” conditions Replaces just the “libgcc_s” condition part with “nss_test2” followed by the original “libgcc_s” condition Maintains proper spacing and formatting Uses -i flag to edit the file in-place After running this command, the line will become: \u0026\u0026 $name ne \"nss_test1\" \u0026\u0026 $name ne \"nss_test2\" \u0026\u0026 $name ne \"libgcc_s\") { Datetime: 2025-01-12 22:12:10 Model: openai/deepseek-chat Selected files: test.sh Selected code: if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ use sed to remove condition: strchr (name, '/') != NULL I’ll provide a sed command to remove the strchr (name, '/') != NULL condition while preserving the rest of the line: sed -i '/strchr (name, .\\/.) != NULL/s/ *\\|\\| *strchr (name, .\\/.) != NULL//' test.sh This command: Looks for the line containing strchr (name, '/') != NULL Removes the condition along with the || operator and surrounding spaces Uses -i flag to edit the file in-place After running this command, the line will become: if (namelen == 1 || namelen \u003e= NAME_MAX) \\ The command preserves the backslash continuation and proper spacing in the file. Datetime: 2025-01-12 22:17:52 Model: openai/deepseek-chat Selected files: test.sh Selected code: if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ use sed to remove check for strchr and keep others I’ll provide a sed command to remove just the strchr (name, '/') != NULL check while keeping the other conditions intact: sed -i '/if (namelen == 1 \\|\\| namelen \u003e= NAME_MAX \\|\\| strchr (name, .\\/.) != NULL)/s/ *\\|\\| *strchr (name, .\\/.) != NULL//' test.sh This command will: Match the specific line containing all three conditions Remove only the strchr condition and its preceding || operator Preserve the backslash continuation and proper spacing Edit the file in-place with -i flag After running this command, the line will become: if (namelen == 1 || namelen \u003e= NAME_MAX) \\ The rest of the file will remain unchanged, including the code block and error handling below it. Datetime: 2025-01-12 22:20:38 Model: openai/deepseek-chat Selected files: test.sh Selected code: if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ it dit not work Let me provide a more precise sed command that will work for your specific case. Based on the context you’ve shown, here’s the correct sed command: sed -i '/if (namelen == 1 \\|\\| namelen \u003e= NA","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:4:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" 标题颜色参考：Avante - get rid of “half moon” symbols 修改 ~/.config/nvim/init.lua -- require(\"avante\"); local set_hl = vim.api.nvim_set_hl local function setup_avante_highlights() -- Apply highlights for title set_hl(0, \"AvanteTitle\", { fg = \"black\", bg = \"#DCA561\" }) set_hl(0, \"AvanteReversedTitle\", { fg = \"#DCA561\", bg = \"#16161D\", }) -- Apply highlights for subtitle -- set_hl(0, \"AvanteSubtitle\", { fg = \"#c4746e\", bg= \"#a09cac\" }) set_hl(0, \"AvanteSubtitle\", { fg = \"black\", bg= \"#a09cac\" }) set_hl(0, \"AvanteReversedSubtitle\", { fg = \"#a09cac\", bg = \"#16161D\", }) -- Apply highlights for prompt set_hl(0, \"AvanteThirdTitle\", { fg=\"#5d57a3\", bg= \"#76946A\" }) set_hl(0, \"AvanteReversedThirdTitle\", { fg = \"#76946A\", bg = \"#16161D\", }) -- Apply highlights for hints -- set_hl(0, \"AvanteInlineHint\", { link = \"LspDiagnosticsVirtualTextHint\" }) -- set_hl(0, \"AvantePopupHint\", { link = \"DiagnosticVirtualTextHint\" }) end -- Run the function setup_avante_highlights() vim.opt.syntax = \"on\" vim.g.markdown_fenced_languages = {'Avante', 'python', 'javascript', 'html', 'bash', 'sh'} ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:5:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" Avante markdown 无法高亮参考：bug: Codeblocks and quote blocks have weird interactions 需要修改 ~/.config/nvim/lua/plugins/nvim-treesitter.lua，通过 config 使其加载进来 config = function(_, opts) require'nvim-treesitter.configs'.setup(opts) end 完整的配置如下： return { \"nvim-treesitter/nvim-treesitter\", build = \":TSUpdate\", -- event = \"VeryLazy\", event = \"BufRead\", -- ft = { \"cpp\", \"python\", \"bash\", \"conf\", \"R\", \"zsh\" }, dependencies = { {\"nvim-treesitter/nvim-treesitter-textobjects\"}, -- Syntax aware text-objects { \"nvim-treesitter/nvim-treesitter-context\", -- Show code context opts = { -- 用于折叠显示前面的 function prototype enable = true, -- FIXME: true? mode = \"topline\", line_numbers = false, multiwindow = false, -- Enable multiwindow support. max_lines = 5, -- How many lines the window should span. Values \u003c= 0 mean no limit. -- min_window_height = 0, -- Minimum editor window height to enable context. Values \u003c= 0 mean no limit. -- line_numbers = false, multiline_threshold = 20, -- Maximum number of lines to show for a single context -- trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer' -- mode = 'topline', -- Line used to calculate context. Choices: 'cursor', 'topline' -- -- Separator between context and content. Should be a single character string, like '-'. -- -- When separator is set, the context will only show up when there are at least 2 lines above cursorline. -- separator = nil, -- zindex = 20, -- The Z-index of the context window } } }, opts = { -- A list of parser names, or \"all\" (the five listed parsers should always be installed) ensure_installed = { \"bash\", \"c\", \"cpp\", \"diff\", \"html\", \"javascript\", \"json\", \"lua\", \"markdown\", \"markdown_inline\", \"python\", \"query\", \"regex\", \"tsx\", \"typescript\", \"vim\", \"yaml\", }, -- Install parsers synchronously (only applied to `ensure_installed`) sync_install = false, -- Automatically install missing parsers when entering buffer -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally auto_install = true, -- List of parsers to ignore installing (or \"all\") ignore_install = { \"javascript\", \"markdown\", \"org\", }, highlight = { enable = true, -- disable = {\"csv\", \"markdown\"} disable = {\"csv\"} }, --FIXME: 可能导致 cpp indent 有点不对 indent = { enable = true }, textobjects = {select = {enable = true, lookahead = true}} }, config = function(_, opts) require'nvim-treesitter.configs'.setup(opts) end } ","date":"2025-01-12","objectID":"/2025-01-12-avante.nvim/:6:0","tags":[],"title":"avante.nvim","uri":"/2025-01-12-avante.nvim/"},{"categories":[],"content":" ## install nodejs curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - apt-get install nodejs -y ## add repo for yarn curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list ## install yarn apt-get update apt-get install yarn ## now we have it yarn --version ","date":"2025-01-11","objectID":"/2025-01-11-ubuntu-%E5%AE%89%E8%A3%85-yarn/:0:0","tags":[],"title":"ubuntu 安装 yarn","uri":"/2025-01-11-ubuntu-%E5%AE%89%E8%A3%85-yarn/"},{"categories":[],"content":"pyproject.toml 是新一代的 python 项目打包工具。相比于 setup.py 能够提供更多关于项目本身的信息。 安装 tree . ├── mydemo │ ├── __init__.py │ └── module.py └── pyproject.toml ","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:0:0","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":" pyproject.toml [build-system] requires = [\"setuptools\", \"setuptools-scm\"] build-backend = \"setuptools.build_meta\" [project] name = \"mydemo\" authors = [ {name = \"Example Author\", email = \"author@example.com\"} ] description = \"package description\" version = \"0.0.1\" readme = \"README.md\" requires-python = \"\u003e=3.7\" dependencies = [ \"requests \u003e 2.26.0\", \"pandas\" ] ","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:1:0","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":" mydemo","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:2:0","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":" init.py from .module import * ","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:2:1","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":" module def myadd(a: int, b: int): \"add two numbers\" print(f\"myadd {a=}, {b=}\") return a + b ","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:2:2","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":" install pip install . ","date":"2025-01-10","objectID":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/:3:0","tags":[],"title":"pyproject.toml 打包项目","uri":"/2025-01-10-pyproject.toml-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/"},{"categories":[],"content":"im-select.nvim 解决了在本地机器的终端上面丝滑切换中英文输入法。但是我回到家里，需要连接到公司的远程服务器，然后再登录 我的 tmux 回话，即可快速返回下班前的工作状态了。这时候如果需要在 tmux 使用 vim 进行中文输入，就 无法再使用 im-select 的切换功能了，因为其使用使用的是本地的输入法切换，在远程环境中，无法调用。 这时候我发现一个可以让 nvim 远程调用本地的输入法切换命令： 一旦进入 insert 模式，就从远程发送一个命令给本地，要求切换到中文输入法 一旦退出 insert 模式（即按下 Esc），再从远程发送一个命令给本地，要求切换到英文，这样就可以在 normal 模式下使用各种按键了。 自动切换中英文输入法我安装的项目是 im-select-remote。一开始按照上面的配置安装，并没有成功。后来仔细研究了一下代码，发现这里面只是调用切换会英文输入法的命令，但是没有继续切换到中文输入法。里面的代码相对简单 在代码 ~/.config/nvim/lazy/im-select-remote.nvim/lua/im-select-remote.lua M.IMSelectSocketEnable = function() vim.notify(\"IMSelectRemote: Socket enabled\", vim.log.levels.INFO) vim.cmd([[ augroup im_select_remote autocmd! autocmd BufEnter * lua require(\"im-select-remote\").IMSelectBySocket() autocmd InsertLeave * lua require(\"im-select-remote\").IMSelectBySocket() augroup END ]]) end 这里调用了 config.command 的操作，但是这个命令是一条固定的语句， command = \"fcitx-remote -c\" 如果我们想要扩展，需要进行判断。于是可以修改城 -- 添加两个命令 -- command_enter： fcitx-remote -o -- command_leave： fcitx-remote -c local M = {} M.config = { osc = { secret = \"\", }, socket = { port = 23333, max_retry_count = 3, command_enter = \"fcitx-remote -o\", command_leave = \"fcitx-remote -c\", }, } --- IMSelectBySocket -- @treturn int the exit code of the command M.IMSelectBySocket = function(command) local function on_stdout() end local cmd = \"echo \" .. vim.fn.shellescape(command) .. \" | nc localhost \" .. M.config.socket.port .. \" -q 0\" vim.fn.jobstart(cmd, { on_stdout = on_stdout, on_stderr = on_stdout, on_exit = on_stdout, stdout_buffered = false, stderr_buffered = false, }) end -- 进入 insert 模式 M.IMSelectBySocketEnter = function() -- M.IMSelectBySocket(\"fcitx-remote -o\") M.IMSelectBySocket(M.config.socket.command_enter) end -- 退出 insert，进入 normal 模式 M.IMSelectBySocketLeave = function() -- M.IMSelectBySocket(\"fcitx-remote -c\") M.IMSelectBySocket(M.config.socket.command_leave) end M.IMSelectSocketEnable = function() if vim.bo.filetype ~= \"markdown\" then return end -- if M.config.ft[vim.bo.filetype] == nil then -- return -- end vim.notify(\"IMSelectRemote: Socket enabled\", vim.log.levels.INFO) vim.cmd([[ augroup im_select_remote autocmd! \" autocmd BufEnter * lua require(\"im-select-remote\").IMSelectBySocket() \" autocmd InsertLeave * lua require(\"im-select-remote\").IMSelectBySocket() \" autocmd InsertEnter * lua require(\"im-select-remote\").IMSelectBySocketEnter() \" autocmd InsertLeave * lua require(\"im-select-remote\").IMSelectBySocketLeave() autocmd InsertEnter *.md lua require(\"im-select-remote\").IMSelectBySocketEnter() autocmd InsertLeave *.md lua require(\"im-select-remote\").IMSelectBySocketLeave() augroup END ]]) end -- 修改成默认关闭状态，可以通过命令打开：IMSelectSocketEnable M.setup = function(args) M.config = vim.tbl_deep_extend(\"force\", M.config, args or {}) if check_auto_enable_socket() then for i = 1, M.config.socket.max_retry_count do local result = os.execute(\"nc -z localhost \" .. M.config.socket.port .. \" -q 0\") if result == 0 then break end retry_count = i vim.cmd(\"sleep 50m\") end if retry_count == M.config.socket.max_retry_count then vim.notify(\"IMSelectServer is not running, please start it first!\", vim.log.levels.WARN) return end -- M.IMSelectSocketEnable() M.IMSelectDisable() end end 完整的配置","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:0:0","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":" 安装插件 return { \"mkdir700/im-select-remote.nvim\", lazy = true, event = 'BufRead', ft = {\"markdown\"}, config = function() require('im-select-remote').setup({ osc = { secret = \"\", }, socket = { port = 23333, max_retry_count = 3, -- command_enter = \"fcitx-remote -o\", -- command_leave = \"fcitx-remote -c\", }, }) end } ","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:1:0","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":" 修改代码按照如上进行修改 ~/.config/nvim/lazy/im-select-remote.nvim/lua/im-select-remote.lua ","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:2:0","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":" 服务端配置在服务端 ~/.ssh/config 添加 Host local HostName localhost Port 23333 User william ","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:3:0","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":" 本地配置在本地 ~/.ssh/config 添加，其中 192.168.1.82 是服务端 ip 地址。 Host * ServerAliveInterval 60 IdentitiesOnly=yes StrictHostKeyChecking=no ForwardAgent yes Host william HostName 192.168.1.82 User william Port 22 # 用于端口转发 RemoteForward 127.0.0.1:23333 127.0.0.1:23333 ServerAliveInterval 240 ","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:4:0","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":" 启动服务接收命令在本地执行 cd ~/.config/nvim/lazy/im-select-remote.nvim/server bash ./im-server.sh 如此一来，我们就可以把服务端的命令从 23333 转发到本地，然后执行切换输入法的命令了。 happing hacking，完美解决中英文切换问题。 ","date":"2025-01-10","objectID":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/:4:1","tags":[],"title":"nvim im select remote 在远程机器上丝滑切换输入法","uri":"/2025-01-10-nvim-im-select-remote-%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B8%9D%E6%BB%91%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":[],"content":"使用 vim 进行中文输入，遇到的最大困难是要频繁的切换中英文，这个操作是比较繁琐的，往往会打断创作思路。我们的想法是，在 insert 模式下，使用中文输入；但是在 normal 模式下，则自动切换到英文输入，如此可以方便各种键位的操作。 在网上找了一会，发现有一个 im-select 的插件可以实现这个目的，使用起来非常的丝滑。 im-select ## 需要确认以下输入法其中的任何一个有安装即可 apt-get install fcitx sudo apt install fcitx5 sudo apt install ibus ## install sogou and then reboot apt --fix-broken install ## https://www.thisfaner.com/p/ubuntu-ime-install/ return { \"keaising/im-select.nvim\", config = function() require(\"im_select\").setup({ -- IM will be set to `default_im_select` in `normal` mode -- For Windows/WSL, default: \"1033\", aka: English US Keyboard -- For macOS, default: \"com.apple.keylayout.ABC\", aka: US -- For Linux, default: -- \"keyboard-us\" for Fcitx5 -- \"1\" for Fcitx -- \"xkb:us::eng\" for ibus -- You can use `im-select` or `fcitx5-remote -n` to get the IM's name -- default_im_select = \"com.apple.keylayout.ABC\", default_im_select = \"1\", -- Can be binary's name, binary's full path, or a table, e.g. 'im-select', -- '/usr/local/bin/im-select' for binary without extra arguments, -- or { \"AIMSwitcher.exe\", \"--imm\" } for binary need extra arguments to work. -- For Windows/WSL, default: \"im-select.exe\" -- For macOS, default: \"macism\" -- For Linux, default: \"fcitx5-remote\" or \"fcitx-remote\" or \"ibus\" default_command = \"fcitx-remote\", -- Restore the default input method state when the following events are triggered set_default_events = { \"VimEnter\", \"FocusGained\", \"InsertLeave\", \"CmdlineLeave\" }, -- Restore the previous used input method state when the following events -- are triggered, if you don't want to restore previous used im in Insert mode, -- e.g. deprecated `disable_auto_restore = 1`, just let it empty -- as `set_previous_events = {}` keep_quiet_on_no_binary = false, -- Async run `default_command` to switch IM or not async_switch_im = true }) end, } 标点符号的问题 配置文件在目录~/.config/fcitx/data 配置文件是 punc-ng.mb-zh_CN 和 punc.mb.zh_CN 填写，然后重启输入法即可 . 。 , ， ? ？ \" “ ” : ： ; ； ' ‘ ’ \u003c 《 \u003e 》 \\ 、 ! ！ $ ￥ ^ …… * * _ —— ( （ ) ） [ 「 ] 」 ~ ～ ref [我的 fcitx 配置]：https://github.com/alswl/fcitx-config ","date":"2025-01-08","objectID":"/2025-01-08-nvim-im-select/:0:0","tags":[],"title":"nvim im select","uri":"/2025-01-08-nvim-im-select/"},{"categories":[],"content":"这几天发现有一个 crontab 没有启动，一开始以为是脚本有问题，所以添加了日志重定向。可是还是没有任何输出，所以怀疑是 crontab 没有执行，然后查看系统日志 /var/log/cron 发现有报错 crond[81985]: (infra) FAILED to authorize user with PAM (Module is unknown) 在网上搜索发现是 PAM 密钥过期了，需要重新设置 chage -M 99999 root chage -M 99999 infra chage -M 99999 spd chage -M 99999 ops 重新查看就可以了 chage -l infra Last password change : Jul 12, 2024 Password expires : never Password inactive : never Account expires : never Minimum number of days between password change : 0 Maximum number of days between password change : 99999 Number of days of warning before password expires : 7 ","date":"2025-01-08","objectID":"/2025-01-08-crontab-failed-to-authorize-user-with-pam/:0:0","tags":[],"title":"crontab FAILED to authorize user with PAM","uri":"/2025-01-08-crontab-failed-to-authorize-user-with-pam/"},{"categories":[],"content":"这两天在使用 hhkb 键盘，并通过配置 xremap 进行键位映射，以更加舒服的姿势写代码。由于在 hhkb 键盘中，Ctrl 和 Shift 都处于左手小拇指的位置，这导致我在输入 shift+; 的时候，有可能此时的小拇指还停留在 Ctrl 键，进而触发来 Ctrl+;。然后诡异的是，这时候会跳出一个列表，显示 Select to paste，上面保留了系统粘贴板的信息。其实，这个是为了快速的输入最近的粘贴缓存，但是在这个情况下，我误触发键盘，极容易导致不停的跳出列表，非常影响效率。 fcitx menu 找到快捷键一开始，我没有想到这个是由于 fcitx 引起的，而是猜测可能是 terminal 或者 tmux 等程序的配置。但是触发这个行为，是都任何一个软件上对会出现，比如 chrome、 sublime，所以可以肯定是在系统层面。 我试图找到触发这个行为的快捷键，先是在系统层面的 system settings 看看是不是有设置；然而并没有找到相关的快捷键。这就有点难办了，因为这个是全局范围的行为，（一开始认为）应该跟某个特定软件无关。 遇到相同问题然后在网上搜索关键字 select to paste，跳出第一个博客 Changing Linux Select to Paste Menu fcitx Keyboard Shortcut https://cprimozic.net/notes/posts/changing-linux-select-to-paste-menu-fcitx-keyboard-shortcut/ 仔细阅读文章，发现描述的就是我当前遇到的问题：莫名其妙的弹出 「select to paste」 的列表。于是在继续搜索发现 problem with unwanted Klipper (or other) keyboard shortcut。所以可能肯定就是 「fcitx」 引起的问题。 这个也解释了为什么在系统层面没有设置快捷键，但是还是有触发全局行为。原来是因为输入法作为后台应用程序，其实一直处于启动的状态，所以会影响所有的软件。 修改快捷键定位到问题所在，剩下的就是修改配置了。需要打开 fcitx，然后在 Addon 找到 第一个 Clipboard，打开之后就会出现 Trigger Key for Clipboard History List，看到上面的 Ctrl+;，恍然大悟：就是这个引起的问题呀。 不过目前看，其实这个设置还是很有用处的，可以帮助我们快速从最近的粘贴搬拷贝文本，而不用通过鼠标的粘贴，减少了手指离开键盘的操作。于是，我将其设置为 Altr+;。 clipboard history ","date":"2025-01-06","objectID":"/2025-01-06-%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84-select-to-paste-%E6%8C%89%E9%94%AE/:0:0","tags":[],"title":"莫名其妙的 Select to paste 按键","uri":"/2025-01-06-%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84-select-to-paste-%E6%8C%89%E9%94%AE/"},{"categories":[],"content":"周末的时候，我们组对一台 CentOS7 的机器进行了升级，原因是需要部分软件要求至少是 glibc2.18 及以上版本。整个升级流程还算顺利，程序也都能正常运行 $ locate libc.so /usr/lib64/libc.so /usr/lib64/libc.so.6 $ strings /lib64/libc.so.6 |grep GLIBC |grep 2.28 GLIBC_2.28 但是周一交易盘前，我们发现一个奇怪的现象：shm 相关的操作，对于 /dev/shm 根目录下面的共享内存操作是正常的，但是对于带有子目录，如 /dev/shm/spdm/spdx_param，会出现程序崩溃。然后我把这个现象跟领导沟通了一下，由他编译一个 debug 版本，进入 gdb 调试看看。 他确实发现，一旦遇到带有目录路径的 shm_open 就会出问题，返回的 fd 是 -1，这说明操作系统无法打开文件句柄。他经过一番 ChatGPT 之后，给出的结论是 今天发现了一个情况，在某一台服务器上不能通过shmv命令来访问或者创建带字目录的共享内存文件，比如/dev/shm/abc/xyz，根源上是shm_open不接受\"abc/xyz\"作为参数，查了相关文档，发现这台机器虽然centos 版本不一样，但是对比发现比这个版本更老或者更新的其他版本是支持abc/xyz这样的共享内存文件名的，现在怀疑是glibc版本导致的，因为这台机器的glic版本相对高一些（2.28)，我们其他服务器绝大多数都是2.17，目前没有定位具体glic哪个版本什么样的改动导致了这个，但是POSIX规范确实要求传给shm_open的文件名除了第一个字符以为不能为/ 当时全组震惊，这意味着我们的技术将被「锁死」在 glibc2.18，无法再继续升级；这也意味着后面有新的程序需要依赖 glibc 更高本版（比如 npm、neovim）将无法使用。 探索 glibc 的改动想到后面全公司的技术都将被「锁死」，这岂能容忍。于是我便想到查看 glibc 的源代码，看看是否有什么变动导致了无法 shm_open 一个子目录的文件句柄。这个算是体力活，到源代码搜索 shm_open 相关的代码即可。代码位于 glibc-2.21/sysdeps/posix/shm_open.c 通过对比，发现 glibc.2.20 与 glibc.2.21 在处理 shm_open 的时候，发生了一些变化 glibc 源代码对比 ","date":"2025-01-06","objectID":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/:0:0","tags":[],"title":"glibc shm_open 一个坑","uri":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/"},{"categories":[],"content":" glibc.2.20 #include \u003cunistd.h\u003e #if ! _POSIX_MAPPED_FILES #include \u003crt/shm_open.c\u003e #else #include \u003cerrno.h\u003e #include \u003csys/mman.h\u003e #include \u003cfcntl.h\u003e #include \u003cstring.h\u003e #include \u003cstdlib.h\u003e #include \u003cpaths.h\u003e #define SHMDIR (_PATH_DEV \"shm/\") /* Open shared memory object. */ int shm_open (const char *name, int oflag, mode_t mode) { size_t namelen; char *fname; int fd; /* Construct the filename. */ while (name[0] == '/') ++name; if (name[0] == '\\0') { /* The name \"/\" is not supported. */ __set_errno (EINVAL); return -1; } namelen = strlen (name); fname = (char *) __alloca (sizeof SHMDIR - 1 + namelen + 1); __mempcpy (__mempcpy (fname, SHMDIR, sizeof SHMDIR - 1), name, namelen + 1); fd = open (name, oflag, mode); if (fd != -1) { /* We got a descriptor. Now set the FD_CLOEXEC bit. */ int flags = fcntl (fd, F_GETFD, 0); if (__builtin_expect (flags, 0) != -1) { flags |= FD_CLOEXEC; flags = fcntl (fd, F_SETFD, flags); } if (flags == -1) { /* Something went wrong. We cannot return the descriptor. */ int save_errno = errno; close (fd); fd = -1; __set_errno (save_errno); } } return fd; } #endif ","date":"2025-01-06","objectID":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/:1:0","tags":[],"title":"glibc shm_open 一个坑","uri":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/"},{"categories":[],"content":" glibc.2.21 #include \u003cunistd.h\u003e #if ! _POSIX_MAPPED_FILES # include \u003crt/shm_open.c\u003e #else # include \u003cfcntl.h\u003e # include \u003cshm-directory.h\u003e /* Open shared memory object. */ int shm_open (const char *name, int oflag, mode_t mode) { SHM_GET_NAME (EINVAL, -1, \"\"); # ifdef O_NOFOLLOW oflag |= O_NOFOLLOW; # endif # ifdef O_CLOEXEC oflag |= O_CLOEXEC; # endif int fd = open (shm_name, oflag, mode); if (fd == -1 \u0026\u0026 __glibc_unlikely (errno == EISDIR)) /* It might be better to fold this error with EINVAL since directory names are just another example for unsuitable shared object names and the standard does not mention EISDIR. */ __set_errno (EINVAL); # ifndef O_CLOEXEC if (fd != -1) { /* We got a descriptor. Now set the FD_CLOEXEC bit. */ int flags = fcntl (fd, F_GETFD, 0); if (__glibc_likely (flags != -1)) { flags |= FD_CLOEXEC; flags = fcntl (fd, F_SETFD, flags); } if (flags == -1) { /* Something went wrong. We cannot return the descriptor. */ int save_errno = errno; close (fd); fd = -1; __set_errno (save_errno); } } # endif return fd; } #endif /* _POSIX_MAPPED_FILES */ shm-directory从 glibc.2.21 开始，gnu 使用了一个宏语句 SHM_GET_NAME，我们继续进入这个宏看看究竟在做什么事情 #define SHM_GET_NAME(errno_for_invalid, retval_for_invalid, prefix) \\ size_t shm_dirlen; \\ const char *shm_dir = __shm_directory (\u0026shm_dirlen); \\ /* If we don't know what directory to use, there is nothing we can do. */ \\ if (__glibc_unlikely (shm_dir == NULL)) \\ { \\ __set_errno (ENOSYS); \\ return retval_for_invalid; \\ } \\ /* Construct the filename. */ \\ while (name[0] == '/') \\ ++name; \\ size_t namelen = strlen (name) + 1; \\ /* Validate the filename. */ \\ if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ { \\ __set_errno (errno_for_invalid); \\ return retval_for_invalid; \\ } \\ char *shm_name = __alloca (shm_dirlen + sizeof prefix - 1 + namelen); \\ __mempcpy (__mempcpy (__mempcpy (shm_name, shm_dir, shm_dirlen), \\ prefix, sizeof prefix - 1), \\ name, namelen) 这里主要做的时候是 根据我们传递给 shm_open 的 name，将其组合成 /dev/shm 的路径，然后使用 open 打开。我们也可以发现，在 linux 的哲学：「一切皆文件」 对 shm_name 进行判断，这里面有 名字不能非看，且长度不能超过 NAME_MAX，这个定义在 limits.h，是 255o 使用函数 strchr 判断传递的名字是否有 /，即是否是一个带有目录路径的文件名 这里就是问题所在了，如果 SHM_GET_NAME 发现我们传递的名称是 spdm/spdx_param，就返回 retval_for_invalid，即 -1，这代表我们得到的 fd 是非正常，因此 shm 才会出现 coredump 的报错。 /* Validate the filename. */ \\ if (namelen == 1 || namelen \u003e= NAME_MAX || strchr (name, '/') != NULL) \\ { \\ __set_errno (errno_for_invalid); \\ return retval_for_invalid; \\ } \\ 于是，我们的想法是把这个判断去掉，允许系统打开 /dev/shm/spdm/spdx_param。然后重新编译 glibc 即可。 /* Validate the filename. */ \\ // 去掉对 包含路径的文件名的限制 if (namelen == 1 || namelen \u003e= NAME_MAX ) \\ { \\ __set_errno (errno_for_invalid); \\ return retval_for_invalid; \\ } \\ 如此一来，问题即得到解决了。 Tips glibc 2.17~2.28 是可以兼容的，在 CentOS7 上可以升级兼容，但是更高版本的 glibc 可能会导致系统不兼容，一定要谨慎操作 ref gnu glibc.2.28: https://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz glibc.2.20: https://elixir.bootlin.com/glibc/glibc-2.20.90/source/sysdeps/posix/shm_open.c glibc.2.21: https://elixir.bootlin.com/glibc/glibc-2.21.90/source/sysdeps/posix/shm_open.c GLIBC_2.18 configure 不支持make 4.xx ","date":"2025-01-06","objectID":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/:2:0","tags":[],"title":"glibc shm_open 一个坑","uri":"/2025-01-06-glibc-shm_open-%E4%B8%80%E4%B8%AA%E5%9D%91/"},{"categories":[],"content":"kanagawa 一款柔和色调的主题，相比 tokyo.night 没有那么的刺眼。主要特别注意的是，这款插件采用了 jit 编译技术，一旦修改配置，还需要执行 KanagawaCompile 才能生效。 kanagawa -- Kanagawa comes in three variants: -- 1.wave the default heart-warming theme, -- 2.dragon for those late-night sessions -- 3.lotus for when you're out in the open. return { \"rebelot/kanagawa.nvim\", config = function () require('kanagawa').setup({ -- If you enable compilation, make sure to run :KanagawaCompile command every time you make changes to your config. compile = true, -- enable compiling the colorscheme undercurl = true, -- enable undercurls commentStyle = { italic = true, bold = false}, functionStyle = { bold = true }, keywordStyle = { italic = true}, statementStyle = { bold = true }, typeStyle = {italic = true, bold = false}, transparent = true, -- do not set background color dimInactive = false, -- dim inactive window `:h hl-NormalNC` terminalColors = true, -- define vim.g.terminal_color_{0,17} globalStatus = true, -- adjust window separators highlight for laststatus=3 colors = { -- add/modify theme and palette colors palette = {}, theme = { wave = {}, lotus = {}, dragon = {}, all = { ui = { bg_gutter = \"none\", bg_p1 = 'none', }, } }, }, overrides = function(colors) -- add/modify highlights -- eg: ~/.config/nvim/lazy/kanagawa.nvim/lua/kanagawa/highlights/editor.lua local theme = colors.theme local palette = colors.palette return { -- CursorLineNr = { fg = theme.diag.warning, bg = theme.ui.bg_gutter, bold = true }, CursorLineNr = { fg = \"#709db2\", bg = theme.ui.bg_gutter, bold = false }, -- CursorLineNr = { fg = \"#545c7e\", bg = theme.ui.bg_gutter, bold = true }, -- Visual Visual mode selection. -- Visual = { bg = theme.ui.bg_visual }, -- Visual = { bg = palette.waveBlue2 }, Visual = { bg = \"#2D4F67\" }, -- VisualNOS Visual mode selection when vim is \"Not Owning the Selection\". VisualNOS = { link = \"Visual\" }, NormalFloat = { bg = \"none\" }, FloatBorder = { bg = \"none\" }, FloatTitle = { bg = \"none\" }, -- Save an hlgroup with dark background and dimmed foreground -- so that you can use it where your still want darker windows. -- E.g.: autocmd TermOpen * setlocal winhighlight=Normal:NormalDark NormalDark = { fg = theme.ui.fg_dim, bg = theme.ui.bg_m3 }, -- Popular plugins that open floats will link to NormalFloat by default; -- set their background accordingly if you wish to keep them dark and borderless LazyNormal = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim }, MasonNormal = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim }, -- Search = { bg = colors.surimiOrange }, -- Search = { bg = '#FFA066' }, } end, theme = \"wave\", -- Load \"wave\" theme when 'background' option is not set background = { -- map the value of 'background' option to a theme dark = \"dragon\", -- try \"dragon\" ! light = \"lotus\" }, }) end } 修改 lualine打开 ~/.config/nvim/lazy/kanagawa.nvim/lua/lualine/themes/kanagawa.lua local theme = require(\"kanagawa.colors\").setup().theme local kanagawa = {} kanagawa.normal = { a = { bg = theme.syn.fun, fg = theme.ui.bg_m3 }, b = { bg = theme.diff.change, fg = theme.syn.fun }, -- c = { bg = theme.ui.bg_p1, fg = theme.ui.fg }, c = { bg = nil, fg = \"#938AA9\" }, } kanagawa.insert = { a = { bg = theme.diag.ok, fg = theme.ui.bg }, b = { bg = theme.ui.bg, fg = theme.diag.ok }, } kanagawa.command = { a = { bg = theme.syn.operator, fg = theme.ui.bg }, b = { bg = theme.ui.bg, fg = theme.syn.operator }, } kanagawa.visual = { a = { bg = theme.syn.keyword, fg = theme.ui.bg }, b = { bg = theme.ui.bg, fg = theme.syn.keyword }, } kanagawa.replace = { a = { bg = theme.syn.constant, fg = theme.ui.bg }, b = { bg = theme.ui.bg, fg = theme.syn.constant }, } kanagawa.inactive = { a = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim }, b = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim, gui = \"bold\" }, c = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim }, } if vim.g.kanagawa_lualine_bold then for _, mode in pairs(kanagawa) do mode.a.gui = \"bold\" end end return kanagawa tmux 颜色问题tmux 可能出现显示颜色问题，需要修改 ","date":"2025-01-05","objectID":"/2025-01-05-nvim-kanagawa-theme/:0:0","tags":[],"title":"nvim kanagawa theme","uri":"/2025-01-05-nvim-kanagawa-theme/"},{"categories":[],"content":" alacritty ## ----------------------------------------------------------------------------env [env] TERM='xterm-256color' # TERM='Alacritty' ","date":"2025-01-05","objectID":"/2025-01-05-nvim-kanagawa-theme/:1:0","tags":[],"title":"nvim kanagawa theme","uri":"/2025-01-05-nvim-kanagawa-theme/"},{"categories":[],"content":" tmux set -g default-terminal \"screen-256color\" set-option -sa terminal-overrides ',screen-256color:Tc' ref: https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6 ","date":"2025-01-05","objectID":"/2025-01-05-nvim-kanagawa-theme/:2:0","tags":[],"title":"nvim kanagawa theme","uri":"/2025-01-05-nvim-kanagawa-theme/"},{"categories":[],"content":"I’m writting code on a rather outdated Linux CentoOS7, with glibc of version up to ‘2.18’. And for a meanwhile, there is no hope to upgrade it, since we’ve deployed quite a lot of services, meaning updating may cause some unanticipated crashes. I’ve also learned that starting from v0.10.0, neovim would support buildin inlay, which definitely enhance our code reading. It’s gonna to be the main reason I need to upgrade nvim. The sad part of this story is that, the official release of nvim require at lease glibc of version 2.29. However, there is on repo provide unsupported release version of nvim for some legacy systems. And it only require glibc of version 2.17. What a great job! In case anyone would need this nvim with lower glibc https://github.com/neovim/neovim-releases Now I’m happy with it. ","date":"2025-01-05","objectID":"/2025-01-05-nvim-with-lower-glibc-version/:0:0","tags":[],"title":"nvim with lower glibc version","uri":"/2025-01-05-nvim-with-lower-glibc-version/"},{"categories":[],"content":"Reading notes from Robert Nystrom’s Game Programming Patterns. Chap.1 Architecture, Performance, and GamesWe have a few forces in play: We want nice architecture so the code is easier to understand and over the lifetime of the project. We want fast runtime Performance We want to get today’s features done quickly. Summary: Abstraction and decoupling make evolving your program faster and easier, but don’t waster time doing them unless you’re confident the code in question needs that flexibility. Think about and design for performance throughout your development cycle, but put off the low-level, nitty-gritty optimizations that lock assumptions into your code until as late as possible. Move quickly to explore your game’s design space, but don’t go so fast that you leave a mess behind you. You’ll have to live with it, after all. If you are going to ditch code, don’t waster time making it pretty. Rock stars trash hotel rooms because they know they’re going to check out the next day. But, most of all, if you want to make something fun, have fun making it. Chap.2 Design Patterns Revisited Chap. Data Locality 注意 But because of caching, the way you organize data directly impacts performance. Modern CPUs have caches to speed up memory access. These can access memory adjacent to recently accessed memory much quicker. Take advantage of that to improve performance by increasing data locality: keeping data in contiguous memory in the order that you process it. ","date":"2025-01-04","objectID":"/2025-01-04-nystrom--game-programming-patterns/:0:0","tags":[],"title":"Nystrom: Game Programming Patterns","uri":"/2025-01-04-nystrom--game-programming-patterns/"},{"categories":[],"content":"今天在写代码的时候，遇到一个有趣的事情：有时候我们只打开一个文件，但是 bufferline 也会显示该文件相关的操作。 bufferline ","date":"2025-01-04","objectID":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/:0:0","tags":[],"title":"nvim bufferline 设置过滤条件","uri":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/"},{"categories":[],"content":" 过滤条件其实 bufferline 有提供了一个 custom_filter 的过滤机制，允许我们通过设置一定的条件，不要显示文件。这个回调函数提供了两个参数 buf_number: 当前 buffer 的下标 buf_numbers: 包含所有 buffer 的一个列表信息 可以实现的过滤条件有： 文件类型 目录 以及我们这次讨论的基于数量的过滤 bufferline-noshow ","date":"2025-01-04","objectID":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/:1:0","tags":[],"title":"nvim bufferline 设置过滤条件","uri":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/"},{"categories":[],"content":" 实现通过对比 buf_numbers 的数量，返回一个布尔值 config = function() local bufferline = require(\"bufferline\") require(\"bufferline\").setup({ options = { custom_filter = function(buf_number, buf_numbers) if #(buf_numbers) \u003c 2 then return false end return true end, } }) end 全部的代码可以参考： return { 'akinsho/bufferline.nvim', dependencies = { 'nvim-tree/nvim-web-devicons', \"famiu/bufdelete.nvim\", }, enabled = true, event = \"BufRead\", config = function() local bufferline = require(\"bufferline\") require(\"bufferline\").setup({ options = { custom_filter = function(buf_number, buf_numbers) --如果是defx则隐藏 local finded, _ = string.find(vim.bo[buf_number].filetype, \"defx\") if finded ~= nil then return false end -- filter out filetypes you don't want to see -- if vim.bo[buf_number].filetype ~= \"\u003ci-dont-want-to-see-this\u003e\" then -- return true -- end -- filter out by buffer name -- if vim.fn.bufname(buf_number) ~= \"\u003cbuffer-name-I-dont-want\u003e\" then -- return true -- end -- filter out based on arbitrary rules -- e.g. filter out vim wiki buffer from tabline in your work repo -- if vim.fn.getcwd() == \"\u003cwork-repo\u003e\" and vim.bo[buf_number].filetype ~= \"wiki\" then -- return true -- end -- filter out by it's index number in list (don't show first buffer) -- if buf_numbers[1] ~= buf_number then -- return false -- end -- do not show when total buffer number is 1 if #(buf_numbers) \u003c 2 then return false end return true end, }) end, } ","date":"2025-01-04","objectID":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/:2:0","tags":[],"title":"nvim bufferline 设置过滤条件","uri":"/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/"},{"categories":[],"content":"一觉醒来发现天塌了：我的 Linux Mint 机器无法登录。联想到昨天启动了一个 Docker 用于测试更新 gcc14，因而有可能是编译导致的临时目标文件太大，占用磁盘空间，导致系统启动无法正常读写相关启动的配置文件。 ","date":"2025-01-04","objectID":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/:0:0","tags":[],"title":"docker 占用磁盘空间太大","uri":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/"},{"categories":[],"content":" 进入磁盘首先需要解决的问题是：如何在无法登陆操作系统的情况下，清理磁盘空间？ 这个时候我想起原先安装 ","date":"2025-01-04","objectID":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/:1:0","tags":[],"title":"docker 占用磁盘空间太大","uri":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/"},{"categories":[],"content":" docker 清理 docker system prune -a -f ","date":"2025-01-04","objectID":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/:2:0","tags":[],"title":"docker 占用磁盘空间太大","uri":"/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/"},{"categories":[],"content":"决定在新的一年折腾一下自己，学习一些新的技能，比如 使用 c++ 开发一个高性能、低延迟的通信系统 更加了解 Linux 操作系统底层涉及 熟练使用 nvim 以及学习 lua 语言开发插件 …… 再比如，本篇博客的主题：入坑 HHKB 无刻键盘，强迫自己在盲打情况下的写代码能力。 其实，之前在办公室看意味年轻的小伙子使用无刻度键盘，就已经产生了极大的好奇心，纳闷为啥可以在如此紧凑的键盘布局中，组合如此之多的快捷键，可以让使用者更加专注敲代码这个事情。当然，后来也是不了了之，因为真正在办公室需要的，其实是解决问题的能力，而不是各种花里胡峭。至于说为什么现在又心血来潮，开始入坑呢？当然，主要还是两个字：折腾。也是希望自己能走出舒适区，通过学习新的知识，不断突破个人技能。 ","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:0:0","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":" 购买这款键盘 HHKB HYBRID Type-S 无刻静音键盘，其实是我之前在京东 6.18 活动的时候就已经下手了，只不过后来由于事情太多，没有更多的精力花在折腾上。翻看购买记录，发现当时正处于促销活动期，价格只要 999，相比于现在的 2499，实在是太香了。 当时的购买价格只要999 ","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:1:0","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":" 开发配置与使用我的键位设置为： 开启 2、3、4： Fn 键位在左边，Win 键位在右边（比较少使用） Fn-\u003c/Enter\u003e 通过在 Linux 配置输入法切换 Ctrl-\u003c/Space\u003e 对应 zsh 的命令行自动补全 在 nvim 设置 jk 为 Esc，减少手指移动 ","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:2:0","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":" xremap我之前使用 xremap，把 CapLock 大写键位修改成 Ctr，方便小拇指触达。而在 HHKB 键盘，Ctrl 天然位于左手小拇指旁边。可以说是十分贴心了。 我这边记录一下 xremap 的配置，方便其他有需求的朋友参考 modmap: - name: Cap as Esc # Optional application: # Optional not: [Google-chrome] # or # only: [Alacritty.Alacritty] remap: # Required CapsLock: Esc #keymap ","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:2:1","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":" zsh 命令行历史自动补全我原先使用方向键来实现 auto-suggestion 的命令行自动补全。而在 HHKB 键盘，方向键的使用是比较复杂的，需要同时按住 Fn 和 ;，这个操作有点不太顺手，要求双手离开主键位。 于是我想到看看能不能在 zsh 中以快捷键的形式，配置更加顺手的键位来实现自动补全。正好 auto-suggestion 提供了这个配置。 # 自动建议 # zinit ice lucid wait=\"0\" atload='_zsh_autosuggest_start' # zinit light zsh-users/zsh-autosuggestions # zinit wait lucid light-mode for \\ # atload\"_zsh_autosuggest_start; \\ # ZSH_AUTOSUGGEST_STRATEGY=(history completion) \\ # ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \\ # ZSH_AUTOSUGGEST_HISTORY_IGNORE=' *' \\ # bindkey '^p' history-search-backward; \\ # bindkey '^o' history-search-forward; \\ # bindkey '^n' autosuggest-accept; \\ # bindkey '^e' autosuggest-execute; \\ # bindkey '^a' autosuggest-toggle; \\ # bindkey '^ ' autosuggest-accept\" \\ # zsh-users/zsh-autosuggestions # https://github.com/zsh-users/zsh-autosuggestions/issues/642 # For example, this would bind ctrl + space to accept the current suggestion. zinit wait lucid light-mode for \\ atload\"_zsh_autosuggest_start; \\ ZSH_AUTOSUGGEST_STRATEGY=(history completion) \\ ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \\ ZSH_AUTOSUGGEST_HISTORY_IGNORE=' *' \\ bindkey '^ ' autosuggest-accept;\" \\ zsh-users/zsh-autosuggestions ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=yellow' ","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:2:2","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":" tmux","date":"2025-01-03","objectID":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/:2:3","tags":[],"title":"入坑 HHKB 无刻键盘","uri":"/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/"},{"categories":[],"content":"We could bind key to zsh-autosuggestions. This is especially helpful when we use HHKB, whereas there is no such thing as left-arrow or right-arrow. # 自动建议 # zinit wait lucid light-mode for \\ # atload\"_zsh_autosuggest_start; \\ # ZSH_AUTOSUGGEST_STRATEGY=(history completion) \\ # ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \\ # ZSH_AUTOSUGGEST_HISTORY_IGNORE=' *' \\ # bindkey '^p' history-search-backward; \\ # bindkey '^o' history-search-forward; \\ # bindkey '^n' autosuggest-accept; \\ # bindkey '^e' autosuggest-execute; \\ # bindkey '^a' autosuggest-toggle; \\ # bindkey '^ ' autosuggest-accept\" \\ # zsh-users/zsh-autosuggestions # https://github.com/zsh-users/zsh-autosuggestions/issues/642 # For example, this would bind ctrl + space to accept the current suggestion. zinit wait lucid light-mode for \\ atload\"_zsh_autosuggest_start; \\ ZSH_AUTOSUGGEST_STRATEGY=(history completion) \\ ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \\ ZSH_AUTOSUGGEST_HISTORY_IGNORE=' *' \\ bindkey '^ ' autosuggest-accept;\" \\ zsh-users/zsh-autosuggestions ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=yellow' ","date":"2025-01-03","objectID":"/2025-01-03-zsh-auto-suggestion-with-key-binding/:0:0","tags":[],"title":"zsh auto suggestion with key binding","uri":"/2025-01-03-zsh-auto-suggestion-with-key-binding/"},{"categories":[],"content":"在编译一个代码模块的是否，gcc 报错 /usr/bin/ld: cannot find crt1.o: No such file or directory 我们需要让 gcc 识别到 crt 的路径 find /usr -name crti* /usr/lib32/crti.o /usr/lib/i386-linux-gnu/crti.o /usr/lib/x86_64-linux-gnu/crti.o /usr/libx32/crti.o 可以看到，在默认的路径找到了 /usr/lib32/crt1.o，但是由于这个指向的是 32 位操作系统的动态库（可能是当前系统安装了多个编译环境），导致 gcc 编译文件无法使用 64 位的动态库。同时，我们还发现 /usr/lib/x86_64-linux-gnu/crti.o 这个版本是 64 位动态库，因此需要让 gcc 使用该版本 sudo apt-get install libc6-dev export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH} export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:${LIBRARY_PATH} sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64 ","date":"2025-01-03","objectID":"/2025-01-03-crti.so-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":[],"title":"crti.so 找不到的解决方法","uri":"/2025-01-03-crti.so-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":[],"content":"zoxide 是一款类比 cd 的目录导航工具，但是提供了基于使用频率的快速跳转功能。 ","date":"2025-01-01","objectID":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/:0:0","tags":[],"title":"使用 zoxide","uri":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/"},{"categories":[],"content":" 安装 curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh 默认安装在 ~/.local/bin/zoxide total 1.3M drwxrwxr-x 2 william william 4.0K Jan 1 12:26 . drwxrwxr-x 7 william william 4.0K Mar 13 2024 .. -rwxr-xr-x 1 william william 1.2M Jan 1 12:26 zoxide ## clear .zcompdump rm ~/.zcompdump*; compinit which z z () { __zoxide_z \"$@\" } ","date":"2025-01-01","objectID":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/:1:0","tags":[],"title":"使用 zoxide","uri":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/"},{"categories":[],"content":" 配置 ##============================================================================= ## zoxide export PATH=/home/william/.local/bin:$PATH eval \"$(zoxide init --cmd cd zsh)\" 这里，我使用了 cd 替代 z，使得 z 依然保留其他的快捷键。 使用 cd path 进行跳转 which cd cd () { __zoxide_z \"$@\" } 同时，还可以使用 cdi 进行交互式的操作。 ","date":"2025-01-01","objectID":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/:2:0","tags":[],"title":"使用 zoxide","uri":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/"},{"categories":[],"content":" zsh-z需要注意的，如果使用 zsh 安装了 zsh-z，可能导致 z 命令冲突，这时候需要从 ~/.zshrc 去掉 ## z vs autojump vs zoxide # zinit light agkozak/zsh-z ","date":"2025-01-01","objectID":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/:3:0","tags":[],"title":"使用 zoxide","uri":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/"},{"categories":[],"content":" 使用技巧 使用 z abs \u003cspace\u003e\u003cTab\u003e 进行补全 zoxide add zoxide remove zoxide query zoxide edit 可以进行编辑操作(add, detele) ","date":"2025-01-01","objectID":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/:4:0","tags":[],"title":"使用 zoxide","uri":"/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/"},{"categories":[],"content":"今天使用 yt-dlp 下载视频时，遇到一个报错 [youtube] Extracting URL: https://youtu.be/_dLLIjKz9MY [youtube] _dLLIjKz9MY: Downloading webpage ........................................... [Merger] Merging formats into \"Fear in Tech - Titus Winters - Keynote Meeting C++ 2024 [_dLLIjKz9MY].mp4\" ERROR: Postprocessing: Stream #1:0 -\u003e #0:1 (copy) 查找一遍，发现这个是因为 yt-dlp 与 ffmpeg 版本冲突导致的，导致yt-dlp --merge-output-format mp4 无法合成 mp4 格式。因此需要升级 ffmpeg。 ","date":"2024-12-22","objectID":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/:0:0","tags":[],"title":"Ubuntu 升级 ffmpeg","uri":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/"},{"categories":[],"content":" 升级 yasm ## update yasm wget https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz tar -xvf yasm-1.3.0.tar.gz cd yasm-1.3.0 ./configure make -j make install ","date":"2024-12-22","objectID":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/:1:0","tags":[],"title":"Ubuntu 升级 ffmpeg","uri":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/"},{"categories":[],"content":" 升级 ffmpeg wget https://ffmpeg.org/releases/ffmpeg-7.0.1.tar.xz tar -xvf ffmpeg-7.0.1.tar.xz cd ffmpeg-7.0.1 ./configure make install ./ffmpeg --version whereis ffmpeg ll /usr/bin/ffmpeg cp ffmpeg* ffprobe /usr/bin/ ffmpeg --version ","date":"2024-12-22","objectID":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/:2:0","tags":[],"title":"Ubuntu 升级 ffmpeg","uri":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/"},{"categories":[],"content":" 成功下载 [youtube] Extracting URL: https://www.youtube.com/watch?v=nXcswVW0-Wk [youtube] nXcswVW0-Wk: Downloading webpage [youtube] nXcswVW0-Wk: Downloading ios player API JSON [youtube] nXcswVW0-Wk: Downloading mweb player API JSON [youtube] nXcswVW0-Wk: Downloading m3u8 information [info] nXcswVW0-Wk: Downloading 1 format(s): 616+251 [hlsnative] Downloading m3u8 manifest [hlsnative] Total fragments: 655 [download] Destination: Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].f616.mp4 [download] 100% of 441.60MiB in 00:04:40 at 1.57MiB/s [download] Destination: Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].f251.webm [download] 100% of 53.14MiB in 00:00:05 at 10.23MiB/s [Merger] Merging formats into \"Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].mp4\" Deleting original file Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].f616.mp4 (pass -k to keep) Deleting original file Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].f251.webm (pass -k to keep) [Metadata] Adding metadata to \"Herb Sutter - Peering forward C++’s next decade [nXcswVW0-Wk].mp4\" [1] + done yt-dlp -f 'bv[height\u003c=1080]+ba/b[height\u003c=1080]' --embed-metadata mp4 --proxy ","date":"2024-12-22","objectID":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/:3:0","tags":[],"title":"Ubuntu 升级 ffmpeg","uri":"/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/"},{"categories":[],"content":"利用 reticulate 接口，我们可以在 R 中调用 python 封装的函数。 ","date":"2024-11-28","objectID":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/:0:0","tags":[],"title":"R 调用 python","uri":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/"},{"categories":[],"content":" 环境变量 export LD_LIBRARY_PATH=/home/ops/anaconda3/lib:/shared/trading/lib/gcc/lib64:/shared/trading/lib:/shared/trading/lib/gcc9/lib64:/shared/trading/lib/gcc9/lib:${LD_LIBRARY_PATH} export PATH=/shared/trading/lib/gcc/bin:/shared/trading/lib/binutils/bin:/shared/trading/lib/gcc9/bin:${PATH} ","date":"2024-11-28","objectID":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/:1:0","tags":[],"title":"R 调用 python","uri":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/"},{"categories":[],"content":" 修改 Make mkdir -p ~/.R vim ~/R/Makevars CC = /shared/trading/lib/gcc9/bin/gcc CXX = /shared/trading/lib/gcc9/bin/g++ CXXSTD = -std=c++11 CXXFLAGS = -g -O3 -Wall -fPIC -pipe -Wno-unused -pedantic -static-libgcc -static-libstdc++ LD_LIBRARY_PATH = /shared/trading/lib/gcc9/lib64:/shared/trading/lib/gcc9/lib:$LD_LIBRARY_PATH CPLUS_INCLUDE_PATH = /shared/trading/lib/gcc9/include:$CPLUS_INCLUDE_PATH #CXX17 = g++-7 -std=gnu++17 -fPIC CXX11 = g++ CXX14 = g++ CXX17 = g++ CXX17STD = -std=c++17 ","date":"2024-11-28","objectID":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/:2:0","tags":[],"title":"R 调用 python","uri":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/"},{"categories":[],"content":" 安装 reticulate install.packages(\"https://cran.r-project.org/src/contrib/Archive/reticulate/reticulate_1.25.tar.gz\", repos=NULL, type=\"source\") install.packages(\"https://cran.r-project.org/src/contrib/Archive/RcppTOML/RcppTOML_0.1.3.tar.gz\", repos=NULL, type=\"source\") ","date":"2024-11-28","objectID":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/:3:0","tags":[],"title":"R 调用 python","uri":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/"},{"categories":[],"content":" 使用 Sys.setenv(RETICULATE_PYTHON = \"~/miniconda3/bin/python\") library(reticulate) use_python(\"~/miniconda3/bin/python\") source_python('/fs/public/ops/config/ceph.py') dt \u003c- read_s3_csv('raven/futures_minute/prod/trade_config/GTJA_ZGC_SHFE/2024-11-28.csv') print(dt) ","date":"2024-11-28","objectID":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/:4:0","tags":[],"title":"R 调用 python","uri":"/2024-11-28-r-%E8%B0%83%E7%94%A8-python/"},{"categories":[],"content":" 问题安装 python-ldap 失败，报错如下： ~/miniconda3/bin/python -m pip install python-ldap [Nov15 17:37:32] Looking in indexes: https://mirrors.cloud.tencent.com/pypi/simple Collecting python-ldap Using cached https://mirrors.cloud.tencent.com/pypi/packages/fd/8b/1eeb4025dc1d3ac2f16678f38dec9ebdde6271c74955b72db5ce7a4dbfbd/python-ldap-3.4.4.tar.gz (377 kB) Installing build dependencies ... done Getting requirements to build wheel ... done Preparing metadata (pyproject.toml) ... done Collecting pyasn1\u003e=0.3.7 Using cached https://mirrors.cloud.tencent.com/pypi/packages/c8/f1/d6a797abb14f6283c0ddff96bbdd46937f64122b8c925cab503dd37f8214/pyasn1-0.6.1-py3-none-any.whl (83 kB) Collecting pyasn1-modules\u003e=0.1.5 Using cached https://mirrors.cloud.tencent.com/pypi/packages/77/89/bc88a6711935ba795a679ea6ebee07e128050d6382eaa35a0a47c8032bdc/pyasn1_modules-0.4.1-py3-none-any.whl (181 kB) Building wheels for collected packages: python-ldap Building wheel for python-ldap (pyproject.toml) ... error error: subprocess-exited-with-error × Building wheel for python-ldap (pyproject.toml) did not run successfully. │ exit code: 1 ╰─\u003e [83 lines of output] /tmp/ycm.lfang/pip-build-env-e1c2lubs/overlay/lib/python3.11/site-packages/setuptools/_distutils/dist.py:261: UserWarning: Unknown distribution option: 'test_suite' warnings.warn(msg) running bdist_wheel running build running build_py creating build/lib.linux-x86_64-cpython-311 copying Lib/slapdtest/__init__.py -\u003e build/lib.linux-x86_64-cpython-311/slapdtest ................................................................................... copying Lib/slapdtest/_slapdtest.py -\u003e build/lib.linux-x86_64-cpython-311/slapdtest running egg_info writing Lib/python_ldap.egg-info/PKG-INFO writing dependency_links to Lib/python_ldap.egg-info/dependency_links.txt writing requirements to Lib/python_ldap.egg-info/requires.txt writing top-level names to Lib/python_ldap.egg-info/top_level.txt reading manifest file 'Lib/python_ldap.egg-info/SOURCES.txt' reading manifest template 'MANIFEST.in' no previously-included directories found matching 'Doc/.build' adding license file 'LICENCE' writing manifest file 'Lib/python_ldap.egg-info/SOURCES.txt' creating build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/README -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/ca.conf -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/ca.pem -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/client.conf -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/client.key -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/client.pem -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/gencerts.sh -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/gennssdb.sh -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/server.conf -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/server.key -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs copying Lib/slapdtest/certs/server.pem -\u003e build/lib.linux-x86_64-cpython-311/slapdtest/certs running build_ext building '_ldap' extension creating build/temp.linux-x86_64-cpython-311/Modules gcc -pthread -B /home/lfang/miniconda3/compiler_compat -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/lfang/miniconda3/include -fPIC -O2 -isystem /home/lfang/miniconda3/include -fPIC -DHAVE_SASL -DHAVE_TLS -DLDAPMODULE_VERSION=3.4.4 \"-DLDAPMODULE_AUTHOR=python-ldap project\" \"-DLDAPMODULE_LICENSE=Python style\" -IModules -I/home/lfang/miniconda3/include/python3.11 -c Modules/LDAPObject.c -o build/temp.linux-x86_64-cpython-311/Modules/LDAPObject.o In file included from Modules/LDAPObject.c:3:0: Modules/common.h:15:18: fatal error: lber.h: No such file or directory #include \u003clber.h\u003e ^ compilation terminated. error: command '/shared/trad","date":"2024-11-15","objectID":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/:1:0","tags":[],"title":"安装 python ldap","uri":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/"},{"categories":[],"content":" 解决","date":"2024-11-15","objectID":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/:2:0","tags":[],"title":"安装 python ldap","uri":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/"},{"categories":[],"content":" 安装 ldap 相关依赖包 yum install openldap-devel python-devel ","date":"2024-11-15","objectID":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/:2:1","tags":[],"title":"安装 python ldap","uri":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/"},{"categories":[],"content":" 安装 python-ldap ~/miniconda3/bin/python -m pip install python-ldap [Nov15 17:39:07] Looking in indexes: https://mirrors.cloud.tencent.com/pypi/simple Collecting python-ldap Using cached https://mirrors.cloud.tencent.com/pypi/packages/fd/8b/1eeb4025dc1d3ac2f16678f38dec9ebdde6271c74955b72db5ce7a4dbfbd/python-ldap-3.4.4.tar.gz (​‌​ 377 kB) Installing build dependencies ... done Getting requirements to build wheel ... done Preparing metadata (pyproject.toml) ... done Collecting pyasn1\u003e=0.3.7 Using cached https://mirrors.cloud.tencent.com/pypi/packages/c8/f1/d6a797abb14f6283c0ddff96bbdd46937f64122b8c925cab503dd37f8214/pyasn1-0.6.1-py3-none-any.​‌​ whl (83 kB) Collecting pyasn1-modules\u003e=0.1.5 Using cached https://mirrors.cloud.tencent.com/pypi/packages/77/89/bc88a6711935ba795a679ea6ebee07e128050d6382eaa35a0a47c8032bdc/pyasn1_modules-0.4.1-py3-n​‌​ one-any.whl (181 kB) Building wheels for collected packages: python-ldap Building wheel for python-ldap (pyproject.toml) ... done Created wheel for python-ldap: filename=python_ldap-3.4.4-cp311-cp311-linux_x86_64.whl size=286532 sha256=24023d98304c16abd74cebc2da6264630dc5514eb86ce72b​‌​ f45eb9c700f9ab3b Stored in directory: /home/lfang/.cache/pip/wheels/e1/1e/2b/95497b4a8f153525aa61c184a47e2fbf35ed9bba349a9c3b08 Successfully built python-ldap Installing collected packages: pyasn1, pyasn1-modules, python-ldap Successfully installed pyasn1-0.6.1 pyasn1-modules-0.4.1 python-ldap-3.4.4 ","date":"2024-11-15","objectID":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/:2:2","tags":[],"title":"安装 python ldap","uri":"/2024-11-15-%E5%AE%89%E8%A3%85-python-ldap/"},{"categories":[],"content":" 安装 libc(3.38) ## 添加源 echo \"deb http://th.archive.ubuntu.com/ubuntu jammy main #添加该行到文件\" \u003e\u003e /etc/apt/sources.list ## 升级 sudo apt update sudo apt install libc6 ","date":"2024-11-10","objectID":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/:1:0","tags":[],"title":"Linux 安装 input leap","uri":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/"},{"categories":[],"content":" 安装 libqt6 sudo add-apt-repository ppa:okirby/qt6-backports sudo apt update apt-get update sudo apt install qt6-base-dev apt --fix-broken install ","date":"2024-11-10","objectID":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/:2:0","tags":[],"title":"Linux 安装 input leap","uri":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/"},{"categories":[],"content":" 安装 Input-Leap到 github 项目主页 下载 ","date":"2024-11-10","objectID":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/:3:0","tags":[],"title":"Linux 安装 input leap","uri":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-input-leap/"},{"categories":[],"content":"无法打开 synergy sudo apt install qt6-base-dev ","date":"2024-11-10","objectID":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-synergy/:0:0","tags":[],"title":"Linux 安装 synergy","uri":"/2024-11-10-linux-%E5%AE%89%E8%A3%85-synergy/"},{"categories":[],"content":"查看文件数 ulimit -a ulimit -n 增加文件数 vim /etc/security/limits.conf * soft nofile 40960 * hard nofile 40960 注销后重新登录即可生效。 ","date":"2024-11-04","objectID":"/2024-11-04-linux-%E6%8A%A5%E9%94%99-too-many-open-files/:0:0","tags":[],"title":"Linux 报错：too many open files","uri":"/2024-11-04-linux-%E6%8A%A5%E9%94%99-too-many-open-files/"},{"categories":[],"content":" yum -y groupinstall \"GNOME Desktop\" yum -y groupinstall \"Development Tools\" yum install -y libGL libGL-devel yum install -y mesa-libGL-devel mesa-libGLU-devel freeglut-devel yum install -y libxcb libxcb-devel libXrender libXrender-devel xcb-util-wm xcb-util-wm-devel xcb-util xcb-util-devel xcb-util-image xcb-util-image-devel xcb-util-keysyms xcb-util-keysyms-devel ","date":"2024-10-31","objectID":"/2024-10-31-centos-%E5%AE%89%E8%A3%85-qt-/:0:0","tags":[],"title":"CentOS 安装 Qt ","uri":"/2024-10-31-centos-%E5%AE%89%E8%A3%85-qt-/"},{"categories":[],"content":"修改 Linux 用户密码过于简单，出现如下报错 BAD PASSWORD: The password contains the user name in some form 这个是一种保护，当然也可以绕过这层限制 echo \"test:abtest123\" | chpasswd 其中 test 是用户名 abtest123 从简单密码 ","date":"2024-10-31","objectID":"/2024-10-31-linux-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%8A%A5%E9%94%99-bad-password--the-password-contains-the-user-name-in-some-form/:0:0","tags":[],"title":"Linux 修改密码报错：BAD PASSWORD: The password contains the user name in some form","uri":"/2024-10-31-linux-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%8A%A5%E9%94%99-bad-password--the-password-contains-the-user-name-in-some-form/"},{"categories":[],"content":" https://nodejs.org/download/release/v16.20.2/ wget https://nodejs.org/download/release/v16.20.2/node-v16.20.2-linux-x64.tar.gz tar -xvf node-v16.20.2-linux-x64.tar.gz cp -r node-v16.20.2-linux-x64.tar.gz ~/local/bin export PATH=~/local/bin/node-v16.20.2-linux-x64/bin:$PATH ","date":"2024-10-30","objectID":"/2024-10-30-%E5%AE%89%E8%A3%85-node.js-%E4%B8%8E-npm/:0:0","tags":[],"title":"安装 node.js 与 npm","uri":"/2024-10-30-%E5%AE%89%E8%A3%85-node.js-%E4%B8%8E-npm/"},{"categories":[],"content":"由于系统升级 g++， 导致 nvim clangd 补全有些问题，需要指定 clangd 的配置 mkdir ~/.config/clangd vim ~/.config/clangd/config.yaml CompileFlags: Add: [ \"-Wall\", \"-I/usr/include/c++/11\", \"-I/usr/include/x86_64-linux-gnu/c++/11\", ] ","date":"2024-10-27","objectID":"/2024-10-27-clangd-%E8%AE%BE%E7%BD%AE%E9%80%89%E9%A1%B9/:0:0","tags":["clangd","nvim","compiler","flags"],"title":"clangd 设置选项","uri":"/2024-10-27-clangd-%E8%AE%BE%E7%BD%AE%E9%80%89%E9%A1%B9/"},{"categories":[],"content":"DoomEmacs 通过使用 evil 模式，很好地结合了 Emacs 与 Vim，非常适合入坑。 ","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:0:0","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" 安装","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:1:0","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" 安装 Emacs sudo add-apt-repository ppa:ubuntuhandbook1/emacs sudo apt install emacs emacs-common emacs --version ","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:1:1","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" 安装 DoomEmacs git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs ~/.config/emacs/bin/doom install ## 如果有修改，需要执行 sync doom sync ","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:1:2","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" 配置需要在环境变量中指定 DOOMDIR export DOOMDIR=~/.doom.d cp templates/config.example.el ~/.doom.d/config.el ","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:2:0","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" ~/.doom.d/config.el ;; ---------------------------------------------------------------------------- ;; $DOOMDIR/config.el -*- lexical-binding: t; -*- ;; Place your private configuration here! Remember, you do not need to run 'doom ;; sync' after modifying this file! ;; ---------------------------------------------------------------------------- ;; theme: --------------------------------------------------------------------- ;; There are two ways to load a theme. Both assume the theme is installed and ;; available. You can either set `doom-theme' or manually load a theme with the ;; `load-theme' function. This is the default: (setq doom-theme 'doom-tokyo-night) ;; Leader: -------------------------------------------------------------------- ;; DoomEmacs default leader is `\u003cSpace\u003e`, here I change it to `;` ;; since it is much more easy (setq doom-leader-key \";\" doom-leader-alt-key \";\") ","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:2:1","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":" 使用","date":"2024-10-27","objectID":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/:3:0","tags":[],"title":"Emacs 入坑指南","uri":"/2024-10-27-emacs-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":[],"content":"zinit ","date":"2024-10-20","objectID":"/2024-10-20-%E4%BD%BF%E7%94%A8-zinit-%E7%AE%A1%E7%90%86-zsh-%E4%BE%9D%E8%B5%96%E5%8C%85/:0:0","tags":[],"title":"使用 zinit 管理 zsh 依赖包","uri":"/2024-10-20-%E4%BD%BF%E7%94%A8-zinit-%E7%AE%A1%E7%90%86-zsh-%E4%BE%9D%E8%B5%96%E5%8C%85/"},{"categories":[],"content":"我常用的编辑器是 vim，最近开始入坑 Emacs，觉得使用 M-x 导致小拇指极其难受。于是在谷歌搜索一番后，发现可以使用 xremap 重映射功能键，把 Ctrl 和 Alt 映射到更加方便的键盘位。 ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:0:0","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" 下载 xremap可以到网站下载，选择 x11。解压后即可看到 xremap 可执行文件。 ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:1:0","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" 配置可以编辑 ~/.config/xremap.yaml，具体的键位名称可以参考：keys 注意 For KEY_XXX and KEY_YYY, use these names. You can skip KEY_ and the name is case-insensitive. So KEY_CAPSLOCK, CAPSLOCK, and CapsLock are the same thing ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:2:0","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" modmap 注意 modmap is for key-to-key remapping like xmodmap. Note that remapping a key to a modifier key, e.g. CapsLock to Control_L, is supported only in modmap since keymap handles modifier keys differently. modmap 是一一对应的关系，不像 keymap 可以使用组合方式。比如，我把 CapsLock 当成 Esc 使用。 同时，我们还可以通过定义一个触发规则，把一个键位对应到多个事件，这个是通过定义 held 和 alone 组合来实现。比如我这里把 Ctrl_L 映射为两个行为 如果是单独触发，在时间 alone_timeout_millis 内没有触发其他的按键，则对应 Esc 如果是组合触发，比如我使用 Ctrl-k 来切换 tmux window 注意 If you specify a map containing held and alone, you can use the key for two purposes. The key is considered alone if it’s pressed and released within alone_timeout_millis (default: 1000) before any other key is pressed. Otherwise it’s considered held. ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:2:1","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" keymapkeymap 可以实现组合键。 ## https://github.com/emberian/evdev/blob/1d020f11b283b0648427a2844b6b980f1a268221/src/scancodes.rs#L26-L572 modmap: - name: Cap as Esc # Optional application: # Optional not: Google-chrome # or # only: [vim, nvim, neovim] remap: # Required CapsLock: # held: CapsLock held: Ctrl_L alone: Esc alone_timeout_millis: 1000 Ctrl_L: held: Ctrl_L alone: Esc alone_timeout_millis: 1000 ## default:1000 keymap: - name: Right Arrow to complete in zsh application: # Optional not: Google-chrome # or # only: [vim, nvim, neovim] remap: # C-i: [Ctrl_L-Right] Alt-i: [Ctrl_L-Right] Alt-DOT: [Ctrl_L-Right] C-DOT: [Right, Right] C-COMMA: [Ctrl_L-Right] # Ctrl_L-SEMICOLON: [SPACE, Shift-KEY_BACKSLASH] # Ctrl_L-APOSTROPHE: [SPACE, Shift-KEY_BACKSLASH] C-SEMICOLON: [SPACE, Shift-KEY_BACKSLASH] C-APOSTROPHE: [SPACE, Shift-KEY_BACKSLASH] C-MINUS: [SPACE, Shift-KEY_MINUS] - name: Arrow remap: Alt-c: [Ctrl_L-c] Alt-v: [Shift-Insert] Alt-SPACE: Shift-Insert Shift-SPACE: Shift-Insert # Ctrl_L-SPACE: Shift-Insert Alt-h: [Ctrl_L-Left] Alt-j: Down Alt-k: Up Alt-l: [Ctrl_L-Right] 这里需要区分 modmap 与 keymap modmap is for key-to-key remapping like xmodmap. Note that remapping a key to a modifier key, e.g. CapsLock to Control_L, is supported only in modmap since keymap handles modifier keys differently. keymap is for remapping a sequence of key combinations to another sequence of key combinations or other actions. ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:2:2","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" 运行使用 root 权限运行即可 ## 需要 root 权限执行 sudo /home/william/xremap /home/william/.config/xremap.yaml 如果不使用 root 执行，则需要设置 ## 需要获取 input 执行权限 sudo gpasswd -a william input echo 'KERNEL==\"uinput\", GROUP=\"input\", TAG+=\"uaccess\"' | sudo tee /etc/udev/rules.d/input.rules ## 需要重启生效，下次就可以使用普通用户执行了 reboot ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:3:0","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":" ref example/config.yaml example/emacs.yaml 分享下我折腾 sway/alacritty/xremap 的经历 一份参考配置 使用内置 keyboard 修改映射 ","date":"2024-10-20","objectID":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/:4:0","tags":[],"title":"xremap 拯救我的小拇指","uri":"/2024-10-20-xremap-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E5%B0%8F%E6%8B%87%E6%8C%87/"},{"categories":[],"content":"flatpak 作为新一代软件管理器，对比 apt 拥有 sudo apt install flatpak flatpak install flameshot ","date":"2024-09-12","objectID":"/2024-09-12-ubuntu-%E4%BD%BF%E7%94%A8-flatpak/:0:0","tags":[],"title":"ubuntu 使用 flatpak","uri":"/2024-09-12-ubuntu-%E4%BD%BF%E7%94%A8-flatpak/"},{"categories":[],"content":"主要在 ~/.config/nvim/lua/plugins/nvim-tree.lua 添加配置 --auto open from terminal if vim.fn.argc(-1) == 0 then vim.cmd('NvimTreeOpen') end -- 查看默认配置 -- :help vim-tree-mappings-default local function my_on_attach(bufnr) local api = require('nvim-tree.api') local function opts(desc) return { desc = 'nvim-tree: ' .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true } end api.config.mappings.default_on_attach(bufnr) -- your removals and mappings go here -- copy default mappings here from defaults in next section vim.keymap.set('n', '\u003cC-]\u003e', api.tree.change_root_to_node, opts('CD')) vim.keymap.set('n', '\u003cC-e\u003e', api.node.open.replace_tree_buffer, opts('Open: In Place')) --- -- OR use all default mappings api.config.mappings.default_on_attach(bufnr) -- remove a default vim.keymap.del('n', '\u003cC-]\u003e', { buffer = bufnr }) -- override a default vim.keymap.set('n', 'r', api.tree.reload, opts('Refresh')) vim.keymap.set('n', 'u', api.tree.change_root_to_parent, opts('Up')) vim.keymap.set('n', 'x', api.node.navigate.parent_close, opts('Close Directory')) vim.keymap.set('n', '\u003cCR\u003e', api.node.open.no_window_picker, opts('Open: No Window Picker')) vim.keymap.set('n', 'o', api.node.open.no_window_picker, opts('Open: No Window Picker')) vim.keymap.set('n', 'p', api.node.open.preview, opts('Open Preview')) -- add your mappings vim.keymap.set('n', '?', api.tree.toggle_help, opts('Help')) --- end return { \"nvim-tree/nvim-tree.lua\", -- version = \"*\", -- version = \"v10.16.0\", branch = \"master\", -- commit= \"f1b3e6a7eb92da492bd693257367d9256839ed3d\", commit= \"fbee8a69a46f558d29ab84e96301425b0501c668\", -- ok: -- commit= \"d9cb432d2c8d8fa9267ddbd7535d76fe4df89360\", --broken -- commit= \"e9ac136a3ab996aa8e4253253521dcf2cb66b81b\", -- broken dependencies = { \"nvim-tree/nvim-web-devicons\" }, event = \"VeryLazy\", -- hijack_directories = { -- enable = true, -- auto_open = false, -- }, config = function() require(\"nvim-tree\").setup { view = { width = 35, -- pt side = \"left\", -- bindings = { -- { key = {\"\u003cCR\u003e\", \"o\" }, action = \"edit\", mode = \"n\"}, -- { key = \"p\", action = \"print_path\", action_cb = print_node_path }, -- } }, -- renderer = { -- group_empty = true, -- }, -- filters = { -- dotfiles = true, -- }, ui = { confirm = { remove = true, trash = true, }, }, actions = { open_file = { resize_window = false, }, }, git = { enable = true, ignore = false, }, on_attach = my_on_attach, } --auto open from terminal if vim.fn.argc(-1) == 0 then vim.cmd('NvimTreeOpen') end end } ","date":"2024-09-10","objectID":"/2024-09-10-nvim-tree-auto-open/:0:0","tags":[],"title":"nvim tree auto open","uri":"/2024-09-10-nvim-tree-auto-open/"},{"categories":[],"content":"使用 sshd 的免密登录，仍然要求用户输入密码，查看日志发现 journalctl --unit=sshd Sep 09 21:39:35 nfqinxiansystem-1 sshd[32051]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=localhost user=ops Sep 09 21:39:38 nfqinxiansystem-1 sshd[32051]: Failed password for ops from 127.0.0.1 port 37386 ssh2 Sep 09 21:39:42 nfqinxiansystem-1 sshd[32051]: Accepted password for ops from 127.0.0.1 port 37386 ssh2 Sep 09 21:46:31 nfqinxiansystem-1 sshd[1328]: Connection closed by 127.0.0.1 port 37392 [preauth] Sep 09 21:47:25 nfqinxiansystem-1 sshd[2084]: Authentication refused: bad ownership or modes for file /home/ops/.ssh/authorized_keys Sep 09 21:47:26 nfqinxiansystem-1 sshd[2084]: Connection closed by 127.0.0.1 port 37394 [preauth] Sep 09 21:47:40 nfqinxiansystem-1 sshd[2213]: Authentication refused: bad ownership or modes for file /home/ops/.ssh/authorized_keys Sep 09 21:47:53 nfqinxiansystem-1 sshd[2213]: Connection closed by 192.168.1.99 port 58096 [preauth] Sep 09 21:47:54 nfqinxiansystem-1 sshd[2408]: Accepted publickey for ops from 192.168.1.99 port 58098 ssh2: RSA SHA256:z7QGrcrMvuKMqjbq/qKQk6PGcb5PLEiOp81W6kq3Mpc Sep 09 21:49:42 nfqinxiansystem-1 sshd[1580]: Received signal 15; terminating. Sep 09 21:49:42 nfqinxiansystem-1 systemd[1]: Stopping OpenSSH server daemon... Sep 09 21:49:42 nfqinxiansystem-1 systemd[1]: Stopped OpenSSH server daemon. Sep 09 21:49:42 nfqinxiansystem-1 systemd[1]: Starting OpenSSH server daemon... Sep 09 21:49:42 nfqinxiansystem-1 sshd[2986]: Server listening on 0.0.0.0 port 22. Sep 09 21:49:42 nfqinxiansystem-1 sshd[2986]: Server listening on :: port 22. Sep 09 21:49:42 nfqinxiansystem-1 systemd[1]: Started OpenSSH server daemon. Sep 09 21:49:48 nfqinxiansystem-1 sshd[2791]: Connection closed by 127.0.0.1 port 37396 [preauth] Sep 09 21:49:50 nfqinxiansystem-1 sshd[3015]: Connection closed by 127.0.0.1 port 37398 [preauth] Sep 09 21:51:02 nfqinxiansystem-1 sshd[3269]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=localhost user=ops 需要做以下几件事： 开启 sshd 允许密钥登录模式 vim /etc/ssh/sshd_config #PubkeyAuthentication yes PubkeyAuthentication yes 修改 ~/.ssh 文件权限 chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys chmod 600 ~/.ssh/config ","date":"2024-09-09","objectID":"/2024-09-09-ssh-%E4%BD%BF%E7%94%A8-pubkey-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%8D%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":[],"title":"ssh 使用 pubkey 免密登录仍要求输入密码的解决方法","uri":"/2024-09-09-ssh-%E4%BD%BF%E7%94%A8-pubkey-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E4%BB%8D%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":[],"content":"powerlevel10k 配置方案 p4 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k ## 只显示相对路径，因为tmux可以显示全部路径 typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_last ## 在左边显示 hostname typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=( os_icon # os identifier context # user@hostname ) ## ----------------------------------------------------------------------------- typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_last typeset -g POWERLEVEL9K_TIME_FORMAT='' # Don't show context unless running with privileges or in SSH. # Tip: Remove the next line to always show context. typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION= ","date":"2024-09-08","objectID":"/2024-09-08-powerlevel10k-%E9%85%8D%E7%BD%AE/:0:0","tags":[],"title":"powerlevel10k 配置","uri":"/2024-09-08-powerlevel10k-%E9%85%8D%E7%BD%AE/"},{"categories":[],"content":" ~/.p10k.zsh","date":"2024-09-08","objectID":"/2024-09-08-powerlevel10k-%E9%85%8D%E7%BD%AE/:1:0","tags":[],"title":"powerlevel10k 配置","uri":"/2024-09-08-powerlevel10k-%E9%85%8D%E7%BD%AE/"},{"categories":[],"content":"Docker Requires the following steps: uncomment user_allow_other in /etc/fuse.conf unmount the FUSE filesystem remount the FUSE filesystem with sshfs -o allow_other user@…. (making sure to include the -o allow_other option) try starting the container again ","date":"2024-09-02","objectID":"/2024-09-02-docker-mount-fs-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/:0:0","tags":[],"title":"docker mount fs 文件路径","uri":"/2024-09-02-docker-mount-fs-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"},{"categories":[],"content":"通过配置 lsp，可以在 nvim 中方便地实现 python 的自动补全功能（基于语法语义） ","date":"2024-08-31","objectID":"/2024-08-31-nvim-pylsp/:0:0","tags":[],"title":"nvim pylsp","uri":"/2024-08-31-nvim-pylsp/"},{"categories":[],"content":" 允许加载第三方库通过配置 include-system-site-packages=true，获取第三方库信息，从而实现在代码中语法的补全功能。 ## fix python auto-complete sed -i \"s|.*include-system-site-packages.*|include-system-site-packages=true|g\" ~/.config/nvim/lazy/mason/packages/python-lsp-server/venv/pyvenv.cfg ","date":"2024-08-31","objectID":"/2024-08-31-nvim-pylsp/:1:0","tags":[],"title":"nvim pylsp","uri":"/2024-08-31-nvim-pylsp/"},{"categories":[],"content":" python-lsp-jsonrpc有时我们会遇到报错信息 pylsp_josonrpc/endpoint.py error 说明需要升级 python-lsp-jsonrpc python -m pip install -U python-lsp-server[all] tornado python -m pip install -U python-lsp-jsonrpc ","date":"2024-08-31","objectID":"/2024-08-31-nvim-pylsp/:2:0","tags":[],"title":"nvim pylsp","uri":"/2024-08-31-nvim-pylsp/"},{"categories":[],"content":"ariflow 是一款优秀的开源任务管理架构，通过 DAG 的图形关系，指定各个子任务之间的依赖关系，并自动执行流水线。同时，airflow 还提供了美观的 UI，方便用户通过鼠标点击进行相关操作。 而本文要介绍的，则是 airflow 的命令行（CLI）操作模式。CLI 相比于 UI ，提供了更加灵活、可重现的运作方式，通过代码和配置，我们可以进行大规模的系统部署，避免鼠标操作存在的失误与不可重复性。 ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:0:0","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" airflow UI 操作在研究 CLI 之前，我尝试使用 UI 进行相关操作，如添加 role、user、DAGs 管理等。大体的经验是 最基础的用户组应该具备以下几组，权限才能获取相关页面、按钮、执行任务的权限 {'actions': [ {'action': {'name': 'can_read'}, 'resource': {'name':'Website'}}, {'action': {'name': 'can_read'}, 'resource': {'name': 'Triggers'}}, {'action': {'name': 'can_create'}, 'resource': {'name': 'DAG Runs'}}, {'action': {'name': 'menu_access'}, 'resource': {'name': \"User's Statistics\"}}, {'action': {'name': 'menu_access'}, 'resource': {'name': 'Actions'}}, {'action': {'name': 'menu_access'}, 'resource': {'name': 'DAG Runs'}}, {'action': {'name': 'menu_access'}, 'resource': {'name': 'Task Instances'}}, {'action': {'name': 'menu_access'}, 'resource': {'name': 'Triggers'}}, {'action': {'name': 'menu_access'}, 'resource': {'name': 'DAGs'}} ], 'name': 'trader'} trader 对于的特定用户，需要有具体的 DAG 权限：read、edit、delete trader4 通过 role 的组合，可以让 user 获取多个权限。如上面的 trader + trader4 的组合，可以允许用户获取两者的权限并集。 airflow 提供了 DAG-specific 的权限控制，通过在 DAG 任务指定 role 权限，可以以更加细粒度的方式进行控制 with DAG( dag_id = \"trading.hyena15.comm.c2s\", default_args = AirflowUtil.default_args(retry=0), schedule = \"50 08 * * 1-5\", start_date = datetime(2023, 1, 1, tzinfo=AirflowUtil.local_tz()), catchup = False, dagrun_timeout = timedelta(seconds=60*30), tags = ['trading', 'futures', 'hyena15', 'comm', 'c2s'], on_failure_callback = dag_failure_alert, on_success_callback = dag_success_alert, access_control={ # \"trader\" : {\"can_edit\", \"can_read\", \"can_delete\"}, \"trader4\": {\"can_edit\", \"can_read\", \"can_delete\"}, }, ) as dag: ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:1:0","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" 启用 airflow cli 功能airflow 提供的 cli 功能1，主要是通过 REST API 实现，默认是关闭的。因此，我们需要修改配置文件，使其生效。 打开配置文件 airflow.cfg，修改 [api] 下面的 auth_backends [api] # Comma separated list of auth backends to authenticate users of the API. See # https://airflow.apache.org/docs/apache-airflow/stable/security/api.html for possible values. # (\"airflow.api.auth.backend.default\" allows all requests for historic reasons) # # Variable: AIRFLOW__API__AUTH_BACKENDS # # auth_backends = airflow.api.auth.backend.session auth_backends = airflow.api.auth.backend.basic_auth 然后重启 ariflow #!/bin/bash ## ============================================================================= killx () { list=$(ps aux | grep -i $1| grep -v grep |grep -v color) if [ -n \"$list\" ]; then dead=$(ps aux | grep -i $1| grep -v grep| grep -v color | awk '{print $2}') echo \"Killing... $1\" echo $dead |xargs kill -9 else echo \"Not running $1\" fi } killx airflow ## ------------------------------------ export AIRFLOW_HOME=/app export AIRFLOW__CORE__LOAD_EXAMPLES=False ps -ef | egrep 'scheduler|airflow|webserver' | awk '{print $2}'| xargs kill -15 for var in scheduler webserver do x=`cat $AIRFLOW_HOME/airflow-${var}.pid` if [ \"$x\" != \"\" ] then cat $AIRFLOW_HOME/airflow-${var}.pid | xargs kill -9 fi cat /dev/null \u003e $AIRFLOW_HOME/airflow-${var}.pid rm $AIRFLOW_HOME/airflow-${var}.pid done rm -rf airflow-scheduler.pid rm -rf airflow-webserver-monitor.pid rm -rf airflow-webserver.pid #airflow db init ## ------------------------------------ airflow webserver -p 8080 -D airflow scheduler -D ## ------------------------------------ ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:2:0","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" python 调用相关接口airflow 提供 REST API，通过 GET 与 POST 方法，我们可以很方便的与服务端进行交互。 ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:3:0","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" 登录 API airflow_url = \"http://192.168.1.160:18080/\" new_role_name = 'testingx' dag_names = ['pretrading.check.init.pos'] airflow_username = 'william' airflow_password = 'xxxxxx' headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36', } auth_str = f\"{airflow_username}:{airflow_password}\" base64_auth_str = base64.b64encode(auth_str.encode()).decode() headers[\"Authorization\"] = \"Basic \" + base64_auth_str ## REST API ------------------------------------------------------------------- airflow_url += \"/api/v1/roles\" ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:3:1","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" GET ## GET ------------------------------------------------------------------------ info = requests.get(airflow_url, headers=headers).json() tmp = [k for k in info['roles'] if k['name'] == 'trader'][0] pprint(tmp) ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:3:2","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" Post ## POST ----------------------------------------------------------------------- read = \"can_read\" edit = \"can_edit\" create = \"can_create\" delete = \"can_delete\" menu = \"menu_access\" # add general permissions permissions = [] read_permissions = make_permissions(read, [ \"Website\", \"DAG Runs\", \"Task Instances\", \"Audit Logs\", \"ImportError\", \"XComs\", \"DAG Code\", \"Plugins\", \"My Password\", \"My Profile\", \"Jobs\", \"SLA Misses\", \"DAG Dependencies\", \"Task Logs\"]) edit_permissions = make_permissions(edit, [ \"Task Instances\", \"My Password\", \"My Profile\", \"DAG Runs\"]) create_permissions = make_permissions(create, [ \"DAG Runs\", \"Task Instances\"]) delete_permissions = make_permissions(delete, [ \"DAG Runs\", \"Task Instances\"]) menu_permissions = make_permissions(menu, [ \"View Menus\", \"Browse\", \"Docs\", \"Documentation\", \"SLA Misses\", \"Jobs\", \"DAG Runs\", \"Task Instances\", \"Audit Logs\", \"DAG Dependencies\"]) ## all in one permissions += read_permissions + edit_permissions + create_permissions + delete_permissions + menu_permissions # add dag-specific permissions for dag in dag_names: dag = \"DAG:\" + dag read_permissions = make_permissions(read,[dag]) edit_permissions = make_permissions(edit, [dag]) delete_permissions = make_permissions(delete, [dag]) permissions += read_permissions + edit_permissions + delete_permissions data = { \"actions\": [ *permissions ], \"name\": new_role_name } airflow_url += \"/api/v1/roles\" response = requests.post(airflow_url, json=data, headers=headers) print(response.status_code) if response.status_code == 403: raise PermissionError(f\"Error 403 returned, please check if your AirFlow account is Op/Admin or verify the dags exist. \\n {response.json()}\") elif response.status_code == 401: raise PermissionError(f\"Error 401 returned, please check the access token if the page is protected by an authentication\") elif response.status_code == 200: print(f\"Role `{new_role_name}` successfully created.\") return elif response.status_code == 409: # Role already exists, update it print(\"Role already exists, updating...\") airflow_role_update_url = f\"{airflow_url}/{new_role_name}\" update_response = requests.patch(airflow_role_update_url, json=data, headers=headers) if update_response.status_code == 200: print(f\"Role `{new_role_name}` successfully updated.\") else: raise ConnectionError(f\"An error occurred during role update: {update_response.json()}\") else: raise ConnectionError(f\"An error occurred during role creation: {response.json()}\") ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:3:3","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" 整理以上的脚本 from typing import List import requests import argparse import base64 from pprint import pprint def make_permissions(action, resources): permissions = [] for perm in resources: permissions.append(make_permission(action, perm)) return permissions def make_permission(action, resource): return { \"action\": {\"name\": action}, \"resource\": {\"name\": resource} } def create_rbac_role_with_permissions( airflow_url: str, new_role_name: str, dag_names: List[str], google_access_token: str=None, airflow_username: str=None, airflow_password: str=None ): \"\"\" airflow_url = \"http://192.168.1.160:18080/\" new_role_name = 'testingx' dag_names = ['pretrading.check.init.pos'] airflow_username = 'william' airflow_password = 'xxxxxx' google_access_token = None \"\"\" if isinstance(dag_names, str): dag_names = [dag_names] headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36', } if google_access_token: headers[\"Authorization\"] = \"Bearer \" + google_access_token elif airflow_username and airflow_password: auth_str = f\"{airflow_username}:{airflow_password}\" base64_auth_str = base64.b64encode(auth_str.encode()).decode() headers[\"Authorization\"] = \"Basic \" + base64_auth_str read = \"can_read\" edit = \"can_edit\" create = \"can_create\" delete = \"can_delete\" menu = \"menu_access\" # add general permissions permissions = [] read_permissions = make_permissions(read, [ \"Website\", \"DAG Runs\", \"Task Instances\", \"Audit Logs\", \"ImportError\", \"XComs\", \"DAG Code\", \"Plugins\", \"My Password\", \"My Profile\", \"Jobs\", \"SLA Misses\", \"DAG Dependencies\", \"Task Logs\"]) edit_permissions = make_permissions(edit, [ \"Task Instances\", \"My Password\", \"My Profile\", \"DAG Runs\"]) create_permissions = make_permissions(create, [ \"DAG Runs\", \"Task Instances\"]) delete_permissions = make_permissions(delete, [ \"DAG Runs\", \"Task Instances\"]) menu_permissions = make_permissions(menu, [ \"View Menus\", \"Browse\", \"Docs\", \"Documentation\", \"SLA Misses\", \"Jobs\", \"DAG Runs\", \"Task Instances\", \"Audit Logs\", \"DAG Dependencies\"]) ## all in one permissions += read_permissions + edit_permissions + create_permissions + delete_permissions + menu_permissions # add dag-specific permissions for dag in dag_names: dag = \"DAG:\" + dag read_permissions = make_permissions(read,[dag]) edit_permissions = make_permissions(edit, [dag]) delete_permissions = make_permissions(delete, [dag]) permissions += read_permissions + edit_permissions + delete_permissions data = { \"actions\": [ *permissions ], \"name\": new_role_name } airflow_url += \"/api/v1/roles\" response = requests.post(airflow_url, json=data, headers=headers) print(response.status_code) if response.status_code == 403: raise PermissionError(f\"Error 403 returned, please check if your AirFlow account is Op/Admin or verify the dags exist. \\n {response.json()}\") elif response.status_code == 401: raise PermissionError(\"Error 401 returned, please check the access token if the page is protected by an authentication\") elif response.status_code == 200: print(f\"Role `{new_role_name}` successfully created.\") return elif response.status_code == 409: # Role already exists, update it print(\"Role already exists, updating...\") airflow_role_update_url = f\"{airflow_url}/{new_role_name}\" update_response = requests.patch(airflow_role_update_url, json=data, headers=headers) if update_response.status_code == 200: print(f\"Role `{new_role_name}` successfully updated.\") else: raise ConnectionError(f\"An error occurred during role update: {update_response.json()}\") else: raise ConnectionError(f\"An error occurred during role creation: {response.json()}\") if __name__ == \"__main__\": par","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:3:4","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":" DAGs 权限管理 https://github.com/apache/airflow-client-python ↩︎ ","date":"2024-08-22","objectID":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/:4:0","tags":[],"title":"airflow: 使用 cli 进行操作","uri":"/2024-08-22-airflow--%E4%BD%BF%E7%94%A8-cli-%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":"在使用 docker:experimental 时，出现报错信息为： failed to solve with frontend dockerfile.v0: failed to solve with frontend gateway.v0: unexpected status code [manifests 1.0.0-experimental]: 403 Forbidden error pulling image configuration: download failed after attempts=6: dial tcp 75.126.150.210:443: i/o timeout 需要添加临时镜像: https://docker.1panel.live { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"https://docker.1panel.live\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"192.168.1.183:5000\", \"192.168.1.162:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } ","date":"2024-08-14","objectID":"/2024-08-14-docker-%E9%95%9C%E5%83%8F%E5%A4%B1%E8%B4%A5%E6%B7%BB%E5%8A%A0%E4%B8%B4%E6%97%B6%E6%96%B9%E6%A1%88/:0:0","tags":[],"title":"docker 镜像失败，添加临时方案","uri":"/2024-08-14-docker-%E9%95%9C%E5%83%8F%E5%A4%B1%E8%B4%A5%E6%B7%BB%E5%8A%A0%E4%B8%B4%E6%97%B6%E6%96%B9%E6%A1%88/"},{"categories":[],"content":"在使用 Docker 拉取镜像时，出现域名解析错误 Error response from daemon: Get \"https://registry-1.docker.io/v2/\": dial tcp: lookup registry-1.docker.io on [::1]:53: read udp [::1]:55479-\u003e[::1]:53: read: connection refused 需要修改 /etc/resolv.conf nameserver 8.8.8.8 nameserver 8.8.4.4 然后执行 sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2024-08-01","objectID":"/2024-08-01-docker-pull-%E6%8A%A5%E9%94%99/:0:0","tags":[],"title":"docker pull 报错","uri":"/2024-08-01-docker-pull-%E6%8A%A5%E9%94%99/"},{"categories":[],"content":"通过 traits 把 lambda 转化成函数指针。 // Source: https://stackoverflow.com/a/48368508/17132546 #include \u003ciostream\u003e using namespace std; // Entry template // extract the lambda's operaor() function signature template \u003cclass F, class T=F\u003e struct lambda_traits: lambda_traits\u003cdecltype(\u0026std::remove_reference\u003cF\u003e::type::operator()), F\u003e {}; // For mutable lambda, See https://en.cppreference.com/w/cpp/language/lambda // mutable lambda's operator() is not const, // not mutable lambda's operator() is const template \u003ctypename rF, typename F, typename R, typename... Args\u003e struct lambda_traits\u003cR(rF::*)(Args...), F\u003e: lambda_traits\u003cR(rF::*)(Args...) const, F\u003e {}; // Workhorse // every lambda has an unique signature // =\u003e lambda_traits will be specialized for every lambda, even if their function signature are the same. template \u003ctypename rF, typename F, typename R, typename... Args\u003e struct lambda_traits\u003cR(rF::*)(Args...) const, F\u003e { static auto cify(F\u0026\u0026 f) { static rF fn = std::forward\u003cF\u003e(f); return [](Args... args) { return fn(std::forward\u003cArgs\u003e(args)...); }; } }; // Wrapper, for convenience template \u003cclass F\u003e inline auto lam2fp(F\u0026\u0026 f) { return lambda_traits\u003cF\u003e::cify(std::forward\u003cF\u003e(f)); } // usage class A { public: using cb_t = void(*)(int); A() { cout \u003c\u003c \"A()\\n\"; } A(const A\u0026 k) { cout \u003c\u003c \"A(const A\u0026)\\n\"; } A(A\u0026\u0026 k) { cout \u003c\u003c \"A(const A\u0026\u0026)\\n\"; } void register_cb(cb_t cb) { _cb = cb; } void run() { if (_cb) { _cb(_i++); } } private: int _i {0}; cb_t _cb {nullptr}; }; struct X { X() { cout \u003c\u003c \"X::ctor\" \u003c\u003c endl; } int a {0}; }; int main() { { A a; X x; cout \u003c\u003c \"register_cb:-------------------\" \u003c\u003c endl; a.register_cb(lam2fp([\u0026x](int i) { cout \u003c\u003c \"i:\" \u003c\u003c endl; cout \u003c\u003c \"x.a:\" \u003c\u003c x.a \u003c\u003c endl; }) ); cout \u003c\u003c \"run1:\" \u003c\u003c endl; a.run(); cout \u003c\u003c \"run2:\" \u003c\u003c endl; a.run(); } #if 0 auto lam_left = [\u0026](A\u0026 a) {}; auto lam_copy = [](A a) {}; // lambda: left ref args: left ref auto g_left = lam2fp(lam_left); // lambda: left ref args: copy -\u003e right ref auto g = lam2fp(lam_copy); // lambda: right ref args: right ref auto g_right = lam2fp([](A\u0026\u0026 a) {}); cout \u003c\u003c \"----g_left----\\n\"; A a; g_left(a); cout \u003c\u003c \"----g----\\n\"; A b; g(b); cout \u003c\u003c \"----g_right----\\n\"; g_right(A()); #endif return 0; } // Source: https://stackoverflow.com/a/48368508/17132546 #include \u003ciostream\u003e using namespace std; // Entry template // extract the lambda's operaor() function signature template \u003cclass F, class T=F\u003e struct lambda_traits: lambda_traits\u003cdecltype(\u0026std::remove_reference\u003cF\u003e::type::operator()), F\u003e {}; // For mutable lambda, See https://en.cppreference.com/w/cpp/language/lambda // mutable lambda's operator() is not const, // not mutable lambda's operator() is const template \u003ctypename rF, typename F, typename R, typename... Args\u003e struct lambda_traits\u003cR(rF::*)(Args...), F\u003e: lambda_traits\u003cR(rF::*)(Args...) const, F\u003e {}; // Workhorse // every lambda has an unique signature // =\u003e lambda_traits will be specialized for every lambda, even if their function signature are the same. template \u003ctypename rF, typename F, typename R, typename... Args\u003e struct lambda_traits\u003cR(rF::*)(Args...) const, F\u003e { static auto cify(F\u0026\u0026 f) { static rF fn = std::forward\u003cF\u003e(f); return [](Args... args) { return fn(std::forward\u003cArgs\u003e(args)...); }; } }; // Wrapper, for convenience template \u003cclass F\u003e inline auto lam2fp(F\u0026\u0026 f) { return lambda_traits\u003cF\u003e::cify(std::forward\u003cF\u003e(f)); } // usage class A { public: using cb_t = void(*)(int); A() { cout \u003c\u003c \"A()\\n\"; } A(const A\u0026 k) { cout \u003c\u003c \"A(const A\u0026)\\n\"; } A(A\u0026\u0026 k) { cout \u003c\u003c \"A(const A\u0026\u0026)\\n\"; } void run(void(*cb)(int)) { cb(_i++); } private: int _i {0}; }; struct X { X() { cout \u003c\u003c \"X::ctor\" \u003c\u003c endl; } int a {0}; }; int main() { { A a; X x; cout \u003c\u003c \"start:-------------------\" \u003c\u003c endl; cout \u003c\u003c \"run1:\" \u003c\u003c endl; a.run(lam2fp([\u0026x](int i) { cout \u003c\u003c \"i:\" \u003c\u003c endl; cout \u003c\u003c \"x.a:\" \u003c\u003c x.a \u003c\u003c endl; })); cout \u003c\u003c \"run1:\" \u003c\u003c endl; a.run(lam2fp([\u0026x](int i) { cout \u003c\u003c \"i:\" \u003c\u003c endl; cout \u003c\u003c \"x.a:\" \u003c\u003c x.a \u003c\u003c endl; })); } #if 0 auto lam_left = [\u0026](A\u0026 a) {}; auto lam_copy = [](A a) {}; // lambda: left ref ar","date":"2024-07-21","objectID":"/2024-07-21-c-lambda-to-funtion-pointer/:0:0","tags":[],"title":"c++ lambda to funtion pointer","uri":"/2024-07-21-c-lambda-to-funtion-pointer/"},{"categories":[],"content":"最近一些不可描述的会议导致了整个国内互联网的大瘫痪，顺带牵连了 Docker 镜像的同步功能。所以说不能相信国内互联网这群人，动不动就听话干事。 由此，我在部署 docker 时就遇到了网络连接超时的问题，甚至是 hello world 都无法跑得通（天哪，这些不可描述的会议研究的是开放互联网，却是大张旗鼓的搞瘫整个互联网）。所以想到需要使用梯子来加速pull。 Docker 的服务是由 dockerd 提供，这本身是一个 systemd 任务。所以我们可以在 daemon 修改，使其走 proxy 模式 ","date":"2024-07-17","objectID":"/2024-07-17-docker-%E9%85%8D%E7%BD%AE%E5%9C%A8pull%E9%98%B6%E6%AE%B5%E4%BD%BF%E7%94%A8-proxy/:0:0","tags":[],"title":"docker 配置在pull阶段使用 proxy","uri":"/2024-07-17-docker-%E9%85%8D%E7%BD%AE%E5%9C%A8pull%E9%98%B6%E6%AE%B5%E4%BD%BF%E7%94%A8-proxy/"},{"categories":[],"content":" 修改 daemon sudo mkdir -p /etc/systemd/system/docker.service.d sudo vim /etc/systemd/system/docker.service.d/proxy.conf ## ------------------------------------------------------ [Service] Environment=\"HTTP_PROXY=socks5://192.168.1.82:1086\" Environment=\"HTTPS_PROXY=socks5://192.168.1.82:1086\" Environment=\"NO_PROXY=localhost,127.0.0.1,.example.com\" ## ------------------------------------------------------ ## 重启服务即可 sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2024-07-17","objectID":"/2024-07-17-docker-%E9%85%8D%E7%BD%AE%E5%9C%A8pull%E9%98%B6%E6%AE%B5%E4%BD%BF%E7%94%A8-proxy/:1:0","tags":[],"title":"docker 配置在pull阶段使用 proxy","uri":"/2024-07-17-docker-%E9%85%8D%E7%BD%AE%E5%9C%A8pull%E9%98%B6%E6%AE%B5%E4%BD%BF%E7%94%A8-proxy/"},{"categories":[],"content":"公司有一台退役的古早机器安装的操作系统是 CentOS7.6，软件源已经几年没有更新了，基本上已经到达无法使用的地步了。现在需要在这上面搞交易运维（tmd真抠），所以要安装 Docker，以适应新的软件开发环境。 ","date":"2024-07-17","objectID":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/:0:0","tags":[],"title":"在古早 CentOS7.6 机器安装 Docker","uri":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/"},{"categories":[],"content":" 安装依赖包需要的 rpm 可以在这里找到: https://mirrors.aliyun.com/centos-vault/7.9.2009/extras/x86_64/Packages/ wget https://mirrors.aliyun.com/centos-vault/7.9.2009/extras/x86_64/Packages/slirp4netns-0.4.3-4.el7_8.x86_64.rpm wget https://linuxsoft.cern.ch/cern/centos/7/extras/x86_64/Packages/fuse-overlayfs-0.7.2-6.el7_8.x86_64.rpm yum localinstall fuse-overlayfs-0.7.2-6.el7_8.x86_64.rpm yum localinstall slirp4netns-0.4.3-4.el7_8.x86_64.rpm ","date":"2024-07-17","objectID":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/:1:0","tags":[],"title":"在古早 CentOS7.6 机器安装 Docker","uri":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/"},{"categories":[],"content":" Docker sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo sed -i 's/download.docker.com/mirrors.aliyun.com\\/docker-ce/g' /etc/yum.repos.d/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io ## 启动服务 sudo systemctl enable docker sudo systemctl start docker sudo systemctl status docker ## 建立 docker 组 sudo groupadd docker ## 把当前用户添加到 docker 组 sudo usermod -aG docker $USER ## 牛刀小试 docker run hello-world ","date":"2024-07-17","objectID":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/:2:0","tags":[],"title":"在古早 CentOS7.6 机器安装 Docker","uri":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/"},{"categories":[],"content":" 赠送一份可以用的 CentOS-Base.repo yum clean all yum makecache yum update # CentOS-Base.repo # # The mirror system uses the connecting IP address of the client and the # update status of each mirror to pick mirrors that are updated to and # geographically close to the client. You should use this for CentOS updates # unless you are manually picking other mirrors. # # If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead. # # [base] name=CentOS-7.6.1810 - Base - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/os/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #released updates [updates] name=CentOS-7.6.1810 - Updates - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/updates/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #additional packages that may be useful [extras] name=CentOS-7.6.1810 - Extras - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/extras/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #additional packages that extend functionality of existing packages [centosplus] name=CentOS-7.6.1810 - Plus - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/centosplus/$basearch/ gpgcheck=1 enabled=0 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #contrib - packages by Centos Users [contrib] name=CentOS-7.6.1810 - Contrib - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/contrib/$basearch/ gpgcheck=1 enabled=0 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 ","date":"2024-07-17","objectID":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/:3:0","tags":[],"title":"在古早 CentOS7.6 机器安装 Docker","uri":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/"},{"categories":[],"content":" 一份可以的 docker-ce.repo [docker-ce-stable] name=Docker CE Stable - $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/stable enabled=1 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-stable-debuginfo] name=Docker CE Stable - Debuginfo $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/stable enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-stable-source] name=Docker CE Stable - Sources baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/stable enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-test] name=Docker CE Test - $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/test enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-test-debuginfo] name=Docker CE Test - Debuginfo $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/test enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-test-source] name=Docker CE Test - Sources baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/test enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-nightly] name=Docker CE Nightly - $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/nightly enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-nightly-debuginfo] name=Docker CE Nightly - Debuginfo $basearch baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/nightly enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg [docker-ce-nightly-source] name=Docker CE Nightly - Sources baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/nightly enabled=0 gpgcheck=1 gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg ","date":"2024-07-17","objectID":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/:4:0","tags":[],"title":"在古早 CentOS7.6 机器安装 Docker","uri":"/2024-07-17-%E5%9C%A8%E5%8F%A4%E6%97%A9-centos7.6-%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85-docker/"},{"categories":[],"content":" 《银翼杀手》Tears in the rain farewell Time to say goodbye","date":"2024-07-15","objectID":"/2024-07-15-time-to-say-goodbye--centos7/:0:0","tags":[],"title":"Time to say goodbye: CentOS7","uri":"/2024-07-15-time-to-say-goodbye--centos7/"},{"categories":[],"content":" CentOS7CentOS7 RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-* 或者使用国内阿里云源（使用命令查看系统版本 cat /etc/redhat-release） # CentOS-Base.repo # # The mirror system uses the connecting IP address of the client and the # update status of each mirror to pick mirrors that are updated to and # geographically close to the client. You should use this for CentOS updates # unless you are manually picking other mirrors. # # If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead. # # [base] name=CentOS-7.6.1810 - Base - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/os/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #released updates [updates] name=CentOS-7.6.1810 - Updates - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/updates/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #additional packages that may be useful [extras] name=CentOS-7.6.1810 - Extras - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/extras/$basearch/ gpgcheck=1 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #additional packages that extend functionality of existing packages [centosplus] name=CentOS-7.6.1810 - Plus - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/centosplus/$basearch/ gpgcheck=1 enabled=0 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 #contrib - packages by Centos Users [contrib] name=CentOS-7.6.1810 - Contrib - mirrors.aliyun.com failovermethod=priority baseurl=http://mirrors.aliyun.com/centos-vault/7.6.1810/contrib/$basearch/ gpgcheck=1 enabled=0 gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-7 如果遇到 Could not resolve host: mirrors.aliyun.com; Unknown error 先试着修改 DNS echo \"nameserver 8.8.8.8\" \u003e\u003e /etc/resolv.conf 部分 rpm 软件可以在这里找到：https://mirrors.aliyun.com/centos-vault/7.9.2009/extras/x86_64/Packages/ ","date":"2024-07-15","objectID":"/2024-07-15-time-to-say-goodbye--centos7/:1:0","tags":[],"title":"Time to say goodbye: CentOS7","uri":"/2024-07-15-time-to-say-goodbye--centos7/"},{"categories":[],"content":" Everything 漫长的准备，瞬间的告别","date":"2024-07-15","objectID":"/2024-07-15-time-to-say-goodbye--centos7/:2:0","tags":[],"title":"Time to say goodbye: CentOS7","uri":"/2024-07-15-time-to-say-goodbye--centos7/"},{"categories":[],"content":"通过源代码安装 gcc14，同时需要更新 libstdc++ 动态库链接。 ","date":"2024-07-14","objectID":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:0:0","tags":[],"title":"gcc14 源代码安装","uri":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":[],"content":" 安装 wget https://ftp.gnu.org/gnu/gcc/gcc-14.2.0/gcc-14.2.0.tar.gz tar xvf gcc-14.2.0.tar.gz cd gcc-14.2.0 ## install prerequisites ./contrib/download_prerequisites for k in `ls |grep .tar.`; do tar xvf ${k} done ln -s gmp-6.2.1 gmp ln -s mpfr-4.1.0 mpfr ln -s mpc-1.2.1 mpc ln -s isl-0.24 isl mkdir -p /shared/trading/lib/gcc14 ./configure --prefix=/shared/trading/lib/gcc14 \\ --enable-bootstrap \\ --enable-checking=release \\ --enable-languages=c,c++ \\ --disable-multilib make \u0026\u0026 make install #echo \"export PATH=/usr/local/gcc9/bin:$PATH\" \u003e\u003e /etc/profile.d/gcc.sh \u0026\u0026 \\ #source /etc/profile.d/gcc.sh \u0026\u0026 \\ #ln -sv /usr/local/gcc9/include/ /usr/include/gcc \u0026\u0026 \\ #echo \"/usr/local/gcc9/lib64\" \u003e\u003e /etc/ld.so.conf.d/gcc.conf \u0026\u0026 \\ #ldconfig -v \u0026\u0026 \\ #ldconfig -p |grep gcc \u0026\u0026 \\ #ln -sf /usr/local/gcc9/bin/g++ /usr/bin/g++ \u0026\u0026 \\ #ln -sf /usr/local/gcc9/bin/gcc /usr/bin/gcc \u0026\u0026 \\ #ln -sf /usr/local/gcc9/bin/c++ /usr/bin/c++ \u0026\u0026 \\ #ln -sf /usr/local/gcc9/bin/cc /usr/bin/cc \u0026\u0026 \\ #rm -rf /tmp/gcc* ","date":"2024-07-14","objectID":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:1:0","tags":[],"title":"gcc14 源代码安装","uri":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":[],"content":" libstdc++ ## ubuntu ln -sfn /usr/local/gcc14/lib64/libstdc++.so /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ## centos ","date":"2024-07-14","objectID":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:2:0","tags":[],"title":"gcc14 源代码安装","uri":"/2024-07-14-gcc14-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":[],"content":" Ref Using final in C++ to improve performance ","date":"2024-07-12","objectID":"/2024-07-12-c-%E4%BD%BF%E7%94%A8-final-%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/:1:0","tags":[],"title":"c++ 使用 final 提升程序性能","uri":"/2024-07-12-c-%E4%BD%BF%E7%94%A8-final-%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/"},{"categories":[],"content":"今天遇到一个奇怪的现象：由于我们使用的 init_shm 清空共享内存数据，这个需要指定大小。由于初始化脚本事先不知道实际配置文件使用的 shm_size，导致两者的大小是不一样的。如此一来，init_shm 先是让操作系统分配了一个物理内存，然后使用的程序以配置文件的 shm_size 进行使用，导致内存越界了。 所以我们开发了专门用于交易运维的 infra 项目，通过自动化的方式进行匹配。 ","date":"2024-07-10","objectID":"/2024-07-10-init_shm-%E4%B8%8E-config-%E9%87%8C%E9%9D%A2%E7%9A%84-shm_size-%E5%A4%A7%E5%B0%8F%E9%9C%80%E8%A6%81%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4/:0:0","tags":[],"title":"init_shm 与 config 里面的 shm_size 大小需要保持一致","uri":"/2024-07-10-init_shm-%E4%B8%8E-config-%E9%87%8C%E9%9D%A2%E7%9A%84-shm_size-%E5%A4%A7%E5%B0%8F%E9%9C%80%E8%A6%81%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4/"},{"categories":[],"content":" sudo add-apt-repository ppa:umang/indicator-stickynotes sudo apt-get update sudo apt-get install indicator-stickynotes ","date":"2024-07-10","objectID":"/2024-07-10-ubuntu-%E5%AE%89%E8%A3%85-sticky-notes/:0:0","tags":[],"title":"ubuntu 安装 sticky notes","uri":"/2024-07-10-ubuntu-%E5%AE%89%E8%A3%85-sticky-notes/"},{"categories":[],"content":"nvim 可以通过调用 sshfs，把远程机器上面的文件映射到本地，进而使用本地的 nvim 进行查看与编辑。如此一来，即使远程机器没有安装 nvim 或者相关插件，我们一样也能丝滑地使用 nvim 了。 return { \"nosduco/remote-sshfs.nvim\", dependencies = { \"nvim-telescope/telescope.nvim\" }, opts = { -- Refer to the configuration section below -- or leave empty for defaults }, config = function() require('remote-sshfs').setup{ connections = { ssh_configs = { -- which ssh configs to parse for hosts list vim.fn.expand \"$HOME\" .. \"/.ssh/config\", \"/etc/ssh/ssh_config\", -- \"/path/to/custom/ssh_config\" }, sshfs_args = { -- arguments to pass to the sshfs command \"-o reconnect\", \"-o auto_cache\", \"-o Ciphers=aes128-ctr\", \"-o ConnectTimeout=5\", \"-C\", \"-o cache_timeout=60\", \"-o cache=yes\", }, }, mounts = { base_dir = vim.fn.expand \"$HOME\" .. \"/.sshfs/\", -- base directory for mount points unmount_on_exit = true, -- run sshfs as foreground, will unmount on vim exit }, handlers = { on_connect = { change_dir = true, -- when connected change vim working directory to mount point }, on_disconnect = { clean_mount_folders = true, -- remove mount point folder on disconnect/unmount }, on_edit = {}, -- not yet implemented }, ui = { select_prompts = false, -- not yet implemented confirm = { connect = true, -- prompt y/n when host is selected to connect to change_dir = false, -- prompt y/n to change working directory on connection (only applicable if handlers.on_connect.change_dir is enabled) }, }, log = { enable = false, -- enable logging truncate = false, -- truncate logs types = { -- enabled log types all = false, util = false, handler = false, sshfs = false, }, }, } end } ","date":"2024-07-08","objectID":"/2024-07-08-nvim-%E4%BD%BF%E7%94%A8-sshfs-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8/:0:0","tags":[],"title":"nvim 使用 sshfs 连接远程机器","uri":"/2024-07-08-nvim-%E4%BD%BF%E7%94%A8-sshfs-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8/"},{"categories":[],"content":" 使用可以使用以下命令进行连接 :RemoteSSHFSConnect lfang.r9:/home/lfang/git -p22 :RemoteSSHFSDisconnect 我们可以映射到快捷键 local opts = { noremap = true, -- non-recursive silent = true, -- do not show message } vim.api.nvim_set_keymap(\"n\", \"\u003cLeader\u003ers\", \":RemoteSSHFSConnect lfang.r9:/home/lfang/git -p22\u003cCR\u003e\", opts) ","date":"2024-07-08","objectID":"/2024-07-08-nvim-%E4%BD%BF%E7%94%A8-sshfs-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8/:1:0","tags":[],"title":"nvim 使用 sshfs 连接远程机器","uri":"/2024-07-08-nvim-%E4%BD%BF%E7%94%A8-sshfs-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8/"},{"categories":[],"content":"有时我们在开发类 CTP 接口（如 CTP、TORA）等，会遇到中文消息乱码的现象，这是由于接口采用了 GB10830 等编码规范，无法直接在终端使用 UTF8 进行解析。因此，我们需要在接收层面进行解码，同时配置系统的解码标准。 ","date":"2024-07-06","objectID":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/:0:0","tags":[],"title":"CTP 中文乱码解析","uri":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/"},{"categories":[],"content":" c++ 解码 #pragma once #include \u003clocale\u003e #include \u003ccodecvt\u003e #include \u003cstring\u003e namespace snail { template \u003cclass Facet\u003e struct deletable_facet : Facet { template \u003cclass... Args\u003e deletable_facet(Args \u0026\u0026... args) : Facet(std::forward\u003cArgs\u003e(args)...) {} ~deletable_facet() {} }; inline std::wstring string2wstring(const std::string \u0026str, const std::string \u0026locale) { typedef deletable_facet\u003cstd::codecvt_byname\u003cwchar_t, char, std::mbstate_t\u003e\u003e F; static std::wstring_convert\u003cF\u003e strCnv(new F(locale)); return strCnv.from_bytes(str); } inline std::string wstring2utf8string(const std::wstring \u0026str) { static std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e strCnv; return strCnv.to_bytes(str); } inline std::string str2utf8(const std::string \u0026str) { return wstring2utf8string(string2wstring(str, \"zh_CN.GB18030\")); } } // namespace snail 上面封装了接口 str2utf8，可以用来解析中文信息 bool check_rsp(CTORATstpRspInfoField *pRspInfoField, const char* func_name) { if (unlikely(pRspInfoField \u0026\u0026 pRspInfoField-\u003eErrorID != 0)) { L_err(\"[tora_gw] \", func_name, \", ErrorID:\", pRspInfoField-\u003eErrorID, \", ErrorMsg:\", str2utf8(pRspInfoField-\u003eErrorMsg)); return false; } else { return true; } } ","date":"2024-07-06","objectID":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/:1:0","tags":[],"title":"CTP 中文乱码解析","uri":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/"},{"categories":[],"content":" 系统设置同时，我们还需要在系统层面进行设置 ## CentOS yum install -y kde-l10n-Chinese localedef -c -f GB18030 -i zh_CN zh_CN.GB18030 ## Ubuntu localedef -c -f GB18030 -i zh_CN zh_CN.GB18030 ","date":"2024-07-06","objectID":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/:2:0","tags":[],"title":"CTP 中文乱码解析","uri":"/2024-07-06-ctp-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E6%9E%90/"},{"categories":[],"content":"使用 nvim-cmp 进行补全。 local M = { \"hrsh7th/nvim-cmp\", dependencies = { \"hrsh7th/cmp-nvim-lsp\", \"hrsh7th/cmp-nvim-lua\", \"hrsh7th/cmp-buffer\", \"hrsh7th/cmp-path\", \"hrsh7th/cmp-cmdline\", \"saadparwaiz1/cmp_luasnip\", \"L3MON4D3/LuaSnip\", }, enabled = true, event = \"InsertEnter\", } local has_words_before = function() local line, col = unpack(vim.api.nvim_win_get_cursor(0)) return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match(\"%s\") == nil end local cmp = require'cmp' local luasnip = require'luasnip' M.config = function() local cmp = require(\"cmp\") vim.opt.completeopt = { \"menu\", \"menuone\", \"noselect\" } local kind_icons = { -- https://github.com/hrsh7th/nvim-cmp/wiki/Menu-Appearance#basic-customisations Text = \" \", Method = \"󰆧\", Function = \"ƒ \", Constructor = \" \", Field = \"󰜢 \", Variable = \" \", Constant = \" \", Class = \" \", Interface = \"󰜰 \", Struct = \" \", Enum = \"了 \", EnumMember = \" \", Module = \"\", Property = \" \", Unit = \" \", Value = \"󰎠 \", Keyword = \"󰌆 \", Snippet = \" \", File = \" \", Folder = \" \", Color = \" \", } cmp.setup({ snippet = { expand = function(args) require(\"luasnip\").lsp_expand(args.body) -- For `luasnip` users. end, }, window = { -- completion = cmp.config.window.bordered(), -- documentation = cmp.config.window.bordered(), }, mapping = cmp.mapping.preset.insert({ [\"\u003cC-b\u003e\"] = cmp.mapping.scroll_docs(-4), [\"\u003cC-f\u003e\"] = cmp.mapping.scroll_docs(4), [\"\u003cC-Space\u003e\"] = cmp.mapping.complete(), [\"\u003cC-e\u003e\"] = cmp.mapping.abort(), [\"\u003cCR\u003e\"] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items. [\"\u003cTab\u003e\"] = cmp.mapping( function(fallback) if cmp.visible() then cmp.select_next_item() elseif luasnip.expand_or_jumpable() then luasnip.expand_or_jump() elseif has_words_before() then cmp.complete() else fallback() end end, { \"i\", \"s\" }), [\"\u003cS-Tab\u003e\"] = cmp.mapping( function(fallback) if cmp.visible() then cmp.select_prev_item() elseif luasnip.jumpable(-1) then luasnip.jump(-1) else fallback() end end, { \"i\", \"s\" }), }), sources = cmp.config.sources( { { name = \"nvim_lsp\" }, { name = \"nvim_lua\" }, { name = \"luasnip\" }, -- For luasnip users. }, { { name = \"buffer\", option = { -- Options go into this table -- get_bufnrs = function() -- -- return vim.api.nvim_list_bufs() -- local buf = vim.api.nvim_get_current_buf() -- local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf)) -- if byte_size \u003e 1024 * 1024 then -- 1 Megabyte max -- return {} -- end -- return { buf } -- end get_bufnrs = function() return vim.api.nvim_list_bufs() end }, }, { name = \"path\" }, }, { { name = \"neorg\" }, }, { { name = 'tmux', option = { -- Source from all panes in session instead of adjacent panes all_panes = false, -- Completion popup label label = '[tmux]', -- Trigger character trigger_characters = { '.' }, -- Specify trigger characters for filetype(s) -- { filetype = { '.' } } trigger_characters_ft = {}, -- Keyword patch mattern keyword_pattern = [[\\w\\+]], -- Capture full pane history -- `false`: show completion suggestion from text in the visible pane (default) -- `true`: show completion suggestion from text starting from the beginning of the pane history. -- This works by passing `-S -` flag to `tmux capture-pane` command. See `man tmux` for details. capture_history = false, } }, } ), formatting = { format = function(entry, vim_item) -- Kind icons vim_item.kind = string.format(\"%s %s\", kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind -- Source vim_item.menu = ({ buffer = \"[Buffer]\", nvim_lsp = \"[LSP]\", luasnip = \"[LuaSnip]\", nvim_lua = \"[NvimAPI]\", path = \"[Path]\", })[entry.source.name] return vim_item end, }, }) -- Set configuration for specific filetype. cmp.setup.filetype('gitcommit', { sources = cmp.config.sources({ { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it. }, { { name = 'buffer', }, }) }) -- Use buffer sourc","date":"2024-07-02","objectID":"/2024-07-02-nvim-cmp/:0:0","tags":[],"title":"nvim cmp","uri":"/2024-07-02-nvim-cmp/"},{"categories":[],"content":" vim.cmd([[ augroup remember_folds autocmd! au BufWinLeave ?* mkview 1 au BufWinEnter ?* silent! loadview 1 augroup END ]]) ","date":"2024-07-01","objectID":"/2024-07-01-nvim-keep-fold-on-save/:0:0","tags":[],"title":"nvim keep fold on save","uri":"/2024-07-01-nvim-keep-fold-on-save/"},{"categories":[],"content":" Ref 一份目录规范的nvim配置项目 ","date":"2024-06-28","objectID":"/2024-06-28-nvim-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/:0:0","tags":[],"title":"nvim 从零开始","uri":"/2024-06-28-nvim-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"},{"categories":[],"content":"有时我们需要临时配置或者修改文件，一般的做法是进入 visual 模式然后使用命令 gf 打开当前文件。这样的做法其实有点冗余，特别是当我们在线上排查问题时，希望能快速打开光标下的文件。 为此，我们可以定义一个函数，然后绑定快捷键即可迅速打开文件了 定义一个函数 JumpOrCreateFile 可以自动识别文件路径 如果文件不存在，则提醒我们是否需要创建 绑定快捷键 gf 方便操作 vim.cmd([[ nnoremap \u003csilent\u003e gf :call JumpOrCreateFile()\u003cCR\u003e function! JumpOrCreateFile() \" Get the filename under the cursor let filename = expand(\"\u003ccfile\u003e\") \"-------------------------------------------------------------------------- \" split to get filename path if filename =~# ':' let expanded_filename = expand(split(filename, \":\")[1]) elseif filename =~# ',' let expanded_filename = expand(split(filename, \",\")[1]) elseif filename =~# '=' let expanded_filename = expand(split(filename, \"=\")[1]) else let expanded_filename = expand(filename) endif \"-------------------------------------------------------------------------- \" Check if the file path starts with \"./\" if expanded_filename =~# '^\\.\\/' \" Get the current directory of the editing file let current_directory = expand('%:p:h') \" Create the full path by appending the relative file path let expanded_filename = current_directory . '/' . expanded_filename endif \" Check if the file exists if !filereadable(expanded_filename) \" Prompt the user for file creation with the full path let choice = confirm('File does not exist. Create \"' . expanded_filename . '\"?', \"\u0026Yes\\n\u0026No\", 1) \" Handle the user's choice if choice == 1 \" Create the file and open it echohl WarningMsg | echo 'Created New File: ' . expanded_filename | echohl None execute 'edit ' . expanded_filename endif else \" File exists, perform normal gf behavior echohl ModeMsg | echo 'Open File: ' . expanded_filename | echohl None \" execute 'normal! gf' execute 'edit ' . expanded_filename endif endfunction ]]) ","date":"2024-06-26","objectID":"/2024-06-26-nvim-%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E6%96%87%E4%BB%B6/:0:0","tags":[],"title":"nvim 打开当前光标下文件","uri":"/2024-06-26-nvim-%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E6%96%87%E4%BB%B6/"},{"categories":[],"content":"我们在组织不同信号、不同策略时，往往需要一个容器存放对应合约标识的容器。这个容器要求具有一定的扩展性（即事先无法知晓容器大小），具有良好的插入效率、以及较高性能的查找性能。对于一般的算法，我们直接使用标准库里的哈希容器即可，这包括 std::unordered_map。 然后，对于一个低延迟的交易系统，我们总是对性能有着极致的渴望，尽力开发性的数据容器，提升查找性能。 对于特化容器，如 \u003cint, typename T\u003e，可以更加快速的实现查找 对于较大对象，如 \u003cstd::string, typename T\u003e, 则尽量避免运行期的构造开销，例如在确认不同的合约标识肯定的唯一情况下，可以大胆使用类型转化，直接 cast 为 int 类型。 ","date":"2024-06-22","objectID":"/2024-06-22-c-hash-map/:0:0","tags":[],"title":"c++ hash map","uri":"/2024-06-22-c-hash-map/"},{"categories":[],"content":" 代码测试 // https://github.com/martinus/nanobench // g++ -O2 -I../../include main.cpp -o m #include \u003ccstdint\u003e #define ANKERL_NANOBENCH_IMPLEMENT #include \u003cnanobench.h\u003e #include \u003cunordered_map\u003e #include \u003cemhash/hash_table7.hpp\u003e #include \u003cemhash/hash_table8.hpp\u003e #include \u003cutil/str_util.hpp\u003e std::unordered_map\u003cstd::string, std::string\u003e stl_map = { {\"stl_hash\", \"unordered_map\"}, {\"stl_map\", \"stl_map\"}, {\"fmap\", \"flat_map\"}, {\"btree\", \"btree_map\"}, {\"emhash2\", \"emhash2\"}, {\"emhash3\", \"emhash3\"}, {\"emhash4\", \"emhash4\"}, {\"emhash5\", \"emhash5\"}, {\"emhash6\", \"emhash6\"}, {\"emhash7\", \"emhash7\"}, {\"emhash8\", \"emhash8\"}, {\"emilib2\", \"emilib2\"}, {\"emilib1\", \"emilib1\"}, {\"emilib3\", \"emilib3\"}, {\"martind\", \"martin_dense\"}, }; emhash7::HashMap\u003cint, std::string\u003e emhash7_map = { {0, \"unordered_map\"}, {1, \"stl_map\"}, {2, \"flat_map\"}, {3, \"btree_map\"}, {4, \"emhash2\"}, {5, \"emhash3\"}, {6, \"emhash4\"}, {7, \"emhash5\"}, {8, \"emhash6\"}, {9, \"emhash7\"}, {10, \"emhash8\"}, {11, \"emilib2\"}, {12, \"emilib1\"}, {13, \"emilib3\"}, {14, \"martin_dense\"}, }; emhash8::HashMap\u003cstd::string, std::string\u003e emhash8_map = { {\"stl_hash\", \"unordered_map\"}, {\"stl_map\", \"stl_map\"}, {\"fmap\", \"flat_map\"}, {\"btree\", \"btree_map\"}, {\"emhash2\", \"emhash2\"}, {\"emhash3\", \"emhash3\"}, {\"emhash4\", \"emhash4\"}, {\"emhash5\", \"emhash5\"}, {\"emhash6\", \"emhash6\"}, {\"emhash7\", \"emhash7\"}, {\"emhash8\", \"emhash8\"}, {\"emilib2\", \"emilib2\"}, {\"emilib1\", \"emilib1\"}, {\"emilib3\", \"emilib3\"}, {\"martind\", \"martin_dense\"}, }; emhash8::HashMap\u003cint64_t, std::string\u003e emhash8_map_int64 = { {snail::str2i64(\"stl_hash\"), \"unordered_map\"}, {snail::str2i64(\"stl_map\"), \"stl_map\"}, {snail::str2i64(\"fmap\"), \"flat_map\"}, {snail::str2i64(\"btree\"), \"btree_map\"}, {snail::str2i64(\"emhash2\"), \"emhash2\"}, {snail::str2i64(\"emhash3\"), \"emhash3\"}, {snail::str2i64(\"emhash4\"), \"emhash4\"}, {snail::str2i64(\"emhash5\"), \"emhash5\"}, {snail::str2i64(\"emhash6\"), \"emhash6\"}, {snail::str2i64(\"emhash7\"), \"emhash7\"}, {snail::str2i64(\"emhash8\"), \"emhash8\"}, {snail::str2i64(\"emilib2\"), \"emilib2\"}, {snail::str2i64(\"emilib1\"), \"emilib1\"}, {snail::str2i64(\"emilib3\"), \"emilib3\"}, {snail::str2i64(\"martind\"), \"martin_dense\"}, }; int main(int, char**) { ankerl::nanobench::Bench().run(\"stl_map\", [\u0026]() { auto itor = stl_map.find(\"stl_hash\"); if (stl_map.end() != itor) {} }); ankerl::nanobench::Bench().run(\"emhash7_map\", [\u0026]() { auto itor = emhash7_map.find(0); if (emhash7_map.end() != itor) {} ankerl::nanobench::doNotOptimizeAway(itor); }); ankerl::nanobench::Bench().run(\"emhash8_map::find\", [\u0026]() { auto itor = emhash8_map.find(\"emhash8\"); if (emhash8_map.end() != itor) {} ankerl::nanobench::doNotOptimizeAway(itor); }); ankerl::nanobench::Bench().run(\"emhash8_map_int64::find\", [\u0026]() { auto itor = emhash8_map_int64.find(snail::str2i64(\"emhash8\")); if (emhash8_map_int64.end() != itor) {} ankerl::nanobench::doNotOptimizeAway(itor); }); ankerl::nanobench::Bench().run(\"emhash8_map::try_get\", [\u0026]() { auto e = emhash8_map.try_get(\"emhash8\"); if (e) {} ankerl::nanobench::doNotOptimizeAway(e); }); return 0; } ","date":"2024-06-22","objectID":"/2024-06-22-c-hash-map/:1:0","tags":[],"title":"c++ hash map","uri":"/2024-06-22-c-hash-map/"},{"categories":[],"content":" 结果对比 Warning, results might be unstable: * CPU frequency scaling enabled: CPU 0 between 800.0 and 4,500.0 MHz * CPU governor is 'powersave' but should be 'performance' * Turbo is enabled, CPU frequency will fluctuate Recommendations * Use 'pyperf system tune' before benchmarking. See https://github.com/psf/pyperf | ns/op | op/s | err% | total | benchmark |--------------------:|--------------------:|--------:|----------:|:---------- | 11.97 | 83,558,711.04 | 0.1% | 0.01 | `stl_map` | 4.82 | 207,602,617.74 | 0.7% | 0.01 | `emhash7_map` | 8.60 | 116,226,532.44 | 4.9% | 0.01 | `emhash8_map::find` | 7.01 | 142,642,133.00 | 1.4% | 0.01 | `emhash8_map_int64::find` | 10.67 | 93,758,813.86 | 2.0% | 0.01 | `emhash8_map::try_get` 从上面的结果可以看出 对于 \u003cint, T\u003e 具有更加极致的性能优势 对于 \u003cstring, T\u003e 也是比标准库更加快速 对于 \u003cstring, T\u003e ，如果我们能将其转化成 int64_t，也是可以大幅提升查询性能 ","date":"2024-06-22","objectID":"/2024-06-22-c-hash-map/:2:0","tags":[],"title":"c++ hash map","uri":"/2024-06-22-c-hash-map/"},{"categories":[],"content":" set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr ","date":"2024-06-21","objectID":"/2024-06-21-vim-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%A7%A3%E7%A0%81/:0:0","tags":[],"title":"vim 支持中文解码","uri":"/2024-06-21-vim-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%A7%A3%E7%A0%81/"},{"categories":[],"content":"nvim 可以通过插件lsp实现基于编程语法的自动补全。而对于一般的文本，lsp 就无助于事了。这时候我们需要一个基于文本分析的自动补全功能。这个可以通过 echasnovski/mini.nvim 来实现 return { \"echasnovski/mini.nvim\", enabled = true, event = \"VeryLazy\", config = function() require(\"mini.completion\").setup { -- Delay (debounce type, in ms) between certain Neovim event and action. -- This can be used to (virtually) disable certain automatic actions by -- setting very high delay time (like 10^7). delay = { completion = 100, info = 100, signature = 50 }, -- Configuration for action windows: -- - `height` and `width` are maximum dimensions. -- - `border` defines border (as in `nvim_open_win()`). window = { info = { height = 25, width = 80, border = 'none' }, signature = { height = 25, width = 80, border = 'none' }, }, -- Way of how module does LSP completion lsp_completion = { -- `source_func` should be one of 'completefunc' or 'omnifunc'. source_func = 'completefunc', -- `auto_setup` should be boolean indicating if LSP completion is set up -- on every `BufEnter` event. auto_setup = true, -- `process_items` should be a function which takes LSP -- 'textDocument/completion' response items and word to complete. Its -- output should be a table of the same nature as input items. The most -- common use-cases are custom filtering and sorting. You can use -- default `process_items` as `MiniCompletion.default_process_items()`. -- process_items = --\u003cfunction: filters out snippets; sorts by LSP specs\u003e, }, -- Fallback action. It will always be run in Insert mode. To use Neovim's -- built-in completion (see `:h ins-completion`), supply its mapping as -- string. Example: to use 'whole lines' completion, supply '\u003cC-x\u003e\u003cC-l\u003e'. -- fallback_action = --\u003cfunction: like `\u003cC-n\u003e` completion\u003e, -- Module mappings. Use `''` (empty string) to disable one. Some of them -- might conflict with system mappings. -- mappings = { -- force_twostep = '\u003cC-Space\u003e', -- Force two-step completion -- force_fallback = '\u003cA-Space\u003e', -- Force fallback completion -- }, -- Whether to set Vim's settings for better experience (modifies -- `shortmess` and `completeopt`) set_vim_settings = true, } end } ","date":"2024-06-21","objectID":"/2024-06-21-nvim-%E5%9F%BA%E4%BA%8Ebuffer%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%A5%E5%85%A8/:0:0","tags":[],"title":"nvim 基于buffer的文本补全","uri":"/2024-06-21-nvim-%E5%9F%BA%E4%BA%8Ebuffer%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%A5%E5%85%A8/"},{"categories":[],"content":" -- backup: lazy-lazy.json local lazy_cmds = vim.api.nvim_create_augroup('lazy_cmds', {clear = true}) local root = os.getenv(\"HOME\") .. \"/.config/nvim/lazy\" local snapshot_dir = root .. '/plugin-snapshot' os.execute(\"mkdir \" .. snapshot_dir) local lockfile = root .. '/lazy-lock.json' vim.api.nvim_create_user_command( 'BrowseSnapshots', 'edit ' .. snapshot_dir, {} ) vim.api.nvim_create_autocmd('User', { group = lazy_cmds, pattern = 'LazyUpdatePre', desc = 'Backup lazy.nvim lockfile', callback = function(event) vim.fn.mkdir(snapshot_dir, 'p') local snapshot = snapshot_dir .. os.date('/%Y-%m-%dT%H:%M:%S.lazy-lock.json') vim.loop.fs_copyfile(lockfile, snapshot) end, }) :Lazy restore ","date":"2024-06-13","objectID":"/2024-06-13-nvim-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD-lazy-lock.json/:0:0","tags":[],"title":"nvim 自动备份 lazy lock.json","uri":"/2024-06-13-nvim-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD-lazy-lock.json/"},{"categories":[],"content":"为了以指定版本的编译器进行编译，我们可以通过修改 cmake 默认编译器 (CMAKE_CXX_COMPILER)。然而，如果在多项目的 add_subdirectory 包含其他项目，可能造成死循环的问题。 处理这个问题，需要我们在所有项目的顶层设置，即在最顶层的项目 CMakeLists.txt 的 project 之前设置 # top setting ===========================================================----== cmake_minimum_required(VERSION 3.15) SET(CMAKE_C_COMPILER /usr/bin/gcc) SET(CMAKE_CXX_COMPILER /usr/bin/g++) set(CMAKE_CXX_STANDARD 17 CACHE STRING \"v\") ## ============================================================================= ## need to be after top setting project(snail CXX) ## ============================================================================= 主要参考文章：CMakeLists.txt 修改默认编译器导致死循环的问题解决 ","date":"2024-06-11","objectID":"/2024-06-11-cmake-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E5%99%A8cmake_cxx_compiler%E9%80%A0%E6%88%90%E6%AD%BB%E5%BE%AA%E7%8E%AF%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":[],"title":"cmake 设置默认编译器CMAKE_CXX_COMPILER造成死循环的问题","uri":"/2024-06-11-cmake-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E5%99%A8cmake_cxx_compiler%E9%80%A0%E6%88%90%E6%AD%BB%E5%BE%AA%E7%8E%AF%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["programming"],"content":"先查看当前系统的 glibc 版本 locate libc.so [16:20:29] /usr/lib64/libc.so /usr/lib64/libc.so.6 /usr/local/glibc-2.34/lib/libc.so /usr/local/glibc-2.34/lib/libc.so.6 当前系统使用的 glibc 动态库在 /usr/lib64/libc.so.6。我们可以使用命令 strings 查看动态库的版本信息 strings /usr/lib64/libc.so.6 |egrep '^GLIBC_2.' |sort [16:19:55] GLIBC_2.10 GLIBC_2.10 GLIBC_2.11 GLIBC_2.11 GLIBC_2.12 GLIBC_2.13 GLIBC_2.13 GLIBC_2.14 GLIBC_2.15 GLIBC_2.16 GLIBC_2.16 GLIBC_2.17 GLIBC_2.17 GLIBC_2.18 GLIBC_2.18 GLIBC_2.2.5 GLIBC_2.2.6 GLIBC_2.2.6 GLIBC_2.3 GLIBC_2.3.2 GLIBC_2.3.3 GLIBC_2.3.4 GLIBC_2.4 GLIBC_2.5 GLIBC_2.5 GLIBC_2.6 GLIBC_2.6 GLIBC_2.7 GLIBC_2.7 GLIBC_2.8 GLIBC_2.8 GLIBC_2.9 GLIBC_2.9 如果发现上述版本缺少 GLIBC_2.18，则需要源代码安装。 #!/bin/bash export GLIBC_VERSION=2.18 cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-${GLIBC_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf glibc-${GLIBC_VERSION}.tar.gz \u0026\u0026 \\ cd glibc-${GLIBC_VERSION} \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr \\ --disable-profile \\ --enable-add-ons \\ --with-headers=/usr/include \\ --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* ","date":"2024-06-11","objectID":"/2024-06-11-glibc2.18-%E5%AE%89%E8%A3%85/:0:0","tags":["Linux","glibc","gcc","c++"],"title":"glibc2.18 安装","uri":"/2024-06-11-glibc2.18-%E5%AE%89%E8%A3%85/"},{"categories":[],"content":"gcc/g++ 提供编译日期，可以通过获取日期，进行相关判断。 const char *months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}; #define COMPILER_YEAR ((((__DATE__ [7] - '0') * 10 + (__DATE__ [8] - '0')) * 10 \\ + (__DATE__ [9] - '0')) * 10 + (__DATE__ [10] - '0')) #define COMPILER_MONTH ((__DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5) \\ : __DATE__ [2] == 'b' ? 1 \\ : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ? 2 : 3) \\ : __DATE__ [2] == 'y' ? 4 \\ : __DATE__ [2] == 'l' ? 6 \\ : __DATE__ [2] == 'g' ? 7 \\ : __DATE__ [2] == 'p' ? 8 \\ : __DATE__ [2] == 't' ? 9 \\ : __DATE__ [2] == 'v' ? 10 : 11) + 1) #define COMPILER_DAY ((__DATE__ [4] == ' ' ? 0 : __DATE__ [4] - '0') * 10 \\ + (__DATE__ [5] - '0')) #define COMPILER_DATE_AS_INT (COMPILER_YEAR*10000 + COMPILER_MONTH*100 + COMPILER_DAY) ","date":"2024-06-10","objectID":"/2024-06-10-g-%E8%8E%B7%E5%8F%96%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4/:0:0","tags":[],"title":"g++ 获取编译时间","uri":"/2024-06-10-g-%E8%8E%B7%E5%8F%96%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4/"},{"categories":[],"content":"gcc 提供关键词 inline，允许我们标注函数需要在编译时展开，这样可以避免函数调用，减低函数栈开销，从而达到优化程序的目地。然而，天下并没有免费的午餐，在引入 inline 的同时，我们也需要注意其带来的程序体积变大、cache locality 减少的风险。 Pros of inlining: Removes function call overhead (yay!) May reveal additional optimization opportunities (sometimes yay!) Cons of inlining: Increases program size (boo!) May reduce cache locality (sometimes boo!) May increase build times (boo!) ","date":"2024-06-10","objectID":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/:0:0","tags":[],"title":"c++ inline浅析","uri":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/"},{"categories":[],"content":" inline 使用","date":"2024-06-10","objectID":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/:1:0","tags":[],"title":"c++ inline浅析","uri":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/"},{"categories":[],"content":" 避免","date":"2024-06-10","objectID":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/:2:0","tags":[],"title":"c++ inline浅析","uri":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/"},{"categories":[],"content":" Ref Smarter C/C++ inlining with attribute((flatten)) ","date":"2024-06-10","objectID":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/:3:0","tags":[],"title":"c++ inline浅析","uri":"/2024-06-10-c-inline%E6%B5%85%E6%9E%90/"},{"categories":[],"content":"如果遇到在终端显示问题，可以修改高亮颜色: ~/.config/nvim/lua/plugins/tokyonight.lua on_highlights = function(hl, colors) hl.LineNr = { fg = \"#fffb7b\", } hl.CursorLineNr = { fg = \"#709db2\", } end, ","date":"2024-06-06","objectID":"/2024-06-06-nvim-tokyonight-%E4%BF%AE%E6%94%B9%E9%AB%98%E4%BA%AE%E9%A2%9C%E8%89%B2/:0:0","tags":[],"title":"nvim tokyonight 修改高亮颜色","uri":"/2024-06-06-nvim-tokyonight-%E4%BF%AE%E6%94%B9%E9%AB%98%E4%BA%AE%E9%A2%9C%E8%89%B2/"},{"categories":[],"content":"如果忘记 docker-registry 账户密码，可以通过复原加密密码查看。 打开 ~/.docker/config.json { \"auths\": { \"192.168.1.162:5000\": { \"auth\": \"********************\" } } } 以上密码是在添加 docker-registry 时使用 htpasswd 加密的 sudo yum install -y httpd-tools mkdir /etc/docker/auth htpasswd -Bbn tradeops passwd \u003e /etc/docker/auth/htpasswd 我们可以反向解密 echo ********** | base64 -d 得到 tradeops:********* 然后再登录即可 docker login -u tradeops 192.168.1.162:5000 Password: WARNING! Your password will be stored unencrypted in /home/william/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded ","date":"2024-05-25","objectID":"/2024-05-25-docker-registry-%E5%BF%98%E8%AE%B0%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/:0:0","tags":[],"title":"docker registry 忘记账户密码","uri":"/2024-05-25-docker-registry-%E5%BF%98%E8%AE%B0%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":[],"content":"nanobench 是一个简易的代码性能测试工具，有助手我们深入理解程序运行的开销。 ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:0:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" nanobench代码仓库地址为：nanobench。整个项目只有一个头文件，可以说十分简单了。 ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:1:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" 测试 // https://github.com/martinus/nanobench // g++ -O2 -I../../include main.cpp -o m #define ANKERL_NANOBENCH_IMPLEMENT #include \u003cnanobench.h\u003e #include \u003cchrono\u003e #include \u003crandom\u003e #include \u003cthread\u003e int main(int, char**) { uint64_t x = 1; ankerl::nanobench::Bench().run(\"x += x\", [\u0026]() { ankerl::nanobench::doNotOptimizeAway(x += x); }); ankerl::nanobench::Bench().run(\"sleep 10ms\", [\u0026]() { std::this_thread::sleep_for(std::chrono::milliseconds(10)); }); std::random_device dev; std::mt19937_64 rng(dev()); ankerl::nanobench::Bench().minEpochIterations(12045).run(\"random fluctuations\", [\u0026]() { // each run, perform a random number of rng calls auto iterations = rng() \u0026 UINT64_C(0xff); for (uint64_t i = 0; i \u003c iterations; ++i) { (void)rng(); } }); } 编译以上代码，然后运行即可得到结果 Warning, results might be unstable: * CPU frequency scaling enabled: CPU 0 between 800.0 and 4,800.0 MHz * Turbo is enabled, CPU frequency will fluctuate Recommendations * Use 'pyperf system tune' before benchmarking. See https://github.com/psf/pyperf | ns/op | op/s | err% | total | benchmark |--------------------:|--------------------:|--------:|----------:|:---------- | 0.40 | 2,485,348,469.62 | 2.6% | 0.01 | `x += x` | 10,124,540.00 | 98.77 | 0.0% | 0.11 | `sleep 10ms` | 237.14 | 4,216,912.81 | 4.2% | 0.04 | `random fluctuations` ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:2:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" 对比 nanotime #include \"util/time_util.hpp\" #include \u003cctime\u003e #include \u003cratio\u003e #define ANKERL_NANOBENCH_IMPLEMENT #include \u003cnanobench.h\u003e #include \u003cutils/nanotime.hpp\u003e #include \u003cutil/microtime.hpp\u003e using namespace snail; int main(int, char**) { ankerl::nanobench::Bench().run(\"ns\", [\u0026]() { int64_t ns {0}; ankerl::nanobench::doNotOptimizeAway(ns = nanotime_t::ns()); }); ankerl::nanobench::Bench().run(\"microtime::us\", [\u0026]() { int64_t us {0}; ankerl::nanobench::doNotOptimizeAway(us = microtime::now().count()); }); ankerl::nanobench::Bench().run(\"ns2us\", [\u0026]() { int64_t us {0}; ankerl::nanobench::doNotOptimizeAway(us = nanotime_t::ns()/1000); }); ankerl::nanobench::Bench().run(\"nanotime_t::us\", [\u0026]() { int64_t us {0}; ankerl::nanobench::doNotOptimizeAway(us = nanotime_t::us()); }); ankerl::nanobench::Bench().run(\"microtime::ntime\", [\u0026]() { double ntime {.0}; ankerl::nanobench::doNotOptimizeAway(ntime = to_ntime(microtime::now().count())); }); ankerl::nanobench::Bench().run(\"nanotime_t::ntime\", [\u0026]() { double ntime {.0}; ankerl::nanobench::doNotOptimizeAway(ntime = nanotime_t::ntime()); }); ankerl::nanobench::Bench().run(\"nanotime_t::to_str\", [\u0026]() { ankerl::nanobench::doNotOptimizeAway(nanotime_t::to_str(nanotime_t::ns())); }); ankerl::nanobench::Bench().run(\"to_zgc_str\", [\u0026]() { ankerl::nanobench::doNotOptimizeAway(microtime::now().to_zgc_str()); }); } Warning, results might be unstable: * CPU frequency scaling enabled: CPU 0 between 800.0 and 4,500.0 MHz * CPU governor is 'powersave' but should be 'performance' * Turbo is enabled, CPU frequency will fluctuate Recommendations * Use 'pyperf system tune' before benchmarking. See https://github.com/psf/pyperf | ns/op | op/s | err% | total | benchmark |--------------------:|--------------------:|--------:|----------:|:---------- | 6.67 | 149,864,077.86 | 2.1% | 0.01 | `ns` | 15.90 | 62,902,027.27 | 1.9% | 0.01 | `microtime::us` | 7.24 | 138,174,331.20 | 0.5% | 0.01 | `ns2us` | 7.29 | 137,255,469.22 | 1.6% | 0.01 | `nanotime_t::us` | 23.39 | 42,750,704.21 | 0.3% | 0.01 | `microtime::ntime` | 12.31 | 81,232,849.21 | 0.2% | 0.01 | `nanotime_t::ntime` | 46.80 | 21,366,089.17 | 2.6% | 0.01 | `nanotime_t::to_str` | 393.31 | 2,542,506.82 | 2.0% | 0.01 | `to_zgc_str` ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:3:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" 关于系统 cpu 性能可以开启高性能模式。参考Linux 设置 cpu 高性能performance模式 sudo apt-get install cpufrequtils sudo apt-get install sysfsutils ## 查看 CPU 状态 cpufreq-info ## 查看频率信息 cpupower frequency-info ## 把 cpu 调整到性能模式 sudo cpufreq-set -g performance ## 通过设置默认模式，防止重启后恢复 sudo vim /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ## 填写 performance ## 或者全局设置 sudo vim /etc/default/cpufrequtils GOVERNOR=\"performance\" ## 重启配置生效 systemctl restart cpufrequtils ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:4:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" 关于 rdtsc参考文章：细说RDTSC的坑 uint64_t rdtsc() { uint64_t a, d; __asm__ volatile(\"rdtsc\" : \"=a\"(a), \"=d\"(d)); return (d \u003c\u003c 32) | a; } 我们还可以直接使用 gcc 内置的函数。参考 StackOverflow How to count clock cycles with RDTSC in GCC x86 /* rdtsc */ extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__)) __rdtsc (void) { return __builtin_ia32_rdtsc (); } ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:5:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" 查看 CPU 是否支持 const tsc cat /proc/cpuinfo |ag constant_tsc const tsc ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:6:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":" Ref 几种取时间的方法（附代码） simplx ","date":"2024-05-22","objectID":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/:7:0","tags":[],"title":"c++ 使用 nanobench 测试性能","uri":"/2024-05-22-c-%E4%BD%BF%E7%94%A8-nanobench-%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD/"},{"categories":[],"content":"今天升级 lazy.nvim 遇到一个错误： Spawning language server with cmd: `lua-language-server` failed. The language server is either not installed, missing from PATH, or not executable. 解决方法是重新安装 :MasonInstall --force --target=linux_x64_gnu lua-language-server ","date":"2024-05-17","objectID":"/2024-05-17-nvim-%E6%8A%A5%E9%94%99--lua-language-server/:0:0","tags":[],"title":"nvim 报错: lua language server","uri":"/2024-05-17-nvim-%E6%8A%A5%E9%94%99--lua-language-server/"},{"categories":[],"content":"cppinsights 通过展示编译器眼里的源代码，可以让我们更直观地看到编译器做了哪些预处理，从而更好的理解代码生成过程（非汇编）。 我们可以在 nvim 安装一个插件，通过快捷键即可看到转换后的代码了，尤其对于现代 c++ 提供的语法糖，可以更进一步的理解背后的语法。 ","date":"2024-05-16","objectID":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/:0:0","tags":[],"title":"nvim 使用 cppinsights","uri":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/"},{"categories":[],"content":" 关于 cppinsights这里引述开发者原文： 2017年，我开始研究我们在C++11、C++14和C++17中得到的一些新特性。像lambda表达式、基于范围的for循环和结构化绑定这样令人惊奇的事物。我在一次演讲中将它们整合在一起。你可以在网上找到演讲幻灯片和视频。 然而，所有的研究以及我的一些培训和教学工作让我开始思考，如果我们能够像编译器一样“看”代码会怎样。当然，至少对于Clang来说，有一个AST转储功能。我们可以使用像Compiler Explorer这样的工具来查看编译器从C++代码片段生成的代码。然而，我们看到的是汇编语言。无论是AST还是Compiler Explorer的输出，都不是我用编写代码时使用的语言。因此，我对这种输出并不熟悉。此外，在教授学生C++时，展示一个AST并解释说这就是全部，对我来说并不十分令人满意。 我开始编写一个基于Clang的工具，它可以将基于范围的for循环转换为编译器内部版本。之后，我对结构化绑定和lambda表达式也做了同样的处理。最终，我完成的工作比最初计划的要多得多。它展示了操作符被调用的位置，以及编译器进行类型转换的地方。C++ Insights可以推断出auto或decltype背后的类型。目标是生成可编译的代码。然而，在所有地方都实现这一点是不可能的。 例如，你可以看到lambda表达式、基于范围的for循环或auto的转换。当然，你也可以转换任何其他C++代码片段。 ","date":"2024-05-16","objectID":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/:1:0","tags":[],"title":"nvim 使用 cppinsights","uri":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/"},{"categories":[],"content":" 安装 insight.nvim 插件 return { \"rossjaywill/insights.nvim\", dependencies = { \"nvim-lua/plenary.nvim\", \"nvim-telescope/telescope.nvim\", }, config = function() require(\"insights\").setup{ insights_bin = 'insights', async = true, use_default_keymaps = true, -- disable default keymaps, to be user defined use_libc = true, -- do not use libc++ headers vim.api.nvim_set_keymap('n', 'ci', ':lua require(\"insights\").run_current_buf()\u003cCR\u003e', { noremap = true, silent = true }) } end, } -- local_only = false, -- only allow insights.nvim to invoke a local cppinsights binary -- http_only = false, -- only allow insights.nvim to make HTTP requests to cppinsights.io -- -- If both of these are not set (i.e. the default), then insights.nvim -- -- will use a local binary, if available, otherwise it will fallback to HTTP -- -- WARNING: You should think carefully about sending source code over HTTP - -- -- especially if you are working on a proprietary system. -- async = true, -- insights_bin = 'insights', -- use_default_keymaps = true, -- use_libc = true, -- use_vsplit = true, 有两点需要说明一下： 如果没有在本地找到 cppinsights，则插件会向网站请求，并把结果传送到本地 如果本地有安装二进制，需要 llvm 支持 ","date":"2024-05-16","objectID":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/:2:0","tags":[],"title":"nvim 使用 cppinsights","uri":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/"},{"categories":[],"content":" 安装 llvm # 下载源码 wget https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/llvm-project-13.0.1.src.tar.xz # 解压源码 tar xvf llvm-project-13.0.1.src.tar.xz # 新建安装目录 sudo mkdir -p /usr/local/llvm # 新建编译目录 sudo mkdir -p llvm-project-13.0.1.src/build # 进入编译目录 cd llvm-project-13.0.1.src/build # cmake生成编译信息 cmake -G \"Unix Makefiles\" -DLLVM_ENABLE_PROJECTS=\"clang\" -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_BUILD_TYPE=\"Release\" -DLLVM_INCLUDE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr/local/llvm\" ../llvm # 编译 cmake --build . # 安装到安装目录 cmake --build . --target install ","date":"2024-05-16","objectID":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/:3:0","tags":[],"title":"nvim 使用 cppinsights","uri":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/"},{"categories":[],"content":" 安装 cppinsights ","date":"2024-05-16","objectID":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/:4:0","tags":[],"title":"nvim 使用 cppinsights","uri":"/2024-05-16-nvim-%E4%BD%BF%E7%94%A8-cppinsights/"},{"categories":[],"content":" 最近在迁移开发环境（本质上是这家公司太抠门了，舍不得给开发狗购买机器），需要重新配置我的 nvim。由于我使用 clangd 进行c++ 代码的实时编译、检测以及语法高度，所以要求机器能够支持 clangd 的编译环境。 ","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:0:0","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" 遇到的问题打开 nvim 编辑 c++ 代码文件，会出现报错 Client 1 quit with exit code 1 and signal 0 无法在代码之间进行跳转。因此大概可以猜测 lsp 出问题了。 ","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:1:0","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" node 版本过低node 版本在 10.0 以下不支持 lua，因此需要升级一下。 ","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:1:1","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" clangd 无法启动可以先试着在终端执行 clangd 命令，看看环境是否支持 /home/lfang/.config/nvim/lazy/mason/bin/clangd /home/lfang/.confkzig/nvim/lazy/mason/bin/clangd: /lib64/libc.so.6: version `GLIBC_2.18' not found (required by /home/lfang/.config/nvim/lazy/mason/bin/clangd) 尴尬的是，这家公司实在拉跨，程序常年不更新，所以找不到 GLIBC_2.18 的版本号。 ","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:1:2","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" 解决方案","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:2:0","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" 升级 node","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:2:1","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":" 升级 glibc_2.18 export GLIBC_VERSION=2.18 cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-${GLIBC_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf glibc-${GLIBC_VERSION}.tar.gz \u0026\u0026 \\ cd glibc-${GLIBC_VERSION} \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr \\ --disable-profile \\ --enable-add-ons \\ --with-headers=/usr/include \\ --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* glibc ","date":"2024-05-15","objectID":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/:2:2","tags":[],"title":"记一次 nvim clangd 配置问题","uri":"/2024-05-15-%E8%AE%B0%E4%B8%80%E6%AC%A1-nvim-clangd-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"},{"categories":[],"content":"可以让 fzf 显示预览窗口功能，使用快捷键 ctrl-f export FZF_DEFAULT_OPTS=\"--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2\u003e /dev/null | head -500'\" ## fzf : Ctr-f ------------------------------------------------- # .zshrc example function __fsel_files() { setopt localoptions pipefail no_aliases 2\u003e /dev/null eval find ./ -type f -print | fzf --reverse -m \"$@\" | while read item; do echo -n \"${(q)item} \" done local ret=$? echo return $ret } function fzf-vim { selected=$(__fsel_files) if [[ -z \"$selected\" ]]; then zle redisplay return 0 fi zle push-line # Clear buffer BUFFER=\"nvim $selected\"; zle accept-line } zle -N fzf-vim bindkey \"^f\" fzf-vim setopt no_nomatch ## 处理：zsh: no matches found setopt GLOB_DOTS ## copy .dotfile: https://unix.stackexchange.com/questions/89749/cp-hidden-files-with-glob-patterns ","date":"2024-05-15","objectID":"/2024-05-15-fzf-%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88%E7%AA%97%E5%8F%A3/:0:0","tags":[],"title":"fzf 显示预览窗口","uri":"/2024-05-15-fzf-%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88%E7%AA%97%E5%8F%A3/"},{"categories":[],"content":"通过 rinetd 部署简易的端口转发功能，方便集中管理。 ","date":"2024-05-15","objectID":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:0:0","tags":[],"title":"rinetd 实现端口转发","uri":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":" 安装 git clone https://github.com/samhocevar/rinetd.git cd rinetd ./bootstrap ./configure --prefix=/usr/bin --sysconfdir=/etc make -j \u0026\u0026 make install ## 需要手动拷贝一份 cp rinetd /usr/bin/ ","date":"2024-05-15","objectID":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:1:0","tags":[],"title":"rinetd 实现端口转发","uri":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":" 配置 vim /etc/rinetd.conf # # forwarding rules come here # # you may specify allow and deny rules after a specific forwarding rule # to apply to only that forwarding rule # # bindadress bindport connectaddress connectport options... # 0.0.0.0 80 192.168.1.2 80 # ::1 80 192.168.1.2 80 # 0.0.0.0 80 fe80::1 80 # 127.0.0.1 4000 127.0.0.1 3000 # 127.0.0.1 4000/udp 127.0.0.1 22 [timeout=1200] # 127.0.0.1 8000/udp 192.168.1.2 8000/udp [src=192.168.1.2,timeout=1200] ## vim /usr/local/v2ray/config.json 配置端口，允许外部访问 ## 然后本地直接访问 127.0.0.1, 如 proxychains4 127.0.0.1 1086 192.168.1.82 1086 # logging information logfile /var/log/rinetd.log ","date":"2024-05-15","objectID":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:2:0","tags":[],"title":"rinetd 实现端口转发","uri":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":" systemd编辑 rinetd.service [Unit] Description=rinetd After=syslog.target network.target Wants=network.target [Service] Type=forking Restart=on-failure RestartSec=5s ExecStart=/usr/bin/rinetd -c /etc/rinetd.conf [Install] WantedBy=multi-user.target 启动服务 systemctl daemon-reload systemctl enable rinetd.service systemctl restart rinetd.service systemctl status rinetd.service ● rinetd.service - rinetd Loaded: loaded (/etc/systemd/system/rinetd.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2024-05-15 14:23:07 CST; 6min ago Process: 3694050 ExecStart=/usr/bin/rinetd -c /etc/rinetd.conf (code=exited, status=0/SUCCESS) Main PID: 3694053 (rinetd) Tasks: 1 (limit: 76689) Memory: 676.0K CGroup: /system.slice/rinetd.service └─3694053 /usr/bin/rinetd -c /etc/rinetd.conf May 15 14:23:07 xps systemd[1]: Starting rinetd... May 15 14:23:07 xps rinetd[3694053]: starting redirections... May 15 14:23:07 xps systemd[1]: Started rinetd. ","date":"2024-05-15","objectID":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:3:0","tags":[],"title":"rinetd 实现端口转发","uri":"/2024-05-15-rinetd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":" :put = map(range(0,17), 'printf(''[%02d]'', v:val)') 或者使用 :for i in range(0,10)| put=printf('[%02d]', i) |endfor ","date":"2024-05-14","objectID":"/2024-05-14-vim-%E6%89%93%E5%8D%B0%E5%B8%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97/:0:0","tags":[],"title":"vim 打印带格式的连续数字","uri":"/2024-05-14-vim-%E6%89%93%E5%8D%B0%E5%B8%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97/"},{"categories":[],"content":" 重启服务 sudo service clickhouse-server restart ## 可以待配置启动，方便查找问题 sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse-server/config.xml ","date":"2024-05-13","objectID":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/:1:0","tags":[],"title":"clickhouse 运维","uri":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" 修改 default 用户配置 vim /etc/clickhouse-server/users.xml \u003caccess_management\u003e1\u003c/access_management\u003e \u003cnamed_collection_control\u003e1\u003c/named_collection_control\u003e \u003cshow_named_collections\u003e1\u003c/show_named_collections\u003e \u003cshow_named_collections_secrets\u003e1\u003c/show_named_collections_secrets\u003e ","date":"2024-05-13","objectID":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/:2:0","tags":[],"title":"clickhouse 运维","uri":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" 开放远程访问 vim /etc/clickhouse-server/config.xml ## 将以下配置行注释去掉，允许所以访问 \u003clisten_host\u003e::\u003c/listen_host\u003e ","date":"2024-05-13","objectID":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/:3:0","tags":[],"title":"clickhouse 运维","uri":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" 添加用户 CREATE USER IF NOT EXISTS dataops IDENTIFIED WITH sha256_password BY 'xxxxxxxxxxx'; GRANT ALL ON bardata.* TO dataops; ","date":"2024-05-13","objectID":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/:4:0","tags":[],"title":"clickhouse 运维","uri":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" 登录 clickhouse-client -h 192.168.2.100 -u dataops --password ","date":"2024-05-13","objectID":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/:5:0","tags":[],"title":"clickhouse 运维","uri":"/2024-05-13-clickhouse-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":"Curriously Recursive Template Method(CRTP) 一种是实现了编译期多态（静态多态）的方法，相比于虚函数（virtual）跳过了虚表vtable查找，提供了比动态多态（运行时多态）更好的性能。 ","date":"2024-05-01","objectID":"/2024-05-01-crtp-%E4%B8%8E-std--variant/:0:0","tags":[],"title":"CRTP 与 std::variant","uri":"/2024-05-01-crtp-%E4%B8%8E-std--variant/"},{"categories":[],"content":" demo #include \u003cfunctional\u003e #include \u003cvector\u003e #include \u003ciostream\u003e #include \u003cunordered_map\u003e #include \u003cstring\u003e #include \u003cutility\u003e #include \u003cvariant\u003e using namespace std; template\u003ctypename T\u003e struct B { public: using cb_t = std::function\u003cvoid()\u003e; B() { _cbs.reserve(10); } virtual ~B() { cout \u003c\u003c \"~B\" \u003c\u003c endl; } void foo() noexcept { this-\u003eget()-\u003efoo_impl(); for (const auto\u0026 cb : _cbs) cb(); } void register_cb(cb_t cb) noexcept { _cbs.push_back(cb); } private: T* get() noexcept { return static_cast\u003cT*\u003e(this); } std::vector\u003ccb_t\u003e _cbs; }; struct D1: public B\u003cD1\u003e { ~D1() { cout \u003c\u003c \"~D1\" \u003c\u003c endl; } void foo_impl() noexcept { cout \u003c\u003c \"D1:foo_impl\" \u003c\u003c endl; } }; struct D2: public B\u003cD2\u003e { ~D2() { cout \u003c\u003c \"~D2\" \u003c\u003c endl; } void foo_impl() noexcept { cout \u003c\u003c \"D2:foo_impl\" \u003c\u003c endl; } }; template\u003ctypename T\u003e void execute(B\u003cT\u003e* e) { e-\u003efoo(); } int main() { B\u003cD1\u003e* d1 = new D1; d1-\u003eregister_cb([]() { cout \u003c\u003c \"[d1] cb called\" \u003c\u003c endl; }); B\u003cD2\u003e* d2 = new D2; d2-\u003eregister_cb([]() { cout \u003c\u003c \"[d2] cb called\" \u003c\u003c endl; }); std::unordered_map\u003cstd::string, std::variant\u003cB\u003cD1\u003e*, B\u003cD2\u003e*\u003e\u003e m; m[\"d1\"] = d1; m[\"d2\"] = d2; //use variant { auto d = std::get\u003cB\u003cD1\u003e*\u003e(m[\"d1\"]); d-\u003efoo(); } //use variant { auto d = std::get\u003cB\u003cD2\u003e*\u003e(m[\"d2\"]); d-\u003efoo(); } //policy-based ctx execute(d1); execute(d2); delete d1; delete d2; return 0; } ","date":"2024-05-01","objectID":"/2024-05-01-crtp-%E4%B8%8E-std--variant/:1:0","tags":[],"title":"CRTP 与 std::variant","uri":"/2024-05-01-crtp-%E4%B8%8E-std--variant/"},{"categories":[],"content":" 运行结果 D1:foo_impl [d1] cb called D2:foo_impl [d2] cb called ~D1 ~D2 ","date":"2024-05-01","objectID":"/2024-05-01-crtp-%E4%B8%8E-std--variant/:2:0","tags":[],"title":"CRTP 与 std::variant","uri":"/2024-05-01-crtp-%E4%B8%8E-std--variant/"},{"categories":[],"content":" Tips cb 需要绑定 lambda 表达式的引用或者函数指针，编译器有可能认为这是同一个代码段，导致上面的 cb 一直打印 d2 cb ","date":"2024-05-01","objectID":"/2024-05-01-crtp-%E4%B8%8E-std--variant/:3:0","tags":[],"title":"CRTP 与 std::variant","uri":"/2024-05-01-crtp-%E4%B8%8E-std--variant/"},{"categories":[],"content":"ninja 和 make 是一样属于 build system，不过提供了更好的编译速度，尤其对于大型开发项目，可以节省大量的编译时间。 ","date":"2024-04-30","objectID":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/:0:0","tags":[],"title":"使用 ninja 加速 c++ build","uri":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/"},{"categories":[],"content":" install ## centos sudo yum install ninja-build ## ubuntu sudo apt install ninja-build ninja --version 1.10.0 ","date":"2024-04-30","objectID":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/:1:0","tags":[],"title":"使用 ninja 加速 c++ build","uri":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/"},{"categories":[],"content":" 常用命令与参数 ## 使用 cmake 生成 build.ninja cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DDEFINE_DEBUG=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_INSTALL_PREFIX=./runtime ## 开始并行 build 并安装到指定路径 ninja -j10 ninstall ","date":"2024-04-30","objectID":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/:2:0","tags":[],"title":"使用 ninja 加速 c++ build","uri":"/2024-04-30-%E4%BD%BF%E7%94%A8-ninja-%E5%8A%A0%E9%80%9F-c-build/"},{"categories":[],"content":"c++ 标准库 \u003cqueue\u003e 提供了优先队列 priority_queue，以 log(1) 的算法获取队列头部、并以 log(n) 的算法插入元素。其原型为 template\u003c class T, class Container = std::vector\u003cT\u003e, class Compare = std::less\u003ctypename Container::value_type\u003e \u003e class priority_queue; ","date":"2024-04-29","objectID":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/:0:0","tags":[],"title":"可预先分配空间的 std::priority_queue","uri":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/"},{"categories":[],"content":" 模板 T: 元素类型 Container: 提供以下操作的容器，一般是 std::vector\u003cT\u003e front(), e.g., std::vector::front(), push_back(), e.g., std::deque::push_back(), pop_back(), e.g., std::vector::pop_back(). Compare: 比较元素间大小的运算，可以是 operator()、functor、lambda expression。默认是 std::less，即从大到小排序。 ","date":"2024-04-29","objectID":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/:1:0","tags":[],"title":"可预先分配空间的 std::priority_queue","uri":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/"},{"categories":[],"content":" 数据成员std::priority_queue 包含了 protected 的数据成员 c：这个是底层的容器，用于存储元素的内存空间。如果我们使用 std::vector\u003cT\u003e 作为存储容器，则可以通过这个进行预先分配内存空间，以避免在运行时的动态扩张，进而可以提供程序性能。 comp：比较函数 ","date":"2024-04-29","objectID":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/:2:0","tags":[],"title":"可预先分配空间的 std::priority_queue","uri":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/"},{"categories":[],"content":" 预先分配容器的存储空间利用 std::priority_queue 里面的容器存储 c（为 protected），我们可以写一个继承类，并提供 reserve 接口。 #include \u003cqueue\u003e template \u003cclass T, class Container = std::vector\u003cT\u003e, class Compare = std::less\u003ctypename Container::value_type\u003e\u003e class reservable_priority_queue: public std::priority_queue\u003cT, Container, Compare\u003e { public: using size_type = typename std::priority_queue\u003cT, Container, Compare\u003e::size_type; reservable_priority_queue(size_type capacity = 0) { reserve(capacity); }; void reserve(size_type capacity) { this-\u003ec.reserve(capacity); } size_type capacity() const { return this-\u003ec.capacity(); } }; ","date":"2024-04-29","objectID":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/:3:0","tags":[],"title":"可预先分配空间的 std::priority_queue","uri":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/"},{"categories":[],"content":" 完整代码 #include \u003cqueue\u003e #include \u003ciostream\u003e using namespace std; template \u003cclass T, class Container = std::vector\u003cT\u003e, class Compare = std::less\u003ctypename Container::value_type\u003e\u003e class reservable_priority_queue: public std::priority_queue\u003cT, Container, Compare\u003e { public: using size_type = typename std::priority_queue\u003cT, Container, Compare\u003e::size_type; reservable_priority_queue(size_type capacity = 0) { reserve(capacity); }; void reserve(size_type capacity) { this-\u003ec.reserve(capacity); } size_type capacity() const { return this-\u003ec.capacity(); } }; struct entry_t { int seq {-1}; double val {.0}; }; struct cmp_t { bool operator()(const entry_t\u0026 lhs, const entry_t\u0026 rhs) { return lhs.seq \u003e= rhs.seq; } }; int main() { reservable_priority_queue\u003centry_t, std::vector\u003centry_t\u003e, cmp_t\u003e q; q.reserve(10000); std::cout \u003c\u003c q.capacity() \u003c\u003c '\\n'; for (int i = 0; i \u003c 10; ++i) { q.emplace(entry_t{i, i*i*1.0}); } while (!q.empty()) { auto\u0026 e = q.top(); cout \u003c\u003c \"seq:\" \u003c\u003c e.seq \u003c\u003c \", val:\" \u003c\u003c e.val \u003c\u003c endl; q.pop(); } } 测试结果： g++ pq.cpp -std=c++17 ./a.out 10000 seq:0, val:0 seq:1, val:1 seq:2, val:4 seq:3, val:9 seq:4, val:16 seq:5, val:25 seq:6, val:36 seq:7, val:49 seq:8, val:64 seq:9, val:81 ","date":"2024-04-29","objectID":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/:4:0","tags":[],"title":"可预先分配空间的 std::priority_queue","uri":"/2024-04-29-%E5%8F%AF%E9%A2%84%E5%85%88%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E7%9A%84-std--priority_queue/"},{"categories":[],"content":" 参考链接 C++ 优化点 ","date":"2024-04-22","objectID":"/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/:0:0","tags":[],"title":"c++ 高性能技巧","uri":"/2024-04-22-c-%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E5%B7%A7/"},{"categories":[],"content":"在低延迟场景中，我们对性能有极致的要求。为了方便对比不同函数的开心，需要借助一些测试手段。这些测试的基本流程是： 在函数调用开始是计算 rdtsc 初始值 函数调用结束后，计算 rdtsc 的差值 循环以上流程若干次 最终得到一个平均的函数开销时间 整个测试流程其实是非常的标准化，我们完全可以利用一些框架进行快速的测试。比如我现在使用的 google benchmark。 ","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:0:0","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":" 安装 git clone https://github.com/google/benchmark.git git clone https://github.com/google/googletest.git benchmark/googletest mkdir build \u0026\u0026 cd build cmake -DCMAKE_BUILD_TYPE=RELEASE ../benchmark ","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:1:0","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":" 测试","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:2:0","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":" 函数原型测试有两部分构成 测试函数，原型为 std::function\u003cvoid(benchmark::State\u0026)\u003e，然后使用宏命令 BENCHMARK(func) 将其注册到主程序。google benchmark 会循环运行该函数，并统计相关指标 主程序入口：BENCHMARK_MAIN() ","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:2:1","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":" 代码 #include \u003cbenchmark/benchmark.h\u003e #include \u003carray\u003e #include \u003cutils/nanotime.hpp\u003e using namespace falcon; //----------------------------------------------------------------------------- void now_ns(benchmark::State\u0026 state) { for (auto _: state) { nanotime_t::ns(); } } BENCHMARK(now_ns); void now_sysns(benchmark::State\u0026 state) { for (auto _: state) { nanotime_t::sysns(); } } BENCHMARK(now_sysns); void now_ntime(benchmark::State\u0026 state) { for (auto _: state) { nanotime_t::ntime(); } } BENCHMARK(now_ntime); void ns2ntime(benchmark::State\u0026 state) { for (auto _: state) { auto ns = nanotime_t::ns(); nanotime_t::ns2ntime(ns); } } BENCHMARK(ns2ntime); void ns2str(benchmark::State\u0026 state) { for (auto _: state) { auto ns = nanotime_t::ns(); nanotime_t::ns2str(ns); } } BENCHMARK(ns2str); void ns2str_slow(benchmark::State\u0026 state) { for (auto _: state) { auto ns = nanotime_t::ns(); nanotime_t::to_str_slow(ns); } } BENCHMARK(ns2str_slow); void ns2datetimestr(benchmark::State\u0026 state) { for (auto _: state) { auto ns = nanotime_t::ns(); nanotime_t::ns2datetimestr(ns); } } BENCHMARK(ns2datetimestr); void strftime(benchmark::State\u0026 state) { for (auto _: state) { auto ns = nanotime_t::ns(); nanotime_t::strftime(ns); } } BENCHMARK(strftime); //----------------------------------------------------------------------------- /////////////////////////////////////////////////////////////////////////////// BENCHMARK_MAIN(); /////////////////////////////////////////////////////////////////////////////// ","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:2:2","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":" 结果 2024-04-21T13:52:30+08:00 Running ./test_benchmark Run on (20 X 4800 MHz CPU s) CPU Caches: L1 Data 48 KiB (x10) L1 Instruction 32 KiB (x10) L2 Unified 1280 KiB (x10) L3 Unified 25600 KiB (x1) Load Average: 1.13, 1.27, 1.62 ***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead. --------------------------------------------------------- Benchmark Time CPU Iterations --------------------------------------------------------- now_ns 5.49 ns 5.49 ns 107478294 now_sysns 11.3 ns 11.3 ns 62195134 now_ntime 5.43 ns 5.43 ns 130701288 ns2ntime 5.47 ns 5.47 ns 123446131 ns2str 15.0 ns 15.0 ns 47280993 ns2str_slow 60.9 ns 60.9 ns 11144495 ns2datetimestr 460 ns 460 ns 1577622 strftime 15785 ns 15785 ns 44630 从上述结果可以比较清楚的知道，我们的函数调用 ns 的开销对比系统调用 sysns 是非常小的，但在转化成字符串的时候，不同的设计是有明显的差异。其中 ns2str 是最快的，这主要是因为我们使用来一个针对小对象设计的 Str\u003cN\u003e 类。 ","date":"2024-04-21","objectID":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/:3:0","tags":[],"title":"c++ 使用 google benchmark","uri":"/2024-04-21-c-%E4%BD%BF%E7%94%A8-google-benchmark/"},{"categories":[],"content":"中金所推出了多个股指期货合约，这些合约以相应的股票指数为基础标的。为了更好的预测股指期货波动，我们需要更准确的指数信息。而构建指数的基础数据包括： 成份股 成份权重 基准日期的自由流通市值（中证指数） 无论对于历史数据的复原，还是实盘数据的更新，一份合理、准确的指数构建都至关重要。上述三个项目当中，尤其以指数的成份权重尤为关键。 中证指数官网有偿提供每日权重的更新数据，不过收费巨贵。为此，我们可以通过模拟中证指数的构建方法和计算规则，生成一份准确的指数数据。具体的规则，可以参考《中证指数有限公司股票指数计算与维护细则V13.1》 我们的工作主要有部分： 复原历史指数权重数据 实现每日权重数据更新 根据样本权重，利用逐笔成交数据(last_px)、快照数据(vwap)计算得到每一个点位上的指数价格 关于中证指数规则","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:0:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 编制规则 中证指数公司负责编制指数，并在每个月月底公布下个月的权重数据（官网可下载） 每年的6、12月第二个周五定期调整权重（此时不再对外公布权重信息，这也是我们自编制的指数在每年6、12月下旬出现较大偏移的原因） 样本临时调整： 退市：直接从样本剔除，然后从备选池纳入新成分 收购合并：中证指数会发布公告，万得指数成分变动数据有记录 停牌（目前无法处理） ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:1:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 更新维护","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:2:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 指数修正 除息（现金分红）不予修正： 除权（送股、转股、配股、拆股、缩股）：需要计算除权价格 其他公司事件（由于我们无法获取跟中证指数统计口径一致的数据，暂时无法处理）： 当样本股本发生由其他公司事件（如增发、债转股、期权行权等）引起的总股本变动累计达到或超过5%时，对其进行临时调整，在样本的股本变动生效日前修正指数。 当样本股本发生由其他公司事件引起的总股本变动累计不及5%时，对其进行定期调整，在定期调整生效日前修正指数 样本发生退市情况，需要删除原有样本，然后从备选池录入新样本（万得提供了历史指数成分的纳入、剔除数据） ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:2:1","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 除权除息价格计算可以根据恒等式推算 \\begin{align} 公司总资产 \u0026: \\\\ \u0026\\equiv N * P_0 - N * D_{现金分红} + NR_{配股比例} R_{配股完成比例}P_{配股价格} \\\\ \u0026\\equiv N(1 + R_{送股比例} + R_{转股比例} + R_{配股比例} * R_{配股完成比例} ) * P_t \\\\ \\longrightarrow P_0^{’} \u0026= \\frac{P_0 - D_{现金分红} + R_{配股比例} * R_{配股完成比例} * P_{配股价格} }{ 1 + R_{送股比例} + R_{转股比例} + R_{配股比例} * R_{配股完成比例} } \\end{align} 其中 N 表示原始股本数量 $P_0$ 表示前一日价格 $P_t$ 表示除权除息当日价格 中证指数不处理现金分红，所以 $D_{现金分红} = 0$。 ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:2:2","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 数据说明 中证指数使用自由流通市值，根据官方文档 为反映市场中实际流通股份的变动情况，指数剔除了样本总股本中的限售股份，以及由于战略持股或其他原因导致的基本不流通股份，剩下的股本称为自由流通股本，也即自由流通量。上市公司公告明确的限售股份和属于下述四类股份，且股东持有股份量达到或超过 5%或具有一致行动人关系的股东合计持有股份量达到或超过 5%，被视为非自由流通股本。四类股份具体如下： （1）公司创建者、家族、高级管理者等长期持有的股份 （2）国有股份 （3）战略投资者持有的股份 （4）员工持股计划 计算公式为： $$ 自由流通量 = 样本总股本- 非自由流通股本 $$ 中证指数有限公司根据多种客观的信息来源估算自由流通量，包括但不限于： 招股说明书、上市公告书：实际控制人，发起人，战略投资者，高管持股，员工持股等； 定期报告：实际控制人，发起人，战略投资者，高管持股，员工持股等； 临时公告：股东持股变化公告、收购报告书、权益变动报告书等。 从以上表述看，自由流通市值这个概念其实没有一个非常清晰的界定，毕竟以上所涉及的各类公告信息，目前市面上几乎没有数据供应商具备收集与整理的能力。即使强如万得，也是没有这方面精确的、与中证指数官网完全一致的数据。1 代码实现代码实现难度不高，不过需要注意历史的部分数据有异常情况（如临时退市、纳入与剔除数量不一致等）。 ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:3:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 流程 从万得获取一份指数的历史成份记录（wind.indexhistory），用于更新成份列表。由于从每年6、12月第二个周五开始，中证指数没有公布成份权重数据，对于在此时剔除、纳入的样本股票，万得提供的成份权重数据是 NAN，这个一定不能用（罪恶！）。 在每个月最后一个交易日从万得获取指数成份权重数据，这个将被用于当作接下来一整个月的数据基础。同时，我们最好在每个月第一个交易日，再更新一份万得的权重数据，然后跟月末的数据进行对比，看看是否有发生变化，以便做数据核对。 接下来的每一天直至月末，我们根据基准日期（即上个月月末）的权重数据，计算成份股的涨跌幅度2。然后判断当天盘后是否有最新的权重更新(比如wind数据源月末最后一天, 或者6月/12月指数调整披露的日期) 如果有，则直接同步更新至最新的指数权重。 如果没有，则用当天盘后 stock.daily 中 stock_symbols 的 close/preclose 当做权重，来调整前一日的权重。 以上处理，实现了每日根据个股涨跌幅计算市值的波动，并以此更新权重数据。 在每年的6、12月第二个周五，由于没有成份权重数据，我们可以利用万得api提供的流通市值，用来近似代表中证指数使用的自由流通市值，并逐日进行更新，这样可以尽量减少在6、12月下旬的差异。 ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:4:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 代码解析","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 计算中证指数每年6、12月第二个周五的交易日 @staticmethod def gen_csi_index_change_days(): \"\"\"计算中证指数在每年6、12月第二个周五调整对应的交易日期 \"\"\" ## start_date = datetime(2000, 1, 1) end_date = datetime(2099, 1, 1) delta = end_date - start_date days = [] for i in range(delta.days + 1): day = start_date + timedelta(days=i) days.append(day.strftime(\"%Y-%m-%d\")) df = pd.DataFrame({'natural_day': days}) df['natural_mon'] = df['natural_day'].apply(lambda x: x[:7]) df['day_of_week'] = df['natural_day'].apply( lambda x: datetime.strptime(x, '%Y-%m-%d').strftime(\"%u\")) df['nth_of_week'] = df.groupby(['natural_mon', \"day_of_week\"])[\"day_of_week\"].transform(lambda x: range(1,len(x)+1)) for k in ['day_of_week', 'nth_of_week']: df[k] = df[k].astype(str) ## 样本调整实施时间原则上分别为每年 6 月和 12 月的第二个星期五的下一交易日。 df = df[(df['natural_mon'].str.contains('-06$|-12$')) \u0026 (df['day_of_week'] == '5') \u0026 (df['nth_of_week'] == '2')] return df natural_day natural_mon day_of_week nth_of_week 160 2000-06-09 2000-06 5 2 342 2000-12-08 2000-12 5 2 524 2001-06-08 2001-06 5 2 713 2001-12-14 2001-12 5 2 895 2002-06-14 2002-06 5 2 ... ... ... ... ... 35412 2096-12-14 2096-12 5 2 35594 2097-06-14 2097-06 5 2 35776 2097-12-13 2097-12 5 2 35958 2098-06-13 2098-06 5 2 36140 2098-12-12 2098-12 5 2 [198 rows x 4 columns] ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:1","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 获取 wind.indexhistory res = windx('wset', [ \"indexhistory\", f\"startdate={start_day};enddate={cal.today()};windcode={self.index_symbol}\"], src = self.wind_src) tradedate tradecode tradename mv weight tradestatus TradingDay Symbol 0 Mon, 11 Dec 2023 00:00:00 GMT 300308.SZ 中际旭创 964.595725 0.972000 剔除 2023-12-11 300308.SZ 1 Mon, 11 Dec 2023 00:00:00 GMT 688256.SH 寒武纪-U 708.168907 0.497000 剔除 2023-12-11 688256.SH 2 Mon, 11 Dec 2023 00:00:00 GMT 600372.SH 中航机载 629.056562 0.398000 剔除 2023-12-11 600372.SH 3 Mon, 11 Dec 2023 00:00:00 GMT 601136.SH 首创证券 599.966769 0.103000 剔除 2023-12-11 601136.SH 4 Mon, 11 Dec 2023 00:00:00 GMT 300832.SZ 新产业 599.896292 0.352000 剔除 2023-12-11 300832.SZ ... ... ... ... ... ... ... ... ... 2925 Mon, 04 Jan 2010 00:00:00 GMT 601008.SH 连云港 41.879040 NaN 纳入 2010-01-04 601008.SH 2926 Mon, 04 Jan 2010 00:00:00 GMT 002212.SZ 天融信 40.611450 NaN 纳入 2010-01-04 002212.SZ 2927 Mon, 04 Jan 2010 00:00:00 GMT 002107.SZ 沃华医药 40.322682 NaN 纳入 2010-01-04 002107.SZ 2928 Mon, 04 Jan 2010 00:00:00 GMT 002109.SZ 兴化股份 39.459840 NaN 纳入 2010-01-04 002109.SZ 2929 Mon, 04 Jan 2010 00:00:00 GMT 600644.SH 乐山电力 34.280414 NaN 纳入 2010-01-04 600644.SH ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:2","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 计算每个月的基准日期 self.index_symbol = '000905.SH' self.output_path = '/home/william/Desktop/ib' self.trading_day = '2023-06-09' self.wind_src = 'wuya' self.base_day = '2023-06-08' self.this_mon = '2023-06' self.last_mon = '2023-05' self.this_mon_first_day = '2023-06-01' self.this_mon_last_day = '2023-06-30' self.last_mon_last_day = '2023-05-31' ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:3","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 获取万得历史的权重数据 def fetch_index_weight_from_wind(self): \"\"\"用这个月第一天的数据来填充剩下的日期 \"\"\" ## 1. 如果是月末，使用月末的日期，获取权重 ## 2. 如果是非月末，则使用第一天的，这个应该跟月末数据是一致的 wind_trading_day = (self.this_mon_last_day if self.trading_day == self.this_mon_last_day else self.this_mon_first_day) csvfile = f\"{self.output_path}/wind.fetch_index_weight.{wind_trading_day}.{self.index_symbol}.csv\" if not os.path.isfile(csvfile): try: # res = wind.fetch_index_weight(self.index_symbol, self.trading_day) ## 万得的 000300.SH 是每个月变动两次，需要修改 base day ## 我们终端中证指数权重不是每日更新的，是月度更新，沪深300就月初和月末这2次变动。 ## 如果需要每日的数据，要购买中证指数的服务，成为会员，然后在万得做数据订制才行。 ## 是的，目前只有沪深300的权重是月初和月末变动更新的。 res = self.wind.fetch_index_weight(self.index_symbol, wind_trading_day) res.to_csv(csvfile, index=False) log.inf(f\"wind.fetch_index_weight: {self.index_symbol}, {wind_trading_day} ==\u003e {csvfile}\") except Exception as e: msg = traceback.format_exc() log.err(msg) raise Exception(msg) res = pd.read_csv(csvfile) res['BenchmarkDay'] = res['BaseDay'].apply(lambda x: datetime.strptime(x[:16], \"%a, %d %b %Y\").strftime('%Y-%m-%d')) res['TradingDay'] = self.trading_day res['IndexName'] = '' res['IndexAlias'] = '' res['IndexSymbol'] = self.index_symbol res['Symbol'] = res['w_code'] ## 标准化 res = res[~pd.isna(res['index_weight'])] res['Weight'] = res['index_weight'] / res['index_weight'].sum() res['WeightAdjust'] = res['Weight'] if (len(res['BenchmarkDay'].unique()) != 1 or (res['BenchmarkDay'].unique()[0] not in [self.base_day, wind_trading_day] and self.trading_day \u003e '2020-01-01') ): raise Exception(f\"\"\" WindApi Error fetch_index_weight {self.base_day = } {res = } \"\"\") df = res[self.COLUMNS] return df TradingDay BenchmarkDay IndexName IndexAlias IndexSymbol Symbol Weight WeightAdjust 0 2023-06-09 2023-05-31 000905.SH 000009.SZ 0.003790 0.003790 1 2023-06-09 2023-05-31 000905.SH 000012.SZ 0.001270 0.001270 2 2023-06-09 2023-05-31 000905.SH 000021.SZ 0.003250 0.003250 3 2023-06-09 2023-05-31 000905.SH 000027.SZ 0.002000 0.002000 4 2023-06-09 2023-05-31 000905.SH 000031.SZ 0.000710 0.000710 .. ... ... ... ... ... ... ... ... 495 2023-06-09 2023-05-31 000905.SH 688772.SH 0.000320 0.000320 496 2023-06-09 2023-05-31 000905.SH 688777.SH 0.005100 0.005100 497 2023-06-09 2023-05-31 000905.SH 688779.SH 0.001340 0.001340 498 2023-06-09 2023-05-31 000905.SH 688819.SH 0.000730 0.000730 499 2023-06-09 2023-05-31 000905.SH 689009.SH 0.002120 0.002120 [500 rows x 8 columns] 使用流通市值计算权重在每年的6、12月第二个周五（盘后更新），需要使用万得提供的流通市值计算成份股的权重。 具体步骤为： 读取上一个月的权重成份 获取 indexhistory，区分纳入、剔除的成份（最好对比一下数量是否一样） 生成新的成份样本 根据前一天的收盘价计算当天的权重 此后每日更新至月底 合成新的成份 ## 1. 先读取上一个的成份 last_mon_day = self.ALL_DAYS[self.ALL_DAYS.mon == self.last_mon].days.values[-1] csvfile = f\"{self.output_path}/{self.index_symbol}.base_day.{last_mon_day}.csv\" if not os.path.isfile(csvfile): if not (re.search(\"SH\", self.index_symbol) or self.trading_day \u003e '2019-06-01'): df_last_mon = self.fetch_index_weight_from_wind() else: raise Exception(f\"failed to find last mon base_day: {csvfile = }\") else: log.inf(f\"already done, using {csvfile = }\") df_last_mon = pd.read_csv(csvfile) ## 2. 然后根据出入 history 情况进行剔除、添加 ## 注意 TradingDay 是生效日期，需要在 base_day 加上一天 res = self.index_history[ (self.index_history.TradingDay == cal.cal_trading_day(self.base_day, +1)) ] if len(res) == 0: base_day = self.SPECIAL_DAYS[self.SPECIAL_DAYS.mon == self.this_mon] for day in base_day.days: res = self.index_history[ (self.index_history.TradingDay == cal.cal_trading_day(day, +1)) ] if len(res) != 0: break if set(res.tradestatus.unique()) != set(['剔除', '纳入']) and self.trading_day \u003e '2020-01-01': raise Exception(f\"\"\" Wind has Changed it's tradestatus, should be ...... {set(['剔除', '纳入']) = } but got {set(res.tradestatus.unique()) = } \"\"\") removed = res[res.tradestatus.str.contains(\"剔除\")] added = res[res.tradestatus.str.contains(\"纳入\")] ## 2017-06-01: 000804.CSI, removed:30, added:29 if abs(len(removed) - len(added)) \u003e 1 and len(df_last_mon) \u003c 1000: raise Exception(f\"\"\" Wind has different symbol length {len(removed) = } {len(added) = } \"\"\") lo","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:4","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 每日根据股票涨跌幅更新权重 def adjust_weight_on_daily(self, df): \"\"\" http://192.168.1.191:20080/wiki/#/team/M9rVLNSS/share/LdejewHw/page/9DNzQcim 判断当天盘后是否有最新的权重更新(比如wind数据源月末最后一天, 或者6月/12月指数调整披露的日期) * 如果有，则直接同步更新至最新的指数权重。 * 如果没有，则用当天盘后stock.daily中stock_symbols的close/preclose当做权重，来调整前一日的权重。 \"\"\" while True: special = self.SPECIAL_DAYS.groupby(['mon']).agg(\"first\") if self.trading_day in special.days.values: break if df.BenchmarkDay.values[0] == self.trading_day: break csvfile = f\"{self.output_path}/{cal.cal_trading_day(self.trading_day, -1)}.{self.index_symbol}.ib_weight.csv\" if not os.path.isfile(csvfile): break log.inf(f\"now try to update ib_weight by pre_close: {self.trading_day}\") df_pre = pd.read_csv(csvfile) daily = get_stock_daily_from_cache(self.trading_day) if daily is None or len(daily) == 0: daily = ch_idc.read(f\"\"\" select * from stock.daily where TradingDay = '{self.trading_day}' \"\"\") daily = pd.merge(daily, df_pre, on = 'Symbol', how = 'right', suffixes = ['', '_ib']) if len(daily) != len(df) and self.trading_day \u003e '2020-01-01': raise Exception(f\"\"\" {len(daily) = } {len(df) = } \"\"\") daily['x'] = daily['Close'] / daily['PreClose'] for k in ['Weight', 'WeightAdjust']: daily[f'{k}Origin'] = daily[f'{k}'] daily[f'{k}Update'] = daily[f'{k}Origin'] * (daily['x'] / daily['x'].sum()) daily[f'{k}Update'] = daily[f'{k}Update'] / daily[f'{k}Update'].sum() daily = daily[self.COLUMNS + ['WeightOrigin', 'WeightUpdate', 'WeightAdjustOrigin', 'WeightAdjustUpdate']] daily['BenchmarkDay'] = self.trading_day ## 2015-05-20: 000016.SH if len(daily[pd.isna(daily['WeightUpdate'])]) != 0: break ## --------------------------------------- ## use update version for k in ['Weight', 'WeightAdjust']: daily[f'{k}'] = daily[f'{k}Update'] df = daily[self.COLUMNS] break ## --------------------------------------- return df ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:5","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" run def run(self): df = pd.DataFrame([], columns = self.COLUMNS) if self.index_symbol.endswith('SH'): info = csi_index_symbol_basic_info(self.index_symbol) if self.trading_day \u003c info['data'].get('publishDate'): log.wrn(f\"not yet published\") return df ## ==================== df = self.gen_index_weight() self.df = self.adjust_weight_on_daily(df) if self.check(): self.save() return self.df ## ==================== ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:5:6","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 结果验证这个版本在每年6、12月存在较大偏离，其他时间则较好贴近 一次更新 根据每日涨跌幅滚动更新后，指数更加平滑了 ib指数更加平滑 ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:6:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 价格指数 vs 全收益指数","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:7:0","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 全收益指数另外，我们在对比权重数据的时候，需要区分价格指数与全收益指数的区别。可以参考这篇文章: 全收益指数概念详解 价格指数 vs 全收益指数 价格指数是单纯反应一篮子股票的价格变化情况。每一个价格指数背后都有一个对应的全收益指数（Total Return Index），这类指数除了反映股价波动外，还假定篮子内所有股票的现金分红用于再投资产生收益。　沪深300指数它对应“沪深300全收益指数”。当有样本股除息（分红派息），沪深300指数不予修正，任其自然回落；沪深300全收益指数考虑到分红的部分，在样本股除息日前按照除息参考价予以修正。　比如这些指数以及对应的全收益指数：wind.规模指数_全收益.csv ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:7:1","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":" 验证 ib weight 最好使用全收益指数 我们在每日滚动更新权重时，使用的 $\\frac{Close}{PreClose}$，这里面的 PreClose 即除权除息价格。 \\begin{align} P_0^{’} \u0026= \\frac{P_0 - D_{现金分红} + R_{配股比例} * R_{配股完成比例} *P_{配股价格} }{1 + R_{送股比例} + R_{转股比例} + R_{配股比例} * R_{配股完成比例} } \\end{align} 由于中证指数对于个股现金派息不予以修正，会导致我们滚动计算的除权价格偏小，相反的当日的个股收益变大 于是，我们每日滚动计算的指数数据，实际上比中证指数要偏大一些 对此，我们需要跟踪全收益指数，这能反映现金分红进行再投资带来的增益。 万得提供了数据 float_a_shares， 这个可以近似当作自由流通市值，但不敢保证数据精确。 ↩︎ 需要处理除权除息，可以根据以上除权公式；或者交易所提供的 PreClose 数据，这个数据已经过除权处理 ↩︎ ","date":"2024-04-15","objectID":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/:7:2","tags":[],"title":"构建指数权重ib weight","uri":"/2024-04-15-%E6%9E%84%E5%BB%BA%E6%8C%87%E6%95%B0%E6%9D%83%E9%87%8Dib-weight/"},{"categories":[],"content":"使用 dlopen 可以在程序运行时加载动态库(.so, shared object)，允许我们在 runtime 阶段执行判断需要的函数。 Ref C++在Linux下借助dlopen使用动态库 dlib ","date":"2024-04-12","objectID":"/2024-04-12-dlopen-c-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:0:0","tags":[],"title":"dlopen c++ 使用总结","uri":"/2024-04-12-dlopen-c-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":"host 宿主机已经配置 vpn 代理，为了可以让 Docker 虚拟机能够共享宿主机的代理服务，我们需要修改相关的配置。 ","date":"2024-03-28","objectID":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/:0:0","tags":["docker","vpn","network","host","socks5","http"],"title":"docker 使用 host 代理","uri":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/"},{"categories":["tools"],"content":" 修改 ~/.docker/config.json { \"proxies\": { \"default\": { \"httpProxy\": \"socks5://127.0.0.1:1086\", \"httpsProxy\": \"socks5://127.0.0.1:1086\", \"noProxy\": \"localhost,127.0.0.1,127.0.0.0/8\" } } } ","date":"2024-03-28","objectID":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/:1:0","tags":["docker","vpn","network","host","socks5","http"],"title":"docker 使用 host 代理","uri":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/"},{"categories":["tools"],"content":" 修改 Docker Compose需要设置网络模式 network_mode: host，这样使得虚拟机可以直接使用宿主机的网络代理服务. version: \"3\" services: pyrdev: hostname: pyrdev container_name: pyrdev image: 192.168.1.162:5000/pyrdev:v1.0 privileged: true network_mode: host shm_size: '8gb' command: - /bin/bash - -c - | /usr/sbin/init pull_policy: always restart: always ","date":"2024-03-28","objectID":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/:2:0","tags":["docker","vpn","network","host","socks5","http"],"title":"docker 使用 host 代理","uri":"/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/"},{"categories":["tool"],"content":"使用 Docker 搭建一个简易的 RSS 服务，根据自己的兴趣订阅消息源。我现在使用的是 Awesome TinyTinyRSS。 Awesome TTRSS https://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2 ","date":"2024-03-24","objectID":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/:0:0","tags":["docker","rss","TTRSS"],"title":"docker 搭建 TTRSS","uri":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/"},{"categories":["tool"],"content":" Awesome TTRSS使用 Dockder-compose 安装，集成相关的服务。 创建目录 ~/ttrss, 下载 docker-compose.yaml mkdir -p ~/ttrss/ \u0026\u0026 cd ~/ttrss mkdir -p feed-icons mkdir -p db chmod -R 777 ./feed-icons ## 启动服务 docker-compose up -d ## 后续更新 docker-compose down # 关闭 Docker 容器 docker pull wangqiru/ttrss:latest docker pull wangqiru/mercury-parser-api:latest docker pull wangqiru/opencc-api-server:latest docker pull sameersbn/postgresql:latest # 更新镜像 docker-compose up -d # 重新启动 Docker 容器 默认账户是 admin，登录后及时修改 默认账户：admin 默认密码：password 根据实际情况修改端口、密码等 version: \"3\" services: service.rss: image: wangqiru/ttrss:latest container_name: ttrss ports: - 3894:80 ## change port environment: - SELF_URL_PATH=https://rss.wuyacapital.com/ # please change to your own domain - DB_PASS=xxxxxxxxxxxx # use the same password defined in `database.postgres` - PUID=1000 - PGID=1000 - ENABLE_PLUGINS=auth_internal,fever,api_feedreader,api_newsplus, # auth_internal is required. Plugins enabled here will be enabled for all users as system plugins volumes: - ./feed-icons:/var/www/feed-icons/ networks: - public_access - service_only - database_only stdin_open: true tty: true restart: always service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page image: wangqiru/mercury-parser-api:latest container_name: mercury networks: - public_access - service_only restart: always service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page image: wangqiru/opencc-api-server:latest container_name: opencc environment: - NODE_ENV=production networks: - service_only restart: always database.postgres: image: postgres:13-alpine container_name: postgres environment: - POSTGRES_PASSWORD=xxxxxxxxx # feel free to change the password volumes: - ./db/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host networks: - database_only restart: always # utility.watchtower: # container_name: watchtower # image: containrrr/watchtower:latest # volumes: # - /var/run/docker.sock:/var/run/docker.sock # environment: # - WATCHTOWER_CLEANUP=true # - WATCHTOWER_POLL_INTERVAL=86400 # restart: always networks: public_access: # Provide the access for ttrss UI service_only: # Provide the communication network between services only internal: true database_only: # Provide the communication between ttrss and database only internal: true mercury ","date":"2024-03-24","objectID":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/:1:0","tags":["docker","rss","TTRSS"],"title":"docker 搭建 TTRSS","uri":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/"},{"categories":["tool"],"content":" 数据备份 ## 备份数据库 docker exec postgres pg_dumpall -c -U postgres \u003e export.sql ## 恢复数据库 cat export.sql | docker exec -i postgres psql -U postgres ## 可以设置定期备份 0 1 * * * cd /root/ttrss \u0026\u0026 docker exec postgres pg_dumpall -c -U postgres \u003e export.sql ","date":"2024-03-24","objectID":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/:2:0","tags":["docker","rss","TTRSS"],"title":"docker 搭建 TTRSS","uri":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/"},{"categories":["tool"],"content":" Ref Awesome TTRSS docker compose 部署配置 Awesome TTRSS 教程 Docker系列 安装个人RSS服务TTRSS 手机完美适配 博客：十年之约 ","date":"2024-03-24","objectID":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/:3:0","tags":["docker","rss","TTRSS"],"title":"docker 搭建 TTRSS","uri":"/2024-03-24-docker-%E6%90%AD%E5%BB%BA-ttrss/"},{"categories":["programming"],"content":"data cache 在用户调用资源开辟一块缓存区域，保存了中间的计算结果，可以避免重复计算。 ","date":"2024-03-22","objectID":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/:0:0","tags":["data","cache","python","lru"],"title":"data cache 的妙用","uri":"/2024-03-22-data-cache-%E7%9A%84%E5%A6%99%E7%94%A8/"},{"categories":["programming"],"content":"AT\u0026T 汇编是 Linux 操作系统默认的汇编语言。熟悉汇编语言能够增强我们对程序运行逻辑的认识，理解程序运行的性能瓶颈。 Ref x86 Assembly Guide Introduction to Compilers and Language Design Function Calls and the Call Stack 你一定要搞明白的C函数调用方式与栈原理 第 1 章 C++ 惯用法 C++ 函数调用栈 ","date":"2024-03-19","objectID":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/:0:0","tags":["AT\u0026t","att","assemble","gcc","g++","c++","c","intel","汇编"],"title":"ATT 汇编语法","uri":"/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/"},{"categories":["tools"],"content":"我在多年前购买了一款罗技无线蓝牙鼠标 Master 3S，使用感觉是相当得丝滑。不过非常遗憾，我这次过年回家，不小心把鼠标的蓝牙适配器弄丢了，导致最近办公只能使用戴尔赠送的有线鼠标。体验感不是特别好。 今天突发奇想，我原先也有一个旧的罗技蓝牙鼠标（初代Master），何不利用旧的蓝牙适配器来配对这款 Master 3s ？ 官网软件首先遇到的问题是：由于罗技出产配对使用的是鼠标的通道，如果需要用其他蓝色接收器重新配对，则要通过罗技提供的软件进行重新配对的操作。遗憾的是（大部分厂商）都只提供 Window 和 Mac 操作系统下的软件版本，而没有开发 Linux 版本。这导致我无法从官网获取软件支持。 Logi Options+ Linux 开源软件","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:0:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" 遇事不决，google 解决当然，遇事不决，google 解决。我以关键词 Logi Options+ linux 检索，第一个跳出 StackOverflow:Logitech Options on Linux https://askubuntu.com/questions/1206369/logitech-options-on-linux 按照上面的方法，开始安装 solaar sudo apt install solaar solaar ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:1:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["tools"],"content":" solaar打开 solaar 后，我们接下来需要添加新设备。我们需要把鼠标先关闭，然后再重新开启，这样程序才能识别是新接入的设备。 添加新设, 记得先关闭再重启鼠标 配对成功后，即可看到无线鼠标的设备信息来。 成功配对我的 Master 3S ","date":"2024-03-18","objectID":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/:2:0","tags":["linux","logitech","鼠标","solaar","罗技"],"title":"Linux 配对罗技蓝牙鼠标","uri":"/2024-03-18-linux-%E9%85%8D%E5%AF%B9%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/"},{"categories":["programming"],"content":"pybind11 allow us to expose c++ class/function to higher abstraction level of python programming language, bringing high performance and flexibility into python. To pass named arguments in python, it’s required to specify argument names in pybind11’s interface. In this post, I will illustrate how to do that. c++ class","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:0:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" header #include \u003cpybind11/pybind11.h\u003e #include \u003cpybind11/embed.h\u003e #include \u003cpybind11/stl.h\u003e #include \u003ciostream\u003e #include \u003ccstdlib\u003e #include \u003ccstdio\u003e // from SnailCore #include \u003cutil/acct_info.hpp\u003e #include \u003cutil/shm.hpp\u003e #include \u003cutil/shm_tool.hpp\u003e #include \u003cutil/shm_status.hpp\u003e #include \u003cutil/shm_struct.hpp\u003e #include \u003cutil/shmv.hpp\u003e #include \u003cutil/time_util.hpp\u003e #include \u003cutil/index_type.hpp\u003e #include \u003cutil/str_util.hpp\u003e ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:1:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" function py::dict pybind11_read_shm_acc(const std::string\u0026 shm_tag) { std::unique_ptr\u003csnail::acct_info_t::shm_reader_t\u003e reader {new snail::acct_info_t::shm_reader_t(shm_tag)}; auto total = reader-\u003esize(); std::cout \u003c\u003c \"total:\" \u003c\u003c total \u003c\u003c std::endl; std::vector\u003cstd::string\u003e client_id, us; std::vector\u003cdouble\u003e beg_balance, curr_balance, enabled_balance, frozen_balance, deposit, margin, frozen_margin, fee, frozen_fee, pos_profit, close_profit; for (size_t i = 0; i \u003c total; ++i) { auto e = reader-\u003esafe_get(i); client_id.emplace_back(e-\u003eclient_id); us.emplace_back(microtime::from_count(e-\u003eus).to_zgc_str()); beg_balance.emplace_back(e-\u003ebeg_balance); curr_balance.emplace_back(e-\u003ecurr_balance); enabled_balance.emplace_back(e-\u003eenabled_balance); frozen_balance.emplace_back(e-\u003efrozen_balance); deposit.emplace_back(e-\u003edeposit); margin.emplace_back(e-\u003emargin); frozen_margin.emplace_back(e-\u003efrozen_margin); fee.emplace_back(e-\u003efee); frozen_fee.emplace_back(e-\u003efrozen_fee); pos_profit.emplace_back(e-\u003epos_profit); close_profit.emplace_back(e-\u003eclose_profit); } py::dict d; d[\"US\"] = us; d[\"ClientID\"] = client_id; d[\"BegBalance\"] = beg_balance; d[\"CurrBalance\"] = curr_balance; d[\"EnabledBalance\"] = enabled_balance; d[\"FrozenBalance\"] = frozen_balance; d[\"Deposit\"] = deposit; d[\"Margin\"] = margin; d[\"FrozenMargin\"] = frozen_margin; d[\"Fee\"] = fee; d[\"FrozenFee\"] = frozen_fee; d[\"PosProfit\"] = pos_profit; d[\"CloseProfit\"] = close_profit; return d; } ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:2:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["programming"],"content":" class class Account { public: Account(const std::string\u0026 shm_tag, int shm_size, bool continued = false) : _shm_tag{shm_tag} , _shm_size{shm_size} , _continued{false} { _shm_acc.reset(new acct_info_t::shm_writer_t( _shm_tag, _shm_size, _continued )); } ~Account() {} void write(const std::string\u0026 client_id, double beg_balance, double curr_balance, double enabled_balance, double frozen_balance = 0.0, double deposit = 0.0, double margin = 0.0, double frozen_margin = 0.0, double fee = 0.0, double frozen_fee = 0.0, double pos_profit = 0.0, double close_profit = 0.0, uint64_t us = 0 ) { auto e = _shm_acc-\u003eget_slot(); if (!e) { std::cout \u003c\u003c \"failed to get_slot, shm is full\" \u003c\u003c std::endl; return; } e-\u003eus = us == 0 ? microtime::now().count(): us; copy_str(e-\u003eclient_id, client_id.c_str()); e-\u003ebeg_balance = beg_balance; e-\u003ecurr_balance = curr_balance; e-\u003eenabled_balance = enabled_balance; e-\u003efrozen_balance = frozen_balance; e-\u003edeposit = deposit; e-\u003emargin = margin; e-\u003efrozen_margin = frozen_margin; e-\u003efee = fee; e-\u003efrozen_fee = frozen_fee; e-\u003epos_profit = pos_profit; e-\u003eclose_profit = close_profit; _shm_acc-\u003ecommit(e); } py::dict read() { return pybind11_read_shm_acc(_shm_tag); } private: std::string _shm_tag; int _shm_size {0}; bool _continued {false}; std::shared_ptr\u003ctypename acct_info_t::shm_writer_t\u003e _shm_acc; }; pybind11 interfacepybind11 provides by MACRO interfaces of c++. By defining py::arg(\"shm_tag\"), it’s possible to pass named arguments from python into c++’s functions/classes, with default values setting. PYBIND11_MODULE(snail, m) { // Function Interface m.def(\"pybind11_read_shm_acc\", \u0026pybind11_read_shm_acc, R\"pbdoc( read snail::acct_info_t )pbdoc\"); // Class Interface // define Account class py::class_\u003cAccount\u003e(m, \"Account\") // ctor .def(py::init\u003cconst std::string\u0026, int, bool\u003e(), py::arg(\"shm_tag\"), py::arg(\"shm_size\"), py::arg(\"continued\") = false ) .def(\"write\", \u0026Account::write, py::arg(\"client_id\"), py::arg(\"beg_balance\"), py::arg(\"curr_balance\"), py::arg(\"enabled_balance\"), py::arg(\"frozen_balance\") = 0.0, py::arg(\"deposit\") = 0.0, py::arg(\"margin\") = 0.0, py::arg(\"frozen_margin\") = 0.0, py::arg(\"fee\") = 0.0, py::arg(\"frozen_fee\") = 0.0, py::arg(\"pos_profit\") = 0.0, py::arg(\"close_profit\") = 0.0, py::arg(\"us\") = 0 ) .def(\"read\", \u0026Account::read) ; #ifdef VERSION_INFO m.attr(\"__version__\") = MACRO_STRINGIFY(VERSION_INFO); #else m.attr(\"__version__\") = \"dev\"; #endif } python callingNow we can call c++ functions/class interfaces in python. import pandas as pd from wepy.cpp.snail import pybind11_read_shm_acc from wepy.cpp.snail import Account ## Function Interface def read_shm_acc(shm_tag:str) -\u003e pd.DataFrame: data = pybind11_read_shm_acc(shm_tag) return pd.DataFrame(data) ## Class Interface from wepy.cpp.snail import Account acct = Account(shm_tag = \"lfang_acc\", shm_size = 1000) acct.write(client_id = \"lfang\", beg_balance = 1000.0, curr_balance = 1000.0, enabled_balance = 1000.0, deposit = 100) df = pd.DataFrame(acct.read()) df = read_shm_acc(\"lfang_acc\") python-calling ","date":"2024-03-18","objectID":"/2024-03-18-pybind11--passing-named-arguments/:3:0","tags":["pybind11","c++","python","class","interface","function"],"title":"pybind11: passing named arguments","uri":"/2024-03-18-pybind11--passing-named-arguments/"},{"categories":["tools"],"content":"nvim 可以利用跳转功能，直接在当前光标下打开文件。如果该文件不存在，则新建一个。 我配置的快捷键是 gf(go file)。 vim.cmd([[ nnoremap \u003csilent\u003e gf :call JumpOrCreateFile()\u003cCR\u003e function! JumpOrCreateFile() \" Get the filename under the cursor let filename = expand(\"\u003ccfile\u003e\") \" Expand the tilde in the file path let expanded_filename = expand(filename) \" Check if the file path starts with \"./\" if expanded_filename =~# '^\\.\\/' \" Get the current directory of the editing file let current_directory = expand('%:p:h') \" Create the full path by appending the relative file path let expanded_filename = current_directory . '/' . expanded_filename endif \" Check if the file exists if !filereadable(expanded_filename) \" Prompt the user for file creation with the full path let choice = confirm('File does not exist. Create \"' . expanded_filename . '\"?', \"\u0026Yes\\n\u0026No\", 1) \" Handle the user's choice if choice == 1 \" Create the file and open it echohl WarningMsg | echo 'Created New File: ' . expanded_filename | echohl None execute 'edit ' . expanded_filename endif else \" File exists, perform normal gf behavior echohl ModeMsg | echo 'Open File: ' . expanded_filename | echohl None execute 'normal! gf' endif endfunction ]]) ","date":"2024-03-18","objectID":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/:0:0","tags":["nvim","cursor","gf","buffer"],"title":"nvim 直接打开当前光标下的文件","uri":"/2024-03-18-nvim-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"使用 Hugo + Github 搭建个人博客系统，并托管在 Github Page 服务。 思路 在 Github 创建一个项目用于托管博客代码、markdown 文件等，比如 myblog 在 Github 创建 Page 项目。Page 项目是静态网页渲染，并可以托管在 Github 服务器。这样，我们就可以把网站内容发布到 Github。 这个 Page 的特别之处在于：我们将其项目名称设置为 williamlfang.github.io，即 yourusename.github.io。 Hugo 是一个优秀的静态网页生成框架，提供了灵活的配置。我们可以通过设置不同的主题（theme）来渲染网页，达到内容与形式分离的目地。 由于部分主题的功能需要使用到新特性，我们最好安装 hugo-extended 版本。 ## 需要安装 hugo extended version wget https://github.com/gohugoio/hugo/releases/download/v0.123.8/hugo_extended_0.123.8_linux-amd64.deb sudo dpkg -i hugo_extended_0.123.8_linux-amd64.deb hugo version 步骤","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 建立 Github 项目 在 Github 创建 myblog 项目 原教程是将源仓库与 Page 放在同一个项目，所以需要设置成 public。不过我的做法是将源仓库与发布仓库Page分离，内容托管在 myblog 的 private 项目，然后将 hugo 渲染后的 html 拷贝到发布仓库 Page。 在 Github 创建 williamlfang.github.io 项目 如上所述，需要将发布仓库 Page 设置为 public 开放互联网访问。 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" Hugo 搭建 初始化 hugo 目录 git clone git@github.com:williamlfang/myblog.git ## 初始化项目，如果存在目录，则需要添加 --force hugo new site myblog cd myblog ## 添加主题，这里我使用来 FixIt git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 根据对应 theme 提供的配置文件进行修改，可以查看参考配置 themes/FixIt/hugo.toml vim hugo.toml 比如我的配置是这样的： title 设置博客名称 baseURL 对应域名（如果是托管在 Github Page，则填写https://williamlfang.github.io/） theme 配置相应的名称（需要在 themes/ 目录下） avatar 是头像设置（如果是 FixIt，需要替换为自己的头像文件，在 themes/FixIt/assets/images） 创建博客 markdown 文章，可以使用命令 ## create new post ## 这个命令会调用参数模板，位于 `theme/FixIt/archetypes` ## 我们可以自行修改 hugo new posts/first_post.md ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 添加月历主要是看到这篇优秀的博客，受到启发。于是我也准备在博客添加一个月历，用于查看文章发布的情况。 给 Hugo 博客添加月历功能 https://blog.gimo.me/posts/adding-calendar-view-for-hugo-blog-posts/ 这里主要修改的地方有： 在配置 hugo.toml 添加一个栏目 [menu] [[menu.main]] identifier = \"calendar\" parent = \"\" pre = \"\" post = \"\" name = \"月历\" url = \"/calendar/\" title = \"\" weight = 100 [menu.main.params] icon = \"fa-regular fa-id-card fa-fw fa-sm\" 新建 content/calendar/index.md，设置其布局 --- title: \"月历📅\" date: 2024-03-01T16:00:09+08:00 layout: calendar --- 由于上面设置了 layout: calendar，因此，我们需要添加相关的页面模板。在根目录创建 layouts/page/calendar.html，具体布局可以参考 404.html 修改 calendar css 格式，在根目录创建（或则复制一份 /theme/FixIt/assets/css/_custom.css）到 assets/css/_custom.css // ============================== // Custom style // 自定义样式 // ============================== #calendar { a { color: var(--text-bright); \u0026:hover { text-decoration: none; } } tr { background: var(--background-body); } .fc-daygrid-event { white-space: normal; } .fc-day-sat .fc-daygrid-day-number, .fc-day-sat .fc-col-header-cell-cushion, .fc-day-sun .fc-daygrid-day-number, .fc-day-sun .fc-col-header-cell-cushion { color: #e74c3c; } } calendar 效果图 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 预览与发布 预览效果 ## preview hugo server --disableFastRender 生成静态页面：把 .md 文件转化成 html 页面，并保存到 public。这个就是我们托管在 Github Page 上的网站。后面需要把这个文件夹拷贝到 Page 项目，并进行发布。 ## 准备发布静态 html ，会生成一个 public 目录 hugo 发布静态生成的网站页面。我原来的做法是把 github page 单独放在一个目录，然后通过拷贝的方式进行同步。现在回想起来，这个方法似乎有点多此一举，为何不直接在 public 目录添加一个 submodule 呢，然后把内容推送到 github page 即可？1 ## 先生成一个 public 目录 hugo ## 然后添加 submodule git submodule add git@github.com:williamlfang/williamlfang.github.io.git public cd public ## 后面有新的文章更新，只需要添加 public 即可 git add -A git commit -m \"add submodule\" git push origin main ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本可以在项目建立一个脚本，用于一键发布最新变动。 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # GitHub username. USERNAME=williamlfang # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- cd ../${SITE} pwd msg \"Pulling down from ${SITE}\" git pull msg \"Building the website\" cd ../${SOURCE} pwd msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push cp -r public/* ../${SITE} cd ../${SITE} git add -A git commit -m \"$MESSAGE\" git push origin master msg \"We've happily done.\" ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" deploy.sh 一键发布脚本 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- # Name of the branch containing the Hugo source files. SOURCE=myblog # Github Page for public website SITE=williamlfang.github.io # The commit message. MESSAGE=\"Site rebuild $(date)\" ## ------------------------------------------- ## into github-page pushd public msg \"Pulling down from ${SITE}\" git pull popd ## msg \"Pulling down from ${SOURCE}\" git pull ## ------------------------------------------------ # Rscript -e \"blogdown::build_site(build_rmd = TRUE)\" hugo ## ------------------------------------------------ msg \"Pushing new info to Github\" git add -A git commit -m \"$MESSAGE\" git push pushd public git add -A git commit -m \"$MESSAGE\" git push origin main popd msg \"We've happily done.\" 使用技巧","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 内容","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 排序 默认以日期排序 通过设置 weight 以改变文章排序（前置功能） --- title: 使用hugo+github搭建博客 weight: 1 \u003c!--实现文章置顶功能--\u003e --- ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 注释2 要创建脚注引用，请在方括号中添加插入符号和标识符 ([^1])。 标识符可以是数字或单词，但不能包含空格或制表符。 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中，脚注按顺序编号。 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注)。 你不一定要在文档末尾添加脚注。可以将它们放在除列表，引用和表格等元素之外的任何位置。 这是一个数字脚注 [^1] 这是一个带标签的脚注 [^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注3 这是一个带标签的脚注4 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 图片","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 路径 在根目录下面有一个 static 目录，当hugo执行时，这个目录会被拷贝到 public 目录下，html 静态页面解析时会从这个路径开始寻找。因此，我们可以利用这一点，把 avatar、logo 等图片放在 static/images 下面，然后就可以使用路径 /images/xxx.png 来引用图片了 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 缩放功能 可以实现图片的全屏放大功能：需要在图片后面添加注释信息。需要注意的是，我在这里使用了相对路径，即与当前文档在同一个目录下面，这有赖于 Hugo(\u003e0.6.2) 提供的 layout/_default/_markup 功能。 ![我的博客](./hugo-fixit.png \"William Fang's Hugo FixIt\") 我的博客 ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 代码块","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 自动折叠 配置默认展开的代码块长度 # 代码配置 [params.page.code] # 是否显示代码块的复制按钮 copy = true # 是否显示代码块的编辑按钮 edit = true # 默认展开显示的代码行数 # maxShownLines = 10 maxShownLines = 25 ## \u003c------------- # KaTeX 数学公式 (https://katex.org) [params.page.math] enable = true # 默认行内定界符是 $ ... $ 和 \\( ... \\) inlineLeftDelimiter = \"\" inlineRightDelimiter = \"\" # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 blockLeftDelimiter = \"\" blockRightDelimiter = \"\" # KaTeX 插件 copy_tex copyTex = true # KaTeX 插件 mhchem mhchem = true # Mapbox GL JS 配置 (https://docs.mapbox.com/mapbox-gl-js) ","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" 数学公式","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tools"],"content":" admonitionThe admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, default value is note. abstract info tip success question warning failure danger bug example quote title [optional] (second positional parameter) Title of the admonition banner, default value is the value of type parameter. (markdown support) open [optional] (third positional parameter) Whether the content will be expandable by default, default value is true. {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} hugo.toml title = \"William\" # baseURL = \"http://example.org/\" baseURL = \"https://williamlfang.github.io/\" # 网站语言，仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true ## ---------------------------------------------------------------------------\u003e[theme] # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"FixIt\" ## ---------------------------------------------------------------------------\u003c[theme] # [menu] # [[menu.main]] # identifier = \"posts\" # name = \"文章\" # url = \"/posts/\" # weight = 1 # [[menu.main]] # identifier = \"categories\" # name = \"分类\" # url = \"/categories/\" # title = \"\" # weight = 2 # [[menu.main]] # identifier = \"tags\" # name = \"标签\" # url = \"/tags/\" # weight = 3 # # [[menu.main]] # identifier = \"about\" # name = \"关于\" # url = \"about/\" # weight = 20 # icon = \"fa-solid fa-signature\" # [[menu.main.params]] # icon = \"fa-solid fa-signature\" [menu] [[menu.main]] identifier = \"posts\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"文章\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-regular fa-newspaper\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"archives\" parent = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"归档\" url = \"/archives/\" # title will be shown when you hover on this menu link title = \"\" weight = 2 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-solid fa-archive\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"categories\" parent = \"\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-folder-tree\" [[menu.main]] identifier = \"tags\" parent = \"\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" [[menu.main]] identifier = \"about\" parent = \"\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 20 [menu.main.params] icon = \"fa-solid fa-signature\" [params] # FixIt 主题版本 version = \"0.2.X\" # 例如：\"0.2.X\", \"0.2.15\", \"v0.2.15\" 等 # 网站描述 # description = \"这是我的 Hugo FixIt 网站\" description = \"William\" # 网站关键词 keywords = [\"Hugo\", \"FixIt\"] # 网站默认主题样式 [\"light\", \"dark\", \"auto\"] defaultTheme = \"auto\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat =","date":"2024-03-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:11:0","tags":["hugo","github","markdown"],"title":"使用hugo+github搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Programming"],"content":"C++ Hacker’s Guide 是一本介绍编程技巧的实用书籍。 ","date":"2024-03-16","objectID":"/2024-03-16-c-hackers-guide/:0:0","tags":["c++","hacker"],"title":"C++ Hacker's Guide","uri":"/2024-03-16-c-hackers-guide/"},{"categories":["tools"],"content":"我现在基本上都是使用nvim做笔记，大部分的时间都是写 markdown 格式的文档。因此，需要一款能够在终端实时渲染的插件。 ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:0:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" glowglow 是一款可以在终端渲染 markdown 文档的命令 # Debian/Ubuntu sudo mkdir -p /etc/apt/keyrings curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg echo \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list sudo apt update \u0026\u0026 sudo apt install glow # Fedora/RHEL echo '[charm] name=Charm baseurl=https://repo.charm.sh/yum/ enabled=1 gpgcheck=1 gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo sudo yum install glow ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:1:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tools"],"content":" markdown-preview.nvim这款插件支持在 nvim 的终端即可渲染 markdown，底层调用的是 glow 的渲染功能。 我这里配置了快捷键：mp -- :MPToggle: toggle markdown preview open or close. -- :MPOpen: open markdown preview window. -- :MPClose: close markdown preview window. -- :MPRefresh: refresh markdown preview window. return { \"0x00-ketsu/markdown-preview.nvim\", ft = {'md', 'markdown', 'mkd', 'mkdn', 'mdwn', 'mdown', 'mdtxt', 'mdtext', 'rmd', 'wiki'}, cmd = { \"MPToggle\", \"MPOpen\", \"MPClose\", \"MPRefresh\" }, config = function() require('markdown-preview').setup { -- 配置快捷键:mp vim.keymap.set( \"n\", \"mp\", \":MPToggle\u003cCR\u003e\", { silent = true }), glow = { -- When find executable path of `glow` failed (from PATH), use this value instead exec_path = '', style = '', -- Path to glamour JSON style file }, -- Markdown preview term term = { -- reload term when rendered markdown file changed reload = { enable = true, events = { 'InsertLeave', 'TextChanged' }, }, direction = 'vertical', -- choices: vertical / horizontal keys = { close = {'q', '\u003cEsc\u003e'}, refresh = 'r', } } } end } ","date":"2024-03-13","objectID":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/:2:0","tags":["nvim","markdown","glow"],"title":"nvim 配置 markdown 实时渲染","uri":"/2024-03-13-nvim-%E9%85%8D%E7%BD%AE-markdown-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"},{"categories":["tool"],"content":" docker-compose version: \"3\" services: gitbook: hostname: gitbook container_name: gitbook image: fellah/gitbook pull_policy: always restart: always privileged: true tty: true volumes: - /data/gitbook:/srv/gitbook - /etc/localtime:/etc/localtime ports: - 4000:4000 command: - /bin/bash - -c - | /bin/bash ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:1:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" gitbook","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:0","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" SUMMARY.md # Summary * [Introduction](README.md) * [bash](bash.md) ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:1","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" book.jon对于整个网站的风格，可以通过 book.json 的配置进行渲染： { \"plugins\": [ \"-sharing\", \"theme-comscore\" ] } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:2","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 开始部署 npm i gitbook-plugin-theme-default npm i gitbook-plugin-theme-comscore npm i -g gitbook-cli gitbook init . gitbook install gitbook serve . \u0026 Starting server ... Serving book on http://localhost:4000 ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:3","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":["tool"],"content":" 删除 publish with gitbookref: https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html 首先，在book的根目录里创建styles文件夹，然后在其中创建website.css文件，添加以下内容: .gitbook-link { display: none !important; } 编辑book.json文件 { \"styles\": { \"website\": \"styles/website.css\" } } ","date":"2024-03-07","objectID":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/:2:4","tags":["gitbook","docker"],"title":"docker 安装 gitbook","uri":"/2024-03-07-docker-%E5%AE%89%E8%A3%85-gitbook/"},{"categories":null,"content":" 自画像 keep Calm and Markdown. 👨🏻‍💻 一名自营 HFT 的开发工程师 @WuyaCapital ⌨ 经常在 Linux 捣鼓好玩的东西 📖喜欢读书 🎧五音不全但是喜欢听歌 ","date":"2024-03-01","objectID":"/about/:1:0","tags":null,"title":"關於","uri":"/about/"},{"categories":null,"content":"William's friends","date":"2024-03-01","objectID":"/friends/","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" Notice 数据保存在 /data/friends.yml ","date":"2024-03-01","objectID":"/friends/:0:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":" 基本資訊 - nickname: 菠菜眾長 avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: 不怕萬人阻擋，只怕自己投降 ","date":"2024-03-01","objectID":"/friends/:1:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":["tool"],"content":" setfacl -R -m o::--- /home/ops/shared/ setfacl -m u:spd:x /home/ops setfacl -m u:spd:x /home/ops/shared setfacl -m u:spd:x /home/ops/shared/trading setfacl -R -m u:spd:rx /home/ops/shared/trading/{PublicInfo,lib,Snail,Spider} ","date":"2024-02-26","objectID":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:0:0","tags":["linux","setfacl"],"title":"setfacl 更精准控制文件权限","uri":"/2024-02-26-setfacl-%E6%9B%B4%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":[],"content":" cd /app ./cloudreve --database-script ResetAdminPassword ","date":"2024-01-26","objectID":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/:0:0","tags":[],"title":"cloudreve 修改密码","uri":"/2024-01-26-cloudreve-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/"},{"categories":[],"content":"red: https://www.reddit.com/r/cpp_questions/comments/1953267/how_do_i_learn_c_designarchitecture/ ","date":"2024-01-13","objectID":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/:0:0","tags":[],"title":"reddit: How do I learn C++ Design Architecture","uri":"/2024-01-13-reddit--how-do-i-learn-c-design-architecture/"},{"categories":[],"content":"https://gist.github.com/jacksonpradolima/840b4a20c617204a65b15da61e124bf6 ","date":"2024-01-13","objectID":"/2024-01-13-ubuntu-install-source-code-pro/:0:0","tags":[],"title":"ubuntu install source code pro","uri":"/2024-01-13-ubuntu-install-source-code-pro/"},{"categories":[],"content":"C++ 提供了小对象的 RVO（返回值优化），实现了在函数返回中调用构造函数的功能。 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e class BigObject { public: BigObject() : person_names_(std::vector\u003cstd::string\u003e(1000000)) { std::cout \u003c\u003c \"constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } ~BigObject() { std::cout \u003c\u003c \"destructor. \" \u003c\u003c std::endl; } BigObject(const BigObject\u0026 other) { person_names_ = other.person_names_; std::cout \u003c\u003c \"copy constructor. \" \u003c\u003c person_names_.size() \u003c\u003c std::endl; } private: std::vector\u003cstd::string\u003e person_names_; }; BigObject Foo() { BigObject local_obj; return local_obj; // return std::move(local_obj); } int n {0}; struct C { explicit C(int) {} C(const C\u0026) { ++n; } int x {1}; }; int main() { { BigObject obj = Foo(); } //-----Foo() // : BigObject local_obj -\u003e ctor + copy ctor // : return local_obj -\u003e dtor //BigObject obj // : -\u003e copy ctor // -\u003e dtor // : -\u003e dtor C c1(42); // copy ctor is equivalent to direct-ctor C c2 = C(42); std::cout \u003c\u003c \"n:\" \u003c\u003c n \u003c\u003c std::endl; return 0; } /* g++ -g -fno-elide-constructors -Wall -std=c++11 main.cpp main.cpp: In function ‘int main()’: main.cpp:49:7: warning: variable ‘c2’ set but not used [-Wunused-but-set-variable] 49 | C c2 = C(42); | ^~ ./a.out constructor. 1000000 copy constructor. 1000000 destructor. copy constructor. 1000000 destructor. destructor. n:1 */ /* g++ -g main.cpp ./a.out constructor. 1000000 destructor. n:0 */ ","date":"2024-01-12","objectID":"/2024-01-12-c-copy-elision/:0:0","tags":[],"title":"c++ copy elision","uri":"/2024-01-12-c-copy-elision/"},{"categories":[],"content":"epub2pdf ","date":"2023-11-29","objectID":"/2023-11-29-epub-to-pdf/:0:0","tags":[],"title":"epub to pdf","uri":"/2023-11-29-epub-to-pdf/"},{"categories":["tools"],"content":" 安装 ## CentOS wget https://github.com/sharkdp/bat/releases/download/v0.24.0/bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz tar -xvf bat-v0.24.0-x86_64-unknown-linux-gnu.tar.gz cd bat-v0.24.0-x86_64-unknown-linux-gnu cp ./bat ~/local/bin ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:1:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":" 设置 ## cat alias cat='~/local/bin/bat --style=plain' ## help alias bathelp='bat --plain --language=help' help() { \"$@\" --help 2\u003e\u00261 | bathelp } alias -g -- -h='-h 2\u003e\u00261 | bat --language=help --style=plain' alias -g -- --help='--help 2\u003e\u00261 | bat --language=help --style=plain' ## tail -f taillog() { tail -f $1 | bat --paging=never -l log } ## fzf alias fzfx='fzf --preview \"bat --color=always --style=numbers --line-range=:500 {}\"' ","date":"2023-11-17","objectID":"/2023-11-17-bat--better-than-cat/:2:0","tags":["linux","cat","bat"],"title":"bat: better than cat","uri":"/2023-11-17-bat--better-than-cat/"},{"categories":["tools"],"content":"nethogs 可以针对 Linux 操作系统下单独的进程监控网络带宽，可以十分方便地排查当前占用流量过多的进程。 wget https://github.com/raboof/nethogs/archive/refs/tags/v0.8.7.tar.gz tar -xvf v0.8.7.tar.gz cd nethogs-0.8.7 ## 修改安装路径 Makefile make make install #export TERM=linux ln -sfn /usr/local/sbin/nethogs /usr/bin/nethogs ## 非 root 也能使用 ## running nethogs without root ## https://github.com/raboof/nethogs/issues/86 setcap \"cap_net_admin,cap_net_raw=ep\" /usr/sbin/nethogs ## https://github.com/raboof/nethogs/issues/142 setcap cap_net_admin,cap_net_raw,cap_dac_read_search,cap_sys_ptrace+ep /usr/local/sbin/nethogs export TERM=linux ","date":"2023-11-17","objectID":"/2023-11-17-nethogs/:0:0","tags":["linux","nethogs"],"title":"nethogs","uri":"/2023-11-17-nethogs/"},{"categories":["toolsj"],"content":"安装 Docky mkdir -p ~/Downloads/docky cd ~/Downloads/docky wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-sharp2/libgconf2.0-cil_2.24.2-4_all.deb wget http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring-common_3.12.0-1build1_all.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring0_3.12.0-1build1_amd64.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-keyring-sharp/libgnome-keyring1.0-cil_1.0.0-5_amd64.deb sudo apt install ./*.deb wget http://archive.ubuntu.com/ubuntu/pool/universe/d/docky/docky_2.2.1.1-1_all.deb sudo apt install ./docky_2.2.1.1-1_all.deb ","date":"2023-11-10","objectID":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/:0:0","tags":["linux","docky"],"title":"ubuntu 安装 docky","uri":"/2023-11-10-ubuntu-%E5%AE%89%E8%A3%85-docky/"},{"categories":["tools"],"content":"zsh 出现错误提示 zsh compinit: insecure directories, run compaudit for list 先进入 zsh 环境(选择 n)，然后执行 compaudit |xargs chmod g-w ","date":"2023-11-06","objectID":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/:0:0","tags":["Linux","zsh","compinit"],"title":"zsh compinit: insecure directories, run compaudit for list","uri":"/2023-11-06-zsh-compinit--insecure-directories-run-compaudit-for-list/"},{"categories":["tools"],"content":"nerd font 是一款优秀的字体，提供了大量的图标，可以用于 terminal、vim 等终端显示。 #/bin/bash # install DroidSansMono Nerd Font --\u003e u can choose another at: https://www.nerdfonts.com/font-downloads echo \"[-] Download fonts [-]\" echo \"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip\" wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/DroidSansMono.zip unzip DroidSansMono.zip -d ~/.fonts fc-cache -fv echo \"done!\" mkdir -p ~/.fonts wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/SourceCodePro.zip wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip SourceCodePro.zip cd SourceCodePro cp ./* ~/.fonts fc-cache -fv ","date":"2023-11-04","objectID":"/2023-11-04-nerd-font/:0:0","tags":["linux","nerd","fonts","symbolic","saucecodepro"],"title":"nerd font","uri":"/2023-11-04-nerd-font/"},{"categories":[],"content":"alacritty 比 terminator 更加强大。 apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 apt-get update --fix-missing sudo apt install git curl cargo cd /tmp git clone https://github.com/alacritty/alacritty.git cd alacritty/ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh source \"$HOME/.cargo/env\" rustup override set stable sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 cargo build --release cargo build --release sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg sudo desktop-file-install extra/linux/Alacritty.desktop sudo update-desktop-database ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:0:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 tmux 问题 ## https://github.com/alacritty/alacritty/issues/2487 export TERM=xterm-256color ## 或者尝试使用以下配置 export TERM=xterm tmux kill-server ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:1:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 处理 nvim 颜色显示问题 ## https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:2:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" color issues ## tmux.conf ## alacrrity: https://github.com/alacritty/alacritty/issues/3354 set-option -ga terminal-overrides \",alacritty:Tc\" set -g default-terminal \"alacritty\" ## https://www.reddit.com/r/tmux/comments/onom6t/nvim_colors_change_if_on_tmux_on_alacritty/ set -g default-terminal 'xterm-256color' set -as terminal-overrides ',xterm*:Tc:sitm=\\E[3m' ## .zshrc ## alacritty export TERM=xterm-256color ## .bashrc ## colo ## .zshrc export TERM=xterm-256color ## .bashrc export TERM=xterm-256color ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:3:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 从 yaml 转换到 toml alacritty migrate -c xxx.yaml ## 或者批量转换 find . -type f -name '*.yaml' | xargs -I {} alacritty migrate -c {} ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:4:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" 我的配置 ## -----------------------------------------------------------------------------color import = [ \"~/.config/alacritty/git/alacritty-theme/themes/tokyo-night-storm.toml\" ] ## https://github.com/enkia/tokyo-night-vscode-theme/blob/master/themes/tokyo-night-storm-color-theme.json #[colors.primary] #background = \"0x24283b\" ##foreground = \"0xa9b1d6\" #foreground = \"#7982a9\" live_config_reload = true [[colors.indexed_colors]] color = \"#FAB387\" index = 16 [[colors.indexed_colors]] color = \"#F5E0DC\" index = 17 [colors.cursor] ## 注释掉表示颜色反转 #cursor = \"#F5E0DC\" #text = \"#1E1E2E\" [colors.primary] #background = \"#1E1E2E\" #foreground = \"#CDD6F4\" bright_foreground = \"#CDD6F4\" dim_foreground = \"#CDD6F4\" ## tokyonight #background= '#24283b' #foreground= '#a9b1d6' [colors.normal] green = \"0x449dab\" [colors.dim] black = \"#45475A\" blue = \"#89B4FA\" cyan = \"#94E2D5\" green = \"#A6E3A1\" magenta = \"#F5C2E7\" red = \"#F38BA8\" white = \"#BAC2DE\" yellow = \"#F9E2AF\" [colors.hints.end] background = \"#A6ADC8\" foreground = \"#1E1E2E\" [colors.hints.start] background = \"#F9E2AF\" foreground = \"#1E1E2E\" [colors.search.focused_match] background = \"#A6E3A1\" foreground = \"#1E1E2E\" [colors.search.matches] background = \"#A6ADC8\" foreground = \"#1E1E2E\" [colors.selection] background = \"#F5E0DC\" text = \"#1E1E2E\" [colors.vi_mode_cursor] cursor = \"#B4BEFE\" text = \"#1E1E2E\" ## ----------------------------------------------------------------------------env [env] TERM='xterm-256color' # TERM='Alacritty' ## -----------------------------------------------------------------------------window [window] opacity = 0.90 padding.x = 12 ## width padding.y = 0 ## height decorations = \"Transparent\" # decorations = \"None\" ## Full, Transparent, Buttonless, None decorations_theme_variant = \"Dark\" #\"Light\", \"Dark\" startup_mode = 'Maximized' [scrolling] # 回滚缓冲区中的最大行数,指定“0”将禁用滚动。 history = 1000 # 滚动行数 multiplier = 4 ## -----------------------------------------------------------------------------font [font] size = 12.6 [font.normal] #family = \"FiraCode Nerd Font\" # family = \"SauceCodePro Nerd Font\" family = \"JetBrainsMono Nerd Font\" style = \"Regular\" [font.italic] # family = \"SauceCodePro Nerd Font\" family = \"JetBrainsMono Nerd Font\" style = \"Italic\" [font.bold] # family = \"SauceCodePro Nerd Font\" family = \"JetBrainsMono Nerd Font\" style = \"Bold\" [[keyboard.bindings]] action = \"SpawnNewInstance\" key = \"Return\" mods = \"Control|Shift\" ## https://alacritty.org/config-alacritty.html [[keyboard.bindings]] # action = \"DecreaseFontSize\" action = \"None\" key = \"Minus\" mods = \"Control\" [[keyboard.bindings]] # action = \"IncreaseFontSize\" action = \"None\" key = \"Equals\" mods = \"Control\" [[keyboard.bindings]] action = \"DecreaseFontSize\" key = \"Minus\" mods = \"Control | Alt\" [[keyboard.bindings]] action = \"IncreaseFontSize\" key = \"Equals\" mods = \"Control | Alt\" ## ----------------------------------------------------------------------------shell [shell] program = \"/usr/bin/zsh\" ## ----------------------------------------------------------------------------selection: copy and paste [selection] # This string contains all characters that are used as separators for \"semantic words\" in Alacritty. semantic_escape_chars=\",│`|:\\\"' ()[]{}\u003c\u003e\\t\" # When set to `true`, selected text will be copied to the primary clipboard. save_to_clipboard=true ## https://github.com/alacritty/alacritty/issues/6592 [[mouse.bindings]] action = \"PasteSelection\" mouse = \"Middle\" [[mouse.bindings]] action = \"PasteSelection\" mouse = \"Right\" [[keyboard.bindings]] key = \"V\" mods = \"ALT\" action = \"Paste\" # [keyboard] # bindings = [ # { key = \"C\", mods = \"Control|Shift\", mode = \"Vi|Search\", action = \"ClearSelection\" }, # { key = \"Insert\", mods = \"Shift\", action = \"Paste\" } # ] ] ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:5:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":[],"content":" Ref 一个配置的说明 alacritty.yml ","date":"2023-11-03","objectID":"/2023-11-03-alacritty/:6:0","tags":[],"title":"alacritty","uri":"/2023-11-03-alacritty/"},{"categories":["tools"],"content":" set encoding=utf-8 set termencoding=utf-8 set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr set fileencoding=utf-8 ","date":"2023-10-30","objectID":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:0:0","tags":["linux","vim","nvim","neovim","utf8"],"title":"nvim 打开中文乱码","uri":"/2023-10-30-nvim-%E6%89%93%E5%BC%80%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["tools"],"content":"我们在设计结构体时，需要慎重考虑内存对齐的问题，因为不同的内存对齐方式对程序的性能有极大的影响。 ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:0:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" CPU 读取内存的最小有效值计算机的内存是按照 byte(8 bits) 进行有序排序，理论上，我们可以在最小有效值为 1 byte 进行随机内存读取。然而，如果每次都是按照这个节奏，每取一个 int（假设为 4byte） 变量，CPU 都需要进行 4 次操作，毫无疑问效率极低。 我们知道 CPU 架构有 32bit 与 64bit 两种，其含义是在 CPU 每次从内存地址取值时，是以对应最小有效内存地址进行快速操作的。简单讲 对于 32bit，最优操作为每次取 4 byte 的内存空间进行识别 对于 64bit，最优操作为每次取 8 byte 的内存空间进行识别 现在的操作系统一般都是 64bit 了，所以每次的最佳取内存地址为 8byte，这也是我们经常说的，内存对齐按照 8byte，也是编译器 gcc 默认采用的大小。 #pragama pack(8) ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:1:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 如果计算 struct 的内存大小 先计算操作系统 CPU 的对齐单位（一般为 8byte），根据结构体成员最大的内存单位，取 两者的最小值作为有效对齐单位(x) 对于结构体的每一个成员，取其大小与有效对齐单位的较小者，作为单个成员的有效单位(e)。第一个成员变量的偏移值从 0 开始，按照每个成员的有效对齐单位排列，不足之处进行补位填充 最后，整个结构体还需要按照有效对齐单位(x)的整数倍进行填充 #include \u003ciostream\u003e using namespace std; #pragma pack(push) #pragma pack(4) struct { int a; double b; short c; } u; #pragma pack(pop) #pragma pack(push) #pragma pack(1) struct { int a; double b; short c; } v; #pragma pack(pop) struct { int a; double b; short c; } x; struct { int a; char b; short c; } y; struct { int a; char b; short c; } __attribute__((packed)) z; int main() { cout \u003c\u003c \"sizeof(u):\" \u003c\u003c sizeof(u) \u003c\u003c endl; cout \u003c\u003c \"sizeof(v):\" \u003c\u003c sizeof(v) \u003c\u003c endl; cout \u003c\u003c \"sizeof(x):\" \u003c\u003c sizeof(x) \u003c\u003c endl; cout \u003c\u003c \"sizeof(y):\" \u003c\u003c sizeof(y) \u003c\u003c endl; cout \u003c\u003c \"sizeof(z):\" \u003c\u003c sizeof(z) \u003c\u003c endl; return 0; } sizeof(u):16, int(4) + double(8) + short(2) = (14/4+1) * 4 = 16 sizeof(v):14, int(4) + double(8) + short(2) = 14/1 = 14 sizeof(x):24 结构体 x 的最大成员 (double)b 的内存占用 8，操作系统64位，则有效对齐单位 x = min(8,8) = 8 对于结构体的每个成员 sizeof(a) = 4 \u003c= 8, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 8, 则按照1的倍数进行偏移，从（4byte）开始，先对齐 8 byte，占用 8 byte，已用: 4 + 4(填充) + 8 = 16 sizeof(c) = 2 \u003c= 8, 则按照2的倍数进行偏移，从上面 16 后面按照 2 的倍数，占用两个字节，已用：16 + 2 = 18 最后，整个结构体再按照 x=8 的倍数对齐，(18/8+1) * 8 = 24，所以整个结构体大小为24字节 内存空间为 xxxx ____ xxxxxxxx xx ______ 4 pad(4) 8 2 pad(6) sizeof(y):8 结构体 y 的最大成员 a 的内存占用 4，操作系统64位，则有效对齐单位 x = min(4,8) = 4 对于结构体的每个成员 sizeof(a) = 4 \u003c= 4, 则按照4的倍数进行偏移（4byte），占用4个字节，已用:4 sizeof(b) = 1 \u003c= 4, 则按照1的倍数进行偏移，从（4byte）开始，占用一个字节，已用: 4 + 1 = 5 sizeof(c) = 2 \u003c= 4, 则按照2的倍数进行偏移，从上面 5 后面按照 2 的倍数，占用两个字节，已用：5 + 1(填充) + 2 = 8 最后，整个结构体再按照 x=4 的倍数对齐，刚好为 8，所以整个结构体大小为8字节 sizeof(z):7 我们告诉编译器不用对齐，所以按照实际占用的字节占用 7 byte. ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:2:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 使用 pack 指定对齐可以使用编译器提供的 pack(n) 指定对齐大小： #pragma pack(n) 或者使用压栈的方式 #pragma pack(push, n) #pragma pop() ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:3:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" 不同内存对齐影响程序性能 ## 可以看到，在 64 位操作系统中，最佳实践为 8byte 对齐 SampleStructPack1: 1000000000000000000 bytes allocated in 8202 nanoseconds SampleStructPack2: 1200000000000000000 bytes allocated in 276 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 205 nanoseconds SampleStructPack4: 1600000000000000000 bytes allocated in 131 nanoseconds 程序如下： #include \u003ciostream\u003e #include \u003cchrono\u003e #pragma pack (1) struct SampleStructPack1 { bool flag; unsigned int timeout; }; //#pragma pack(0) #pragma pack (2) struct SampleStructPack2 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (4) struct SampleStructPack4 { bool flag; unsigned int timeout; }; // #pragma pack(0) #pragma pack (8) struct SampleStructPack8 { bool flag; unsigned int timeout; }; // #pragma pack(0) struct SampleStruct { bool flag; unsigned int timeout; }; static const long long MAX_ELEMENTS = 200000000000000000; using namespace std; using namespace std::chrono; void allocate1() { SampleStructPack1 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack1: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate2() { SampleStructPack2 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack2: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate4() { SampleStructPack4 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack4: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void allocate8() { SampleStructPack8 elements [MAX_ELEMENTS]; cout \u003c\u003c \"SampleStructPack8: \" \u003c\u003c sizeof(elements) \u003c\u003c \" bytes allocated\"; } void chrono1() { auto begin = high_resolution_clock::now() ; allocate1(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono2() { auto begin = high_resolution_clock::now() ; allocate2(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono4() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } void chrono8() { auto begin = high_resolution_clock::now() ; allocate4(); cout \u003c\u003c \" in \" \u003c\u003c duration_cast\u003cnanoseconds\u003e(high_resolution_clock::now() - begin).count() \u003c\u003c \" nanoseconds\" \u003c\u003c endl; } int main(int argc, char *argv[]) { chrono1(); chrono2(); chrono4(); chrono8(); return 0; } ","date":"2023-10-22","objectID":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/:4:0","tags":["Linux","c++","struct","pack","align","memory","内存对齐"],"title":"c++ 内存对齐","uri":"/2023-10-22-c-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"},{"categories":["tools"],"content":" old-style:[0]我在查看代码的时候，发现有一个 struct 有 长度为0 的数组。 struct data_t { size_t size; int data[0]; }; 如果打印出上面结构体，发现长度正好为 size_t，其中的 data 是不占用内存的。 cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; //sizeof(size_t):8 //sizeof(data_t):8 原来，这样做的目的，是为了可以添加不限长度的数组，通过 malloc 分配内存大小，从而实现在代码中灵活分配数据的目的。 data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:1:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" new-style:[]其实，这是一种比较古老的写法，我们完全可以使用 arr[] (flexible array member) 来替代 struct data_t { size_t size; //In C99 standard this is not neccessary as it supports the arr[] syntax. int data[]; }; 完整的测试代码如下： #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; //This is an old C hack to allow a flexible sized arrays. int data[0]; //In C99 standard this is not neccessary as it supports the arr[] syntax. //int data[]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(sizeof(data_t) + size * sizeof(int)); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(10); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:2:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" best-style:[1]上面的做法有一个问题，如果使用编译器选项 -pedantic 会有报错提示： ## 对于 int data[0] main.cpp:11:14: warning: ISO C++ forbids zero-size array ‘data’ [-Wpedantic] 11 | int data[0]; | ^ ## 对于 int data[] main.cpp:13:9: warning: ISO C++ forbids flexible array member ‘data’ [-Wpedantic] 13 | int data[]; | ^~~~ It’s worth pointing out IMO the best way to do the size calculation, which is used in the Raymond Chen article linked above. struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { // 使用 offsetof 计算出 data[size] 占用的大小 data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } 完整的测试代码如下： #include \u003ccstddef\u003e #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003ccstdlib\u003e using namespace std; struct data_t { size_t size; int data[1]; }; data_t* get_data(size_t size) { data_t* d = (data_t*) malloc(offsetof(data_t, data[size])); if (d) d-\u003esize = size; return d; } int main() { cout \u003c\u003c \"sizeof(size_t):\" \u003c\u003c sizeof(size_t) \u003c\u003c endl; cout \u003c\u003c \"sizeof(data_t):\" \u003c\u003c sizeof(data_t) \u003c\u003c endl; auto x = get_data(20); for (size_t i = 0; i \u003c x-\u003esize; ++i) x-\u003edata[i] = i*i; cout \u003c\u003c \"x.size:\" \u003c\u003c x-\u003esize \u003c\u003c endl; for (size_t i = 0; i \u003c x-\u003esize; ++i) cout \u003c\u003c \"x[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c x-\u003edata[i] \u003c\u003c endl; return 0; } ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:3:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":" Ref: Array of zero length Why do some structures end with an array of size 1? ","date":"2023-10-20","objectID":"/2023-10-20-c-array-of-zero-length/:4:0","tags":["linux","c++","cpp","array"],"title":"c++ array of ZERO length","uri":"/2023-10-20-c-array-of-zero-length/"},{"categories":["tools"],"content":"使用 talebook ## 使用 docker 安装 docker pull talebook/talebook git clone https://github.com/talebook/talebook.git cd talebook docker-compose -f docker-compose.yml up -d ## 访问： 127.0.0.1:8080 ## 初次安装会要求设置账户、密码 ## 管理员 ## 账户：admin ## 密码：****** ","date":"2023-10-15","objectID":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:0:0","tags":["linux","talebook","kindle","读书","阅读","在线","图书馆","mobi","pdf"],"title":"talebook 在线个人图书馆 安装指南","uri":"/2023-10-15-talebook-%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"尝试使用 neovim，可以重复利用 lua 这个编程语言。 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 安装 ## 下载二进制 wget https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz tar -xvf nvim-linux64.tar.gz ## 添加到系统路径 sudo cp -r nvim-linux64 /usr/local/ sudo ln -sfn /usr/local/nvim-linux64/bin/nvim /usr/bin/nvim ## 查看版本 $ nvim --version NVIM v0.9.4 Build type: Release LuaJIT 2.1.1692716794 system vimrc file: \"$VIM/sysinit.vim\" fall-back for $VIM: \"/__w/neovim/neovim/build/nvim.AppDir/usr/share/nvim\" Run :checkhealth for more info ## 打开 nvim，执行 :checkhealth Configuration - WARNING Missing user config file: /home/william/.config/nvim/init.vim - ADVICE: - :help nvim-from-vim Runtime - OK $VIMRUNTIME: /usr/local/nvim-linux64/share/nvim/runtime Performance - OK Build type: Release Remote Plugins - OK Up to date terminal - key_backspace (kbs) terminfo entry: key_backspace= - key_dc (kdch1) terminfo entry: key_dc= - $TERM_PROGRAM=\"tmux\" ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:1:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置nvim 默认会读取初始化文件 init.lua init.vim ## nvim 的配置文件在 mkdir -p ~/.config/nvim cd ~/.config/nvim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 配置选项主要用到的就是 vim.g、vim.opt、vim.cmd 等 In Vim In Nvim Note let g:foo = bar vim.g.foo = bar set foo = bar vim.opt.foo = bar set foo = vim.opt.foo = true some_vimscript vim.cmd(some_vimscript) ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:1","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 插件管理 lazy.nvimref: lazy-nvim插件管理器基础入门 ## 添加 init.lua vim ~/.config/nvim/init.lua -- bootstrap lazy.nvim -- ./lua/lazynvim-init.lua require(\"lazynvim-init\") ## 设置 lazynvim vim ~/.config/nvim/lua/lazynvim-init.lua -- 1. 准备lazy.nvim模块（存在性检测） -- stdpath(\"data\") -- macOS/Linux: ~/.local/share/nvim -- Windows: ~/AppData/Local/nvim-data local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\" if not vim.loop.fs_stat(lazypath) then vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"https://github.com/folke/lazy.nvim.git\", \"--branch=stable\", -- latest stable release lazypath, }) end -- -- 2. 将 lazypath 设置为运行时路径 -- rtp（runtime path） -- nvim进行路径搜索的时候，除已有的路径，还会从prepend的路径中查找 -- 否则，下面 require(\"lazy\") 是找不到的 vim.opt.rtp:prepend(lazypath) -- 3. 加载lazy.nvim模块 -- require(\"lazy\").setup({}) -- 在 ~/.config/nvim/lua/plugins 安装插件 require(\"lazy\").setup(\"plugins\") ## 打开 nvim 验证 lazynvim :Lazy ## 安装 plugin mkdir -p ~/.config/nvim/lua/plugins vim ~/.config/nvim/lua/plugins/plugin-lualine.lua return { { 'nvim-lualine/lualine.nvim', config = function() require('lualine').setup() end } } vim-plug ## 使用 vim-plug: https://github.com/junegunn/vim-plug ## 存放在 ~/.config/nvim，避免与 vim 冲突 curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ## 需要安装 pynvim ## python3 -m pip install --user --upgrade pynvim ## 安装相关的插件，位置在：~/.config/nvim/plugged vim ~/.config/nvim/init.vim \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"如果vim插件管理器没有安装则自动安装 if empty(glob('~/.config/nvim/autoload/plug.vim')) silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim autocmd VimEnter * PlugInstall --sync | source $MYVIMRC endif \"\" 设置vim可以保存文件修改历史 silent !mkdir -p ~/.config/nvim/tmp/backup silent !mkdir -p ~/.config/nvim/tmp/undo \"\"silent !mkdir -p ~/.config/nvim/tmp/sessions set backupdir=~/.config/nvim/tmp/backup,. set directory=~/.config/nvim/tmp/backup,. if has('persistent_undo') set undofile set undodir=~/.config/nvim/tmp/undo,. endif call plug#begin('~/.config/nvim/plugged') Plug 'sainnhe/everforest' call plug#end() ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:2","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 快捷键","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:3","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 主题配色","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:4","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" 以 vimrc 作为基本当然，我们也可以直接使用 .vimrc 作为配置 # CONFIG_PATH=$HOME/.config # ln -s ~/.vim $CONFIG_PATH/nvim # ln -s ~/.vimrc $CONFIG_PATH/nvim/init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:5","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" lsp ## nvim 'iostream' file not found sudo apt install libstdc++-12-dev ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:6","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" python /home/lfang/.config/nvim/lazy/mason/packages/python-lsp-server/venv/pyvenv.cfg home = /home/lfang/anaconda3/bin ## true include-system-site-packages = true version = 3.9.12 ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:2:7","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":" Ref: 关于 bufferline.lua 的合理配置 比较规范的一个配置项目：nvim 功能强大 .config Neovim小结 nvim配置文件 (Ubuntu 18.04 测试成功) 从零开始配置 Neovim(Nvim) 使用 init.vim ","date":"2023-10-14","objectID":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/:3:0","tags":["Linux","vim","neovim","editor","emacs"],"title":"neovim 入坑","uri":"/2023-10-14-neovim-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":"一直在入坑，却从未爬出来。 Install wget https://mirrors.tuna.tsinghua.edu.cn/gnu/emacs/emacs-29.1.tar.gz tar -xvf emacs-29.1.tar.gz cd emacs-29.1 ## 准备安装环境 sudo apt build-dep emacs ## ./configure --with-x-toolkit=no --with-xpm=ifavailable --with-gif=ifavailable --with-pop DoomEmacs git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d ## 添加到环境变量的可执行路径 export PATH=/home/william/.emacs.d/bin:$PATH 在修改了~/.doom.d/init.el 和 ~/.doom.d/packages.el 后需要执行 doom sync 如果有问题就运行 doom doctor 如果需要更新就运行 doom upgrade 可以在 Emacs 内通过 SPC h d h 来查看文档 可以通过命令查看启动时间：M-x emacs-init-time 字体ref: https://github.com/seagle0128/doom-modeline/issues/310 @bk138 Currently nerd-icons is used in doom-modeline, while all-the-icons has been dropped. You should install nerd-fonts via M-x nerd-icons-install-fonts. Please read REAME. ## 安装 nerd symbol font wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/NerdFontsSymbolsOnly.zip unzip NerdFontsSymbolsOnly.zip cd NerdFontsSymbolsOnly cp *ttf ~/.local/share/fonts ## 更新字体缓存 fc-cache -fv fc-list |grep -i nerd ## 清理原来的 font cd /home/william/.emacs.d/.local/straight/repos rm all-the-icons.el cd /home/william/.emacs.d/.local/straight/build-29.1 rm -rf all-the-icons ## 重新加载 doom sync \u0026\u0026 doom build ## 安装必要的字体包 M-x all-the-icons-install-fonts M-x nerd-icons-install-fonts ","date":"2023-10-11","objectID":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/:0:0","tags":["Linux","Emacs"],"title":"Emacs 入坑","uri":"/2023-10-11-emacs-%E5%85%A5%E5%9D%91/"},{"categories":["tools"],"content":"网上一份 cs 的阅读书目列表，值得好好沉下心来阅读，为了方便查阅，特地在这里推荐一份： Influential CS BOOKS Most influential books for programmersThese are books considered most influential for programmers from this StackOverflow thread. ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:0:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Why on Github?Cause SO is cathedral, Github is bazzar ;) Long answer: I frequently visit above thread. Over the time, such an active thread is closed, links to book sites are removed and I have to copy/paste/search everytime I go there. I am afraid they might remove it entirely. So, the list is preserved here :) ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:1:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Influential Books List Code Complete (2nd edition) by Steve McConnell The Pragmatic Programmer by Andrew Hunt and David Thomas Structure and Interpretation of Computer Programs by Sussman and Abelson (free pdf) The C Programming Language by Brian Kernighan and Dennis Ritchie Introduction to Algorithms by Cormen, Leiserson, Rivest \u0026 Stein Design Patterns by the Gang of Four Refactoring: Improving the Design of Existing Code by Martin Fowler The Mythical Man Month by Fred Brooks The Art of Computer Programming by Donald Knuth Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman Gödel, Escher, Bach by Douglas Hofstadter Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin Effective C++ by Scott Meyers More Effective C++ by Scott Meyers CODE by Charles Petzold Programming Pearls by Jon Bentley Working Effectively with Legacy Code by Michael C. Feathers Peopleware by Demarco and Lister Coders at Work by Peter Seibel Surely You’re Joking, Mr. Feynman! by Richard Feynman Effective Java 2nd edition by Joshua Bloch Patterns of Enterprise Application Architecture by Martin Fowler The Little Schemer by Matthias Felleisen and Daniel P. Friedman The Seasoned Schemer by Matthias Felleisen and Daniel P. Friedman Why’s (Poignant) Guide to Ruby by why the lucky stiff (free PDF) The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity by Alan Cooper The Art of Unix Programming by Eric S. Raymond Test-Driven Development: By Example by Kent Beck (free PDF) Practices of an Agile Developer by Venkat Subramaniam and Andy Hunt Don’t Make Me Think by Steve Krug Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin Domain Driven Designs by Eric Evans The Design of Everyday Things by Donald Norman Modern C++ Design by Andrei Alexandrescu Best Software Writing I by Joel Spolsky The Practice of Programming by Kernighan and Pike Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt Software Estimation: Demystifying the Black Art by Steve McConnel The Passionate Programmer by Chad Fowler Hackers: Heroes of the Computer Revolution by Steven Levy (free ebook) Algorithms + Data Structures = Programs by Niklaus Wirth (free PDF) Writing Solid Code by Steve Maguire JavaScript - The Good Parts by Douglas Crockford Getting Real by 37 Signals (free PDF) Foundations of Programming by Karl Seguin (free PDF) Computer Graphics: Principles and Practice in C (2nd Edition) by Foley, Dam, Feiner, Hughes Thinking in Java by Bruce Eckel The Elements of Computing Systems by Noam Nisan and Shimon Schocken(free ebook) Refactoring to Patterns by Joshua Kerievsky Modern Operating Systems by Andrew S. Tanenbaum The Annotated Turing by Charles Petzold Things That Make Us Smart by Donald Norman The Timeless Way of Building by Christopher Alexander The Deadline: A Novel About Project Management by Tom DeMarco The C++ Programming Language (3rd edition) by Stroustrup Computer Systems - A Programmer’s Perspective by Bryant and O’Hallaron Agile Principles, Patterns, and Practices in C# by Robert C. Martin Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce Framework Design Guidelines by Brad Abrams Object Thinking by Dr. David West Advanced Programming in the UNIX Environment by W. Richard Stevens Hackers and Painters: Big Ideas from the Computer Age by Paul Graham The Soul of a New Machine by Tracy Kidder CLR via C# by Jeffrey Richter Design Patterns in C# by Steve Metsker Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig About Face - The Essentials of Interaction Design by Alan Cooper Here Comes Everybody: The Power of Organizing Without Organizations by Clay Shirky The Tao of Programming by Geoffrey James (free ebook) Computational Beauty of Nature by Gary William Flake Philip and Alex’s Guide to Web Publishing (free ebook) Object-Oriented Analysis and Design with Applications by Grady Booch ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:2:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":" Original threadWhat is the single most influential book every programmer should read? If you could go back in time and tell yourself to read a specific book at the beginning of your career as a developer, which book would it be? I expect this list to be varied and to cover a wide range of things. ","date":"2023-09-26","objectID":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/:3:0","tags":["Linux","cs","books","reading"],"title":"cs 阅读书目","uri":"/2023-09-26-cs-%E9%98%85%E8%AF%BB%E4%B9%A6%E7%9B%AE/"},{"categories":["tools"],"content":"报错 crontab -e [08:40:07] vim: error while loading shared libraries: libpython3.9.so.1.0: cannot open shared object file: No such file or directory crontab: \"vim\" exited with status 127 这是因为 vim 编译的时候使用了动态库 libpython3.9.so.1.0，需要拷贝一份到 /usr/lib /usr/lib64 cp /home/ops/vim9/local/lib/libpython3.9.so.1.0 /usr/lib cp /home/ops/vim9/local/lib/libpython3.9.so.1.0 /usr/lib64 如果没有 root 权限，则可以通过 alias 来设置 crontab 命令 alias crontab=\"export VISUAL='export VIMRUNTIME=$HOME/vim9/local/share/vim/vim90; LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc'; crontab\" alias crontab=\"export VISUAL=nvim; crontab\" ","date":"2023-09-22","objectID":"/2023-09-22-crontab-vim-%E6%89%BE%E4%B8%8D%E5%88%B0-so-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["Linux","vim","crontab","so","python"],"title":"crontab vim 找不到 so 的解决方法","uri":"/2023-09-22-crontab-vim-%E6%89%BE%E4%B8%8D%E5%88%B0-so-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["tools"],"content":"设置 tmux 启动后的默认 $SHELL `vim ~/.tmux.conf` set-option -g default-shell /home/lfang/opt/bin/zsh ","date":"2023-09-20","objectID":"/2023-09-20-tmux-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4-zsh/:0:0","tags":["Linux","tmux","zsh","SHELL"],"title":"tmux 设置默认 zsh","uri":"/2023-09-20-tmux-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4-zsh/"},{"categories":["tools"],"content":"vim 更新插件 coc 后运行出现异常： 需要重新安装 coc，然后重新启动 vim 即可。 cd /home/william/.vim/plugged/coc.nvim npm install ","date":"2023-09-18","objectID":"/2023-09-18-vim-coc-%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8/:0:0","tags":["Linux","vim","coc","npm","yarn"],"title":"vim coc 更新出现异常","uri":"/2023-09-18-vim-coc-%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8/"},{"categories":["tools"],"content":"在 Vim 环境中运行 REPL 程序。 使用触发键 \u003cLeader\u003et 对于多个 buffer 的问题，需要改一下绑定键 \" handling multi buffer switch: https://github.com/sillybun/vim-repl/issues/19 tnoremap \u003cLeader\u003en \u003cC-w\u003e:bnext\u003cCR\u003e Plug 'sillybun/vim-repl', { 'for': ['python', 'r'], 'on':'REPLToggle' } \" Vim-repl ------------------------------------------------------------------- let g:repl_program = { \\ 'python': 'ipython', \\ 'default': 'zsh', \\ 'r': 'R', \\ 'lua': 'lua', \\ } let g:repl_width = 120 \"REPL windows width\" let g:repl_predefine_python = { \\ 'numpy': 'import numpy as np', \\ 'matplotlib': 'from matplotlib import pyplot as plt' \\ } let g:repl_python_auto_import = 1 let g:repl_cursor_down = 1 let g:repl_python_automerge = 1 let g:repl_ipython_version = '7' let g:repl_auto_sends = ['class ', 'def ', 'for ', 'if ', 'while ', 'with ', 'async def', '@', 'try'] let g:repl_python_auto_send_unfinish_line = 1 let g:repl_cursor_down = 1 let g:repl_python_auto_import = 1 nnoremap \u003cLeader\u003et :REPLToggle\u003cCr\u003e \" handling multi buffer switch: https://github.com/sillybun/vim-repl/issues/19 tnoremap \u003cLeader\u003en \u003cC-w\u003e:bnext\u003cCR\u003e tnoremap \u003cLeader\u003eh \u003cC-w\u003e\u003cC-h\u003e tnoremap \u003cLeader\u003el \u003cC-w\u003e\u003cC-l\u003e \"let g:repl_width = None \"窗口宽度 \"let g:repl_height = None \"窗口高度 \" ref: http://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter let g:sendtorepl_invoke_key = \"\u003cCR\u003e\" \"传送代码快捷键，默认为\u003cleader\u003ew nnoremap \u003cleader\u003ere :REPLSendSession\u003cCr\u003e let g:repl_position = 3 \"0表示出现在下方，1表示出现在上方，2在左边，3在右边 let g:repl_stayatrepl_when_open = 0 \"打开REPL时是回到原文件（1）还是停留在REPL窗口中（0）\" let g:repl_console_name = 'Vim-REPL' tnoremap \u003cC-h\u003e \u003cC-w\u003e\u003cC-h\u003e tnoremap \u003cC-j\u003e \u003cC-w\u003e\u003cC-j\u003e tnoremap \u003cC-k\u003e \u003cC-w\u003e\u003cC-k\u003e tnoremap \u003cC-l\u003e \u003cC-w\u003e\u003cC-l\u003e \" tnoremap \u003cC-n\u003e \u003cC-w\u003eN tnoremap \u003cScrollWheelUp\u003e \u003cC-w\u003eNk tnoremap \u003cScrollWheelDown\u003e \u003cC-w\u003eNj ","date":"2023-09-16","objectID":"/2023-09-16-vim-repl/:0:0","tags":["Linux","vim","repl","python"],"title":"vim repl","uri":"/2023-09-16-vim-repl/"},{"categories":["tools"],"content":"C++ 是一个静态、强类型的编译型编程语言，变量的生命周期需要在编译器确定。这与动态语言是完全不同的。 Scoping is generally divided into two classes: Static Scoping (也称作 lexical scope) Dynamic Scoping Static scoping is also called lexical scoping. In this scoping, a variable always refers to its top-level environment. This is a property of the program text and is unrelated to the run-time call stack. Static scoping also makes it much easier to make a modular code as a programmer can figure out the scope just by looking at the code. In contrast, dynamic scope requires the programmer to anticipate all possible dynamic contexts. In most programming languages including C, C++, and Java, variables are always statically (or lexically) scoped i.e., binding of a variable can be determined by program text and is independent of the run-time function call stack. #include \u003ciostream\u003e using namespace std; int i {999}; void f() { { int i {10}; // in function scope cout \u003c\u003c \"inside f inner scrope:\" \u003c\u003c i \u003c\u003c endl; } // i not in function scope, will search for it in the GLOBAL SCOPE // do not care who is calling it (other function stack) cout \u003c\u003c \"inside f scrope:\" \u003c\u003c i \u003c\u003c endl; } int main(int argc, char *argv[]) { int i {20}; // int main function scope cout \u003c\u003c \"inside main scrope:\" \u003c\u003c i \u003c\u003c endl; f(); return 0; } 编译后，运行得的的结果是 g++ /tmp/main.cpp -o /tmp/a.out \u0026\u0026 /tmp/a.out inside main scrope: 20 inside f inner scrope: 10 inside f scrope: 999 ","date":"2023-09-16","objectID":"/lexical-scope/:0:0","tags":["c++","scope","static","lexical"],"title":"c++ static/lexical scope","uri":"/lexical-scope/"},{"categories":["tools"],"content":"使用 tmux-fzf 快速搜索窗口。 ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:0:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" 修改 tmux-fzf","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" main.shvim ~/.tmux/plugins/tmux-fzf/main.sh：相当于关闭了其他的选项。 #!/usr/bin/env bash CURRENT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" \u0026\u0026 pwd)\" [[ -z \"$TMUX_FZF_ORDER\" ]] \u0026\u0026 TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" source \"$CURRENT_DIR/scripts/.envs\" ## ============================================== ## only pane item=\"pane\" #items_origin=\"$(echo $TMUX_FZF_ORDER | tr '|' '\\n')\" #if [[ -z \"$TMUX_FZF_MENU\" ]]; then # item=$(printf \"%s\\n[cancel]\" \"$items_origin\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #else # item=$(printf \"menu\\n%s\\n[cancel]\" \"$items_origin\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #fi #[[ \"$item\" == \"[cancel]\" || -z \"$item\" ]] \u0026\u0026 exit ## ============================================== item=$(echo \"$CURRENT_DIR/scripts/$item\" | sed -E 's/$/.sh/') tmux run-shell -b \"$item\" ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:1","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" pane.shvim ~/.tmux/plugins/tmux-fzf/scripts/pane.sh：相当于只针对 switch 执行命令 #!/usr/bin/env bash CURRENT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" \u0026\u0026 pwd)\" source \"$CURRENT_DIR/.envs\" current_pane_origin=$(tmux display-message -p '#S:#{window_index}.#{pane_index}: #{window_name}') current_pane=$(tmux display-message -p '#S:#{window_index}.#{pane_index}') if [[ -z \"$TMUX_FZF_PANE_FORMAT\" ]]; then panes=$(tmux list-panes -a -F \"#S:#{window_index}.#{pane_index}: [#{window_name}:#{pane_title}] #{pane_current_command} [#{pane_width}x#{pane_height}] [history #{history_size}/#{history_limit}, #{history_bytes} bytes] #{?pane_active,[active],[inactive]}\") else panes=$(tmux list-panes -a -F \"#S:#{window_index}.#{pane_index}: $TMUX_FZF_PANE_FORMAT\") fi ## ============================================== ## only switch action=\"switch\" #FZF_DEFAULT_OPTS=\"$FZF_DEFAULT_OPTS --header='Select an action.'\" #if [[ -z \"$1\" ]]; then # action=$(printf \"switch\\nbreak\\njoin\\nswap\\nlayout\\nkill\\nresize\\nrename\\n[cancel]\" | eval \"$TMUX_FZF_BIN $TMUX_FZF_OPTIONS\") #else # action=\"$1\" #fi ## ============================================== ##------------- 其他的复制原来的代码 --------------- ## [[ \"$action\" == \"[cancel]\" || -z \"$action\" ]] \u0026\u0026 exit ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:1:2","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":" tmux.conf 设置使用 prefix-f ## fzf set -g @plugin 'sainnhe/tmux-fzf' ## enable:1, disable:0 TMUX_FZF_PREVIEW=1 # prefix-f TMUX_FZF_LAUNCH_KEY=\"f\" #TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" TMUX_FZF_ORDER=\"pane|window|session\" ##Default value in tmux \u003e= 3.2 TMUX_FZF_OPTIONS=\"-p -w 90% -h 80% -m\" ## menu #TMUX_FZF_MENU=\\ #\"foo\\necho 'Hello!'\\n\"\\ #\"bar\\nls ~\\n\"\\ #\"sh\\nsh ~/test.sh\\n\" ","date":"2023-09-13","objectID":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/:2:0","tags":["tmux","fzf","vim"],"title":"tmux fzf 快速搜索","uri":"/2023-09-13-tmux-fzf-%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"},{"categories":["tools"],"content":"vim 使用 coc 需要找到 compile_commands.json。 第一种方法，通过命令行添加，会在 build 目录下面自动生成 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 第二种方法，通过修改 CMakeLists.txt SET(CMAKE_EXPORT_COMPILE_COMMANDS ON) IF(EXISTS \"${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json\") EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json ) ENDIF() ","date":"2023-08-25","objectID":"/2023-08-25-vim-coc-%E7%94%9F%E6%88%90-compile_commands.json/:0:0","tags":["vim","coc","cmake","compile"],"title":"vim coc 生成 compile_commands.json","uri":"/2023-08-25-vim-coc-%E7%94%9F%E6%88%90-compile_commands.json/"},{"categories":[],"content":" vim /etc/hosts # Sublime-Bypass 0.0.0.0 sublimetext.com 0.0.0.0 sublimemerge.com 0.0.0.0 sublimehq.com 0.0.0.0 telemetry.sublimehq.com 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 wget https://raw.githubusercontent.com/CITIZENSIXTYNINE/Sublime-Bypass/mistress/sublime-bypass.sh sudo bash ./sublime-bypass.sh ## sublime4 -\u003e Help -\u003e Enter Licence —– BEGIN LICENSE —– Die Socialisten GmbH 10 User License EA7E-800613 51311422 E45F49ED 3F0ADE0C E5B8A508 2F4D9B65 64E1E244 EDA11F0E F9D06110 B7B2E826 E6FDAA72 2C653693 5D80582F 09DCFFB5 113A940C 5045C0CD 5F8332F8 34356CC6 D96F6FDB 4DEC20EA 0A24D83A 2C82C329 E3290B29 A16109A7 EC198EB9 F28EBB17 9C07403F D44BA75A C23C6874 EBF11238 5546C3DD 737DC616 445C2941 —— END LICENSE —— Ref Sublime Text 4 注册汉化 ","date":"2023-08-16","objectID":"/2023-08-16-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/:0:0","tags":[],"title":"sublime4 注册码","uri":"/2023-08-16-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"categories":[],"content":"注意：需要有普通用户写入权限的路径。 ## 查看当前配置 cat /proc/sys/kernel/core_pattern ## 临时 echo \"/tmp/core-%e-%p-%t\" \u003e /proc/sys/kernel/core_pattern ## 使用 sysctl 设置 sysctl -w kernel.core_pattern=/tmp/core-%e-%p-%t %% 单个%字符 %p 所dump进程的进程ID %u 所dump进程的实际用户ID %g 所dump进程的实际组ID %s 导致本次core dump的信号 %t core dump的时间 (由1970年1月1日计起的秒数) %h 主机名 %e 程序文件名 Ref CoreDump设置方式 ","date":"2023-08-02","objectID":"/2023-08-02-linux-coredump-%E8%AE%BE%E7%BD%AE/:0:0","tags":[],"title":"Linux coredump 设置","uri":"/2023-08-02-linux-coredump-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"Linux systemd 学习总结 simple vs oneshot: When you are deciding which service type to choose between simple and oneshot, here is some guidance: Does your service need to complete before any follow-up services run? Use oneshot. Do your follow-up services need to be running while this service does? Use simple. Is this a long-running service? Probably use simple. Do you need to run this service only at shutdown? Use oneshot. Do you need to have multiple separate commands to run? Use oneshot. Ref Simple vs Oneshot - Choosing a systemd Service Type ","date":"2023-08-01","objectID":"/2023-08-01-systemd-%E5%AD%A6%E4%B9%A0/:0:0","tags":["Linux","systemd","oneshot","simple"],"title":"systemd 学习","uri":"/2023-08-01-systemd-%E5%AD%A6%E4%B9%A0/"},{"categories":["tools"],"content":"新加一块 4T 硬盘挂载（非逻辑盘，没有 vgdisplay 的概念，就是简单的挂载到某个路径） fdisk -l lsblk ## 假设以 /dev/sdb 为例 ## 如果此硬盘以前有过分区，则先对磁盘格式化： mkfs -t ext4 /dev/sdb ## 对于新硬盘进行分区操作 ## 由于 fdisk 只能处理 2T 以内的硬盘分区 ## 对于超过 2T 的硬盘，需要使用 parted 进行 GPT 格式分区 parted /dev/sdb ## 进入操作命令 parted (parted) print ## 如果有分区，先删掉，注意数据的备份处理 (parted) #rm 1 ## 创建格式 (parted) mklabel gpt ## 只创建一个分区 (parted) mkpart primary xfs 1 -1 ## 以 s 为单元 (parted) unit s (parted) mkpart primary ext4 0% 100% (parted) q ## 开始挂载的 /data 目录 sudo mkdir -p /data mount /dev/sdb1 /data ## 添加到 /etc/fstab vim /etc/fstab /dev/sdb1 /data ext4 defaults 0 0 ","date":"2023-07-31","objectID":"/2023-07-31-linux-%E6%96%B0%E5%8A%A04t%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E9%9D%9E%E9%80%BB%E8%BE%91%E7%9B%98/:0:0","tags":["Linux","CentOS","fdisk","parted","硬盘","分区"],"title":"Linux 新加4T硬盘挂载（非逻辑盘）","uri":"/2023-07-31-linux-%E6%96%B0%E5%8A%A04t%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E9%9D%9E%E9%80%BB%E8%BE%91%E7%9B%98/"},{"categories":["tools"],"content":" 使用 Win 键调出 keyboard 设置界面 在 Custom Shortcuts 点击添加 flameshot，其中 Name 可以自己写，然后在 Command 填写: /usr/bin/flameshot gui update: /usr/bin/flatpak run –branch=stable –arch=x86_64 –command=flameshot org.flameshot.Flameshot launcher 添加快捷键为 PrtScr 这样，就可以用键盘上面的截屏工具进行截图了 参考：How to change screenshot application to Flameshot on Ubuntu 18.04? ","date":"2023-07-31","objectID":"/2023-07-31-ubuntu-%E8%AE%BE%E7%BD%AE-flameshot-%E5%BF%AB%E6%8D%B7%E9%94%AE/:0:0","tags":["Ubuntu","flameshot","截图"],"title":"Ubuntu 设置 flameshot 快捷键","uri":"/2023-07-31-ubuntu-%E8%AE%BE%E7%BD%AE-flameshot-%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"categories":["tools"],"content":" #!/bin/bash mkfs.ext3 /dev/sda sudo dd bs=4M if=/home/william/Desktop/CentOS-7-x86_64-Minimal-2009.iso of=/dev/sda \u0026\u0026 sync ","date":"2023-07-29","objectID":"/2023-07-29-dd-%E5%88%B6%E4%BD%9C-bios-%E5%90%AF%E5%8A%A8%E7%9B%98/:0:0","tags":["linux","bios","dd"],"title":"dd 制作 bios 启动盘","uri":"/2023-07-29-dd-%E5%88%B6%E4%BD%9C-bios-%E5%90%AF%E5%8A%A8%E7%9B%98/"},{"categories":["tools"],"content":"关于使用 bash/shell 编程的总结。 meta所谓的 meta 指的是 bash/shell 运行准备与环境变量。 ","date":"2023-07-25","objectID":"/2023-07-25-bash%E5%85%A5%E9%97%A8/:0:0","tags":["Linux","bash","shell","gnu","c"],"title":"bash入门","uri":"/2023-07-25-bash%E5%85%A5%E9%97%A8/"},{"categories":["tools"],"content":" sheband #!/bin/bash -xe 这些主要是在 set 有介绍： e: Exit immediately if a command exits with a non-zero status. x: Print commands and their arguments as they are executed. Ref shell命令getopt简介 shell getopt ","date":"2023-07-25","objectID":"/2023-07-25-bash%E5%85%A5%E9%97%A8/:1:0","tags":["Linux","bash","shell","gnu","c"],"title":"bash入门","uri":"/2023-07-25-bash%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":"最近在学习汇编语言，这里做一下简要的记录，主要使用的参考书： Jonathan Bartlett: Learn to Program with Assembly: Foundational Learning for New Programmers Jonathan Bartlett: Programming from the Ground Up CSci 241: Assembly Language Programming MIT Computation Structures 其实，我最早是先看了 PGU，因为这是一本开源书籍，后来才看阅读 LPA，发现 LPA 其实是 PGU 的出版社书籍，是对 PGU 进行更加系统化的整理，并升级了汇编到 x86-64 。所以推荐直接看 LPA 即可。 Ch01：为何学习汇编","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:0:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 理解计算机内部计算机编程语言划分为 High-level programming languages （HLPL） Low-level programming languages （LLPL） 对于大部分的程序员，我们一般都使用 HLPL 进行编程开发，而较少使用（甚至看不懂）LLPL。这是因为随着计算机技术的发展，越来越多的高级编程语言为我们做了太多的事情，使得我们远离底层、面向问题进行编程。HLPL 主要做的事情是： 通过逐层的抽象（Abstract），允许程序员尽量远离计算机底层技术，而直接调用编程语言提供的语法糖进行操作。这些编程语言通过 compiler 或者 interpreter 翻译成机器语言 程序员不再思考计算机内部如何实现指令运算，而只需要按照高级程序语言的规则，把问题空间映射到解决方案空间。 然后，如果我们需要更深入的理解计算机内部的运行机制，理解我们在高级编程语言设计的求解方案如何被映射到计算机的运行指令（机器语言，0-1），就需要站在计算的解读思考，理解操作指令在内部是如何被执行的。 虽然现代计算机已经高度智能化，AI 正如火如荼的渗入我们生活的各个方面。但在底层，计算机其实只能进行有限的运算，理解特定的操作指令，即二进制代码（亦或机器代码）。我们这里说的理解计算机，当然不是直接去看由这些 0-1 所组成的机器代码，而是以人类可以理解的方式阅读机器代码。这就是汇编语言（Assemly Language）。 可以把汇编理解成机器代码的翻译，而且这种关系是一一映射，即一个汇编指令就是代表一条计算机所能执行的最小单元指令，如数字相加： 对于高级语言：a = 0 + 1 对于机器代码：48 83 c7 01 对于汇编语言：addq $1 %rdi .global _start _start: movq $60, %rax movq $0, %rdi addq $1, %rdi syscall ## assembling and linker into executable(elf) as test.asm -o test.o ld test.o -o test ## run ./test echo $? ## disassembly with AT\u0026T objdump -M att -d test.o test.o: file format elf64-x86-64 Disassembly of section .text: 0000000000000000 \u003c_start\u003e: 0: 48 c7 c0 3c 00 00 00 mov $0x3c,%rax 7: 48 c7 c7 00 00 00 00 mov $0x0,%rdi e: 48 83 c7 01 add $0x1,%rdi 12: 0f 05 syscall 通过上面的例子，我们可以知道计算系在底层是如何进行运算的 先给寄存器 %rdi 初始化 然后对寄存器 %rdi 执行 add 指令，这个对应对应了机器代码 83 可见，无论我们是否从事汇编开发，了解一些关于汇编的知识，有助于我们更加深入了解计算机内部的运行机制（英文说法是：under the hood）。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:1:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 学习汇编的好处 know how the computer really works, underneath the hood, fundamentally demystifying the operation of your most basic tool: the processor, how the processor itself thinks about the code better mental model of compiler, debugging, optimization, high-performance-related work ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:2:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编版本：Intel vs AT\u0026T在上面的例子中，我们使用了 objdump 工具用来把二进制代码翻译成汇编语言，其中 -d 表示 disassemle，即反汇编。 -M att 表示使用 AT\u0026T 汇编风格展示 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" ISA：指令集Instrument Set Architecture（ISA）表示计算机可以识别的不同指令架构，主流的有： x86 指令集，包括 x86-32 、x86-64，也称作 AMD（因为最初的 AMD 提出的）。这个大部分 Unix-Linux 使用。 ARM 指令集，主要是手机设备使用。 PowerPC 指令集 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" Intel 与 AT\u0026T 风格虽然有assembler 生成的机器代码都是一样的（才能保证计算机实现的结果的一致且唯一），不同的组织在如何表示 assembly language 风格上却有一定的区别。目前主要有两个风格的汇编代码： Intel 也称作 NASM（Netwide Assembler），这个主要是 Intel 公司在操作手册所使用的的汇编风格。 AT\u0026T 也称作 GAS（GUN Assembler）这个是 Linux 、GCC 所采用的汇编风格。 我们刚才说过，不同汇编语法只是的风格上有所差别，但最近生成的机器代码都是一样的。因此，也可以通过工具将两个汇编风格进行互转。以下是关于两者的参考链接： AT\u0026T Syntax versus Intel Syntax Intel vs. AT\u0026T syntax Differences in Intel (NASM) vs AT\u0026T (GAS) Syntax. Intel AT\u0026T 注释(comment) 使用英文分号：; 使用 #，即 c-style register 不需要前缀 % mov eas, 1 需要带前缀 % movq $1, %eax direction instr dest src mov eas, 1 instr src dest movq $1, %eas memory (address) mov eax,[ebx] mov eax,[ebx+3] movl (%ebx),%eax movl 3(%ebx),%eax ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %r vs %e由于汇编语言的发展经历了漫长的历史过程（最近甚至可以追溯到晶体管），汇编语言在表示寄存器的符号方面也经过多次调整： %rax %eax %ax %ah, %al 可以参考以下链接，介绍相关的历史 x86-64 Machine-Level Programming Ch02：理解计算机如何工作","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:3:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" CPU 的组成与运行 可以说，CPU 充其量就是一个机械设备，只要不断电，它都会永不停歇地讯循环执行以上命令。而作为程序员，我们需要告诉 CPU 如何正确地、严格按照我们设计的方案执行。计算机无所谓对错（bug），它们只是一台机器，本身也无法写出 bug，真正写 bug 的是人。我之前看过一篇博客，说的就是我们在写代码时，一定要秉承着没有 bug 的想法，只要我们设计的程序没有 bug，CPU 就一定没有 bug。在计算机底层的机器代码眼里，世界只有 0-1 ，或者说 on-off。 “If you want more effective programmers, you will discover that they should not waste their time debugging, they should not introduce the bugs to start with.” —Edsger Dijkstra, Turing Award Lecture (1972) If you want a single piece of advice to reduce your bug count, it’s this: Re-read your code frequently. After writing a few lines of code (3 to 6 lines, a short block within a function), re-read them. That habit will save you more time than any other simple change you can make. Don’t write bugs Ch03：汇编基础首先介绍一个在 x86-64 架构中，不同的内存模块大小 1 byte (8 bits, 0000 0000)，范围为 0-255，即 ASCII 2 bytes (16 bits)，即 word 、short 4 bytes (32 bits)， 即 double word、long 8 bytes (64 bits)，即 quadword，这是目前主流的 x86-64 系统 以上的内存模块可以理解成 CPU 每次提取（请求）内存的单元，比如对于一个汇编指令 ## 取一个 byte: 00000010 movb $0b10, %rdi ## 取一个 long: 0000'0000 0000'0000 0000'0000 0000'0010 movq $1, %rdi ## 取一个 quadword: 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0000 0000'0010 movq $1, %rdi 而在操作系统层面，为了加快读取内存，往往还会在增加一层抽象，采用 paging 分页的方式，以更大的模块来分配内存，一般来说，默认的 paging size 是 4k(4096 bytes)。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:4:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编语法 .global _start _start: movq $60, %rax movq $123, %rdi syscall 上面一个一个完整的汇编代码，我们可以进行编译，并打印出执行结果： as ch03-demo01.asm -o ch03-demo01.o ld ch03-demo01.o -o ch03-demo01 ./ch03-demo01 echo $? ## 运行结果即为上面的汇编指令： movq $123, %rdi 123 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" global(globl)global （也可以写作 globl，二者是等价的）告诉 linker 此处设定的 label 需要保留以备他用。一般来说，如果没有添加 global 指示，linker 会把当前模块下我们自己设定的变量名忽略，而添加了 global，则要求不要这么做，因为有可能其他的模块有使用到。 特别的，.global _start 是作为可执行的入口，这个一定要保存。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" _start：entry point这个是二进制的入库，相当于 main 在 C/C++ 编程中的作用。无论汇编代码的顺序如何，操作系统在执行目标时，都是从 _start 开始逐行执行汇编代码。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" label表示一个名称，但实际上该名称所在的内存地址起始位置（以及后面紧随的内存），用来给 assembler 找到相应的内存地址。 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %rax: system call code%rax (Accumulate) 表示寄存器的作用，通常用来代表系统调用的指令，如上述代码中我们将其设置为 60，这代表 system call 的 sys_exit 代号。 具体的 system call code 可以参考： Linux System Call Table Searchable Linux Syscall Table for x86 and x86_64 Instruction: syscall Return value found in: %rax Syscalls are implemented in functions named as in the Entry point column, or with the DEFINE_SYSCALLx(%name% macro. %rax %rdi: arg0 Name Entry Point Implementation 0 unsigned int fd read sys_read fs/read_write.c 1 unsigned int fd write sys_write fs/read_write.c 2 const char *filename open sys_open fs/open.c 3 unsigned int fd close sys_close fs/open.c 4 const char *filename stat sys_newstat fs/stat.c 5 unsigned int fd fstat sys_newfstat fs/stat.c 6 const char *filename lstat sys_newlstat fs/stat.c … 60 int error_code exit sys_exit kernel/exit.c ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:4","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" %rdi: exit status code用于保存系统调用的结果，访问为： 0~255 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:5:5","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编工具","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" as","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" ld","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:6:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编周边（相关工具）","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" hexdump","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" objdump","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:7:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" gdb(cgdb)","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:8:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" disassemble Ch04：Assembly Programming","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:8:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 寄存器","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 不同功能的寄存器我们在 [寄存器历史](###%r vs %e)列举了 x86-32 与 x86-64 架构下的寄存器类型。这里做一个总结： general-purpose registers computational %rax: accumulative 累计量 用来执行 system call 的代码 用来保存 mulq 、divq 的结果 %rbx: base indexing，通常用来处理 memory addressing 相关的操作 %rcx : counting register，通过用在 loop %rdx: data register，用来保存数据相关，如对于 mulq、divq 等操作，由于只能通过 register 或者 memory address，通常是先把数值放到 %rdx，然后再与 %rax 进行操作 data-related %rsi: source index %rdi: destination index，可以用来保存 exit status code specific-purpose registers %rip’：instrument point，指向下一个指令的内存地址 %eflags 用来处理跳转指令相关的操作 ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 使用不同的字节计算（内存与性能） .global _start _start: ##0000'0001'0000'0010 ## %bh ## %bl ## %bx movw $0b0000000100000010, %bx ## 0000'0001 ## 0000'0010 ## addb %bh, %bl ## 2+1 = 3= 0000'0011 movb $0, %bh ## 0000'0000 movq %rbx, %rdi ## %rbx: 0000'0000|0000'0011 ## %rdi: 0000'0000|0000'0011 = 3 ## ------------ movq $60, %rax syscall ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:9:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 运算符 addq: format: addq src dst ## %rdi = %rdi + %ras addq %rax, %rdi subq format: subq src dst ## %rdi = %rdi - %ras subq %rax, %rdi incq：（+1） format: addq dst ## %rdi = %rdi + 1 incq %rdi decq：（-1） format: decq dst ## %rdi = %rdi - 1 decq %rdi mulq format: mulq src mulq %rdi 注意，mulq 和 divq 的作用结果保留在 %rax，而且只能用 register 或者 memory address，不能用普通的 number value divq format: divq src 与 mulq 相同 .global _start .section .text _start: ## rdi ## rax movq $3, %rdi ## 3 movq %rdi, %rax ## 3 add %rdi, %rax ## 3+3=6 mulq %rdi ## 3*6=18 subq %rdi, %rax ## 18-3=15 divq %rdi ## 15/3=5 movq %rax, %rdi ## 5 ## ------------- movq $60, %rax syscall ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:0","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 比较 %eflags汇编在很多地方都使用 %eflags 来判断真假，比如 jmp cmp looq，是的，loop 也是通过调用 decq %rcx 是否为 0 来决定循环结束与否。（如果 %rcx 变为 0，则 %eflags 设置为 true（ZF）） 我们可以通过 ZF 或者 CF 进行跳转，但是这个有点不直观 jz jnz jc jnc cmp本质上，cmp 做的事情跟 %eflags 是相关的 通过寄存器相减，得到一个值 判断这个值是否为 0 然后进行 ZF 判断， 但是，有意思的是，cmp 此时不会重置寄存器 需要注意的是，由于 cmp 在实现上，是通过 dst 减去 src 的值来判断 %eflags，所以如果遇到一个寄存器与一个字面数值对比，一定要把字面数值放在前面，然后减法的操作是无效的 可以这样理解 在操作上： cmpq %rax, %rbx 在内部实现上： subq %rax, %rbx ## using %elags to jmp je : %rax == %rbx jne ja：jump Above for %rax \u003e %rbx jae jb：jump Below for %rax \u003c %rbx jbe ","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:1","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 跳转在介绍不同寄存器的时候，我们区分了 general 与 specific ，其中有一个寄存器 %rip 指向下一个指令的内存地址，我们可以使用 jmp 来调整。本质上，jmp 是直接找到对应 label 上的内存地址，然后跳转到那里执行指令。 因此，我们可以利用这一点，实现代码的跳转与循环。 .global _start _start: movq $25, %rax jmp thelabel somewhere: movq %rax, %rdi jmp anotherlabel label1: addq %rbx, %rax movq $5, %rbx jmp here labellabel: syscall anotherlabel: movq $60, %rax jmp labellabel thelabel: movq %rax, %rbx jmp there here: divq %rbx jmp somewhere there: addq $5, %rbx jmp label1 anywhere: jmp thelabel %rax %rbx %rdi _start 25 thelabel 25 there 5+25=30 label1 30+25=55 5 here 55/5=11 somewhere 11 anotherlabel 60 labellabel (syscall) 数据 bit 操作","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:2","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" stack 与 function","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:3","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 汇编函数","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:4","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 系统调用","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:5","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["learning"],"content":" 模块与链接 Ch05：计算机架构与设计","date":"2023-07-23","objectID":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/:10:6","tags":["Linux","assembly","cs","x86","x86-64","汇编","编程","计算机"],"title":"汇编入门","uri":"/2023-07-23-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"},{"categories":["tools"],"content":"安装 python3.11 的一个软件包 pycrypto 时，出现一个报错，导致无法安装相关依赖包。 根据这篇问答Could not build wheels for pycrypto, which is required to install pyproject.toml-based projects - ERROR Try running pip install setuptools wheel before installing requirements.txt. Some legacy projects require these packages to build wheels for pyproject.toml based projects. If that doesn’t work, you might look into pycryptodome as a replacement for this dependency as mentioned in this thread. 这个看起来依然无效，然后找到文中提到的参考链接，提示有可能是 pycrypto 这个包年久失修，而 python3.11 又恰好更新了一些基础包（比如longint类型数据），从而导致安装报错。 前往链接：Failed installing pycrypto with pip This is a workaround rather than a solution, but it is still useful, because according to this post on the “Issues” section of the pycrypto official repository, it seems the package has not been maintained at all in the last years. And their recommendation is to install pycryptodome instead, since it still creates a Crypto package with the same namespace, so it is expected to work with source code based on the pycrypto libraries. pip uninstall pycrypto pip install pycryptodome 可以在 github 上看到 pycrypto 确实已经停止更新了：Stop creating issues - this project is dead! #173 PyCrypto 2.x is unmaintained, obsolete, and contains security vulnerabilities. See https://www.pycrypto.org/ for details. The following is provided for historical/reference purposes only. Move to a fork like pycryptodome 另外一个新项目是 cryptography ","date":"2023-07-18","objectID":"/2023-07-18-python3.11-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-pycrypto/:0:0","tags":["python3","pycrypto","longintrepr.h"],"title":"python3.11 无法安装 pycrypto","uri":"/2023-07-18-python3.11-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-pycrypto/"},{"categories":[],"content":" History and Spirit of C and C++ History and Spirit of C - Olve Maudal Dennis M. Ritchie Linux like original Unix ","date":"2023-07-14","objectID":"/2023-07-14-%E6%9C%89%E5%85%B3-unix-c-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/:0:0","tags":[],"title":"有关 unix c 的一些历史故事","uri":"/2023-07-14-%E6%9C%89%E5%85%B3-unix-c-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/"},{"categories":[],"content":"使用 vim-latex 编辑并生成 pdf 文件。 Install","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:0:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":[],"content":" xelatex sudo apt-get install texlive-xetex latex-cjk-all ## okular 用于预览 pdf 文件 sudo apt-get install okular ","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:1:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":[],"content":" vim-latex-preview \" 使用 F6 自动调用命令 noremap \u003csilent\u003e \u003cF6\u003e :LLPStartPreview\u003cCR\u003e \" LaTex \" A Vim Plugin for Lively Previewing LaTeX PDF Output Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' } \"\" 配置 \"\" xelatex \"\" okular \"\" LaTex, Using: LLPStartPreview autocmd Filetype tex setl updatetime=1 let g:livepreview_previewer = '/usr/bin/okular' let g:livepreview_engine = '/usr/bin/xelatex' Make \\documentclass{article} \\usepackage{xeCJK} \\begin{document} \\title{APM源码笔记{}} \\author{菜刀} \\maketitle %\\today \\end{document} `` ```bash xelatex test.tet ","date":"2023-07-14","objectID":"/2023-07-14-vim-latex/:2:0","tags":[],"title":"vim latex","uri":"/2023-07-14-vim-latex/"},{"categories":["tools"],"content":"nagios 是一款用于监控远程机器状态的开源软件，使用了服务端-客户端的设计架构。 本文将详细介绍服务端与客户端的安装步骤。 其中，特别需要注意的是： 目前 NRPE 只能支持 openssl-1.1.1 版本的 ssl 功能，否则会出现错误 ccxhAMXP.o: In function `get_dh2048': /tmp/nrpe-4.1.0/src/./../include/dh.h:33: undefined reference to `DH_set0_pqg' collect2: error: ld returned 1 exit status make[1]: *** [nrpe] Error 1 make[1]: Leaving directory `/tmp/nrpe-4.1.0/src' make: *** [all] Error 2 ... undefined reference to `SSL_get1_peer_certificate' nagios 依赖 apache 提供的 httpd，管理页面位于: http://127.0.0.1:80/nagios/。 NRPE 的服务端不需要安装以下功能： ## below only for host-client ## make install-config \u0026\u0026 \\ ## make install-inetd \u0026\u0026 \\ ## make install-init \u0026\u0026 \\ ## make install-groups-users nagcmd 用户 groupadd nagcmd usermod -G nagcmd nagios usermod -G nagcmd apache chown nagios:nagcmd /usr/local/nagios/var/rw chown nagios:nagcmd /usr/local/nagios/var/rw/nagios.cmd systemctl restart nagios perl 实现命令行自动安装依赖包 # export PERL_MM_USE_DEFAULT=1 \u0026\u0026 \\ # # cpan -i Digest::MD5 \u0026\u0026 \\ # # cpan -i Nagios::Config \u0026\u0026 \\ # perl -MCPAN -e \"install Digest::MD5\" \u0026\u0026 \\ # perl -MCPAN -e \"install Nagios::Config\" \u0026\u0026 \\ yum -y install perl-App-cpanminus.noarch export PERL_CPANM_OPT=\"--prompt --reinstall -l ~/perl5 --mirror http://cpan.cpantesters.org\" cpanm Digest::MD5 cpanm Nagios::Config 在安装 nagios-graph 的时候，一定要注意允许修改 nagios.cfg nagios.cfg Modify the Nagios configuration? [n] y Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg] Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg] ``` apache Modify the Apache configuration? [n] y Path of Apache configuration directory? [/etc/httpd/conf.d] 整个过程如下： checking required PERL modules Carp...1.26 CGI...3.63 Data::Dumper...2.145 Digest::MD5...2.52 File::Basename...2.84 File::Find...1.20 MIME::Base64...3.13 POSIX...1.30 RRDs...1.4008 Time::HiRes...1.9725 checking optional PERL modules GD...2.49 Nagios::Config...36 checking nagios installation found nagios exectuable at /usr/local/nagios/bin/nagios found nagios init script at /etc/init.d/nagios checking web server installation found apache executable at /usr/sbin/httpd Destination directory (prefix)? [/usr/local/nagios] Location of configuration files (etc-dir)? [/usr/local/nagios/etc/nagiosgraph] Location of executables? [/usr/local/nagios/libexec] Location of CGI scripts? [/usr/local/nagios/sbin] Location of documentation (doc-dir)? [/usr/local/nagios/docs/nagiosgraph] Location of examples? [/usr/local/nagios/docs/nagiosgraph/examples] Location of CSS and JavaScript files? [/usr/local/nagios/share] Location of utilities? [/usr/local/nagios/docs/nagiosgraph/util] Location of state files (var-dir)? [/var/nagios] Location of RRD files? [/var/nagios/rrd] Location of log files (log-dir)? [/var/nagios] Path of log file? [/var/nagios/nagiosgraph.log] Path of CGI log file? [/var/nagios/nagiosgraph-cgi.log] Base URL? [/nagios] URL of CGI scripts? [/nagios/cgi-bin] URL of CSS file? [/nagios/nagiosgraph.css] URL of JavaScript file? [/nagios/nagiosgraph.js] URL of Nagios CGI scripts? [/nagios/cgi-bin] Path of Nagios performance data file? [/tmp/perfdata.log] username or userid of Nagios user? [nagios] username or userid of web server user? [apache] Modify the Nagios configuration? [n] y Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg] Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg] Modify the Apache configuration? [n] y Path of Apache configuration directory? [/etc/httpd/conf.d] configuration: ng_prefix /usr/local/nagios ng_etc_dir /usr/local/nagios/etc/nagiosgraph ng_bin_dir /usr/local/nagios/libexec ng_cgi_dir /usr/local/nagios/sbin ng_doc_dir /usr/local/nagios/docs/nagiosgraph ng_examples_dir /usr/local/nagios/docs/nagiosgraph/examples ng_www_dir /usr/local/nagios/share ng_util_dir /usr/local/nagios/docs/nagiosgraph/util ng_var_dir /var/nagios ng_rrd_dir /var/nagios/rrd ng_log_dir /var/nagios ng_log_file /var/nagios/nagiosgraph.log ng_cgilog_file /var/nagios/nagiosgraph-cgi.log ng_url /nagios ng_cgi_url /nagios/cgi-bin ng","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-core sudo yum -y install httpd php gd gd-devel perl postfix \u0026\u0026 \\ yum -y install perl perl-CGI \u0026\u0026 \\ sudo useradd nagios -p nagios \u0026\u0026 \\ sudo groupadd nagcmd \u0026\u0026 \\ sudo usermod -G nagcmd nagios \u0026\u0026 \\ sudo usermod -G nagcmd apache export NAGIOS_CORE_VERSION=4.4.13 cd /tmp \u0026\u0026 \\ wget -O nagioscore.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-${NAGIOS_CORE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagioscore.tar.gz \u0026\u0026 \\ cd nagioscore-nagios-${NAGIOS_CORE_VERSION} \u0026\u0026 \\ ./configure \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ make install-daemoninit \u0026\u0026 \\ make install-config \u0026\u0026 \\ make install-commandmode \u0026\u0026 \\ make install-webconf ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-plugin NAGIOS_PLUGIN_VERSION=2.4.5 cd /tmp \u0026\u0026 \\ wget --no-check-certificate -O nagios-plugins.tar.gz https://github.com/nagios-plugins/nagios-plugins/releases/download/release-${NAGIOS_PLUGIN_VERSION}/nagios-plugins-${NAGIOS_PLUGIN_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-plugins.tar.gz \u0026\u0026 \\ cd nagios-plugins-${NAGIOS_PLUGIN_VERSION} \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl=/usr/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-nrpe NAGIOS_NRPE_VERSION=4.1.0 cd /tmp \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1t.tar.gz \u0026\u0026 \\ tar -xvf openssl-1.1.1t.tar.gz \u0026\u0026 \\ cd openssl-1.1.1t \u0026\u0026 \\ ./config --prefix=/usr/local --openssldir=/etc/ssl --libdir=lib enable-ssl3 enable-ssl3-method enable-weak-ssl-ciphers -DOPENSSL_NO_GOST zlib shared \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/bin/openssl /usr/bin/openssl \u0026\u0026 \\ ln -sfn /usr/local/include/openssl/ /usr/include/openssl \u0026\u0026 \\ echo \"/usr/local/lib/\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig \u0026\u0026 \\ wget --no-check-certificate -O nagios-nrpe.tar.gz https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-${NAGIOS_NRPE_VERSION}/nrpe-${NAGIOS_NRPE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-nrpe.tar.gz \u0026\u0026 \\ cd nrpe-${NAGIOS_NRPE_VERSION} \u0026\u0026 \\ export LDFLAGS=-L/usr/local/lib \u0026\u0026 \\ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ ## below only for host-client ## make install-config \u0026\u0026 \\ ## make install-inetd \u0026\u0026 \\ ## make install-init \u0026\u0026 \\ ## make install-groups-users rm -rf /tmp/nagios* ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 ## 启动 http 服务 sudo systemctl restart httpd ## 生成密码 sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin New password: Re-type new password: Adding password for user nagiosadmin ## 启动服务 systemctl enable nagios systemctl start nagios systemctl status nagios ## 开放端口 #firewall-cmd --add-service=http #firewall-cmd --add-service=https #firewall-cmd --reload 检查一下插件是否已经安装好 ## 远程服务在 192.168.1.162:5666 /usr/local/nagios/libexec/check_nrpe -H 192.168.1.162 -p 5666 ## 这时候会调用远程客户端命令，如果显示以下内容则说明匹配成功了 NRPE v4.0.3 这样，可以访问: http://127.0.0.1:80/nagios/。 \u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e \u003chtml\u003e\u003chead\u003e \u003ctitle\u003e401 Unauthorized\u003c/title\u003e \u003c/head\u003e\u003cbody\u003e \u003ch1\u003eUnauthorized\u003c/h1\u003e \u003cp\u003eThis server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn't understand how to supply the credentials required.\u003c/p\u003e \u003c/body\u003e\u003c/html\u003e ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 添加监控客户机器可以参考 /usr/local/nagios/etc/objects/localhost.cfg， 比如这个客户端 /usr/local/nagios/etc/research-machines/m2.cfg # 中间的内容块是用于设置设备信息的 define host { # use 关键字表示使用的模版，模版将在后续讲解，此处使用的是 linux-server 模版 use linux-server # host_name 关键字表示机器的名字，也是在 Web 界面中显示的名字 host_name M2 # alias 表示机器的别名，一般用作机器别名的描述 alias M2@WuyaCapital # address 设置该机器的 IP 地址，以便与数据的获取与被动监控的请求 address 192.168.1.162 # 最大的尝试次数，也就是在某服务监控出错再次运行监控命令获取数据的次数 max_check_attempts 3 # 检测的时间段 check_period 24x7 # 发送消息提醒的时间间隔 notification_interval 30 # 发送消息提醒的时间段 notification_period 24x7 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Current Users check_command check_nrpe!check_users check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Total Procs check_command check_nrpe!check_total_procs check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } 同时，我们需要修改命令 vim /usr/local/nagios/etc/objects/commands.cfg # 'check_NRPE' command definition define command{ command_name check_nrpe command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -p $ARG1$ -c $ARG2$ } 客户端 sudo yum -y install zlib-devel xinetd sudo useradd nagios -p nagios ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:5:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-plugin同服务端的安装: nagios-plugin ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:6:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios-nrpe NAGIOS_NRPE_VERSION=4.1.0 cd /tmp \u0026\u0026 \\ unset ZSH_VERSION \u0026\u0026 \\ wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1t.tar.gz \u0026\u0026 \\ tar -xvf openssl-1.1.1t.tar.gz \u0026\u0026 \\ cd openssl-1.1.1t \u0026\u0026 \\ ./config --prefix=/usr/local --openssldir=/etc/ssl --libdir=lib enable-ssl3 enable-ssl3-method enable-weak-ssl-ciphers -DOPENSSL_NO_GOST zlib shared \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/bin/openssl /usr/bin/openssl \u0026\u0026 \\ ln -sfn /usr/local/include/openssl/ /usr/include/openssl \u0026\u0026 \\ echo \"/usr/local/lib/\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig \u0026\u0026 \\ wget --no-check-certificate -O nagios-nrpe.tar.gz https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-${NAGIOS_NRPE_VERSION}/nrpe-${NAGIOS_NRPE_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf nagios-nrpe.tar.gz \u0026\u0026 \\ cd nrpe-${NAGIOS_NRPE_VERSION} \u0026\u0026 \\ export LDFLAGS=-L/usr/local/lib \u0026\u0026 \\ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios \u0026\u0026 \\ make all \u0026\u0026 \\ make install \u0026\u0026 \\ ## below only for host-client make install-config \u0026\u0026 \\ make install-inetd \u0026\u0026 \\ make install-init \u0026\u0026 \\ make install-groups-users rm -rf /tmp/nagios* ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:7:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 systemctl enable xinetd systemctl restart xinetd systemctl status xinetd systemctl enable nrpe systemctl restart nrpe systemctl status nrpe ## 检查是否已经启动 nrpe netstat -at | egrep \"nrpe|5666\" ## 检查服务是否启程 /usr/local/nagios/libexec/check_nrpe -H localhost NRPE v4.1.0 ## 检查插件是否可用 /usr/local/nagios/libexec/check_nrpe -H localhost -c check_users USERS OK - 5 users currently logged in |users=5;5;10;0 ## 修改客户端监控项目与内容 vim /usr/local/nagios/etc/nrpe.cfg # The following examples allow user-supplied arguments and can # only be used if the NRPE daemon was compiled with support for # command arguments *AND* the dont_blame_nrpe directive in this # config file is set to '1'. This poses a potential security risk, so # make sure you read the SECURITY file before doing this. ### MISC SYSTEM METRICS ### # command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10 command[check_load]=/usr/local/nagios/libexec/check_load -r -w .15,.10,.05 -c .30,.25,.20 command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1 command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 # The following examples allow user-supplied arguments and can # only be used if the NRPE daemon was compiled with support for # command arguments *AND* the dont_blame_nrpe directive in this # config file is set to '1'. This poses a potential security risk, so # make sure you read the SECURITY file before doing this. ### MISC SYSTEM METRICS ### command[check_users]=/usr/local/nagios/libexec/check_users -w $ARG1$ -c $ARG2$ #command[check_load]=/usr/local/nagios/libexec/check_load $ARG1$ #command[check_disk]=/usr/local/nagios/libexec/check_disk $ARG1$ #command[check_swap]=/usr/local/nagios/libexec/check_swap $ARG1$ #command[check_cpu_stats]=/usr/local/nagios/libexec/check_cpu_stats.sh $ARG1$ #command[check_mem]=/usr/local/nagios/libexec/custom_check_mem -n $ARG1$ ## 允许接入的服务器ip allowed_hosts=127.0.0.1 allowed_hosts=192.168.1.162 ## 日志文件 log_file=/usr/local/nagios/var/nrpe.log ## 允许传递参数 ## 这样服务器可以调用参数：/usr/local/nagios/libexec/check_nrpe -H127.0.0.1 -p56118 -c check_users -a \"2 10\" ## 在 command.cfg 可以这样使用参数传递：command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -p $ARG1$ -c $ARG2$ -a $ARG3$ ## 在 colo.cfg 调用命令：check_command check_nrpe!56118!check_users!\"2 10\" ## dont_blame_nrpe=1 编写 nagios-plugin","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:8:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" show-users Show Users show_users show_users.sh ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 代码 #!/bin/bash # # Copyright Hari Sekhon 2007 # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA # # Nagios Plugin to list all currently logged on users to a system. # Modified by Rob MacKenzie, SFU - rmackenz@sfu.ca # Added the -w and -c options to check for number of users. version=0.3 # This makes coding much safer as a varible typo is caught # with an error rather than passing through set -u # Note: resisted urge to use \u003c\u003c\u003c, instead sticking with | # in case anyone uses this with an older version of bash # so no bash bashers please on this # Standard Nagios exit codes OK=0 WARNING=1 CRITICAL=2 UNKNOWN=3 usage(){ echo \"usage: ${0##*/} [--simple] [ --mandatory username ] [ --unauthorized username ] [ --whitelist username ]\" echo echo \"returns a list of users on the local machine\" echo echo \" -s, --simple show users without the number of sessions\" echo \" -m username, --mandatory username\" echo \" Mandatory users. Return CRITICAL if any of these users are not\" echo \" currently logged in\" echo \" -b username, --blacklist username\" echo \" Unauthorized users. Returns CRITICAL if any of these users are\" echo \" logged in. This can be useful if you have a policy that states\" echo \" that you may not have a root shell but must instead only use \" echo \" 'sudo command'. Specifying '-u root' would alert on root having\" echo \" a session and hence catch people violating such a policy.\" echo \" -a username, --whitelist username\" echo \" Whitelist users. This is exceptionally useful. If you define\" echo \" a bunch of users here that you know you use, and suddenly\" echo \" there is a user session open for another account it could\" echo \" alert you to a compromise. If you run this check say every\" echo \" 3 minutes, then any attacker has very little time to evade\" echo \" detection before this trips.\" echo echo \" -m,-u and -w can be specified multiple times for multiple users\" echo \" or you can use a switch a single time with a comma separated\" echo \" list.\" echo \" -w integer, --warning integer\" echo \" Set WARNING status if more than INTEGER users are logged in\" echo \" -c integer, --critical integer\" echo \" Set CRITICAL status if more than INTEGER users are logged in\" echo echo echo \" -V --version Print the version number and exit\" echo exit $UNKNOWN } simple=\"\" mandatory_users=\"\" unauthorized_users=\"\" whitelist_users=\"\" warning_users=0 critical_users=0 while [ \"$#\" -ge 1 ]; do case \"$1\" in -h|--help) usage ;; -V|--version) echo $version exit $UNKNOWN ;; -s|--simple) simple=true ;; -m|--mandatory) if [ \"$#\" -ge 2 ]; then if [ -n \"$mandatory_users\" ]; then mandatory_users=\"$mandatory_users $2\" else mandatory_users=\"$2\" fi shift else usage fi ;; -b|--blacklist) if [ \"$#\" -ge 2 ]; then if [ -n \"$unauthorized_users\" ]; then unauthorized_users=\"$unauthorized_users $2\" else unauthorized_users=\"$2\" fi shift else usage fi ;; -a|--whitelist) if [ \"$#\" -ge 2 ]; then if [ -n \"$whitelist_users\" ]; then whitelist_users=\"$whitelist_users $2\" else whitelist_users=\"$2\" fi shift else usage fi ;; -w|--warning) if [ \"$#\" -ge 2 ]; then if [ $2 -ge 1 ]; then warning_users=$2 fi shift else usage fi ;; -c|--critical) if [ \"$#\" -ge 2 ]; then if [ $2 -ge 1 ]; then critical_users=$2 fi shift else usage fi ;; *) usage ;; esac shift done mandatory_users=\"`echo $mandatory_users | tr ',' ' '`\" unauthorized_users=\"`echo $unauthorized_users | tr","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:1","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 Plugin worked properly. Just set below things. On Nagios Server: * Create a file \"show_users\" in your libexec directory. * Copy all the \"show_users.txt\" contents in \"show_users\" file * chmod 755 show_users * chown nagios:nagios show_users * Open your host configuration file \u0026 type below configuration. define service{ use generic-service ; Inherit values from a template host_name Dell NFS Server service_description Logged Users check_command check_nrpe!show_users On NRPE Client: * Copy show_users file in \"libexec\" directory * vim nrpe.cfg, add below line command[show_users]=/usr/local/nagios/libexec/show_users Save \u0026 Exit \u0026 restart NRPE/Xinetd service That's it. ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:2","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 nagios-graph 参考这个博客:Steps to Install Nagiosgraph for Nagios Core on CentOS 7 安装的时候，一定要记得允许修改 nagios 与 apache 配置，不要一键到底 locate /etc/httpd/conf/httpd.conf ## cgi ## 先安装 perl-core yum install -y perl-core ## 进入 perl 命令行模式，开始安装 perl -MCPAN -e shell 1) install Digest::MD5 2) install Nagios::Config ## 修改权限 chmod 777 -R /usr/local/nagios ## 修改 templates.cfg, 一定要改成 /nagios/cgi-bin/.... define service { name graphed-service action_url /nagios/cgi-bin/show.cgi?host=$HOSTNAME$\u0026service=$SERVICEDESC$' onMouseOver='showGraphPopup(this)' onMouseOut='hideGraphPopup()' rel='/nagiosgraph/cgi-bin/showgraph.cgi?host=$HOSTNAME$\u0026service=$SERVICEDESC$\u0026period=week\u0026rrdopts=-w+450+-j register 0 } ## 测试打开 http://127.0.0.1:8080/nagios/cgi-bin/showconfig.cgi ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:10:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 pnp4nagios 开源监控解决方案Nagios+Cacti+PNP4Nagios+NConf+NDOUtils+Nagvis（三）pnp4nagios安装 sudo /etc/init.d/npcd restart systemctl restart npcd systemctl restart httpd ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:0","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 pnp4nagios cd /tmp wget -O pnp4nagios.tar.gz https://github.com/lingej/pnp4nagios/archive/0.6.26.tar.gz tar -xvf pnp4nagios.tar.gz cd pnp4nagios-0.6.26 ./configure --with-rrdtool=/usr/bin/rrdtool --with-perfdata-dir=/usr/local/nagios/share/perfdata --with-perfdata-spool-dir=/usr/local/nagios/share/spool --with-nagios-user=nagios --with-nagios-group=nagios make all make install make install-webconf make install-config make install-init 配置 cd /usr/local/pnp4nagios/etc mv misccommands.cfg-sample misccommands.cfg mv nagios.cfg-sample nagios.cfg mv rra.cfg-sample rra.cfg cd /usr/local/pnp4nagios/etc/pages/ mv web_traffic.cfg-sample web_traffic.cfg cd ../check_commands mv check_all_local_disks.cfg-sample check_all_local_disks.cfg mv check_nrpe.cfg-sample check_nrpe.cfg mv check_nwstat.cfg-sample check_nwstat.cfg ## 启动服务 sudo /etc/init.d/npcd restart systemctl restart npcd systemctl restart httpd ## 修改 /usr/local/nagios/etc/objects/templates.cfg cp /usr/local/nagios/etc/objects/templates.cfg /usr/local/nagios/etc/objects/templates.cfg.orig ## ---------------------------------------------- vim /usr/local/nagios/etc/objects/templates.cfg define host { name host-pnp register 0 action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$\u0026srv=_HOST_' class='tips' rel='/pnp4nagios/index.php/popup?host=$HOSTNAME$\u0026srv=_HOST_ process_perf_data 1 } define service { name srv-pnp register 0 action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$\u0026srv=$SERVICEDESC$' class='tips' rel='/pnp4nagios/index.php/popup?host=$HOSTNAME$\u0026srv=$SERVICEDESC$ process_perf_data 1 } define host{ name gchost use host-pnp max_check_attempts 1 normal_check_interval 2 retry_check_interval 1 check_period 24x7 contact_groups myself_group notification_interval 2 notification_period 24x7 notification_options d,u,r check_command check-host-alive } define service{ name myself_temp use srv-pnp max_check_attempts 2 normal_check_interval 2 retry_check_interval 1 check_period 24x7 notification_interval 2 notification_period 24x7 notification_options w,u,c,r contact_groups myself_group check_command check-host-alive register 0 } ## 修改 /usr/local/nagios/etc/nagios.cfg cd /usr/local/nagios/etc/nagios.cfg /usr/local/nagios/etc/nagios.cfg.orig ## ------------------------------------- vim /usr/local/nagios/etc/nagios.cfg process_performance_data=1 enable_environment_macros=1 host_perfdata_file=/usr/local/pnp4nagios/var/host-perfdata service_perfdata_file=/usr/local/pnp4nagios/var/service-perfdata host_perfdata_file_template=DATATYPE::HOSTPERFDATA\\tTIMET::$TIMET$\\tHOSTNAME::$HOSTNAME$\\tHOSTPERFDATA::$HOSTPERFDATA$\\tHOSTCHECKCOMMAND::$HOSTCHECKCOMMAND$\\tHOSTSTATE::$HOSTSTATE$\\tHOSTSTATETYPE::$HOSTSTATETYPE$ service_perfdata_file_template=DATATYPE::SERVICEPERFDATA\\tTIMET::$TIMET$\\tHOSTNAME::$HOSTNAME$\\tSERVICEDESC::$SERVICEDESC$\\tSERVICEPERFDATA::$SERVICEPERFDATA$\\tSERVICECHECKCOMMAND::$SERVICECHECKCOMMAND$\\tHOSTSTATE::$HOSTSTATE$\\tHOSTSTATETYPE::$HOSTSTATETYPE$\\tSERVICESTATE::$SERVICESTATE$\\tSERVICESTATETYPE::$SERVICESTATETYPE$\\tSERVICEOUTPUT::$SERVICEOUTPUT$ host_perfdata_file_mode=a service_perfdata_file_mode=a host_perfdata_file_processing_interval=15 service_perfdata_file_processing_interval=15 host_perfdata_file_processing_command=process-host-perfdata-file service_perfdata_file_processing_command=process-service-perfdata-file ## 修改 /usr/local/nagios/etc/objects/commands.cfg cp /usr/local/nagios/etc/objects/commands.cfg /usr/local/nagios/etc/objects/commands.cfg.orig ## -------------------------------------------------- vim /usr/local/nagios/etc/objects/commands.cfg define command{ command_name process-service-perfdata-file command_line /usr/local/pnp4nagios/libexec/process_perfdata.pl --bulk=/usr/local/pnp4nagios/var/service-perfdata } define command{ command_name process-host-perfdata-file command_line /usr/local/pnp4nagios/libexec/process_perfdata.pl --bulk=/usr/local/pnp4nagios/var/host-perfdata } ## 修改 apache 配置 /etc/httpd/conf/httpd.conf cd /etc/httpd/conf/httpd.conf /etc/httpd","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:1","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" grafana nagios+grafana https://www.centlinux.com/2019/02/install-grafana-pnp4nagios-centos-7.html cd /tmp wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.0.0-1.x86_64.rpm ## 安装 grafana sudo yum install grafana-enterprise-10.0.0-1.x86_64.rpm systemctl daemon-reload systemctl enable grafana-server.service systemctl start grafana-server.service systemctl restart grafana-server.service ## 安装 PNP plugin sudo grafana-cli plugins install sni-pnp-datasource # service firewalld restart # firewall-cmd --permanent --add-port=3000/tcp # firewall-cmd --reload # service firewalld restart ## 下载 api cd /usr/local/pnp4nagios/share/application/controllers/ wget -O api.php \"https://github.com/lingej/pnp-metrics-api/raw/master/application/controller/api.php\" systemctl restart grafana-server.service ## 配置 pnp4nagios cp /etc/httpd/conf.d/pnp4nagios.conf /etc/httpd/conf.d/pnp4nagios.conf.orig sed -i '/Allow from all/a\\ Allow from 127.0.0.1 ::1' /etc/httpd/conf.d/pnp4nagios.conf sed -i '/Require valid-user/a\\ Require all granted' /etc/httpd/conf.d/pnp4nagios.conf sed -i '/Require valid-user/a\\ Require ip 127.0.0.1 ::1' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/Allow from all/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthName/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthType Basic/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/AuthUserFile/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf sed -i 's/Require valid-user/#\u0026/' /etc/httpd/conf.d/pnp4nagios.conf systemctl restart httpd.service ## 配置 grafana, 首次登录，账户:admin，密码:admin ## 配置 pnp data source ## 生成密码，使用这个在 grafana 登录 pnp htpasswd -b /usr/local/nagios/etc/htpasswd.users nagiosadmin ********* ## 打开页面, http://127.0.0.1:3000 ","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:2","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 企业微信通知 企业微信对于机器人与群助手的渲染不一样，导致 \\n 的判断不同 if re.search('Robot', str(type(w)), re.IGNORECASE): msgx = cli.args.msg.replace('\\\\n', '\\n') else: msgx = cli.args.msg.replace('\\\\n', '\u003cbr\u003e').replace('\\n', '\u003cbr\u003e') 参考： 4 Steps to Define Nagios Contacts With Email and Pager Notification Creating a new e-mail contact nagios macro 介绍如何使用 nagios 宏定义：using macro in commans 建立 python 通知脚本 from wepy.utils.init import * if __name__ == '__main__': ## ------------------------------------------- cli = CliParser(\"wechat from command line\") cli.add(\"who\", type=str, default='wx_test') cli.add(\"msg\", type=str, default=\"\") cli.add(\"level\", type=str, default='info') cli.show() ## ------------------------------------------- if cli.args.who not in globals(): msg = f\"\"\" {cli.args.who=} does not exist \"\"\" log.err(msg) raise Exception(msg) w = globals().get(cli.args.who) if re.search('Robot', str(type(w)), re.IGNORECASE): msgx = cli.args.msg.replace('\\\\n', '\\n') else: msgx = cli.args.msg.replace('\\\\n', '\u003cbr\u003e').replace('\\n', '\u003cbr\u003e') w.send(msgx, cli.args.level) 修改 generic-contact这个是模板，我们可以通过继承来实现具体的 contact1 vim /usr/local/nagios/etc/objects/templates.cfg define contact { name generic-contact ; The name of this contact template service_notification_period 24x7 ; service notifications can be sent anytime host_notification_period 24x7 ; host notifications can be sent anytime # service_notification_options w,u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events service_notification_options u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events host_notification_options d,u,r,f,s ; send notifications for all host states, flapping events, and scheduled downtime events # service_notification_commands notify-service-by-email,notify-service-by-wechat ; send service notifications via email # host_notification_commands notify-host-by-email,notify-host-by-wechat ; send host notifications via email service_notification_commands notify-service-by-wechat ; send service notifications via email host_notification_commands notify-host-by-wechat ; send host notifications via email register 0 ; DON'T REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE! } 修改 contact vim /usr/local/nagios/etc/objects/contacts.cfg define contact { contact_name nagiosadmin ; Short name of user use generic-contact ; Inherit default values from generic-contact template (defined above) alias Nagios Admin ; Full name of user # email nagios@localhost ; \u003c\u003c***** CHANGE THIS TO YOUR EMAIL ADDRESS ****** email william.lian.fang@gmail.com ; \u003c\u003c***** CHANGE THIS TO YOUR EMAIL ADDRESS ****** host_notification_commands notify-host-by-wechat host_notification_options d,u,r host_notification_period 24x7 service_notification_commands notify-service-by-wechat service_notification_options w,u,c,r ; 可以修改不同的设置 service_notification_period 24x7 } define contact { contact_name test ; Short name of user use generic-contact ; Inherit default values from generic-contact template (defined above) alias Nagios Dev ; Full name of user email william.lian.fang@gmail.com ; host_notifications_enabled 1 service_notifications_enabled 1 host_notification_period 24x7 service_notification_period 24x7 host_notification_options d,u,r,f,s,n service_notification_options w,u,c,r,f,s ; send notifications for all service states, flapping events, and scheduled downtime events host_notification_commands notify-host-by-wechat-test service_notification_commands notify-service-by-wechat-test } 还可以设置 contact-groups vim /usr/local/nagios/etc/objects/contacts.cfg define contactgroup { contactgroup_name admins alias Nagios Administrators members nagiosadmin,test } 添加监控 commands vim /usr/local/nagios/etc/objects/commands.cfg ##### notify-host-by-wechat command definition define command{ command_name notify-host-by-wechat command_line /usr/local/python3/bin/python3 /app/wechat_cli.py --who='wx_test' --msg=$(/usr/bin/printf \"%b\" \"***** Nagios *****\\n","date":"2023-07-09","objectID":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:3","tags":["Linux","CentOS","nagios","openssl","log","monitor"],"title":"nagios 安装与使用","uri":"/2023-07-09-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" Docker 安装 nagios4","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 nagios docker pull jasonrivers/nagios docker run --rm --name nagios4 -p 0.0.0.0:8080:80 jasonrivers/nagios:latest ## 我们需要配置一个用户，我们让docker容器中的nagios配置文件跟虚拟机磁盘建立联系 mkdir -p /opt/nagios4/etc docker cp nagios4:/opt/nagios/etc /opt/nagios4/ 然后退出这个 docker (ctl-c)。接下来我们需要给账户设置密码，使用了 htpasswd 这个工具。 ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 安装 apache2 与 httpd ## ubuntu sudo apt install apache2 ## CentOS sudo yum install httpd ## 生成密码 sudo htpasswd -c /opt/nagios4/etc/htpasswd.users nagiosadmin New password: Re-type new password: Adding password for user nagiosadmin ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 启动服务 docker run -d --name nagios4 -p 0.0.0.0:8080:80 -v /opt/nagios4/etc:/opt/nagios/etc jasonrivers/nagios:latest 现在可以使用账号访问网页：http://127.0.0.1:8080/。 使用","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 nagios4/etc通过指定目录，实现以任意添加 *.cfg 文件的方式来增加客户端监控项目。 mkdir -p /opt/nagios4 sudo docker cp nagios4:/opt/nagios/etc /opt/nagios4 vim /opt/nagios4/etc/nagios.cfg #cfg_dir=/opt/nagios/etc/servers #cfg_dir=/opt/nagios/etc/printers #cfg_dir=/opt/nagios/etc/switches #cfg_dir=/opt/nagios/etc/routers cfg_dir=/opt/nagios/etc/colo-machines cfg_dir=/opt/nagios/etc/research-machines ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 添加 host可以参考 /opt/nagios/etc/objectes/localhost.cfg， 比如这个客户端 /opt/nagios4/etc/research-machines/m2.cfg # 中间的内容块是用于设置设备信息的 define host { # use 关键字表示使用的模版，模版将在后续讲解，此处使用的是 linux-server 模版 use linux-server # host_name 关键字表示机器的名字，也是在 Web 界面中显示的名字 host_name M2 # alias 表示机器的别名，一般用作机器别名的描述 alias M2@WuyaCapital # address 设置该机器的 IP 地址，以便与数据的获取与被动监控的请求 address 192.168.1.162 # 最大的尝试次数，也就是在某服务监控出错再次运行监控命令获取数据的次数 max_check_attempts 3 # 检测的时间段 check_period 24x7 # 发送消息提醒的时间间隔 notification_interval 30 # 发送消息提醒的时间段 notification_period 24x7 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Current Users check_command check_nrpe!check_users check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } define service{ use local-service,graphed-service ; Name of service template to use host_name M2 service_description Total Procs check_command check_nrpe!check_total_procs check_interval 1 retry_interval 1 check_period 24x7 notification_interval 1 notification_period 24x7 notifications_enabled 1 register 1 } 同时，我们需要修改命令 vim /opt/nagios4/etc/objects/command.cfg # 'check_NRPE' command definition define command{ command_name check_nrpe command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ } 客户端安装 nrpe","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:5:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 配置 vim /etc/nagios/nrpe.cfg command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10 command[check_load]=/usr/local/nagios/libexec/check_load -r -w .15,.10,.05 -c .30,.25,.20 command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1 command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 allowed_hosts=127.0.0.1,192.168.1.82 systemctl enable nrpe systemctl start nrpe ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:6:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":" 测试 ## 服务器测试 /opt/nagios/libexec/check_nrpe -H 192.168.1.162 -p 5666 -c check_total_procs PROCS CRITICAL: 605 processes | procs=605;150;200;0; Ref Nagios on CentOS 7 ","date":"2023-07-08","objectID":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:7:0","tags":["Linux","ubuntu","CentOS","nagios","log","httpd"],"title":"nagios 安装与使用","uri":"/2023-07-08-nagios-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"由于换了一台戴尔 xps 工作机，需要重新安装 R。在此顺便记录一下过程。 ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:0:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" apt-get sudo apt-get install \\ gfortran \\ libcurl4-gnutls-dev \\ libreadline-dev \\ libbz2-dev \\ liblzma-dev \\ libpcre++-dev \\ libpango1.0-dev sudo apt-get install \\ libfreetype6-dev \\ libpng-dev \\ libtiff5-dev \\ libjpeg-dev \\ libmariadbclient-dev ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:1:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" textlive sudo apt-get install texlive sudo apt-get install texlive-fonts-extra wget http://mirrors.ctan.org/fonts/inconsolata.zip unzip inconsolata.zip cp -Rfp inconsolata/* /usr/share/texmf mktexlsr ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:2:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":" install export R_VERSION=R-4.3.1 cd /tmp \u0026\u0026 \\ wget --no-check-certificate https://cran.r-project.org/src/base/R-4/${R_VERSION}.tar.gz \u0026\u0026 \\ tar -xvf ${R_VERSION}.tar.gz \u0026\u0026 \\ cd ${R_VERSION} \u0026\u0026 \\ ./configure \\ --prefix=/usr/local/R-4/${R_VERSION} \\ --enable-memory-profiling \\ --enable-R-shlib \\ --with-blas \\ --with-lapack \\ --with-x=no \u0026\u0026 \\ make \u0026\u0026 sudo make install \u0026\u0026 \\ ln -sfn /usr/local/R-4/${R_VERSION}/bin/R /usr/bin/R \u0026\u0026 \\ ln -sfn /usr/local/R-4/${R_VERSION}/bin/Rscript /usr/bin/Rscript \u0026\u0026 \\ rm -rf /tmp/${R_VERSION}* ","date":"2023-07-05","objectID":"/2023-07-05-ubuntu-install-r4.3/:3:0","tags":["ubuntu","R4.0"],"title":"ubuntu install R4.3","uri":"/2023-07-05-ubuntu-install-r4.3/"},{"categories":["tools"],"content":"一份 CS 专业的自学手册：Open Source Society University ","date":"2023-07-04","objectID":"/2023-07-04-cs--open-source-society-university/:0:0","tags":["CS","open source","university"],"title":"CS: Open Source Society University","uri":"/2023-07-04-cs--open-source-society-university/"},{"categories":["tools"],"content":"Docker 提供了一些新功能，这些只有通过 buildx 插件才能完成。 - [X] 处理Snail6Ops使用 Docker plugin 更新要求 buildx 插件升级的问题 (2023-06-29 19:42:10) - [X] docker ERROR: BuildKit is enabled but the buildx component is missing or broken (2023-06-29 19:42:56) - [X] export DOCKER_BUILDKIT=1 (2023-06-29 19:43:20) airflow ## 需要安装插件 ## ref: https://docs.docker.com/engine/install/centos/ sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-buildx-plugin docker-compose-plugin 另外在 docker-compose.yaml 配置 airflow: hostname: airflow container_name: airflow image: 192.168.1.162:5000/airflow:v1.0 ## 不能用 previlleged，·普通用户也可以, 为了 /var/run/docker.socket privileged: false tty: true volumes: - /var/run/docker.sock:/var/run/docker.sock ## docker-in-docker - /run/buildkit/buildkitd.sock:/run/buildkit/buildkitd.sock ## docker-in-docker - /run/containerd/containerd.sock:/run/containerd/containerd.sock - /usr/bin/docker:/bin/docker ## docker 可执行，如果有 so 也需要 mount - ~:/mnt - /data:/data - /fs:/fs ## /fs in docker-in-docker - /mnt/cephfs:/root/cephfs ## 可以在 docker-in-docker 使用 cephs - ~/git/jobs/dags:/app/dags ## for dags # - ~/mysql:/var/lib/mysql ## for mysql ports: - \"18080:8080\" ## web command: - /bin/bash - -c - | /usr/sbin/init pull_policy: always restart: always docker buildx export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 DOCKER_BUILDKIT=1 docker build ... ","date":"2023-06-29","objectID":"/2023-06-29-docker-buildx/:0:0","tags":["docker","buildx","airflow"],"title":"docker buildx","uri":"/2023-06-29-docker-buildx/"},{"categories":["tools"],"content":"需要在 ~/.zshrc 添加以下配置，然后重新执行 source ~/.zshrc 即可 setopt no_nomatch ","date":"2023-06-26","objectID":"/2023-06-26-zsh-no-match-found-for-/:0:0","tags":["Linux","zsh","source"],"title":"zsh no match found for *","uri":"/2023-06-26-zsh-no-match-found-for-/"},{"categories":["tools"],"content":"通过设置 cpu 的运行模式，可以调整机器性能。 ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:0:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":" 常用模式 ondemand：系统默认的超频模式，按需调节，内核提供的功能，不是很强大，但有效实现了动态频率调节，平时以低速方式运行，当系统负载提高时候自动提高频率。以这种模式运行不会因为降频造成性能降低，同时也能节约电能和降低温度。一般官方内核默认的方式都是 ondemand。 interactive：交互模式，直接上最高频率，然后看 CPU 负荷慢慢降低，比较耗电。Interactive 是以 CPU 排程数量而调整频率，从而实现省电。InteractiveX 是以 CPU 负载来调整 CPU 频率，不会过度把频率调低。所以比 Interactive 反应好些，但是省电的效果一般。 conservative：保守模式，类似于 ondemand，但调整相对较缓，想省电就用他吧。Google 官方内核，kang 内核默认模式。 smartass：聪明模式，是 I 和 C 模式的升级，该模式在比 interactive 模式不差的响应的前提下会做到了更加省电。 performance：性能模式！只有最高频率，从来不考虑消耗的电量，性能没得说，但是耗电量。 powersave 省电模式，通常以最低频率运行。 userspace：用户自定义模式，系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节 CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置 Hotplug：类似于 ondemand, 但是 cpu 会在关屏下尝试关掉一个 cpu，并且带有 deep sleep，比较省电。 ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:1:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":" 安装软件 ## centos sudo yum install cpufreq-utils ## ubuntu sudo apt-get install cpufrequtils sudo apt-get install sysfsutils ## centos 查看频率信息 cpupower frequency-info ## ubuntu 查看 CPU 状态 cpufreq-info ## 把 cpu 调整到性能模式 ## centos sudo cpupower -c all frequency-set -g performance ## ubuntu sudo cpufreq-set -g performance ## 通过设置默认模式，防止重启后恢复 sudo vim /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ## 填写 performance ## 或者全局设置 sudo vim /etc/default/cpufrequtils GOVERNOR=\"performance\" ## 重启配置生效 systemctl restart cpufrequtils ","date":"2023-06-18","objectID":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/:2:0","tags":["Linux","cpu","performance"],"title":"Linux 设置 cpu 高性能performance模式","uri":"/2023-06-18-linux-%E8%AE%BE%E7%BD%AE-cpu-%E9%AB%98%E6%80%A7%E8%83%BDperformance%E6%A8%A1%E5%BC%8F/"},{"categories":["tools"],"content":"最近公司给原来的服务器添加了一块 8T 的 DellSAS 硬盘，原来存放数据。由于Linux采用了逻辑硬盘LLVM的方式来组织多块硬盘，我们需要通过以下步骤，实现把新购硬盘添加到系统的逻辑硬盘，并通过磁盘扩容，增加目录 /data 的存储空间。 扩展 8T 硬盘 ## 查看当前可用磁盘 fdisk -l ## 查看磁盘分区情况 lsblk ## 加入对于新硬盘 /dev/sdb 进行操作 sudo parted /dev/sdb ## 查看 (parted) print # rm 用于删除 # (parted) rm 1 (parted) mklabel gpt ## 创建分区 ## 只有一卷 (parted) mkpart primary xfs 1 -1 ## 以 s 为单位 (parted) unit s ## 扩展 100% (parted) mkpart primary ext4 2048s 100% (parted) mkpart primary ext4 0% 100% (parted) align-check optimal 1 ## 退出 quit 接着，我们可以分区 ## 开始分区 sudo mkfs.ext4 /dev/sdb1 pvcreate /dev/sdb1 pvdisplay 新磁盘添加到逻辑盘 主要参考了网站的教程：手把手教你给 CentOS 7 添加硬盘及扩容(LVM) ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:0:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["tools"],"content":" 添加物理分区 ## 使用 fdisk 查看新添加的硬盘信息：/dev/sdc: 8T fdisk -l ## 对新盘进行分区处理 fdisk /dev/sdc ## 主要使用命令 1. n: 添加新的物理分区 2. p: 选择主分区类型(1-4, 如果已经使用了 1（对应 /dev/sdc1），就选择 2，以此类推) 3. 起始扇区: 默认 4. Last扇区: 默认 5. t: 修改分区, 选择 1-4， 对应 /dev/sdc1-4 6. L: 列出所有的分区ID, 8e 为 Linux LVM 7. 8e: 8. w: 将修改写入磁盘 ## 使用 partprobe 命令重新读取分区表 partprobe ## 查看修改后的结果 fdisk -l ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:1:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["tools"],"content":" 添加逻辑分区 # 创建新物理卷前查看 PV pvdisplay # 创建 PV, 对应 /dev/sdc1, /dev/sdc2,... pvcreate /dev/sdc1 # 再次查看，可看到新的 PV pvdisplay # 查看卷组 vgdisplay --- Volume group --- VG Name VolGroup ## 对应的 vg 名称 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 20 VG Access read/write VG Status resizable MAX LV 0 Cur LV 10 Open LV 9 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.27 TiB PE Size 4.00 MiB Total PE 1907074 Alloc PE / Size 1906176 / 7.27 TiB Free PE / Size 898 / 3.51 GiB VG UUID WZIDPF-5X39-1qac-L9oP-jCQm-C9im-pQBfs4 # 将新的 PV 加入 VolGroup 组卷，使用 vgdisplay 获取得到的 `VG Name` vgextend VolGroup /dev/sdc1 vgdisplay ## 查看当前逻辑磁盘的空间大小 lvdisplay ## 查看系统可用空间大小 vgdisplay 磁盘扩容 ## 查看文件路径对应的逻辑分卷 df Filesystem Size Used Avail Use% Mounted on /dev/mapper/VolGroup-LogVol07 689G 149G 506G 23% / tmpfs 79G 842M 78G 2% /dev/shm /dev/sda1 477M 184M 269M 41% /boot /dev/mapper/VolGroup-LogVol08 5.1T 3.4T 1.5T 71% /data /dev/mapper/VolGroup-LogVol06 1008G 610G 347G 64% /home /dev/mapper/VolGroup-LogVol01 59G 335M 56G 1% /opt /dev/mapper/VolGroup-LogVol02 59G 52M 56G 1% /private /dev/mapper/VolGroup-LogVol03 118G 1.1G 111G 1% /tmp /dev/mapper/VolGroup-LogVol04 355G 15G 322G 5% /usr /dev/mapper/VolGroup-LogVol05 217G 87G 119G 43% /var ## 查看系统可用空间大小 vgdisplay ## 开始进行磁盘扩展，增加 500G 到 /dev/mapper/VolGroup-LogVol08（也就是 /data） lvextend -L +500G /dev/mapper/VolGroup-LogVol08 xfs_growfs /dev/mapper/VolGroup-LogVol08 ## CentOS6 使用命令 resize2fs df -h 参考链接 linux新增大于2T硬盘，分区并挂载 Linux磁盘扩容后处理（parted） ","date":"2023-06-16","objectID":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:2:0","tags":["Linux","fdisk","llvm","parted","硬盘","磁盘","分区","扩展"],"title":"Linux: 新购硬盘扩容","uri":"/2023-06-16-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":[],"content":"vim 使用中文输入法，中文输入法，中文算法 ","date":"2023-06-09","objectID":"/2023-06-09-vim-%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/:0:0","tags":[],"title":"vim 使用中文输入法","uri":"/2023-06-09-vim-%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/"},{"categories":["tools"],"content":"coc.vim 配置，实现自动跳出补全功能。 注释掉：suggest.noselect 注释掉：suggest.autoTrigger // 不能设置 // \"suggest.noselect\": false, // \"suggest.autoTrigger\": false, // \"suggest.triggerAfterInsertEnter\": true { // Enable preselect feature on neovim, default: `true` \"suggest.enablePreselect\": true, // Add preview option to `completeopt`, default: `false` \"suggest.enablePreview\": true, // completion automatically select the first completed // 不能设置 // \"suggest.noselect\": false, // \"suggest.autoTrigger\": false, // \"suggest.triggerAfterInsertEnter\": true \"diagnostic.checkCurrentLine\": true, // min word for trigger preview \"suggest.minTriggerInputLength\": 1, // Target to show hover information, default is floating window when possible. \"coc.preferences.hoverTarget\": \"preview\", // Auto close preview window on cursor move., default: `true` \"coc.preferences.previewAutoClose\": true, // Coc.Prettier --------------------------------------------------------------- \"prettier.singleQuote\": true, \"prettier.trailingComma\": \"all\", \"prettier.bracketSpacing\": false, // Coc.Python ----------------------------------------------------------------- \"python.linting.pylintEnabled\": false, \"python.linting.enabled\": true, \"python.pythonPath\": \"/home/william/anaconda3/bin/python3\", \"pyright.inlayHints.variableTypes\": false, \"python.linting.flake8Enabled\": true, \"python.linting.flake8Args\": [ \"--max-line-length=120\", \"--ignore=E203,E221,E251,E266,E302,E305,E402,W503,F401,F403,F405\" ], // https://github.com/fannheyward/coc-pyright/blob/master/package.json \"python.analysis.diagnosticSeverityOverrides\": { \"reportWildcardImportFromLibrary\": \"none\", \"reportOptionalMemberAccess\": \"none\" } // coc.markdown \"markdownlint.config\": { \"default\": true, \"line_length\": false, \"no-inline-html\": { \"allowed_elements\": [\"pre\"] }, \"ul-indent\": { \"indent\": 4 } }, //coc.clangd \"clangd.path\": \"~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin/clangd\" } ","date":"2023-06-08","objectID":"/2023-06-08-coc-settings.json/:0:0","tags":["vim","coc.vim","coc","settings"],"title":"coc settings.json","uri":"/2023-06-08-coc-settings.json/"},{"categories":[],"content":" -w 1860 -h 2480 -dpi 300 -idpi -2 -m 0,0,0,0 -fc -y ","date":"2023-06-07","objectID":"/2023-06-07-kindle-scribe/:0:0","tags":[],"title":"kindle scribe","uri":"/2023-06-07-kindle-scribe/"},{"categories":["tools"],"content":"解锁「无限阅读」medium 新方式。 ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:0:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" bypass-paywalls-chrome这个目前还能用： bypass-paywalls-chrome ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:1:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" Medium unlimitedRef: git 网页 具体步骤很简单： 下载压缩包 解压 从 chrome 操作 Extension -\u003e Load unpacked -\u003e 选择文件目录 重新打开 chrome 即可无限阅读。 ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:2:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":" Remove Medium这是一款 Chrome 插件 Remove Medium.com Overlays ","date":"2023-06-05","objectID":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/:3:0","tags":["medium","unlimited","chrome"],"title":"medium 神器","uri":"/2023-06-05-medium-%E7%A5%9E%E5%99%A8/"},{"categories":["tools"],"content":"通过配置 tmux 与 vim 的组合键，可以使用一套统一的快捷键来操作二者。 ctrl-j ctrl-k ctrl-h ctrl-l prefix: ctrl-space \u003cprefix\u003e ctrl-l ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:0:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":" tmux 设置 ## vim ~/.tmux.conf ## 安装 vim-tmux-navigator: \u003cprefix\u003e-I set -g @plugin 'christoomey/vim-tmux-navigator' ## 设置 \u003cprefix\u003e #-- bindkeys --# # prefix key (Ctrl+Space) set -g prefix ^Space unbind ^b bind Space send-prefix ## 设置快捷键 ## vim-tmux ------------------------------------------------------------------ is_vim=\"ps -o state= -o comm= -t '#{pane_tty}' \\ | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?g?(view|n?vim?x?)(diff)?$'\" is_fzf=\"ps -o state= -o comm= -t '#{pane_tty}' \\ | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?fzf$'\" bind -n C-h run \"($is_vim \u0026\u0026 tmux send-keys C-h) || \\ tmux select-pane -L\" bind -n C-j run \"($is_vim \u0026\u0026 tmux send-keys C-j) || \\ ($is_fzf \u0026\u0026 tmux send-keys C-j) || \\ tmux select-pane -D\" bind -n C-k run \"($is_vim \u0026\u0026 tmux send-keys C-k) || \\ ($is_fzf \u0026\u0026 tmux send-keys C-k) || \\ tmux select-pane -U\" bind -n C-l run \"($is_vim \u0026\u0026 tmux send-keys C-l) || \\ tmux select-pane -R\" ## clear terminal Ctr-x bind-key -n C-x if-shell \"$is_vim\" \"send-keys C-l\" \"send-keys C-l\" ## clear terminal \u003cprefix\u003e Ctrl-l bind C-l send-keys 'C-l' bind-key -T copy-mode-vi 'C-h' select-pane -L bind-key -T copy-mode-vi 'C-j' select-pane -D bind-key -T copy-mode-vi 'C-k' select-pane -U bind-key -T copy-mode-vi 'C-l' select-pane -R bind-key -T copy-mode-vi 'C-\\' select-pane -l ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:1:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":" vim 设置 \" vim-tmux ------------------------------------------------------------------- Plug 'christoomey/vim-tmux-navigator' let g:tmux_navigator_no_mappings = 1 noremap \u003csilent\u003e \u003cc-h\u003e :\u003cC-U\u003eTmuxNavigateLeft\u003ccr\u003e noremap \u003csilent\u003e \u003cc-j\u003e :\u003cC-U\u003eTmuxNavigateDown\u003ccr\u003e noremap \u003csilent\u003e \u003cc-k\u003e :\u003cC-U\u003eTmuxNavigateUp\u003ccr\u003e noremap \u003csilent\u003e \u003cc-l\u003e :\u003cC-U\u003eTmuxNavigateRight\u003ccr\u003e ","date":"2023-05-28","objectID":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/:2:0","tags":["tmux","vim","ctrl"],"title":"tmux vim 搭配食用味道更佳","uri":"/2023-05-28-tmux-vim-%E6%90%AD%E9%85%8D%E9%A3%9F%E7%94%A8%E5%91%B3%E9%81%93%E6%9B%B4%E4%BD%B3/"},{"categories":["tools"],"content":"vim8 以上版本支持在当前编辑界面直接打开终端，以方便执行命令行操作。 ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:0:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":" 在 vim 中打开 terminal ## 默认位于上端 :term :below term ## 默认由于左端 :vertical term :vertical below term ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:1:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":" 更多设置 tb：terminal below tr：terminal right Ctrl-D：close terminal \" terminal ------------------------------------------------------------------- function! PutTermPanel(buf, side, size) abort \" new term if no buffer if a:buf == 0 term else execute \"sp\" bufname(a:buf) endif \" default side if wrong argument if stridx(\"hjklHJKL\", a:side) == -1 execute \"wincmd\" \"J\" else execute \"wincmd\" a:side endif \" horizontal split resize if stridx(\"jkJK\", a:side) \u003e= 0 if ! a:size \u003e 0 resize 6 else execute \"resize\" a:size endif return endif \" vertical split resize if stridx(\"hlHL\", a:side) \u003e= 0 if ! a:size \u003e 0 vertical resize 6 else execute \"vertical resize\" a:size endif endif endfunction function! s:ToggleTerminal(side, size) abort let tpbl=[] let closed = 0 let tpbl = tabpagebuflist() \" hide visible terminals for buf in filter(range(1, bufnr('$')), 'bufexists(bufname(v:val)) \u0026\u0026 index(tpbl, v:val)\u003e=0') if getbufvar(buf, '\u0026buftype') ==? 'terminal' silent execute bufwinnr(buf) . \"hide\" let closed += 1 endif endfor if closed \u003e 0 return endif \" open first hidden terminal for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) \u0026\u0026 index(tpbl, v:val)\u003c0') if getbufvar(buf, '\u0026buftype') ==? 'terminal' call PutTermPanel(buf, a:side, a:size) return endif endfor \" open new terminal call PutTermPanel(0, a:side, a:size) endfunction \" Toggle terminal - bottom nnoremap \u003csilent\u003e tb :call \u003cSID\u003eToggleTerminal('J', 10)\u003cCR\u003e \" Toggle terminal - right nnoremap \u003csilent\u003e tr :call \u003cSID\u003eToggleTerminal('L', 120)\u003cCR\u003e \" close terminal: Ctrl-D ","date":"2023-05-28","objectID":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/:2:0","tags":["vim","terminal"],"title":"vim terminal 功能","uri":"/2023-05-28-vim-terminal-%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":"最近在整合 tmux-vim 的开发环境，准备把之前的 prefix 从 ctrl-k 更改为 ctrl-i，结果发现无法完成命令行的自动补全功能。在网上查了一下，原来是因为系统把 ctrl-i 与 TAB 键都当做一个操作指令了，从而导致按下 TAB 的时候，实际上是执行 ctrl-i，如果多次敲击，则会产生两条指令：ctr-i ctri-i，这个恰好了显示 tmux 的 sidebar 功能，反而不是完成自动补全了。 具体的可以参考这个 StackOverflow 的回答，Tab issues with Vim while running Tmux: I haven’t really configured anything in tmux besides remapping C-b to C-i. set -g prefix C-i unbind C-b bind C-i send-prefix While Tab and the Control-i are usually distinguished in GUI environment, they generate the same character in tty-based environments like terminal emulators. That character is U+0009, which is the Tab control character. It is represented as the single byte 0x09 in ASCII, UTF-8 and many other encodings. All of the “C0 control codes” (ASCII 0-31) have keyboard equivalents that combine the Control key with another key (mostly letters, but also some symbols). The Tab control character is generated by Control-i. You can verify that (at least) tmux considers C-i and Tab to be the same by looking at the output of tmux show-options -g | grep prefix. You will see it has set your prefix to the key named Tab, even though you specified it as C-i in your configuration. You can also notice the same canonicalization in the output of tmux list-keys | grep prefix. You may want to pick a different prefix if you do not want to type Tab twice when you want to send one to programs running inside tmux. ","date":"2023-05-28","objectID":"/2023-05-28-tmux-tab-%E4%B8%8E-ctr-i-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%86%B2%E7%AA%81/:0:0","tags":["tmux","tab","prefix"],"title":"tmux tab 与 ctr i 快捷键冲突","uri":"/2023-05-28-tmux-tab-%E4%B8%8E-ctr-i-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%86%B2%E7%AA%81/"},{"categories":["tools"],"content":"为了支持 markdown 的相关功能 可以按照标题级别进行折叠 支持高亮代码块 文本自动补全功能 实时预览功能 ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:0:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" coc-markdownlint","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 添加插件，实现语法自动检查 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" Coc \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" extensions let g:coc_global_extensions = ['coc-tsserver', 'coc-json', 'coc-yaml', \\ 'coc-clangd', 'coc-pyright', 'coc-jedi', \\ 'coc-html', 'coc-css', 'coc-xml', \\ 'coc-emmet', 'coc-snippets', \\ 'coc-markdownlint', 'coc-highlight'] ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:1","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 自定义部分功能在 vim 执行命令 :CocConfig 跳出 coc-settings.json。具体的检查规则可以参考默认配置文件：coc-markdownlint/schemas/markdownlint-config-schema.json，找到这个规则 \"default\": true, \"properties\": { \"line_length\": { \"description\": \"Number of characters\", \"type\": \"integer\", \"minimum\": 1, \"default\": 80 }, 去掉段落长度的检查。通常我们写 markdown 不可能把每一行限制在 80 个字符串的长度，因此需要将改检查功能关闭。 // coc.markdown \"markdownlint.config\": { \"default\": true, \"line_length\": false, \"no-inline-html\": { \"allowed_elements\": [\"pre\"] }, \"ul-indent\": { \"indent\": 4 } }, ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:1:2","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 标题折叠按照标题不同的级别进行折叠，有助于更加清晰的把握文章的框架。这里我比较推荐 vim-minimd，可以实现 Space: Fold or unfold the current header. n-Space: Fold all headers of level n. Tab or ]h Jump to next header. Shift-Tab Jump to previous header. 具体的指令如下： nmap :MiniMDToggleFold nmap :MiniMDNext nmap :MiniMDPrev nmap ]h :MiniMDNext nmap [h :MiniMDPrev nnoremap = :MiniMDPromote nnoremap - :MiniMDDemote nmap :MiniMDTaskToggle vmap :MiniMDTaskToggle 同时，为了可以利用原来的 markdown 语法进行高亮，可以设置 let g:default_markdown_syntax = 1。这个需要配合插件 tpope/vim-markdown \" markdown -------------------------------------------------------------------- Plug 'godlygeek/tabular' \" 这个显示有点问题 \" Plug 'preservim/vim-markdown' \" 用这个可以高亮语法 Plug 'tpope/vim-markdown' let g:vim_markdown_folding_disabled=1 \" 这里面有部分是不支持的 \" let g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'handlebars', \" \\ 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php', \" \\ 'python', 'ruby', 'sass', 'xml', 'html', 'c++=cpp'] let g:markdown_fenced_languages = ['bash=sh', 'python', 'ruby', 'c++=cpp', \\ 'xml', 'html', 'css', 'ruby', 'r', 'vim', \\ 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php'] let g:vim_markdown_math = 1 let g:vim_markdown_toc_autofit = 1 let g:markdown_syntax_conceal = 1 \" 支持按照原来的 markdown 语法进行高亮 let g:default_markdown_syntax = 1 Plug 'shushcat/vim-minimd' \" Space Fold or unfold the current header. \" nSpace Fold all headers of level n. ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:2:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 自动补全通过识别 tmux 页面的文本，进行自动补全。 Plug 'prabirshrestha/async.vim' Plug 'prabirshrestha/asyncomplete.vim' Plug 'wellle/tmux-complete.vim' let g:tmuxcomplete#asyncomplete_source_options = { \\ 'name': 'tmuxcomplete', \\ 'whitelist': ['*'], \\ 'config': { \\ 'splitmode': 'words', \\ 'filter_prefix': 1, \\ 'show_incomplete': 1, \\ 'sort_candidates': 0, \\ 'scrollback': 0, \\ 'truncate': 0 \\ } \\ } let g:tmuxcomplete#trigger = 'omnifunc' imap \u003cc-space\u003e \u003cPlug\u003e(asyncomplete_force_refresh) inoremap \u003cexpr\u003e \u003cCR\u003e pumvisible() ? asyncomplete#close_popup() . \"\\\u003cCR\u003e\" : \"\\\u003cCR\u003e\" ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:3:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 更加专注的写作现在能真正静下心来、完整而严禁的写作时间，其实是非常珍贵的。一方面是由于外部的干扰因素太多，无法给以写作足够的空间和时间；另一方面，我们内心也变得浮躁，难以静心进行深度思考。 这时候，我们希望能在工具上，对这些干扰因素进行限制，期待能营造一个良好的写作氛围（希望如此）。 goyo 这个就是为了此目的而生的，可以让我们在写作时，只需要面对一个屏幕，不用在意周遭环境。 进入模式：\u003cLeader\u003egy 退出模式：\u003cLeader\u003egy Plug 'junegunn/limelight.vim' Plug 'junegunn/goyo.vim' function! s:goyo_enter() if executable('tmux') \u0026\u0026 strlen($TMUX) silent !tmux set status off silent !tmux list-panes -F '\\#F' | grep -q Z || tmux resize-pane -Z endif set noshowmode set noshowcmd set scrolloff=999 Limelight \" ... endfunction function! s:goyo_leave() if executable('tmux') \u0026\u0026 strlen($TMUX) silent !tmux set status on silent !tmux list-panes -F '\\#F' | grep -q Z \u0026\u0026 tmux resize-pane -Z endif set showmode set showcmd set scrolloff=5 Limelight! \" ... endfunction \" 进入goyo模式后自动触发limelight，退出则关闭 autocmd! User GoyoEnter nested call \u003cSID\u003egoyo_enter() \"进入goyo模式后自动触发limelight,退出后则关闭 autocmd! User GoyoLeave nested call \u003cSID\u003egoyo_leave() \"Goyo \" Color name (:help cterm-colors) or ANSI code let g:limelight_conceal_ctermfg = 'Gray' let g:limelight_conceal_ctermfg = 240 \" Color name (:help gui-colors) or RGB color let g:limelight_conceal_guifg = 'DarkGray' let g:limelight_conceal_guifg = '#777777' \" 包含的前后段的数量 let g:limelight_paragraph_span = 2 \" Set it to -1 not to overrule hlsearch let g:limelight_priority = -1 \" Goyo配置 let g:goyo_width = 80 let g:goyo_height = 90 let g:goyo_linenr = 0 \" limelight键盘映射 nmap \u003cLeader\u003egy :Goyo\u003cCR\u003e ","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:4:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" markdown-previewvim 支持对 markdown 文档执行实时的渲染，并通过浏览器打开。同时，在页面浏览器模式中，页面会随着当前光标自动随行移动，非常便捷。 安装插件 Plug 'iamcco/markdown-preview.nvim' 在 vim 执行命令 :PlugInstall :call mkdp#util#install() 设置 显示网页地址，可以在终端直接打开，这个有助于远程文本在本地打开： let g:mkdp_echo_preview_url = 1 设置网页地址，默认是本地地址：let g:mkdp_echo_preview_url = 1 设置访问端口，默认是随机，我们可以把端口固定下来，方便打开页面：let g:mkdp_port = '1111' 设置页面主题颜色，一般是黑色模式：let g:mkdp_theme = 'dark' 默认打开网页：let g:mkdp_browser = '/usr/bin/firefox' 使用 开启Mardown预览 :MarkdownPreview 关闭Mardown预览 :MarkdownPreviewStop \" example ------------------------- nmap \u003cLeader\u003emp \u003cPlug\u003eMarkdownPreview nmap \u003cLeader\u003ems \u003cPlug\u003eMarkdownPreviewStop nmap \u003cLeader\u003emt \u003cPlug\u003eMarkdownPreviewToggle `` \" markdown-preview Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app \u0026\u0026 yarn install' } \" set to 1, nvim will open the preview window after entering the markdown buffer \" default: 0 let g:mkdp_auto_start = 0 \" set to 1, the nvim will auto close current preview window when change \" from markdown buffer to another buffer \" default: 1 let g:mkdp_auto_close = 1 \" set to 1, the vim will refresh markdown when save the buffer or \" leave from insert mode, default 0 is auto refresh markdown as you edit or \" move the cursor \" default: 0 let g:mkdp_refresh_slow = 0 \" set to 1, the MarkdownPreview command can be use for all files, \" by default it can be use in markdown file \" default: 0 let g:mkdp_command_for_global = 0 \" set to 1, preview server available to others in your network \" by default, the server listens on localhost (127.0.0.1) \" default: 0 let g:mkdp_open_to_the_world = 1 \" use custom IP to open preview page \" useful when you work in remote vim and preview on local browser \" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9 \" default empty let g:mkdp_open_ip = '' \" specify browser to open preview page \" for path with space \" valid: `/path/with\\ space/xxx` \" invalid: `/path/with\\\\ space/xxx` \" default: '' let g:mkdp_browser = '/usr/bin/firefox' \" set to 1, echo preview page url in command line when open preview page \" default is 0 let g:mkdp_echo_preview_url = 1 \" a custom vim function name to open preview page \" this function will receive url as param \" default is empty let g:mkdp_browserfunc = '' function OpenMarkdownPreview (url) execute \"silent ! firefox --new-window \" . a:url endfunction let g:mkdp_browserfunc = 'OpenMarkdownPreview' \" options for markdown render \" mkit: markdown-it options for render \" katex: katex options for math \" uml: markdown-it-plantuml options \" maid: mermaid options \" disable_sync_scroll: if disable sync scroll, default 0 \" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle' \" middle: mean the cursor position alway show at the middle of the preview page \" top: mean the vim top viewport alway show at the top of the preview page \" relative: mean the cursor position alway show at the relative positon of the preview page \" hide_yaml_meta: if hide yaml metadata, default is 1 \" sequence_diagrams: js-sequence-diagrams options \" content_editable: if enable content editable for preview page, default: v:false \" disable_filename: if disable filename header for preview page, default: 0 let g:mkdp_preview_options = { \\ 'mkit': {}, \\ 'katex': {}, \\ 'uml': {}, \\ 'maid': {}, \\ 'disable_sync_scroll': 0, \\ 'sync_scroll_type': 'middle', \\ 'hide_yaml_meta': 1, \\ 'sequence_diagrams': {}, \\ 'flowchart_diagrams': {}, \\ 'content_editable': v:false, \\ 'disable_filename': 0, \\ 'toc': {} \\ } \" use a custom markdown style must be absolute path \" like '/Users/username/markdown.css' or expand('~/markdown.css') let g:mkdp_markdown_css = '' \" use a custom highlight style must absolute path \" like '/Users/username/highlight.css' or expand('~/highlight.css') let g:mkdp_highlight_css = '' \" use a custom port to start server or empty for random let g:mkdp_port = '1111' \" preview page title \" ${name} will be replace with the file name let g:mkdp_page_title = '「${name}」' \" recognized filetypes \" these filetypes will have MarkdownPr","date":"2023-05-28","objectID":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/:5:0","tags":["vim","markdown","highlight","python","R","c++","cpp"],"title":"vim markdown 配置","uri":"/2023-05-28-vim-markdown-%E9%85%8D%E7%BD%AE/"},{"categories":["toolsj"],"content":"通过 Ctrl-f 查找并以 vim 打开目标文件 ## 在 ~/.zshrc ## fzf : Ctr-f ------------------------------------------------- # .zshrc example function __fsel_files() { setopt localoptions pipefail no_aliases 2\u003e /dev/null eval find ./ -type f -print | fzf -m \"$@\" | while read item; do echo -n \"${(q)item} \" done local ret=$? echo return $ret } function fzf-vim { selected=$(__fsel_files) if [[ -z \"$selected\" ]]; then zle redisplay return 0 fi zle push-line # Clear buffer BUFFER=\"vim $selected\"; zle accept-line } zle -N fzf-vim bindkey \"^f\" fzf-vim ","date":"2023-05-27","objectID":"/2023-05-27-vim-fzf-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/:0:0","tags":["vim","fzf","zsh"],"title":"vim fzf 打开文件","uri":"/2023-05-27-vim-fzf-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"由于公司有一台机器R7的系统版本较低，只有glibc-2.17，而且无法升级（为了兼容的问题）。为了可以让 coc.vim 可以使用 clangd 进行代码补全，需要找对与这个版本 glibc-2.17 相对应的 clangd。 CentOS7 与 Ubuntu16.04 使用这个版本 clang++llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04 ## https://github.com/llvm/llvm-project/releases/tag/llvmorg-13.0.0 wget https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz ","date":"2023-05-27","objectID":"/2023-05-27-glibc-2.17-%E4%B8%8E-clangd/:0:0","tags":["glibc","clangd","clang","llvm","ubuntu-16.04"],"title":"glibc 2.17 与 clangd","uri":"/2023-05-27-glibc-2.17-%E4%B8%8E-clangd/"},{"categories":["tools"],"content":"遇到一个奇怪的现象，对于 vim 9 的配色方案 color-scheme，我在普通的终端是可以显示主题配置。但是一旦通过 tmux 启动，则会失效。查找原因，发现是 tmux 没有使用配置方案，导致这个问题出现。 修改 ~/.tmux.conf set -g default-terminal \"xterm-256color\" 同时，还是无法显示，这需要使用参数 tmux -2 ## 或者可以写一个 alias alias tnew='tmux -2 -u new -s' 这个命令的作用在于 -2 Force tmux to assume the terminal supports 256 colours. This is equivalent to -T 256. 我写了一个小脚本 rsyncx.to.colo.sh #!/bin/bash if [ $# != 1 ] then echo \"usage: rsyncx.to.colo.sh \u003ccololid\u003e\" exit 1 fi ## ----------------------- colo=$1 echo \"sending to $colo\" ## ----------------------- rsync -Parzvl ./.vim $colo:~/ rsync -Parzvl ./vim9 $colo:~/ ## tmux 会引发 vim color scheme 错误 ## https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode ssh $colo \"egrep '.*default-terminal.*xterm-256color.*' ~/.tmux.conf || echo -e 'set -g default-terminal \\\"xterm-256color\\\"' \u003e\u003e ~/.tmux.conf\" ","date":"2023-05-27","objectID":"/2023-05-27-tmux-%E5%AF%BC%E8%87%B4-vim-color-scheme-%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["tmux","vim","color","terminal"],"title":"tmux 导致 vim color scheme 无法显示的问题","uri":"/2023-05-27-tmux-%E5%AF%BC%E8%87%B4-vim-color-scheme-%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":"在配置 vim9 的时候，发现无法同步带有 https 的项目，这时候需要配置 git config --global http.sslverify false ","date":"2023-05-27","objectID":"/2023-05-27-git-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-https-%E7%9A%84%E8%A7%A3%E5%86%B3/:0:0","tags":["git","https"],"title":"git 无法连接 https 的解决","uri":"/2023-05-27-git-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-https-%E7%9A%84%E8%A7%A3%E5%86%B3/"},{"categories":["tools"],"content":"安装 vim9，并使用 coc.vim 实现代码补全。我把常用的一些插件也放在这里，方便大家参考。 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:0:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装注意事项安装 vim9 遇到了一些坑，这里先说一下： 不一定需要最新版本的 python3。我原来为了安装最新版本的 python3.11，而去升级 glibc-2.28 以上版本。但是呢，其实这个系统(Centos7.6)内核只支持到 glibc-2.18，升级到这个版本以上的话，会导致其他的可执行程序出现问题，比如 ls: relocation error: /home/ops/vim9/local/lib/libc.so.6: symbol __tunable_get_val, version glibc_private not defined in file ld-linux-x86-64.so.2 with link time reference 这是因为系统与 glibc 有非常严格的版本关系，在不同的 glibc 版本编译出来的可执行，往往内存空间是不一样的。严重的时候，甚至会引起 segment fault 的错误。这篇 Stack OverFlow 的问答真是解释了这个问题，并且极力不推荐随意升级 glibc，尤其是系统层面的环境路径：safely upgrade glibc on CentOS 7 上面说道不需要最新版本的 python3，那目前我尝试过可用的版本，可以是 python3.9.0 另外，在编译 python 的时候，一定要加上命令 export LDFLAGS=-rdynamic 同时，我们也不要更新太高版本的 nodejs，这个同样要求我们升级 glibc，目前可以的版本是 node-v16.20.0 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:1:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装过程下面开始介绍安装 vim9 的完整过程，我默认把 vim 安装到 home 下面的 vim9 文件夹。使用的时候，通过指定可执行的路径。 export VIM9_PATH=$HOME/vim9 mkdir -p ${VIM9_PATH}/local/{bin,lib} mkdir -p $HOME/tmp ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 openssl这个主要是为了给 python 使用 cd $HOME/tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=${VIM9_PATH}/local/openssl --openssldir=${VIM9_PATH}/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make -j \u0026\u0026 make install \\ rm -rf $HOME/tmp/openssl* ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:1","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 python3.9 export PYTHON_VERSION=3.9.0 cd $HOME/tmp \u0026\u0026 \\ wget --no-check-certificate https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ tar -xvf Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ cd Python-${PYTHON_VERSION} \u0026\u0026 \\ export LDFLAGS=-rdynamic \u0026\u0026 \\ CFLAGS=\"-I${VIM9_PATH}/local/openssl/include\" LDFLAGS=\"-L${VIM9_PATH}/local/openssl/lib64\" \\ ./configure \\ --enable-shared \\ --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=${VIM9_PATH}/local \\ --with-openssl=${VIM9_PATH}/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:2","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 lua cd $HOME/tmp \u0026\u0026 wget --no-check-certificate http://www.lua.org/ftp/lua-5.4.4.tar.gz \u0026\u0026 \\ tar -xvf lua-5.4.4.tar.gz \u0026\u0026 \\ cd lua-5.4.4 \u0026\u0026 \\ sed -i 's|^INSTALL_TOP=.*|INSTALL_TOP= ${VIM9_PATH}/local|g' Makefile \u0026\u0026 \\ make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:3","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 perl这个我暂时不需要，就没安装了 wget http://www.cpan.org/src/5.0/perl-5.14.2.tar.gz \u0026\u0026 \\ tar -xzf perl-5.14.2.tar.gz \u0026\u0026 \\ cd perl-5.14.2 # -d: default # -e: escapte question ./Configure –des -Dprefix=/home/william/vim9/local make #make test make install ## 如果 vim 需要 perl 支持 ## 则添加这个选项 --enable-perlinterp=$HOME/vim9/local/bin/perl ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:4","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 vim cd /tmp \u0026\u0026 \\ git clone https://github.com/vim/vim.git \u0026\u0026 \\ cd vim \u0026\u0026 \\ git pull origin master \u0026\u0026 \\ make clean distclean export VIM9_PATH=$HOME/vim9 export LD_LIBRARY_PATH=${VIM9_PATH}/local/lib:$LD_LIBRARY_PATH export PATH=$HOME/vim9/local/bin:${VIM9_PATH}/local/bin:${VIM9_PATH}/local/node-v16.20.0-linux-x64/bin:$PATH ./configure --prefix=$HOME/vim9/local \\ --with-features=huge \\ --enable-multibyte \\ --enable-python3interp=yes \\ --with-python3-command=$HOME/vim9/local/bin/python3 \\ --with-python3-config-dir=$($HOME/vim9/local/bin/python3-config --configdir) \\ --enable-luainterp=yes \\ --with-lua-prefix=$HOME/vim9/local \\ --enable-cscope \\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"william\" \\ --enable-fail-if-missing ## --enable-perlinterp=/home/ops/vim9/local/bin/perl make -j \u0026\u0026 make install ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:5","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 nodejs由于 coc.vim 需要 nodejs 支持 cd $HOME/vim9/local ## 直接下载二进制，可以省掉安装步骤（还挺费时间的） cd /tmp wget https://nodejs.org/dist/latest-v16.x/node-v16.20.0-linux-x64.tar.gz tar -xvf node-v16.20.0-linux-x64.tar.gz cp -r node-v16.20.0-linux-x64 $HOME/vim9/local export VIM9_PATH=$HOME/vim9 export LD_LIBRARY_PATH=${VIM9_PATH}/local/lib:$LD_LIBRARY_PATH export PATH=$HOME/vim9/local/bin:${VIM9_PATH}/local/bin:${VIM9_PATH}/local/node-v16.20.0-linux-x64/bin:$PATH ## 安装 yarn npm install -g yarn ## 如果 coc.vim 是离线安装，则可以执行 ## ~/.vim/plugged/coc.nvim/是我的coc.nvim插件的安装目录 cd ~/.vim/plugged/coc.nvim/ yarn install yarn build ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:2:6","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 配置 vim","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" alias #alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH vim -u $HOME/.vimrc.coc' #alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc' alias vim='LD_LIBRARY_PATH=$HOME/vim9/local/lib:$LD_LIBRARY_PATH PATH=$HOME/vim9/local/bin:$HOME/vim9/local/node-v16.20.0-linux-x64/bin:$PATH $HOME/vim9/local/bin/vim -u $HOME/vim9/.vimrc' 注意，对于新安装的 vim，需要退出当前 ssh 连接后，重新登录才可以生效。 ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:1","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 解决 tmux 配色无效生效的冲突 ## tmux 会引发 vim color scheme 错误 ## https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode egrep '.*default-terminal.*xterm-256color.*' ~/.tmux.conf || echo -e 'set -g default-terminal \\\"xterm-256color\\\"' \u003e\u003e ~/.tmux.conf 同时，还是无法显示，这需要使用参数 tmux -2 ## 或者可以写一个 alias alias tnew='tmux -2 -u new -s' ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:2","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" 安装 vim.plugin curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:3","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" coc.vim coc.vim 只是提供一个调用接口，所有的代码补全与检查功能都是由 lsp 提供。而为了能够处理 cpp 文件，我们一定要确保在 coc-settings.json 里面配置的 clangd 能够正确运行，否则运行命令 : CocCommand clangd.install 会报错：coc client failed to connected ## 务必确保 clangd 的服务端是可以正常启动的 ## 如果有报错，需要找到对应版本的 clangd 二进制 ## 然后在 `coc-settings.json` 进行设置 pwd /home/william/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin ./clangd clangd is a language server that provides IDE-like features to editors. It should be used via an editor plugin rather than invoked directly. For more information, see: https://clangd.llvm.org/ https://microsoft.github.io/language-server-protocol/ clangd accepts flags on the commandline, and in the CLANGD_FLAGS environment variable. I[17:56:41.885] clangd version 16.0.2 (https://github.com/llvm/llvm-project 18ddebe1a1a9bde349441631365f0472e9693520) I[17:56:41.885] Features: linux+grpc I[17:56:41.885] PID: 17226 I[17:56:41.885] Working directory: /home/william/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin I[17:56:41.885] argv[0]: ./clangd I[17:56:41.885] Starting LSP over stdin/stdout 如果报错没有找到 clangd ，则需要我们自己安装。这个命令需要打开一个test.cpp文件再执行: CocCommand clangd.install 具体的配置可以通过帮助命令 :h g:coc_data_home 来获取，比如在 .vimrc 设置 存放 coc 配置路径coc-settings.json：let g:coc_config_home=~/.vim 存放 coc 插件路径coc-clang等：let g:coc_data_home=~/.config/coc g:coc_config_home *g:coc_config_home* Configure the directory which will be used to look for user's `coc-settings.json`, default: Windows: `~/AppData/Local/nvim` Other: `~/.config/nvim` g:coc_data_home *g:coc_data_home* Configure the directory which will be used to for data files(extensions, MRU and so on), default: Windows: `~/AppData/Local/coc` Other: `~/.config/coc` 打开命令 :CocConfig 进行配置 { // Enable preselect feature on neovim, default: `true` \"suggest.enablePreselect\": true, // Add preview option to `completeopt`, default: `false` \"suggest.enablePreview\": true, // completion automatically select the first completed \"suggest.noselect\": false, // \"suggest.triggerAfterInsertEnter\": true \"diagnostic.checkCurrentLine\": true, // min word for trigger preview \"suggest.minTriggerInputLength\": 1, // Target to show hover information, default is floating window when possible. \"coc.preferences.hoverTarget\": \"preview\", // Auto close preview window on cursor move., default: `true` \"coc.preferences.previewAutoClose\": true, // Coc.Prettier --------------------------------------------------------------- \"prettier.singleQuote\": true, \"prettier.trailingComma\": \"all\", \"prettier.bracketSpacing\": false, // Coc.Python ----------------------------------------------------------------- \"python.linting.pylintEnabled\": false, \"python.linting.flake8Enabled\": true, \"python.linting.enabled\": true, \"python.pythonPath\": \"/home/william/anaconda3/bin/python3\", \"pyright.inlayHints.variableTypes\": false, \"clangd.path\": \"~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin/clangd\" } ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:4","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" zsh-vim-fzf 搜索并打开目标文件在 zsh 使用 fzf 搜索目标文件，并调用 vim 打开。我设置的快捷键为 Ctrl-f ## vim ~/.zshrc ## fzf : Ctr-f ------------------------------------------------- # .zshrc example function __fsel_files() { setopt localoptions pipefail no_aliases 2\u003e /dev/null eval find ./ -type f -print | fzf --reverse -m \"$@\" | while read item; do echo -n \"${(q)item} \" done local ret=$? echo return $ret } function fzf-vim { selected=$(__fsel_files) if [[ -z \"$selected\" ]]; then zle redisplay return 0 fi zle push-line # Clear buffer BUFFER=\"vim $selected\"; zle accept-line } zle -N fzf-vim bindkey \"^f\" fzf-vim ","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:3:5","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":" .vimrc set nocompatible \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" noremap \u003cF2\u003e :Autoformat\u003cCR\u003e nnoremap \u003csilent\u003e\u003cF3\u003e :call \u003cSID\u003eToggleColorColumn()\u003ccr\u003e \" Show Column nmap \u003cF4\u003e :ALEDetail\u003cCR\u003e \" ALE detail info nmap \u003csilent\u003e\u003cF5\u003e :NERDTreeToggle\u003cCR\u003e \" Nerd nmap \u003csilent\u003e\u003cF8\u003e :TagbarToggle\u003cCR\u003e \" Tagbar nnoremap \u003csilent\u003e\u003cF9\u003e :call asyncrun#quickfix_toggle(5)\u003ccr\u003e\" Show build window \" nnoremap \u003csilent\u003e\u003cF10\u003e :AsyncRun -cwd=\u003croot\u003e cd `pwd`/build \u0026\u0026 bash ../kickstart.sh \u003ccr\u003e nnoremap \u003csilent\u003e\u003cF10\u003e :AsyncRun -cwd=\u003croot\u003e cd `pwd`/build \u0026\u0026 bash ../kickstart.sh \u0026\u0026 make install \u003ccr\u003e map \u003cF12\u003e :%s/\\t/ /g\u003cCR\u003e \" imap tt \u003cEsc\u003e \" ff to exit insert mode \" 定义快捷键的前缀，即\u003cLeader\u003e let mapleader=\";\" let maplocalleader=\";\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\" Plug \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" call plug#begin() \" Code completion ------------------------------------------------------------- Plug 'neoclide/coc.nvim', {'branch': 'release'} \" Color Theme ----------------------------------------------------------------- Plug 'sainnhe/everforest' Plug 'frazrepo/vim-rainbow' Plug 'mechatroner/rainbow_csv' let g:disable_rainbow_hover = 1 let g:rainbow_comment_prefix = '#' \" Status Bar ------------------------------------------------------------------ Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' \"\" Adding extras. \"\" Uncomment the following line If you have installed the powerline fonts. \"\" It is good for airline layer. let g:airline_powerline_fonts = 1 let g:airline_theme='everforest' \" AIRLINE SETTINGS let g:airline#extensions#tabline#show_close_button = 0 \"\" AIRLINE SETTINGS let g:airline#extensions#tabline#show_close_button = 0 \" let g:airline#extensions#tabline#buffer_nr_show = 1 \" 不要显示 index let g:airline#extensions#tabline#buffer_idx_mode = 1 nmap \u003cleader\u003e1 \u003cPlug\u003eAirlineSelectTab1 nmap \u003cleader\u003e2 \u003cPlug\u003eAirlineSelectTab2 nmap \u003cleader\u003e3 \u003cPlug\u003eAirlineSelectTab3 nmap \u003cleader\u003e4 \u003cPlug\u003eAirlineSelectTab4 nmap \u003cleader\u003e5 \u003cPlug\u003eAirlineSelectTab5 nmap \u003cleader\u003e6 \u003cPlug\u003eAirlineSelectTab6 nmap \u003cleader\u003e7 \u003cPlug\u003eAirlineSelectTab7 nmap \u003cleader\u003e8 \u003cPlug\u003eAirlineSelectTab8 nmap \u003cleader\u003e9 \u003cPlug\u003eAirlineSelectTab9 \" let g:airline_skip_empty_sections = 1 let g:airline_skip_empty_sections = 1 let g:airline#extensions#tabline#fnamemod = ':t' \"\"let g:airline#extensions#syntastic#enabled = 0 let g:airline_detect_iminsert=1 let g:airline#extensions#tmuxline#enabled = 0 let g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#tabline#show_tabs = 1 let g:airline#extensions#tabline#show_buffers = 1 let g:airline#extensions#tabline#show_tab_nr = 0 let g:airline#extensions#tabline#tab_nr_type = 1 \" tab number let g:airline#extensions#tabline#show_splits = 0 let g:airline#extensions#wordcount#enabled = 0 \"let g:airline_theme='base16' \" let g:airline_powerline_fonts = 1 let g:airline#extensions#tagbar#enabled = 1 \" END AIRLINE SETTINGS let g:airline#extensions#tabline#show_tabs = 0 \" Nerd Tree-------------------------------------------------------------------- Plug 'scrooloose/nerdtree' Plug 'preservim/nerdcommenter' \" nerdtree 从当前文件目录打开 autocmd BufEnter * lcd %:p:h \"如果想打开vim时自动打开NERDTree，可以如下设定 \" autocmd vimenter * NERDTree \" 显示行号 let NERDTreeShowLineNumbers=1 let NERDTreeAutoCenter=1 \" 是否显示隐藏文件 \" 在终端启动vim时，共享NERDTree let g:nerdtree_tabs_open_on_console_startup=1 \" 忽略以下文件的显示 let NERDTreeIgnore=['\\.pyc','\\~$','\\.swp'] \" 显示书签列表 let NERDTreeShowBookmarks=1 \"NERDTree配置 let NERDChristmasTree=1 \"显示增强 let NERDTreeAutoCenter=1 \"自动调整焦点 let NERDTreeShowFiles=1 \"显示文件 let NERDTreeShowLineNumbers=1 \"显示行号 let NERDTreeHightCursorline=1 \"高亮当前文件 let NERDTreeShowHidden=1 \"显示隐藏文件 let NERDTreeMinimalUI=0 \"不显示'Bookmarks' label 'Press ? for help' let NERDTreeWinSize=30 \"窗口宽度 \" let NERDTreeQuitOnOpen = 1 let NERDTreeMinimalUI = 1 let NERDTreeDirArrows = 1 set autochdir let N","date":"2023-05-26","objectID":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/:4:0","tags":["vim","vim9","coc.vim","gcc","python","IDE"],"title":"vim9 安装与配置coc.vim","uri":"/2023-05-26-vim9-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEcoc.vim/"},{"categories":["tools"],"content":"移动 tmux-window ## 使用 Shift-\u003e 或者 Shift\u003c- 移动 ## tmux2 bind-key -n S-Left swap-window -t -1 bind-key -n S-Right swap-window -t +1 ## tmux3 bind-key -n S-Left swap-window -t -1\\; select-window -t -1 bind-key -n S-Right swap-window -t +1\\; select-window -t +1 ","date":"2023-05-24","objectID":"/2023-05-24-tmux-%E7%A7%BB%E5%8A%A8-window/:0:0","tags":["terminal","tmux","window","panel"],"title":"tmux 移动 window","uri":"/2023-05-24-tmux-%E7%A7%BB%E5%8A%A8-window/"},{"categories":["tools"],"content":"注册回调函数，一旦 DAG 触发相关条件，会执行该回调函数 ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:0:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" 支持 DAG 与 Operator可以在 DAG 或者 单独一个 Operator(Task) 里面定义回调，入参使用为 on_failure_callback=[callback_func_1, callback_func_2] ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:1:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" Callback TypesThere are five types of task events that can trigger a callback: Name Description on_success_callback Invoked when the task succeeds on_failure_callback Invoked when the task fails sla_miss_callback Invoked when a task misses its defined SLA on_retry_callback Invoked when the task is up for retry on_execute_callback Invoked right before the task begins executing. 同时，在 airflow2.6.0 以上版本，还可以支持多个回调函数，将其放入一个 list 即可 As of Airflow 2.6.0, callbacks now supports a list of callback functions, allowing users to specify multiple functions to be executed in the desired event. Simply pass a list of callback functions to the callback args when defining your DAG/task callbacks: e.g on_failure_callback=[callback_func_1, callback_func_2] from docker.types import Mount from airflow import DAG from airflow.utils.dates import days_ago from airflow.decorators import task from airflow.operators.bash import BashOperator from airflow.operators.python import PythonOperator from airflow.providers.docker.operators.docker import DockerOperator from wepy.utils.init import * import pendulum local_tz = pendulum.timezone(\"Asia/Shanghai\") DEFAULT_ARGS = { 'owner' : 'william', 'email' : 'xxx@xxx.com', 'email_on_failure' : False, 'email_on_retry' : False, 'depends_on_past' : False, 'retries' : 3, 'retry_delay' : timedelta(minutes=1) } def dag_failure_alert(context): msg = f\"\"\"DAG has failed, --------------------- {context} --------------------- {context.get('dag')=} {context.get('dag_run')=} --------------------- {context.get('task')=} {context.get('task_instance')=} \"\"\" log.err(msg) wx_test.send(msg, 'error') def task_failure_alert(context): msg = f\"\"\"Task has failed, task_instance_key_str: {context['task_instance_key_str']} \"\"\" log.err(msg) wx_test.send(msg, 'error') def checking(): if not cal.is_today_trading(): raise Exception(\"Not TradingDay.\") with DAG( dag_id = \"hello\", default_args = DEFAULT_ARGS, schedule = \"*/1 * * *\", start_date = datetime(2023, 1, 1, tzinfo=local_tz), catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['hello'], on_failure_callback = [dag_failure_alert], ) as dag: checking = PythonOperator( task_id = 'checking', python_callable = checking, dag = dag, on_failure_callback = [task_failure_alert], ) checking ","date":"2023-05-20","objectID":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/:2:0","tags":["ariflow","dag","callback","failure"],"title":"airflow on_failure_callback回调函数","uri":"/2023-05-20-airflow-on_failure_callback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"},{"categories":["tools"],"content":" 正确做法","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:0:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" colo cd ~ mkdir tbt2snap.recover cd tbt2snap.recover git init --bare ./tbt2snap.recover.git ## bare 仓库不保存具体内容，需要我们通过设置 post-receive 来同步远程仓库内容 ## 通过这个控制从 master pull 到哪个目录 ./tbt2snap.recover.git cd hooks touch post-receive chmod +x post-receive vim post-receive #/bin/bash GIT_WORK_TREE=/home/ops/tbt2snap.recover git checkout -f master tree -L 2 . ├── clear.sh ├── README.md ├── release.sh ├── tbt2snap.recover.git │ ├── branches │ ├── config │ ├── description │ ├── HEAD │ ├── hooks │ ├── index │ ├── info │ ├── logs │ ├── objects │ └── refs └── template ├── colo.conf ├── hub.conf ├── hub.csv ├── run.hub.sh ├── run.t2s2.sh ├── run.term.sh ├── t2s2.conf └── terms.csv 8 directories, 15 files ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:1:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" local ## git 作为下一层仓库，通过 post-receive 控制同步内容 git remote add colo116 ssh://ops@192.168.1.177:61116/home/ops/tbt2snap.recover/tbt2snap.recover.git git push colo116 ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:2:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" remote mkdir tools.git cd tools.git ls -alh git init --bare cd hooks touch post-receive chmod +x post-receive vim post-receive #/bin/bash GIT_WORK_TREE=./ git checkout -f master #while read oldrev newrev ref #do # branch=´echo $ref | cut -d/ -f3´ # GIT_WORK_TREE=../ git checkout -f $branch #done ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:3:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" local git clone git@192.168.1.171:lfang/tools.git cd tools vim readme.md git add readme.md git commit -m 'add readme' git remote add colo110 ssh://192.168.1.177:61110/home/ops/tmp/tools.git git push ssh://ops@192.168.1.177:61110/home/ops/tmp/tools.git ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:4:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" remote这样，我们在 remote 机器即可看到变动 git log commit 7bf73f38fad70da7116842ee73dc4f02cc44c932 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Fri May 19 15:25:34 2023 +0800 add readme ","date":"2023-05-19","objectID":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/:5:0","tags":["git","bare","ssh"],"title":"git bare 项目","uri":"/2023-05-19-git-bare-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":"修改 airflow 默认的时区 ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:0:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":" 修改 airflow.cfg 配置 sed -i \"s|^default_timezone = .*|default_timezone = Asia/Shanghai|g\" airflow.cfg sed -i \"s|^default_ui_timezone = .*|default_ui_timezone = Asia/Shanghai|g\" airflow.cfg ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:1:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":" 在 DAG 设定时区 from docker.types import Mount from airflow import DAG from airflow.utils.dates import days_ago from airflow.decorators import task from airflow.operators.bash import BashOperator from airflow.operators.python import PythonOperator from airflow.providers.docker.operators.docker import DockerOperator from wepy.utils.init import * import pendulum local_tz = pendulum.timezone(\"Asia/Shanghai\") ## 设置时区 DEFAULT_ARGS = { 'owner' : 'william', 'email' : 'lfang@wuyacapital.com', 'email_on_failure' : False, 'email_on_retry' : False, 'retries' : 3, 'retry_delay' : timedelta(minutes=1) } with DAG( dag_id = \"pretrading.all.csv\", default_args = DEFAULT_ARGS, schedule = \"35 08,20 * * 1-5\", start_date = datetime(2023, 1, 1, tzinfo=local_tz), ## 指定时区 catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['pretrading', 'all.csv'], ) as dag: ","date":"2023-05-19","objectID":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/:2:0","tags":["airflow","cronjob","timezone","schedule","时区","shanghai"],"title":"airflow cronjob timezone 设置","uri":"/2023-05-19-airflow-cronjob-timezone-%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"airflow 允许为一个相同的 DAG 配置多个 schedule from airflow.datasets import Dataset with DAG( dag_id = \"pretrading.all.csv\", default_args = DEFAULT_ARGS, # schedule = \"35 08 * * 1-5\", schedule = [Dataset(\"*/5 * * * 1-5\"), Dataset(\"9 18 * * 1-5\")], start_date = datetime(2023, 1, 1), catchup = False, dagrun_timeout = timedelta(seconds=60*3), tags = ['pretrading', 'all.csv'], ) as dag: ","date":"2023-05-18","objectID":"/2023-05-18-airflow-dag-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAschedule/:0:0","tags":["airflow","schedule","Dataset","多个"],"title":"airflow DAG 配置多个schedule","uri":"/2023-05-18-airflow-dag-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAschedule/"},{"categories":["tools"],"content":" airflow-in-docker 千万不能用 previlleged ，这个会导致无法 mount /var/run/docker.socket ## root 执行 ## 不能用 previlleged，·普通用户也可以 docker run -dit \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/bin/docker:/bin/docker \\ --name=airflow \\ --pull=always \\ -p 18080:8080 \\ 10.32.111.107:5000/airflow:v1.0 如果是 dockerfile （本质上是普通用户，所以不用 root）不用完 previlleged version: \"3\" services: airflow: container_name: airflow image: 10.32.111.107:5000/airflow:v1.0 ## 不能用 previlleged，·普通用户也可以, 为了 /var/run/docker.socket privileged: false tty: true volumes: - ~:/mnt - /var/run/docker.sock:/var/run/docker.sock ## docker-in-docker - /usr/bin/docker:/bin/docker ## docker 可执行，如果有 so 也需要 mount - /mnt/cephfs:/root/cephfs ## 可以在 docker-in-docker 使用 cephs - ~/git/jobs/dags:/app/dags ## for dags # - ~/mysql:/var/lib/mysql ## for mysql ports: - \"18080:8080\" ## web command: - /bin/bash - -c - | /usr/sbin/init pull_policy: always restart: always ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:1:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":" DAG 使用 DockerOperator注意，在 airflow 处于 docker-in-docker 的情况下，这时候我们需要特殊处理 DockerOperator docker_url: \"unix://var/run/docker.sock\" network_mode: host，应该为 outside 的 host 网络 mounts: 这个最重要，决定了 docker-in-docker 能够有读取相关路径的权限，需要注意的是，这时候我们需要把 dockeroperator 理解成在 host 机器运行，所以的路径对应的是 host 的路径 from docker.types import Mount qry_ctp = DockerOperator( task_id = 'docker_qry_ctp', docker_url = \"unix://var/run/docker.sock\", image = '10.32.111.107:5000/tradingops/myctp.sx1:stable', container_name = 'task___qry_ctp', api_version = 'auto', auto_remove = 'success', ## 'success', 'force', 'never' network_mode = \"host\", command = \"\", mounts = [ Mount( source='/mnt/cephfs', ## 这个是 host 的路径 target='/root/cephfs', ## 这个是 Docker-in-Docker 的路径 type='bind' ), ], mount_tmp_dir = False, ) 当然，如果有 commnad，我们可以使用 单个命令，直接 comnand 多个命令，使用 /bin/bash -c '\u003ccommand1\u003e \u003ccommand2\u003e' rsync_tora = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo114:/home/ops/tora.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromTORA \"\"\" rysnc_xele_sh = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo109:/home/ops/xeleq.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromXELEQ/SH \"\"\" rysnc_xele_sz = \"\"\" rsync --progress -avPzr --exclude='*'.log \\ Colo110:/home/ops/xeleq.qry/log'*' \\ /root/cephfs/ops/data/PublicInfo/Daily/PreTrading/InfoFromXELEQ/SZ \"\"\" rsync_info = DockerOperator( task_id = 'docker_rsync_info', docker_url = \"unix://var/run/docker.sock\", image = '10.32.111.107:5000/r7:v1.0', container_name = 'task_rsync_info', api_version = 'auto', auto_remove = 'success', ## 'success', 'force', 'never' network_mode = \"host\", mount_tmp_dir = False, mounts = [ Mount( source='/mnt/cephfs', ## 这个是 host 的路径 target='/root/cephfs', ## 这个是 Docker-in-Docker 的路径 type='bind' ), ], command = f\"\"\" /bin/bash -c ' {rsync_tora} {rysnc_xele_sh} {rysnc_xele_sz} ' \"\"\" ) ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:2:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":" DAG 使用 BashOperator如果使用 BashOperator，这相对简单，直接调用 docker run 即可 qry_ctp = BashOperator( task_id = 'docker_qry_ctp', bash_command = \"\"\" docker run --pull=always --privileged=true \\ --name=myctp.sx1 --rm=true \\ 10.32.111.107:5000/tradingops/myctp.sx1:stable \"\"\" ) ","date":"2023-05-17","objectID":"/2023-05-17-docker-in-docker/:3:0","tags":["docker"],"title":"docker in docker","uri":"/2023-05-17-docker-in-docker/"},{"categories":["tools"],"content":"处理 matplotlib 中文字体无法显示的问题 ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:0:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" 下载需要的字体 ## 先下载字体 git clone https://github.com/dolbydu/font.git ## 支持中文字体的在 unicode cd unicode tree -L 1 . ├── Adobe Fangsong Std.otf ├── Adobe Heiti Std.otf ├── Adobe Kaiti Std.otf ├── Adobe Song Std.otf ├── FangSong.ttf ├── FZYingBiXingShu-S16S.ttf ├── FZYingBiXingShu-S16T.ttf ├── Kaiti.ttf ├── Lisu.TTF ├── Microsoft Yahei Bold.ttf ├── Microsoft Yahei.ttf ├── SimHei.ttf ├── SimSun.ttc ├── STCaiyun.TTF ├── STFangsong.TTF ├── STHupo.TTF ├── STKaiti.TTF ├── STLiti.TTF ├── STSong.TTF ├── STXihei.TTF ├── STXingkai.TTF ├── STXinwei.TTF ├── STZhongsong.TTF └── YouYuan.TTF ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:1:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" 拷贝到 matplotlib 文件夹 ## 查看 matplotlib 路径 import matplotlib matplotlib.matplotlib_fname() '/usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/matplotlibrc' ## 字体文件位于上一层 cd /usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf 现在，我们把刚才下载得到的字体拷贝在这个文件夹 cp ~/git/font/unicode/* /usr/local/python3/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf 然后，还需要更新 matplotlib 的字体缓存文件夹，否则还是无法更新字体 import matplotlib print(matplotlib.get_cachedir()) '/root/.cache/matplotlib' ## 删除字体缓存 rm -rf /root/.cache/matplotlib 这时候，重新启动 python 即可 matplotlib.matplotlib_fname() from matplotlib import font_manager font_set = {f.name for f in font_manager.fontManager.ttflist} for f in font_set: print(f) 现在，我们可以指定字体了 plt.rcParams[\"font.sans-serif\"]=[\"Microsoft YaHei\"] #设置字体 plt.rcParams[\"axes.unicode_minus\"]=False #该语句解决图像中的“-”负号的乱码问题 ","date":"2023-05-17","objectID":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/:2:0","tags":["linux","python","matplot","font","font","字体"],"title":"python matplotlib 处理中文字体","uri":"/2023-05-17-python-matplotlib-%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"},{"categories":["tools"],"content":" rpm -U http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm yum install -y git ","date":"2023-05-08","objectID":"/2023-05-08-centos-update-git-2.20/:0:0","tags":["centos","git"],"title":"centos update git 2.20","uri":"/2023-05-08-centos-update-git-2.20/"},{"categories":["tools"],"content":" terminate called after throwing an instance of 'std::runtime_error' what(): locale::facet::_S_create_c_locale name not valid 需要安装中文包支持，因为 CTP 采用了中文接口 # Set the locale RUN apt-get clean \u0026\u0026 \\ apt-get update \u0026\u0026 \\ apt-get install -y locales locales-all \u0026\u0026 \\ locale-gen zh_CN.GB18030 ","date":"2023-05-06","objectID":"/2023-05-06-ubuntu-ctp-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/:0:0","tags":["ctp","ubuntu","locale"],"title":"ubuntu ctp 中文问题","uri":"/2023-05-06-ubuntu-ctp-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" # 版本列表：https://www.sqlite.org/chronology.html # 下载源码 wget --no-check-certificate https://www.sqlite.org/src/tarball/sqlite-3.39.3.tar.gz # 编译 tar zxvf sqlite-3.39.3.tar.gz cd sqlite-3.39.3 export CFLAGS=\"-DSQLITE_ENABLE_FTS3 \\ -DSQLITE_ENABLE_FTS3_PARENTHESIS \\ -DSQLITE_ENABLE_FTS4 \\ -DSQLITE_ENABLE_FTS5 \\ -DSQLITE_ENABLE_JSON1 \\ -DSQLITE_ENABLE_LOAD_EXTENSION \\ -DSQLITE_ENABLE_RTREE \\ -DSQLITE_ENABLE_STAT4 \\ -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT \\ -DSQLITE_SOUNDEX \\ -DSQLITE_TEMP_STORE=3 \\ -DSQLITE_USE_URI \\ -O2 \\ -fPIC\" export PREFIX=\"/usr/local\" #LIBS=\"-lm\" ./configure --disable-tcl --enable-shared --enable-tempstore=always --prefix=\"$PREFIX\" LIBS=\"-lm\" ./configure --enable-shared --enable-tempstore=always --prefix=\"$PREFIX\" make \u0026\u0026 make install # 替换系统低版本 sqlite3 mv /usr/bin/sqlite3 /usr/bin/sqlite3_old ln -s /usr/local/bin/sqlite3 /usr/bin/sqlite3 echo \"/usr/local/lib\" \u003e /etc/ld.so.conf.d/sqlite3.conf ldconfig sqlite3 -version ","date":"2023-04-25","objectID":"/2023-04-25-sqlite-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/:0:0","tags":["airflow","sqlite","centos"],"title":"sqlite 源代码编译","uri":"/2023-04-25-sqlite-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/"},{"categories":["tools"],"content":"使用 airflow 管理工作流。 Install ## 设置 DAG 目录 export AIRFLOW_HOME=/root/app ## 不显示 example 案例 export AIRFLOW__CORE__LOAD_EXAMPLES=False airflow db init ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:0:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 添加用户 ## 需要确保 $AIRFLOW_HOME 是存在的，否则触发不同的 db，会导致数据库匹配不对，进而引发账户-密码错误 airflow users create \\ --username admin \\ --firstname admin \\ --lastname admin \\ --role Admin \\ --email admin@example.org ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:1:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 启动 ## 启动 webserver airflow webserver -p 8080 -D ## 启动 scheduler airflow scheduler -D ## 1. vim ariflow.cfg default_timezone = utc 修改为 default_timezone = Asia/Shanghai default_ui_timezone = UTC 修改为 default_ui_timezone = Asia/Shanghai ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:2:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 测试 ## 先用 Python 测试代码 python hello.py airflow tasks list hello airflow tasks test hello print_date airflow tasks test hello py_say_hello 20230514 ## 启动一个 dag airflow dags list airflow dags trigger pretrading.all.csv ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:3:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" 切换 db 数据库airflow 内置的默认数据库是 sqlite，这个主要是为了方便测试，不需要额外的配置即可启动 airflow。但是这种情况下，只能使用 SequencialOperator，无法实现并行化，因此官方不推荐。 我们可以修改数据库为 Postgre 或者 MySQl，进行实现并行化。 ","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:4:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" MySQL","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:4:1","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":["tools"],"content":" MariaDB ## 需要这个 so 放在 /app libmysqlclient.so.18 setenforce 0 getenforce vim /etc/selinux/config SELINUX=disabled # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=disabled # SELINUXTYPE= can take one of three two values: # targeted - Targeted processes are protected, # minimum - Modification of targeted policy. Only selected processes are protected. # mls - Multi Level Security protection. SELINUXTYPE=targeted sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 sudo yum localinstall -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm sudo yum install -y mysql-community-server sudo systemctl start mysqld ## 首次安装的密码 grep \"temporary password\" /var/log/mysqld.log ## 如果办法登录 ## 则使用一下方法，可以直接 mysql -u root -p 不用输秘密 Open and edit /etc/my.cnf or /etc/mysql/my.cnf, depending on your distribution. Add skip-grant-tables under [mysqld] Restart MySQL You should be able to log in to MySQL now using the below command mysql -u root -p Run mysql\u003e flush privileges; Set new password by ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword'; Go back to /etc/my.cnf and remove/comment skip-grant-tables Restart MySQL Now you will be able to login with the new password mysql -u root -p ## 报错：Your password does not satisfy the current policy requirements mysql\u003e SHOW VARIABLES LIKE 'validate_password%'; +--------------------------------------+--------+ | Variable_name | Value | +--------------------------------------+--------+ | validate_password_check_user_name | OFF | | validate_password_dictionary_file | | | validate_password_length | 8 | | validate_password_mixed_case_count | 1 | | validate_password_number_count | 1 | | validate_password_policy | MEDIUM | | validate_password_special_char_count | 1 | +--------------------------------------+--------+ 7 rows in set (0.00 sec) mysql\u003e SET GLOBAL validate_password_length = 6; mysql\u003e SET GLOBAL validate_password_policy = LOW; mysql -uroot -p CREATE DATABASE IF NOT EXISTS airflow DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; create user 'airflow'@'%' identified by 'xxxxxxxx'; grant all privileges on airflow.* to airflow@localhost identified by 'xxxxxxxx'; grant all privileges on airflow.* to 'airflow'@'%' identified by 'xxxxxxxx'; flush privileges; select user,authentication_string,host from mysql.user; +---------------+-------------------------------------------+-----------+ | user | authentication_string | host | +---------------+-------------------------------------------+-----------+ | root | *51F9815BB277B91759503A29D46EC9364D361F1C | localhost | | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost | | mysql.sys | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost | | airflow | *51F9815BB277B91759503A29D46EC9364D361F1C | % | +---------------+-------------------------------------------+-----------+ 4 rows in set (0.00 sec) executor = LocalExecutor sql_alchemy_conn = mysql://airflow:xxxxxxxx@localhost:3306/airflow?charset=utf8 #初始化数据库 #如果前面的两个utf8没写好，可能会出现/airflow/lib/python3.7/encodings/cp1252.py错误 # 若之前使用sqllite初始化过,需要 # 重置数据库 airflow db reset # 初始化数据库 airflow db init ## 1067 - Invalid default value for ‘update_at‘ ## MySQLdb.OperationalError: (1067, \"Invalid default value for 'updated_at'\") set GLOBAL sql_mode ='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' Ref","date":"2023-04-25","objectID":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/:5:0","tags":["linux","airflow","workflow","ops","devops"],"title":"airflow 运维","uri":"/2023-04-25-airflow-%E8%BF%90%E7%BB%B4/"},{"categories":[],"content":" yum remove nginx-mod* yum install nginx-mod* yum install nginx systemctl enable nginx systemctl start nginx ","date":"2023-04-25","objectID":"/2023-04-25-nginx-%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/:0:0","tags":[],"title":"nginx 部署小记","uri":"/2023-04-25-nginx-%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":"总结一下 tmux 的使用技巧与相关配置。 ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:0:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 配置","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:1:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" tmux3 特别注意注意，千万一定要把 set -g @split-statusbar-mode 'off' set -g @plugin 'charlietag/tmux-split-statusbar' run-shell /home/william/.tmux/plugins/tmux-split-statusbar/tmux-split-statusbar.tmux set -g @plugin 'charlietag/tmux-split-statusbar' set -g @split-statusbar-mode 'off' # [ on | off] set -g @split-statusbar-bindkey '-n F11' # [ M-s | -n F11 | ... ] # bindkey for toggle statusbar-mode # define yourself just like bind-key, default: M-s set -g @split-status-hide-bindkey '-n F12' # [ M-d | -n F12 | ... ] # bindkey for status-left / status-right hiding # define yourself just like bind-key, default: M-d ## ============================================================================= set -g pane-border-status bottom ## 只显示简单的正在运行命令 # set -g pane-border-format \"#P #T #{pane_current_command} \" ## 显示正在运行的命令所有参数 # set -g pane-border-format '#(ps --no-headers -t #{pane_tty} -o args -O-c)' set -g pane-border-format '#P #T #(ps --no-headers -t #{pane_tty} -o args -O-c) \u003e' ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:1:1","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 快捷键设置 prefix-s: 快速切换 sessions ## switch between sessoin bind-key s choose-session prefix-o: 快速重命名 panel ## rename-window bind-key o command-prompt -I \"#W\" \"rename-window '%%'\" prefix-f: 调用 fzf 快速查找 panel, 需要关闭原来的 tmux-fzf, 参考：tmux and fzf: fuzzy tmux session/window/pane switcher 建立一个可执行文件 #!/bin/bash # customizable LIST_DATA=\"#{window_name} #{pane_title} #{pane_current_path} #{pane_current_command}\" FZF_COMMAND=\"fzf-tmux -p --delimiter=: --with-nth 4 --color=hl:2\" # do not change TARGET_SPEC=\"#{session_name}:#{window_id}:#{pane_id}:\" # select pane LINE=$(tmux list-panes -a -F \"$TARGET_SPEC $LIST_DATA\" | $FZF_COMMAND) || exit 0 # split the result args=(${LINE//:/ }) # activate session/window/pane tmux select-pane -t ${args[2]} \u0026\u0026 tmux select-window -t ${args[1]} \u0026\u0026 tmux switch-client -t ${args[0]} 在 .tmux.conf 配置 ## fzf # set -g @plugin 'sainnhe/tmux-fzf' ## prefix-f # TMUX_FZF_LAUNCH_KEY=\"f\" # TMUX_FZF_ORDER=\"session|window|pane|command|keybinding|clipboard|process\" ## menu # TMUX_FZF_MENU=\\ # \"foo\\necho 'Hello!'\\n\"\\ # \"bar\\nls ~\\n\"\\ # \"sh\\nsh ~/test.sh\\n\" bind-key f run-shell -b /home/william/.tmux/tmux-switch-pane.sh ","date":"2023-04-17","objectID":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/:2:0","tags":["tmux"],"title":"tmux 小技巧","uri":"/2023-04-17-tmux-%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["tools"],"content":" 配置","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:0","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":" 快捷键 ctr-n 向下移动 ctr-p 向上移动 tmux zsh ctr-t ctr-r alt-c vim vim ** \u003ctab\u003e: 进入模糊匹配 ;ff \"fzf \" This is the default option: \" - Preview window on the right with 50% width \" - CTRL-/ will toggle preview window. \" - Note that this array is passed as arguments to fzf#vim#with_preview function. \" - To learn more about preview window options, see `--preview-window` section of `man fzf`. let g:fzf_preview_window = ['right:50%', 'ctrl-/'] \" Preview window on the upper side of the window with 40% height, \" hidden by default, ctrl-/ to toggle let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/'] \" Empty value to disable preview window altogether let g:fzf_preview_window = [] \" [Buffers] Jump to the existing window if possible let g:fzf_buffers_jump = 1 \" [[B]Commits] Customize the options used by 'git log': let g:fzf_commits_log_options = '--graph --color=always --format=\"%C(auto)%h%d %s %C(black)%C(bold)%cr\"' \" [Tags] Command to generate tags file let g:fzf_tags_command = 'ctags -R' \" [Commands] --expect expression for directly executing the command let g:fzf_commands_expect = 'alt-enter,ctrl-x' \" Mapping selecting mappings nmap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-n) xmap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-x) omap \u003cleader\u003e\u003ctab\u003e \u003cplug\u003e(fzf-maps-o) nmap \u003cC-p\u003e :Files\u003cCR\u003e nmap \u003cC-e\u003e :Buffers\u003cCR\u003e nmap \u003cleader\u003eff :Files\u003cCR\u003e let g:fzf_action = { 'ctrl-e': 'edit' } \" Insert mode completion imap \u003cc-x\u003e\u003cc-k\u003e \u003cplug\u003e(fzf-complete-word) imap \u003cc-x\u003e\u003cc-f\u003e \u003cplug\u003e(fzf-complete-path) imap \u003cc-x\u003e\u003cc-l\u003e \u003cplug\u003e(fzf-complete-line) \" call fzf ","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:1","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":" 预览窗口 ## install highlight sudo apt-get install highlight antigen bundle unixorn/fzf-zsh-plugin@main export FZF_DEFAULT_COMMAND=\"--exclude={.git,.idea,.vscode,.sass-cache,node_modules,build}\" export FZF_DEFAULT_OPTS=\"--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2\u003e /dev/null | head -500'\" ","date":"2023-04-16","objectID":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:2","tags":["fzf","zsh","tmux","vim"],"title":"fzf 配置指南","uri":"/2023-04-16-fzf-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"C++ Core Guidelines git 项目编译成 pdf 文件。 git clone https://github.com/isocpp/CppCoreGuidelines.git cd CppCoreGuidelines pandoc CppCoreGuidelines.md -f markdown -t epub3 -s -o CppCoreGuidelines.epub pandoc CppCoreGuidelines.md -f markdown -t latex -s -o CppCoreGuidelines.pdf ","date":"2023-04-16","objectID":"/2023-04-16-c-core-guidelines/:0:0","tags":["c++","core","guide"],"title":"c++ core guidelines","uri":"/2023-04-16-c-core-guidelines/"},{"categories":["tools"],"content":"实现在 tmux 对窗口的重命名 使用快捷键prefix + :(shift+,), 输入rename-window \u003cnew-name\u003e 绑定一个新的快捷键来操作：prefix+o bind-key o command-prompt -I \"#W\" \"rename-window '%%'\" ","date":"2023-04-15","objectID":"/2023-04-15-tmux-%E7%AA%97%E5%8F%A3%E9%87%8D%E5%91%BD%E5%90%8D-rename-window/:0:0","tags":["tmux","rename","window"],"title":"tmux 窗口重命名:rename window","uri":"/2023-04-15-tmux-%E7%AA%97%E5%8F%A3%E9%87%8D%E5%91%BD%E5%90%8D-rename-window/"},{"categories":["tools"],"content":"申万行业分类作为国内比较权威的A股分类标准，对于研究股票具有重要的参考价值。我们观察到，目前市面上（至少免费层面）没有一个相对完善、完整的历史数据与每日更新数据。 号称国内数据之王的万得，一方面对于用户提取的数据量有严格的限制，这导致我们在复原历史数据的过程经常会触发阈值；另一方面，我们发现万得会确实部分数据，以及存在臭名昭著的脏数据问题。比如，万得由于授权原因，无法提供上交所科创板股票的申万行业分类数据；再比如，这个票 000008.SZ，我们通过申万网站查询该票的历史变更情况： 可以查询到该票其实应该数据机械设备，相应的申万行业代码为 801890.SI，但是万得竟然标注为 801050.SI。 而根据《申万行业分类2014标准》这个代码对应的行业是 有色金属，简单查询这个股票即可以这个完全没有涉及金属业务，明显存在数据错误。 我们之前依赖一个 HF 的 stock.industry 数据库，后面发现这个也是完全瞎扯，他们直接利用现在的行业代码去更新历史的数据，没有考虑这个票在历史可能存在的主营业务发生变化、或者产生了重组，申万会相应的调整行业分类。 如何找思路最简单的思路是：去申万官网查看是否提供历史数据。不过很遗憾，这个数据其实算收费项目，对方并不提供历史的行业分类数据。 ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:0:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 技多不压身凡事难不倒一个会爬虫的开发，我查看发现申万网站提供了股票历史的分类记录，可以通过该记录条款，逐一地把历史的分类数据还原。 下载得到的数据是这样的： ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:1:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 犹抱琵琶半遮面查看上面的数据，我们发现申万只提供了内部的行业代码（如 000001.SZ 最近的行业代码是 480301，这个表示： 一级行业分类是银行 二级行业分类是股份制银行II 三级行业分类是股份制银行III 现在有点麻烦的是，研究员希望我们提供对应的申万指数代码，即我们经常看到的 801780.SI(一级行业代码)。 目前的情况是，我们已经得到申万内部的一个行业代码，需要将其映射到外部常用的申万指数代码。这个肯定需要从其他地方获取相关的信息。 ","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:2:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 柳暗花明又一村这时候需要用梯子查找信息了。经过一番摸鱼后，发现几个宝贝玩意： 申万分别在 2011、2014、2021 发现了三份研究报告，介绍了申万行业指数的编制规则与调整说明 其中 2011、2014 的两份报告中，有明确说明内部行业代码与对应的指数代码，我们可以利用这个信息做一个映射 而在 2021 的这份数据，则没有对照表，我发现聚宽提供了一份行业名称与指数代码的对照表，那么我们可以通过名称找到对应的指数代码 目前看，食材都已就绪。 如何清洗数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:3:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 去读 pdf 数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:4:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 清洗数据","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:5:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 生成目标数据 数据入库","date":"2023-04-15","objectID":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/:6:0","tags":["申万","行业","分类","一级","指数","万得","sw","industry"],"title":"如何徒手写一个申万行业分类数据","uri":"/2023-04-15-%E5%A6%82%E4%BD%95%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%B3%E4%B8%87%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 开通企业微信应用 登录企业微信网站:https://work.weixin.qq.com/ ‘应用管理 -\u003e (自建)创建应用’, 配置相关的应用名称 查看应用的 AgentID, Secret 设置\"企业可信IP\" “接收消息”(主要用于接收来自企业微信的信息,然后转发到我们自己的服务器) 记住上面的 Token, EncodingAESKey, URL 暂时先不用填(先测试,后面再补充) ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:0:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 启动服务 ~/anaconda3/bin/python web.py -p=5000 -t=\"\u003c应用上面的Token\u003e\" -a=\"\u003c应用上面的EncodingAESKey\u003e\" -c=\"\u003c企业CorpID\u003e\" 可以测试一下 curl http://127.0.0.1:5000 {\"detail\":[{\"loc\":[\"query\",\"msg_signature\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"timestamp\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"nonce\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"query\",\"echostr\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"}]} ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 开通 nginx 外部访问 在阿里云开通相关的端口 5000 防火墙打开 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=5000/tcp --permanent systemctl stop firewalld.service 修改 nginx.conf 有可能是 sudo vim /etc/nginx/nginx.conf server { listen 80; location /wechat { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:5000; } } server { listen 80; server_name robot.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:4000; } } ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:2:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 企业微信回调测试打开网页:https://open.work.weixin.qq.com/wwopen/devtool/interface/combine, “建立连接 -\u003e 测试回调模式” URL: http://47.98.117.71:5000 URL: http://robot.wuyacapital.com \u003c这个没有回文也没问题\u003e Token: \u003cToken\u003e EncodingAESKey: \u003cEncodingAESKey\u003e EchoStr: 123456 ToUserName: \u003ccorpid\u003e ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:3:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":" 补充应用 URL即把上面测试通过的 URL 填入即可 ","date":"2023-04-04","objectID":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/:4:0","tags":["企业微信","chat-gpt","python","ngix"],"title":"企业微信机器人","uri":"/2023-04-04-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":["tools"],"content":"使用 python 接口调用 openapi chatgpt。 注册 OpenAI 账户","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:0:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 使用 LA VPN（不能用香港VPN）","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:1:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 使用 Google 账户","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:2:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 获取 SMS （Indonesia）Ref: https://sms-activate.org/getNumber。最低充值2刀(可以使用支付宝)。 左侧选择 OpenAI -\u003e Indonesia -\u003e 等待短信消息， 如果不成功，可以点击右侧关闭，重新更新手机号（不收钱）。 ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:3:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" 获取 API-keyRef: https://platform.openai.com/account/api-keys ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:4:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":" Chrome 安装插件Ref: chrome-extension://jgjaeacdkonaoafenlfkkkmbaopkbilf/options.html python demo目前版本还只能使用 model=\"gpt-3.5-turbo\", 新版本 gpt-4.0 需要申请 waiting-list。 另外，调用接口需要梯子。 ## 以下均需要使用梯子 p4 ~/anaconda3/bin/python3 -m pip install openai p4 ipython import os import openai openai.api_key = OPEN_API_KEY completion = openai.ChatCompletion.create( model=\"gpt-3.5-turbo\", messages=[ {\"role\": \"user\", \"content\": \"show me the futures of programming.\"} ] ) print(completion.choices[0].message.content) ","date":"2023-04-02","objectID":"/2023-04-02-python-openapi-chatgpt/:5:0","tags":["python","openapi","chatgpt"],"title":"Python openapi+ChatGPT","uri":"/2023-04-02-python-openapi-chatgpt/"},{"categories":["tools"],"content":"在 C++ 中，由于存在多重继承的结构，往往会导致第三层继承类会拷贝顶级父类的多个成员变量，这将导致调用成员函数时，编译器不知道需要调用哪个成员，进而引发编译错误。 多重继承 ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:0:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":" 存在多个成员变量 #include \u003ccmath\u003e #include \u003ciostream\u003e class A { public: A() {} void echo() { std::cout \u003c\u003c \"a:\" \u003c\u003c a \u003c\u003c std::endl; } protected: int a {10}; }; class B: public A {}; class C: public A {}; class D: public B, public C {}; int main() { D d; d.echo(); return 0; } ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:1:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":" virtual base class我们需要把 class B 和 class C 对于 class A 的继承申明为 virtual base class，使用对于基类 class A 的成员拷贝只有一份 class A { public: A() {} void echo() { std::cout \u003c\u003c \"a:\" \u003c\u003c a \u003c\u003c std::endl; } protected: int a {10}; }; class B: public virtual A {}; class C: public virtual A {}; class D: public B, public C {}; Ref https://www.simplilearn.com/tutorials/cpp-tutorial/virtual-base-class-in-cpp ","date":"2023-04-01","objectID":"/2023-04-01-c-virtual-base-class/:2:0","tags":["C++","virtual","class"],"title":"C++ virtual base class","uri":"/2023-04-01-c-virtual-base-class/"},{"categories":["tools"],"content":"观察到 ssh 会在一定时间的超时后，自动退出。 timed out waiting for input: auto-logout 我已经把相关的 ssh 设置对核对过，是没有问题的。 参考这个博客：终端 timed out waiting for input: auto-logout 解决 原来是有一个 TIMEOUT 的参数 echo $TIMEOUT 120 怪不得会自动退出。既然如此，则改之。 vim ~/.bashrc vim /etc/profile ## 设置成 0 就是不要超时退出 export TIMEOUT=0 ","date":"2023-02-27","objectID":"/2023-02-27-ssh-auto-logout-%E8%87%AA%E5%8A%A8%E8%B6%85%E6%97%B6%E9%80%80%E5%87%BA/:0:0","tags":["ssh","auto","logout","timeout"],"title":"ssh auto logout 自动超时退出","uri":"/2023-02-27-ssh-auto-logout-%E8%87%AA%E5%8A%A8%E8%B6%85%E6%97%B6%E9%80%80%E5%87%BA/"},{"categories":["tools"],"content":"行情调优 参看链接：证券行情接收效率调优全攻略来了 随着极速行情普及，客户接收证券行情时的一些问题也开始显现。比如，客户主机CPU频率不够，没有采用高性能的网卡，没有配置CPU绑核，没有做CPU的隔离等等的问题都会引起客户在接收极速行情时没有处于一种良好的状态，而不良好的接收状态直接就会引起客户端接收的丢包。盛立科技集合这些年在服务客户过程中遇到的相关问题，将八年调试心得做一汇总，干货满满，在此分享给大家以便客户后续在遇到类似的情况可以做一些参考。 在客户端接收极速行情时一般对于接收的客户端都有一些基本的要求，典型的配置要求是CPU 3.6G及以上，高性能网卡Solarflare 2522 Plus 。在这样配置接近的情况下才是一个接收客户端的基本起点，当然如果客户采用超频机那么就是一种更好的选择，这样客户可以获得更高的速度。 针对客户端接收服务器在达到典型配置的情况下，盛立证券行情系统的优化主要可以分为以下几个方向： 机器平台方面的调优。 高性能网卡加速方面的调优。 接收程序方面的调优。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:0:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 机器平台的调优一般服务器的CPU都支持自动睿频，而服务器的CPU一般默认运行于ondemand模式，会有中断开销，睿频的时候提升下降也是有额外的开销，特别是对于一些低端cpu比如C2350,C2338,N2800这些低价独服的CPU，影响更大。可以通过具体的命令查看当前机器的cpu五种工作模式以及频率。 除了cpu的工作模式的调优外， 我们还应该注意系统的调优，通过tuned-adm list命令来查看目前tuned支持的工作模式。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:1:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 高性能网卡加速方面的调优目前市面上典型的高性能网卡的供应商有Solarflare/Mellanox/Exablaze等。但从稳定性与性能以及易用性多个方面来考虑的话还是Solarflare X2522是比较合适的选择。我们做过一些简单的测试， 以intel普通10G网卡与solarflar 2522 plus 在 3.5G主频下， 大约相差一个数量级(20-50us 对 2-5us)的样子。 在使用Solarflare网卡时如果需要获得更优的性能（在正确安装好相应的高性能驱动的前提下）还需要注意以下一些事项： 开启大页机制 采用CPU核的绑定方案 采用绑核方案时，可以把要绑的核先进行隔离；需要先测定当前网卡与CPU核心的亲缘性，需绑在跟网卡亲缘性好的cpu核心上 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:2:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":" 接受程序方面的调优1、可以考虑对可执行文件在编译生成时添加优化选项， 比如 - 1)gcc优化参数优化级别。 - 2)使用gcc -Q –help=optimizers命令查看开启的优化项目。 2、采用内联函数：在内联函数被调用前，使用inline关键字修饰内联函数定义，同时在编译时打开对内联函数的优化。 3、消除循环的低效率。例如需要执行多次（在循环里）但是结果不会改变的计算，可以将这类计算移动到代码前面不会被多次求值的部分。 4、系统调用会导致进程从用户态切换到内核态，开销通常较大。部分系统调用可能在微秒级别或以上，尽量避免系统调用可以大幅提高我们的程序性能。 5、内存初始化程序在使用new或者malloc等分配内存后，这些内存可能并未在物理内存中分配。我们可采用初始化的方式将这些内存分配到物理内存中，避免运行过程中使用这些内存时引起缺页中断。 6、算术运算和浮点数乘除法或浮点运算相对于整型的加减运算，性能开销较高。我们可留意是否能将这些耗时的运算转换为整型加减或者位运算来提升性能，或者避免乘除法和浮点运算。 7、在逻辑运算符‘||’和‘\u0026\u0026’中，我们可以利用与短路和或断路特性，对条件进行排序。例如‘||’中更容易为真的条件放在前面，‘\u0026\u0026’中更容易为假的条件放在前面。 ","date":"2023-02-24","objectID":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/:3:0","tags":["linux","md","performance","性能","调优"],"title":"证券行情调优攻略","uri":"/2023-02-24-%E8%AF%81%E5%88%B8%E8%A1%8C%E6%83%85%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/"},{"categories":["tools"],"content":"自动清理超过一定时间的文件 #!/usr/bin/env bash mkdir -p $HOME/log LOG_FILE=$HOME/log/$(date +\"%Y%m%d.MyLog.log\") exec \u0026\u003e \u003e(tee -a \"$LOG_FILE\") is_init=false msg () { echo -e \"------------------------------------------------------------------\" if [ !is_init ]; then is_init=true echo -e \"\u003e\u003e $(date +'%Y-%m-%d %H:%M:%S') \u003c\u003c '$0'\" fi echo -e \"\u003e\u003e $(date +'%Y-%m-%d %H:%M:%S') \u003c\u003c '$1'\" echo -e \"-----------------------------------------------------------------\" } msg \"Run autoclear.sh\" #datadir=$HOME/data datadir=/data xday=$(date -d \"-30 days\" +\"%Y%m%d\") for f in `ls $datadir`; do tmpdate=`date -r $datadir/$f \"+%Y%m%d\"` if [[ $tmpdate \u003c $xday ]]; then echo \"##==\u003e now rm $f ==\u003e [[ $tmpdate \u003c $xday ]]\" if [[ $f == *\"tar.bz2\"* ]]; then rsync -avPzr $datadir/$f ops:/data/Xtp/FromZZ.SZ fi rm -rf $datadir/$f fi done msg \"Done!\" ","date":"2023-02-21","objectID":"/2023-02-21-autoclear-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E6%96%87%E4%BB%B6/:0:0","tags":["autoclear","过期","清理"],"title":"autoclear 自动清理过期文件","uri":"/2023-02-21-autoclear-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E6%96%87%E4%BB%B6/"},{"categories":[],"content":" 小宝影院小宝影院提供在线视频观看，有不少美剧、电影资源。 ","date":"2023-02-18","objectID":"/2023-02-18-%E5%B8%B8%E7%94%A8%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/:1:0","tags":["音乐","电影"],"title":"常用音频、视频网站推荐","uri":"/2023-02-18-%E5%B8%B8%E7%94%A8%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"},{"categories":["tool"],"content":"设置 prompt 的颜色 export PS1=\"[\\[\\e[00;32m\\]\\u@Colo114@\\[\\e[00;31m\\]cma\\[\\e[00m\\]:\\[\\e[00;32m\\]\\w\\[\\e[00m\\]\\[\\e[00m\\]]\\$ \" ","date":"2023-02-15","objectID":"/2023-02-15-bashrc-prompt-%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/:0:0","tags":["Linux","bash","bashrc","prompt"],"title":"bashrc prompt 颜色设置","uri":"/2023-02-15-bashrc-prompt-%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/"},{"categories":[],"content":"clickhouse 检查某张表的数据最后修改时间，通过判断以决定是否同步数据。 select max(modification_time) from system.parts where table='sse_cv_snaps' and database='raven'; ","date":"2023-02-14","objectID":"/2023-02-14-clickhouse-%E6%A3%80%E6%9F%A5%E8%A1%A8%E6%9C%80%E8%BF%91%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/:0:0","tags":[],"title":"clickhouse 检查表最近修改时间","uri":"/2023-02-14-clickhouse-%E6%A3%80%E6%9F%A5%E8%A1%A8%E6%9C%80%E8%BF%91%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/"},{"categories":["tools"],"content":"通过获取进程 PID 来杀死进程。 killx () { list=$(ps aux | grep -i $1| grep -v grep |grep -v color) if [ -n \"$list\" ]; then dead=$(ps aux | grep -i $1| grep -v grep| grep -v color | awk '{print $2}') echo \"Killing... $1\" echo $dead |xargs kill -9 else echo \"Not running $1\" fi } ","date":"2023-02-09","objectID":"/2023-02-09-killx/:0:0","tags":["kill","killx"],"title":"killx","uri":"/2023-02-09-killx/"},{"categories":["tools"],"content":"VSPID:1483936 https://kiwivm.64clouds.com/1483936/main-exec.php?mode=blacklistcheck ","date":"2023-02-01","objectID":"/2023-02-01-bwg-%E6%A3%80%E6%9F%A5-ip-%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/:0:0","tags":["bwg","vps"],"title":"bwg 检查 IP 是否被墙","uri":"/2023-02-01-bwg-%E6%A3%80%E6%9F%A5-ip-%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/"},{"categories":["tools"],"content":"systemd 可以制作端口转发（secure-tunnel，也称作 port-forwarding），如systemd 实现端口转发。但是这个只能支持单个任务；当然，如果是多个任务，我们可以多写几个 service 文件即可。但是，这个不是最优选择，因为存在大量的重复配置。那么自然而然地，我们想到使用模板来进行配置，这样可以把共同的部分抽象出来，实现模板化操作。 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:0:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 建立服务模板到目录下面进行操作 -rw-r--r--. 1 root root 416 Jan 19 15:04 port-forwarding@.service -rw-r--r--. 1 root root 85 Jan 19 14:49 port-forwarding@ops.r7 -rw-r--r--. 1 root root 86 Jan 19 15:01 port-forwarding@ops.r13 cd /usr/lib/systemd/system 首先建立一个 service 文件，里面通过配置模板，运行多开服务 vim port-forwarding@.service 这个服务模板的内容如下： [Unit] Description=Setup Port-Forwarding to %I After=network.target [Service] ## 使用用户执行命令 User=william Environment=\"LOCAL_ADDR=localhost\" EnvironmentFile=/usr/lib/systemd/system/port-forwarding@%i ExecStart=/usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes ${TARGET} ${CMD1} ${CMD2} ${CMD3} ${CMD4} ${CMD5} # Restart every \u003e5 seconds to avoid StartLimitInterval failure Restart=always # Restart=on-failure RestartSec=5s [Install] WantedBy=multi-user.target 这里，我们指定了 EnvironmentFile=/usr/lib/systemd/system/port-forwarding@%i，这是一个模板化的参数 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:1:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 服务配置接下来，我们只需要编写服务配置即可 ## cat port-forwarding@ops.r7 TARGET=R7 CMD1='-R *:62114:127.0.0.1:22' CMD2='-R *:63115:127.0.0.1:22' CMD3= CMD4= CMD5= ## 注意，这种模板只能配置一个端口转发，可以理解成只监控一个端口的活跃状态 ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:2:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":" 启动服务 systemctl daemon-reload ## 启动某个服务 systemctl enable port-forwarding@ops.r7.service systemctl enable port-forwarding@ops.r13.service systemctl list-units |grep port systemctl start port-forwarding@ops.r7.service systemctl start port-forwarding@ops.r13.service systemctl status port-forwarding@ops.r7.service ● port-forwarding@ops.r7.service - Setup Port-Forwarding to ops.r7 Loaded: loaded (/usr/lib/systemd/system/port-forwarding@.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2023-01-19 15:05:03 CST; 16min ago Main PID: 16980 (ssh) CGroup: /docker/72915ff761ba3a0adee44ce36ae26f124f87a73aad3456a2bb515c0ca54e7a4f/system.slice/system-port\\x2dforwarding.slice/port-forwarding@ops.r7.service └─16980 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60178:192.168.1.177:22 R7 ‣ 16980 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60178:192.168.1.177:22 R7 Jan 19 15:05:03 mon.machine systemd[1]: Started Setup Port-Forwarding to ops.r7. systemctl status port-forwarding@ops.r13.service ● port-forwarding@ops.r13.service - Setup Port-Forwarding to ops.r13 Loaded: loaded (/usr/lib/systemd/system/port-forwarding@.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2023-01-19 15:05:00 CST; 16min ago Main PID: 16894 (ssh) CGroup: /docker/72915ff761ba3a0adee44ce36ae26f124f87a73aad3456a2bb515c0ca54e7a4f/system.slice/system-port\\x2dforwarding.slice/port-forwarding@ops.r13.service └─16894 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60183:192.168.1.183:22 R13 ‣ 16894 /usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 127.0.0.1:60183:192.168.1.183:22 R13 Jan 19 15:05:00 mon.machine systemd[1]: Started Setup Port-Forwarding to ops.r13. ","date":"2023-01-18","objectID":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/:3:0","tags":["Linux","systemd","multiple","port-forwarding","端口转发"],"title":"systemd 多个端口转发之模板","uri":"/2023-01-18-systemd-%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B9%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["tools"],"content":"vim9 配置 YCM 自动补全功能。 cd ~/.vim/plugged git clone https://github.com/ycm-core/YouCompleteMe.git git submodule update --init --recursive ## 添加 ssl vim ~/.vim/plugged/YouCompleteMe/third_party/ycmd/build.py import ssl ssl._create_default_https_context = ssl._create_unverified_context python3 ./install.py --clang-completer --force-sudo --verbose ## vim .vimrc \" ycm 指定 ycm_extra_conf.py let g:ycm_global_ycm_extra_conf = ‘xxxxxx/.ycm_extra_conf.py’ 后面的路径是 YCM 插件目录里的 .ycm_extra_conf.py 文件的位置 比如 '~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py' ","date":"2023-01-13","objectID":"/2023-01-13-vim9-%E5%AE%89%E8%A3%85-ycm/:0:0","tags":["Linux","vim","ycm","python3","clang"],"title":"vim9 安装 YCM","uri":"/2023-01-13-vim9-%E5%AE%89%E8%A3%85-ycm/"},{"categories":["tools"],"content":"命令行安装 R stringi 软件包 RUN cd /tmp \u0026\u0026 \\ wget --no-check-certificate https://github.com/gagolews/stringi/archive/master.zip -O stringi.zip \u0026\u0026 \\ unzip stringi.zip \u0026\u0026 \\ sed -i '/\\/icu..\\/data/d' stringi-master/.Rbuildignore \u0026\u0026 \\ R CMD build stringi-master \u0026\u0026 \\ R CMD INSTALL `ls -alh |grep tar |cut -d' ' -f11` ","date":"2023-01-10","objectID":"/2023-01-10-r-%E5%AE%89%E8%A3%85-stringi-%E5%8C%85/:0:0","tags":["Docker","R","devtools","stringi","stringr"],"title":"R 安装 stringi 包","uri":"/2023-01-10-r-%E5%AE%89%E8%A3%85-stringi-%E5%8C%85/"},{"categories":["tools"],"content":"在登录 ssh 的时候，经常会遇到 timed out waiting for input: auto-logout，甚至都没有这个提醒，就直接断线的情况。我们需要修改默认超时参数。 ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" server端 # 设置服务器向 SSH 客户端连接会话发送频率和时间. vi /etc/ssh/sshd_config，添加如下两行 # 启用客户端活动检查，每 60 秒检查一次，3 次不活动断开连接 ClientAliveInterval 60 ClientAliveCountMax 3 # ClientAliveInterval 指定了服务器端向客户端请求消息的时间间隔, 默认是 0, 不发送。设置 60 表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了。 # ClientAliveCountMax 表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开。正常情况下, 客户端不会不响应，使用默认值 3 即可。 #重新启动 SSH 服务 service sshd reload ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":" client 端 # 1、$TMOUT 系统环境变量 # 用以下命令判断是否是否设置了该参数 echo $TMOUT # 如果输出空或 0 表示不超时，大于 0 的数字 n 表示 n 秒没有收入则超时。此时则是 100 秒。 # 修改方法 # 系统层面：/etc/profile # 用户层面：~/.bashr vi /etc/profile （当然也可以在其它配置文件配置，涉及到环境变量配置文件读取优先级的问题） # ---------------------------- export TMOUT=600 # ---------------------------- # 将以上 600 修改为 0 就是设置不超时 source /etc/profile # 让配置立即生效 # 同时可以修改 ~/.ssh/config Host * TCPKeepAlive yes ServerAliveInterval 60 ServerAliveCountMax 30 ","date":"2022-12-16","objectID":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["Linux","ssh","timeout"],"title":"解决ssh经常断线，出现timeout的问题","uri":"/2022-12-16-%E8%A7%A3%E5%86%B3ssh%E7%BB%8F%E5%B8%B8%E6%96%AD%E7%BA%BF%E5%87%BA%E7%8E%B0timeout%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["tools"],"content":"从源代码编译安装 Vim9.2。 export LDFLAGS=\"-rdynamic\" cd /tmp \u0026\u0026 \\ yum install perl-ExtUtils-Embed ruby ruby-devel -y \u0026\u0026 \\ yum clean all \u0026\u0026 \\ rm -rf /var/cache/yum/* \u0026\u0026 \\ wget --no-check-certificate http://www.lua.org/ftp/lua-5.4.4.tar.gz \u0026\u0026 \\ tar -xvf lua-5.4.4.tar.gz \u0026\u0026 \\ cd lua-5.4.4 \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/lua* \u0026\u0026 \\ cd /tmp \u0026\u0026 \\ git clone https://github.com/vim/vim.git \u0026\u0026 \\ cd vim \u0026\u0026 \\ git pull origin master \u0026\u0026 \\ make clean distclean \u0026\u0026 \\ ./configure --prefix=/usr/local/vim9 \\ --with-features=huge \\ --enable-multibyte \\ --enable-rubyinterp=yes \\ --enable-python3interp=yes \\ --with-python3-command=/usr/local/python3/bin/python3 \\ --with-python3-config-dir=$(/usr/local/python3/bin/python3-config --configdir) \\ --enable-perlinterp=yes \\ --enable-luainterp=yes \\ --with-lua-prefix=/usr/local \\ --enable-cscope\\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"william\" \\ --enable-fail-if-missing \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -sfn /usr/local/vim9/bin/vim /usr/bin/vim \u0026\u0026 \\ echo \"/usr/local/vim9/bin\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/vim* ","date":"2022-12-12","objectID":"/2022-12-12-vim--%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:0:0","tags":["Linux","vim","vim8","python"],"title":"Vim: 源代码编译安装","uri":"/2022-12-12-vim--%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":"在 Docker 环境安装 RabbitMQ version: \"3\" services: rabbitmq: container_name: rabbitmq image: docker.io/rabbitmq:3.11-management privileged: true shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} - RABBITMQ_DEFAULT_USER=william - RABBITMQ_DEFAULT_PASS=********** volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} - /home/william:/mnt ports: - \"5672:5672\" - \"15672:15672\" ## web #pull_policy: always restart: always 可以访问网站：rabbitmq 查看不同的版本，这里我们选择带有 management 的版本，这个提供了 web gui 的管理界面 可以在 docker-compose 配置用户与密码 配置端口转发 可以访问 IP:15672（如 http://127.0.0.1:15672/ ）进入管理界面 ","date":"2022-11-29","objectID":"/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/:0:0","tags":["docker","docker-compose","RabbitMQ","消息中间件"],"title":"docker 安装 RabbitMQ","uri":"/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/"},{"categories":["tools"],"content":"一些常用的 ~/.ssh/config 设置 Host * ServerAliveInterval 60 IdentitiesOnly=yes StrictHostKeyChecking=no ## ========================================== Host lfang.r8 HostName 192.168.1.xxxx Port 22 User lfang ServerAliveInterval 60 保持 60 秒持续向服务器发送心跳，从而保持 ssh 持续连接状态 StrictHostKeyChecking=no 去掉严格检查，如果一些服务器的 IP 发生了变化，可以通过 ssh-keygen -R xx.xx.xx.xx 去掉，或者修改 ~/.ssh/known_hosts，而这个则通过设置，直接忽略相关的报警，可以迅速的进行重新匹配。 ","date":"2022-11-25","objectID":"/2022-11-25-ssh-config-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/:0:0","tags":["ssh","key","config"],"title":"ssh config 的一些常用设置","uri":"/2022-11-25-ssh-config-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"},{"categories":["tools"],"content":"允许一个 Docker container 获取主机的 systemctl 权限。 ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:0:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":" 使用 Docker run docker run --name mon.machine -dit \\ --privileged=true \\ -v /:/mnt \\ -v /run/dbus/system_bus_socket:/run/dbus/system_bus_socket:ro \\ -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\ -p 31022:22 \\ --shm-size=20gb \\ 10.32.111.107:5000/pydev:v1.0 /sbin/init ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:1:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":" 使用 Docker-compose version: \"3\" services: mon.machine: container_name: mon.machine image: 10.32.111.107:5000/pydev:v1.0 privileged: true shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} - /home/william:/mnt ports: - \"22222:22\" command: - /bin/bash - -c - | cat /mnt/.ssh/id_rsa.pub \u003e\u003e ~/.ssh/authorized_keys git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs /usr/sbin/init pull_policy: always restart: always 这里需要注意： 配置 privileged: true 在 command 需要先初始化，然后再执行其他的命令 privileged: true command: - /bin/bash - -c - | cat /mnt/.ssh/id_rsa.pub \u003e\u003e ~/.ssh/authorized_keys git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs /usr/sbin/init ","date":"2022-11-25","objectID":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/:2:0","tags":["docker","docker-compose","systemctl","systemd","privileged"],"title":"docker 使用 sytemctl","uri":"/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/"},{"categories":["tools"],"content":"通过添加 tail -f /dev/null 保持刷新，使得容器始终处于活跃状态（alive），否则一旦命令执行完成，就会立即停止了。这样对于一些任务，我们往往想要其保持状态，方便进去容器内部进行调试。 version: \"3\" services: mon.machine: container_name: mon.machine image: 10.32.111.107:5000/pydev:v1.0 privileged: false shm_size: '8gb' environment: - SSH_AUTH_SOCK=${SSH_AUTH_SOCK} volumes: - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} ports: - \"31022:22\" command: - /bin/bash - -c - | git clone git@192.168.1.171:lfang/jobs.git ~/git/jobs tail -f /dev/null pull_policy: always restart: always ","date":"2022-11-24","objectID":"/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/:0:0","tags":["docker","docker-compose","command","alive"],"title":"docker compose command 保持容器处于活跃状态alive","uri":"/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/"},{"categories":["tools"],"content":"由于 Dockerfile 使用了多层构建的方式，对于没有改动的命令行，就不会在执行重新构建了。如果我们需要在 Dockerfile 保持更新 git pull，可以有两种方式 docker build 的时候使用 --no-cache 选项，但是这个是全局范围的配置，一旦设置，需要全部重新构建，往往显得十分臃肿 docker-compose 还支持提供 --build-arg 的选项，可以把一些参数传递到 Dockerfile 里面。 这里有一个小技巧，如果我们每次构建的时候，传递的参数是一个与时间相关的，则在每次构建的时候都会传递不同的参数，从而保证了在该参数之后的构建是会保持更新与构建的。 ## ensure latest wepy ARG BUILD_DATE RUN --mount=type=ssh \\ mkdir -p ~/git \u0026\u0026 cd ~/git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ cd ~/git/wepy \u0026\u0026 \\ bash ./install.venv.sh \u0026\u0026 \\ rm -rf ~/git/wepy ## ---------------------------------------------------------------------------- ## build export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 DOCKER_BUILDKIT=1 docker build \\ --ssh default \\ --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%S') \\ -t pydev:v1.0 . ## ---------------------------------------------------------------------------- ","date":"2022-11-24","objectID":"/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/:0:0","tags":["docker","docker-compose","RUN"],"title":"docker compose 保持 git pull 最新代码","uri":"/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/"},{"categories":["tools"],"content":"在升级 Python3.11 过程中遇到一些问题，这里顺手记录一下。 需要安装 bzip2-devel yum install -y bzip2* 找到 _bz2 sudo find / -name '*_bz2*' /mnt/.local/share/Trash/files/anaconda3.9/lib/python3.9/lib-dynload/_bz2.cpython-39-x86_64-linux-gnu.so ## 找到对应的需要处理的 python 版本路径 cd /usr/local/python3/lib/python3.11/lib-dynload ## 安装版本修改 cp _bz2.cpython-39-x86_64-linux-gnu.so _bz2.cpython-311-x86_64-linux-gnu.so 找到 libbz2.so.1.0 sudo find / -name 'libbz2.so.1.0' python11 目前还不能支持 numba ","date":"2022-11-24","objectID":"/2022-11-24-python3.11-%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/:0:0","tags":["python","python3.11"],"title":"Python3.11 避坑指南","uri":"/2022-11-24-python3.11-%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"},{"categories":["tools"],"content":"为了在 Docker 镜像里面下载私有 git 项目代码，我们需要告诉 Dockerfile 如何调用主机的 ssh 公钥。 ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:0:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" Dockerfile #syntax=docker/dockerfile:1.0.0-experimental ## 假设私有 git 网站是：192.168.1.171， ## 如果是 github，替换成 github.com RUN mkdir -p ~/.ssh \u0026\u0026 \\ chmod 700 ~/.ssh \u0026\u0026 \\ ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts \u0026\u0026 \\ RUN --mount=type=ssh \u0026\u0026 \\ mkdir -p ~/git \u0026\u0026 cd ~/git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ cd wepy \u0026\u0026 \\ bash ./install.venv.sh \u0026\u0026 \\ rm -rf ~/git/wepy 这里需要注意： 在 Dockerfile 第一行（前面不能有其他注释）添加 #syntax=docker/dockerfile:1.0.0-experimental 添加 ssh-keyscan 避免 unknown host 错误 使用 Run --mount=type=ssh XXX 执行需要的命令 另外，我们在上层的 Dockerfile 不能有以下命令，这个会干扰 git 的权限问题 echo \"Host *\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ echo \" ServerAliveInterval 60\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ echo \" ServerAliveInterval 60\" \u003e\u003e ~/.ssh/config \u0026\u0026 \\ ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:1:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":" Docker build ## ---------------------------------------------------------------------------- ## build export COMPOSE_DOCKER_CLI_BUILD=1 export DOCKER_BUILDKIT=1 # DOCKER_BUILDKIT=1 proxychains4 docker build --ssh default -t datamgr:v1.0 . DOCKER_BUILDKIT=1 docker build --ssh default -t datamgr:v1.0 . ## ---------------------------------------------------------------------------- 这里需要注意： 使用 ``DOCKER_BUILDKIT=1 开启实验性功能（–mount`） ","date":"2022-11-24","objectID":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/:2:0","tags":["docker","dockerfile","ssh","git"],"title":"Dockerfile 使用 ssh 下载私有 git 项目","uri":"/2022-11-24-dockerfile-%E4%BD%BF%E7%94%A8-ssh-%E4%B8%8B%E8%BD%BD%E7%A7%81%E6%9C%89-git-%E9%A1%B9%E7%9B%AE/"},{"categories":["tools"],"content":"对于在 fdisk 显示，但是没有添加到已经挂载目录的磁盘空间，我们需要进行对剩余磁盘空间的挂载操作。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:0:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" fdisk -l 查看当前磁盘空间 fdisk -l 可以看到，这时候 /dev/sda 一共有 200G 空间，但实际占用的磁盘只有19G(19,921,920)。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:1:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" vgdisplay 显示当前可用逻辑卷空间 发现可以空间（Free PE / Size) 为空。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:2:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" lvdisplay 查看分卷的名称 --- Logical volume --- LV Path /dev/centos/root LV Name root VG Name centos LV UUID RJXQ4v-eiWR-Mddv-afWi-JFcm-I2pk-dk78jm LV Write Access read/write LV Creation host, time localhost, 2022-10-11 18:10:29 +0800 LV Status available # open 1 LV Size \u003c117.00 GiB Current LE 29951 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:0 --- Logical volume --- LV Path /dev/centos/swap LV Name swap VG Name centos LV UUID o6bndH-Tev1-1nLj-l3ZW-HKE5-UncQ-69aBLQ LV Write Access read/write LV Creation host, time localhost, 2022-10-11 18:10:29 +0800 LV Status available # open 2 LV Size 2.00 GiB Current LE 512 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:1 可以看到，根目录/ 对应的路径是 /dev/centos/root，我们就是需要扩展这个分卷空间。 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:3:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" fdisk 初始化未未挂磁盘 fdisk /dev/sda 初始化完成后，会看到多了一个 /dev/sda3. ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:4:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" pvcreate 添加到逻辑卷 pvcreate /dev/sda3 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:5:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" vgextend vgextend /dev/sda3 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:6:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" lvextend lvextend -L +100G /dev/mapper/centos-root ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:7:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" 新磁盘 pvcreate /dev/sda pvdisplay # 将新的 PV 加入 VolGroup 组卷，使用 vgdisplay 获取得到的 `VG Name` vgextend centos /dev/sda ## 查看当前逻辑磁盘的空间大小 lvdisplay ## 查看系统可用空间大小 vgdisplay ## 增加一个 vg lvs lvcreate -L1024G -n data centos lvs mkfs.xfs /dev/mapper/centos-data mkdir -p /data mount /dev/mapper/centos-data /data ## 设置自动挂载 vim /etc/fstab /dev/mapper/centos-data /data xfs defaults 0 0 ## 逻辑卷扩容 ## 查看系统可用空间大小 vgdisplay ## 开始进行磁盘扩展，增加 500G 到 /dev/mapper/centos-data（也就是 /data） lvextend -L +500G /dev/mapper/centos-data xfs_growfs /dev/mapper/centos-data ## CentOS6 使用命令 resize2fs df -h ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:8:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":" 如果不是逻辑卷 lvm，则直接挂载 ## 查看 fdisk -l ## 新建分区 fdisk /dev/sda n -\u003e 1 -\u003e 8e -\u003e w ## 格式化 mkfs.ext4 /dev/sda1 ## 直接挂载到　/data mkdir -p /data mount /dev/sda1 /data vi /etc/fstab /dev/sda1 /data ext4 defaults 0 0 RefLinux 将剩余未分区的磁盘空间挂载 ","date":"2022-11-23","objectID":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/:9:0","tags":["Linux","fdisk","lvm","lvextend","lvdisplay","vgdisplay"],"title":"Linux fdisk 将剩余未分区的磁盘空间挂载","uri":"/2022-11-23-linux-fdisk-%E5%B0%86%E5%89%A9%E4%BD%99%E6%9C%AA%E5%88%86%E5%8C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD/"},{"categories":["tools"],"content":"在一个 Docker 里面调用系统命令 systemctl ## 启动的时候添加 /sbin/init ## 不是 /usr/sbin/init/ 因为有可能找不到 docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 wuya-centos7-r4.0:v1.0 /sbin/init docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 192.168.1.88:5000/wuya/centos7-r4.0:v1.0 /sbin/init ## 运行的时候添加 bash docker exec -it rshiny bash sudo systemctl start rstudio-server sudo systemctl start shiny-server ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8-systemctl/:0:0","tags":["docker","systemctl","systemd","Linux"],"title":"Docker 使用 systemctl","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8-systemctl/"},{"categories":["tools"],"content":"居家必备之 Docker 运维总结。 安装 Docker","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:0:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:1:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:2:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 安装 sudo yum install docker.io 或者使用国内 daocloud 一键安装命令： ## daocloud curl -sSL https://get.daocloud.io/docker | sh 搭建私有 DockerHub","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:3:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 建立 registry ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry ## 为了防止不小心删掉，我们将其挂载到 /data/Docker/registry 这个目录下 mkdir -p /data/Docker/registy docker run --name docker.registry \\ -d -p 5000:5000 \\ -v /data/Docker/registy:/tmp/registry \\ registry docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --permanent--add-port=5000/tcp firewall-cmd --reload ## 如果出现错误 ## -i docker0: iptables: no chain/target/match by that name. ## Ref:https://blog.csdn.net/xujiamin0022016/article/details/108124725 systemctl restart docker ## 测试访问 curl http://127.0.0.1:5000/v2/ ## 返回 {} 说明正常运行了 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:4:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 配置需要配置 daemon.json 允许访问本地使用 DockerHub sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"192.168.1.183:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } 这里需要注意需要重启 docker 服务 systemctl restart docker ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:5:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 测试 ## 查看当前有哪些 images docker image ls docker tag hello-world 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing ## 可以看一下是不是有这个 repo 了 curl http://192.168.1.183:5000/v2/_catalog 常用命令 编写 Dockerfile","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:6:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" Centos7.9可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 查看 centos https://hub.docker.com/_/centos?tab=tags\u0026page=1\u0026ordering=last_updated FROM centos:centos7.9.2009 MAINTAINER WuyaCapital LABEL Remarks=\"CentOS7.9 Develop\u0026Testing Environment @WuyaCapital\" RUN yum -y install \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ openssl-devel libcurl-devel RUN mkdir -p /shared/trading /data ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" EXPOSE 22 80 WORKDIR /home CMD /bin/bash 命令说明： CMD 指定容器启动时执行的命令，注意，和RUN的区别是：RUN是在打包过程中执行的命令。镜像中只能有一条CMD指令，如果有多个CMD指令，则以最后一条为准，所以我们可以覆盖基础镜像中定义的CMD指令。CMD指令支持三种格式： CMD [\"executable\", \"param1\", \"param2\"] 使用exec执行，这是使用CMD的首选方法 CMD command param1 param2 使用/bin/sh -c执行 CMD [\"param1\", \"param2\"] 提供给ENTRYPOINT的默认参数 注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。 ENTRYPOINT 容器启动入口，即容器启动后执行的命令，不会被CMD指令覆盖，如果存在ENTRYPOINT，那么CMD指令会充当ENTRYPOINT的参数。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:7:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 搭建 docker build -t wuya-centos7:v1.0 . docker image ls ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run --name mycentos7 --net=host -dit wuya-centos7:v1.0 ## 启动实例 docker exec -it mycentos7 /bin/bash 发布 Docker","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:8:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 打包一个容器 docker commit -a \"william\" -m \"wuya-centos7:v1.0\" [container_id] image_id:version 当然，也可以直接打包成一个压缩包 ## 打包 docker save wuya-centos7:v1.0 \u003e mycetnos7.tar ## 加载 docker load -i mycetnos7.tar 我们也可以选择发布到 Dockerhub docker tag wuya-centos7:v1.0 192.168.1.183:5000/wuya/centos7:v1.0 docker push 192.168.1.183:5000/wuya/centos7:v1.0 docker pull 192.168.1.183:5000/wuya/centos7:v1.0 curl http://192.168.1.183:5000/v2/_catalog curl http://192.168.1.183:5000/v2/wuya/centos7/tags/list 这样，我们可以建立一个新的容器了 ## 记得修改 vim /etc/docker/daemon.json docker pull 192.168.1.183:5000/wuya/centos7:v1.0 docker image ls docker run -dit --name testing 192.168.1.183:5000/wuya/centos7:v1.0 docker ps -a docker exec -it testing /bin/bash Q\u0026A","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:9:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" build 的时候无法使用 pip 直接安装程序 这个是因为 Docker 的 DNS 没有识别到，需要处理一下。 Ref:[Can’t install pip packages inside a docker container with Ubuntu](https://stackoverflow.com/questions/28668180/cant-install-pip-packages-inside-a-docker-container-with-ubuntu) ## 编辑 sudo vim /etc/default/docker ## 添加 DNS DOCKER_OPTS=\"--dns 8.8.8.8\" ## 重启 sudo systemctl restart docker ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:10:0","tags":["docker"],"title":"Docker 运维小记","uri":"/2022-11-23-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["tools"],"content":" 参考链接：https://github.com/rocker-org/rocker/issues/206 https://hub.docker.com/r/rocker/rstudio ## 新建 Docker docker run -d --name rstudio -v $HOME:/home/`whoami` -e USER=lfang -e PASSWORD=****** -p 58787:8787 rocker/tidyverse docker exec -it rstudio /bin/bash 用户：lfang 密码：****** 端口：58787 ## 添加用户，需要进入 docker 添加用户 docker exec -it rstudio /bin/bash sudo adduser tester sudo passwd tester ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E8%BF%90%E8%A1%8C-rstudio/:0:0","tags":["docker","rstudio"],"title":"Docker 运行 rstudio","uri":"/2022-11-23-docker-%E8%BF%90%E8%A1%8C-rstudio/"},{"categories":["tools"],"content":"通过 Docker 搭建一个可用的 openwrt ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:0:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":" 安装 ip addr sudo ip link set eno1 promisc on sudo docker network create -d macvlan --subnet=192.168.3.0/24 --gateway=192.168.3.1 -o parent=eno1 macnet docker network inspect macnet docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 sudo docker run -d --restart always --name openwrt --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init sudo docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' ## 必须是这个 option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.3.101' option gateway '192.168.3.1' option dns '192.168.3.1' option broadcast '192.168.3.255' config interface 'vpn0' option ifname 'tun0' option proto 'none' sudo docker restart openwrt 密码：password ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:1:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":" 宿主机与 Docker(openwrt) 无法通信 参考：在docker中运行openwrt #4 sudo ip link add link eno1 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.3.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ## 以下可能有错误 ======================= # #sudo ip route del default #删除默认路由 # sudo ip route add default via 192.168.3.105 dev hMACvLAN # 设置静态路由 # sudo echo \"nameserver 192.168.3.1\" \u003e /etc/resolv.conf # 设置静态 dns 服务器 # ping 192.168.3.105 # # 或者使用 nmcli # nmcli connection add type macvlan dev eno1 mode bridge ifname hMACvLAN autoconnect yes save yes docker import https://downloads.openwrt.org/releases/19.07.0/targets/x86/64/openwrt-19.07.0-x86-64-generic-rootfs.tar.gz openwrt:19.07.0 sudo docker run -d –restart unless-stopped –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 –name openwrt /sbin/init sudo docker run –restart always –name openwrt –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init 无法访问国内网址： dns 选择：pdnsd：208.67.222.222(Open DNS) https://github.com/coolsnowwolf/lede/issues/5520 关闭 “系统” -\u003e “启动项” -\u003e “19”(firewall 需要禁止) “网络” -\u003e “接口” -\u003e “防火墙” -\u003e “区域”(需要全部选择接受) 然后在\"自定义规则里面\"，填写 iptables -t nat -I POSTROUTING -j MASQUERADE 在 “服务” -\u003e “PassWall” -\u003e “模式” TCP默认模式： GFW 列表 UDP默认模式：GFW 列表 路由器TCP：GFW（这个GFW模式就可以） 路由器UDP：GFW（这个GFW模式就可以） 5.手机连接 a. IP 手动： IP地址：192.168.3.29（自己手机的固定IP） 子网掩码：255.255.255.0 路由器：192.168.3.101（需要和openwrt路由器一样） b. 配置DNS，需要先删除掉原来的 手动：192.168.3.101（需要和openwrt路由器一样） William-Ubuntu 安装 ip add ## 如果原来有网卡，需要删除掉 sudo ifconfig hMACvLAN down sudo ip link delete hMACvLAN sudo ip link set enp0s31f6 promisc on ## 如果有，需要删掉 docker network ls docker network rm macnet docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=enp0s31f6 macnet docker network inspect macnet docker run -d \\ --restart always \\ --name openwrt \\ --network macnet \\ --privileged \\ registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 \\ /sbin/init docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.1.101' ## docker ip，可以打开监控界面 option gateway '192.168.1.1' option dns '192.168.1.1' config interface 'vpn0' option ifname 'tun0' option proto 'none' docker restart openwrt ## 管理界面密码 密码：password sudo ip link add link enp0s31f6 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.1.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/:2:0","tags":["docker","openwrt"],"title":"Docker 搭建 openwrt","uri":"/2022-11-23-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["tools"],"content":"搭建企业内部使用的仓库。 安装 Docker Register ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry mkdir -p /data/Docker/registy docker run --name docker.registry -d -p 5000:5000 -v /data/Docker/registy:/tmp/registry --restart unless-stopped registry docker update --restart=always \u003ccontaier_id\u003e docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=5000/tcp --permanent firewall-cmd --reload ## 测试访问 curl http://192.168.1.135:5000/v2/ 使用 ## 测试 docker tag hello-world 192.168.1.135:5000/testing docker push 192.168.1.135:5000/testing ## 查看所有镜像 curl http://10.32.111.107:5000/v2/_catalog ## 查看镜像的所有tag curl http://10.32.111.107:5000/v2/william-centos7-gcc9/tags/list 远程如果出现报错 http: server gave HTTP response to HTTPS client 对于 CentOS 需要修改： vim /usr/lib/systemd/system/docker.service ## 添加 --insecure-registry 10.32.111.107:5000 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 10.32.111.107:5000 或者可以直接修改（如果是空的，需要创建） ## 编辑 /etc/docker/daemon.json ## 添加 \"insecure-registries\" 里面的 \"docker.williamlfang.com:58080\" sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"https://mirror.baidubce.com\", \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"docker.williamlfang.com:58080\", \"192.168.1.88:5000\", \"192.168.1.183:5000\", \"10.32.111.107:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } sudo systemctl restart docker ## 获取镜像 docker pull docker.williamlfang.com:58080/testing Using default tag: latest latest: Pulling from testing Digest: sha256:90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 Status: Downloaded newer image for docker.williamlfang.com:58080/testing:latest docker.williamlfang.com:58080/testing:latest 添加账户密码认证","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:0:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" 安装 htpasswd sudo yum install -y httpd-tools mkdir /etc/docker/auth htpasswd -Bbn tradeops passwd \u003e /etc/docker/auth/htpasswd ## 测试是否需要认证 curl http://192.168.1.88:5000/v2/ {\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"authentication required\",\"detail\":null}]} ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:1:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" login docker login -u tradeops 192.168.1.88:5000 docker logout 192.168.1.88:5000 ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:2:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" 添加 insecure { \"registry-mirrors\": [ \"http://hub-mirror.c.163.com\", \"https://docker.mirrors.ustc.edu.cn\", \"https://registry.docker-cn.com\" ], \"insecure-registries\" : [ \"192.168.1.162:5000\", \"10.32.111.107:5000\" ] } ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:3:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":" airflow 处理 docker 问题 ## 需要在 airflow 执行 docker logout 192.168.1.88:5000 ","date":"2022-11-23","objectID":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:4:0","tags":["docker","registery","centos"],"title":"CentOS7 搭建私有 DockerHub","uri":"/2022-11-23-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["tools"],"content":"居家必备之 Docker 使用总结。 安装","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:0:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" UbuntuUbuntu 操作系统的安装步骤可以参考官网说明 卸载旧版本 sudo apt-get remove docker docker-engine docker.io containerd runc Reading package lists... Done Building dependency tree Reading state information... Done Package 'docker-engine' is not installed, so not removed Package 'docker' is not installed, so not removed Package 'containerd' is not installed, so not removed Package 'docker.io' is not installed, so not removed Package 'runc' is not installed, so not removed 0 upgraded, 0 newly installed, 0 to remove and 43 not upgraded. 添加软件源 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - echo $(lsb_release -cs) Linux Mint Releases Version Codename Package base 19.1 Tessa Ubuntu Bionic 19 Tara Ubuntu Bionic 18.3 Sylvia Ubuntu Xenial 18.2 Sonya Ubuntu Xenial # sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu Bionic stable\" 开始安装 sudo apt-get update sudo apt install docker.io 设置启动服务 sudo systemctl start docker ## 添加开机启动 sudo systemctl enable docker 查看 Docker 版本 docker --version Docker version 19.03.6, build 369ce74a3c Docker 后台服务需要具有 sudo 权限。为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。 ## 建立 docker 组 sudo groupadd docker ## 把当前用户添加到 docker 组 sudo usermod -aG docker $USER 然后先退出账户(logout)，再次登录(login)即可使用 docker 命令了 运行试试看 docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 0e03bdcc26d7: Pull complete Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 如果还有出现以下的报错，需要修改权限 WARNING: Error loading config file: /home/william/.docker/config.json: stat /home/william/.docker/config.json: permission denied sudo chown william:william /home/william/.docker -R 由于某些原因，国内访问 Docker 的软件源速度是比较慢的。幸好，我们可以更改指定的源，使用国内阿里云或者网易可以大大的加速访问速度。 ## 修改 docker 配置文件 sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\" ], \"debug\" : true, \"experimental\" : true } sudo systemctl restart docker.service ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" CentOS 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update 安装 sudo yum install docker.io 也可以使用国内 daocloud 一键安装命令： ## 阿里 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ## daocloud curl -sSL https://get.daocloud.io/docker | sh 加入 docker 用户组命令 sudo usermod -aG docker trader 添加启动 sudo systemctl enable docker sudo systemctl start docker 运行测试 sudo docker run hello-world 基础概念 编写 Dockerfile可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 FROM centos:7 MAINTAINER WilliamFang LABEL Remarks=\"CentOS7.5 Develop\u0026Testing Environment\" RUN yum -y install vim git sudo \u0026\u0026 yum -y install make \u0026\u0026 \\ yum -y install gcc gcc-c++ kernel-devel \u0026\u0026 \\ yum -y install cmake bzip2 htop tldr pigz pbzip2 \u0026\u0026 \\ yum -y install bzip2-devel.x86_64 \u0026\u0026 \\ yum -y install libxslt-devel libffi-devel openssl-devel libcurl-devel ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" 然后使用命令开始搭建 sudo docker build -t myctp:v1.0 . 然后就可以看到 docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE myctp v1.0 91b0c32f2935 2 minutes ago 564MB centos 7 b5b4d78bc90c 7 weeks ago 203MB 现在，我们就可以愉快的使用 Docker 进行测试了 ## 查看当前运行的 docker container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 说明当前还没有生成相应的实例。我们可以启动使用命令启动 ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run -dit -v /home/william:/mnt myctp:v1.0 /bin/bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2b40845d0309 myctp:v1.0 \"/bin/bash\" 4 seconds ago Up 3 seconds upbeat_montalcini docker run --name rshiny -dit -e USER=rshiny -e PASSWORD=ilovewuya -p 58787:8787 -p 53838:3838 wuya-centos7:v1.0 ## 添加用户，需要进入 docker 添加用户 docker exec -it rshiny /bin/bash sudo adduser tester sudo passwd tester 然后开始启动 ## 挂载到实例 docker exec -it b3c220b3c9c6 /bin/bash [root@b3c220b3c9c6 /]# whoami root [root@b3c220b3c9c6 /]# gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper Target: x86_64-redhat-linux Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux Thread model: posix gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) [root@b3c220b3c9c6 /]# 退出会依然可以看到程序在运行中 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b3c220b3c9c6 myctp:v1.0 \"/bin/bash\" 2 minutes ago Up 2 minutes gallant_bell ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 删除 ## 列出所有 docker ps -aq #＃ 删除指定 id docker rm ## 删除 image docker rmi 列出所有容器 ID docker ps -aq 查看所有运行或者不运行容器 docker ps -a 停止所有的 container（容器），这样才能够删除其中的 images： docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) 如果想要删除所有 container（容器）的话再加一个指令： docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) 查看当前有些什么 images docker images 删除 images（镜像），通过 image 的 id 来指定删除谁 docker rmi \u003cimage id\u003e 想要删除 untagged images，也就是那些 id 为的 image 的话可以用 docker rmi $(docker images | grep \"^\u003cnone\u003e\" | awk \"{print $3}\") 要删除全部 image（镜像）的话 docker rmi $(docker images -q) 强制删除全部 image 的话 docker rmi -f $(docker images -q) 从容器到宿主机复制 docker cp tomcat：/webapps/js/text.js /home/admin docker cp 容器名: 容器路径 宿主机路径 从宿主机到容器复制 docker cp /home/admin/text.js tomcat：/webapps/js docker cp 宿主路径中文件 容器名 容器路径 删除所有停止的容器 docker container prune 删除所有不使用的镜像 docker image prune --force --all或者docker image prune -f -a 停止、启动、杀死、重启一个容器 docker stop Name或者ID docker start Name或者ID docker kill Name或者ID docker restart name或者ID 发布 docker为了方便移植，Docker 允许我们通过两个方式来分享配置好的运行环境。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:3:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" Docker Hub通过使用 Docker Hub 来发布。 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:4:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 提交 docker commit -a \"william\" -m \"myctp:v0.1\" -p myctp.new myctp:v0.1 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:5:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 导出 docker save -o myctp.v0.1.tar myctp:v0.1 ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:6:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 导入 docker run -d --name myctp -it -v /home/william:/mnt myctp:v0.1 /bin/zsh ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:7:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 运行 docker exec -it myctp.new /bin/zsh ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:8:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":" 提交 Docker Hub docker login UserName: williamlfnag Password: ************ ## 标记需要处理的image docker tag myctp:v0.1.2 williamlfang/myctp REPOSITORY TAG IMAGE ID CREATED SIZE myctp v0.1.2 9c41f991a440 13 minutes ago 4.57GB williamlfang/myctp latest 9c41f991a440 13 minutes ago 4.57GB myctp v0.1.1 59c7bc923b02 3 days ago 4.02GB myctp v0.1 e8a31774a8c6 4 days ago 2.49GB centos 7 b5b4d78bc90c 8 weeks ago 203MB docker push williamlfang/myctp docker pull williamlfang/myctp 使用 williamlfang ## 显示当前可用镜像 docker image ls ## 如果没有 williamlfang/myctp docker pull williamlfang/myctp ## 再次确认已经下载到本地 docker image ls ## 基于此镜像生成 container docker run -d --name myctp.dockerhub -it williamlfang/myctp /bin/zsh ## 查看 docker 目前的所有 container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dcc7924f4c1a williamlfang/myctp \"/bin/zsh\" 4 seconds ago Up 3 seconds myctp.dockerhub c57d4de5205b f03a8c4cf617 \"/bin/zsh\" 12 days ago Exited (255) 4 minutes ago myctp b50399b23d5b myctp:v0.1 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.test 11953e12a6b5 e2c0099752c8 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.new ## 进入 container 操作 docker exec -it myctp.dockerhub /bin/zsh 以下就是进入我们的操作系统后的截图显示 ⚡ root@centos7  /  j myctp anaconda-post.log bin data dev etc home lib lib64 log media mnt opt proc root run sbin srv sys tmp usr var /root/myCTP build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src ⚡ root@centos7  myCTP  ll build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src total 64K drwxr-xr-x 11 root root 4.0K Jul 4 17:06 . dr-xr-x--- 1 root root 4.0K Jul 13 17:27 .. drwxr-xr-x 4 root root 4.0K Jul 4 16:59 build -rw-r--r-- 1 root root 5.6K Jul 4 16:51 CMakeLists.txt drwxr-xr-x 2 root root 4.0K Jul 4 16:37 config -rw-r--r-- 1 root root 5.0K Jul 4 16:37 CTP踩坑记.md drwx------ 3 root root 4.0K Jul 4 17:06 data drwxr-xr-x 5 root root 4.0K Jul 4 16:42 deps drwxr-xr-x 10 root root 4.0K Jul 4 16:37 include drwxr-xr-x 11 root root 4.0K Jul 4 16:59 libs drwx------ 4 root root 4.0K Jul 4 17:06 log drwxr-xr-x 2 root root 4.0K Jul 4 16:39 scripts drwxr-xr-x 10 root root 4.0K Jul 4 16:37 src 使用技巧可以执行变量名称 ## 增加额外运行参数 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_simnow \\ -v /home/william/mkdata:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 重新打 tag docker tag 8557026cb47e[原来的image id] registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 报错无法删除 ## Ref: https://stackoverflow.com/questions/38118791/can-t-delete-docker-image-with-dependent-child-images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker rmi c565603bc87f # 设置日志文件 docker tag 29db0d77705f registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker push registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker pull registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=colo_gtja \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_hf \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_zz \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker exec -it ctpmd /bin/bash ","date":"2022-11-23","objectID":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:9:0","tags":["docker","总结","技巧","经验"],"title":"Docker 使用总结","uri":"/2022-11-23-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["tools"],"content":"由于在 Dockerfile 里面需要支持新的语法规则（experimental以支持 –mount=），我们需要同步更新 docker-compose 到 v2 版本。 wget \"https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-$(uname -s)-$(uname -m)\" sudo cp docker-compose-Linux-x86_64 /usr/local/bin/docker-compose Docker Compose version v2.1.1 ","date":"2022-11-23","objectID":"/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/:0:0","tags":["docker","docker-compose","ubuntu"],"title":"Ubuntu 更新 docker compose 2.1.1","uri":"/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/"},{"categories":["tools"],"content":"在 Dockerfile 使用 ssh 秘钥，可以访问相应权限的项目 ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:0:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Dockerfile # syntax=docker/dockerfile:experimental FROM william-centos7-gcc9:v1.0 MAINTAINER William LABEL Remarks=\"DataMgr @WuyaCapital\" # add credentials on build RUN mkdir -p -m 0700 ~/.ssh \u0026\u0026 \\ ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts # ADD ./requirements.txt /app/requirements.txt # RUN pip install -r requirements.txt RUN --mount=type=ssh \\ mkdir -p git \u0026\u0026 cd git \u0026\u0026 \\ git clone git@192.168.1.171:lfang/wepy.git \u0026\u0026 \\ echo `ls -alh` CMD [\"/usr/sbin/init\"] 这里需要注意： 在开头添加 # syntax=docker/dockerfile:experimental 在 RUN 命令后面添加 --mount=type=ssh ，之后是正常的 bash 命令语句 ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:1:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Docker 命令执行 DOCKER_BUILDKIT=1 docker build --ssh default -t 如果出现了以下的报错，先不要慌，可能是网络解析不通畅： =\u003e ERROR resolve image config for docker.io/docker/dockerfile:experimental 0.1s ------ \u003e resolve image config for docker.io/docker/dockerfile:experimental: ------ failed to solve with frontend dockerfile.v0: failed to solve with frontend gateway.v0: unexpected status code https://docker.mirrors.ustc.edu.cn/v2/docker/dockerfile/manifests/experimental: 403 Forbidden ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:2:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" Docker-compose 执行","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:3:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":" 结果查看 [+] Building 277.1s (10/12) =\u003e [internal] load build definition from Dockerfile 0.0s =\u003e =\u003e transferring dockerfile: 38B 0.0s =\u003e [internal] load .dockerignore 0.0s =\u003e =\u003e transferring context: 2B 0.0s =\u003e resolve image config for docker.io/docker/dockerfile:experimental 1.6s =\u003e CACHED docker-image://docker.io/docker/dockerfile:experimental@sha256:600e5c62eedff338b3f7a0850beb7c05866e0ef27b2d2e8c02aa468e78496ff5 0.0s =\u003e [internal] load build definition from Dockerfile 0.0s =\u003e =\u003e transferring dockerfile: 38B 0.0s =\u003e [internal] load metadata for docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e [1/5] FROM docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e =\u003e resolve docker.io/library/william-centos7-gcc9:v1.0 0.0s =\u003e [internal] load build context 0.0s =\u003e =\u003e transferring context: 38B 0.0s =\u003e [2/5] RUN mkdir -p -m 0700 ~/.ssh \u0026\u0026 ssh-keyscan 192.168.1.171 \u003e\u003e ~/.ssh/known_hosts 0.5s =\u003e [3/5] ADD ./requirements.txt /app/requirements.txt 0.1s =\u003e [4/5] RUN pip3 install -r requirements.txt ","date":"2022-11-22","objectID":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/:4:0","tags":["Docker","Dockerfile","ssh"],"title":"Dockerfile 使用 ssh","uri":"/2022-11-22-dockerfile-%E4%BD%BF%E7%94%A8-ssh/"},{"categories":["tools"],"content":"使用 Dockerfile，从源代码开始搭建一个基本的 Docker Image，为其他应用提供基础服务。 ","date":"2022-11-22","objectID":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/:0:0","tags":["Docker","Dockerfile","image","container","部署","基础","数据","python","gcc"],"title":"制作一个基本Docker镜像","uri":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/"},{"categories":["tools"],"content":" Dockerfile FROM centos:centos7.9.2009 MAINTAINER William LABEL Remarks=\"CentOS7.9 Develop\u0026Testing Environment @WuyaCapital\" RUN yum update -y \u0026\u0026 yum install -y \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ bzip2 mlocate sqlite-devel \\ openssl-devel libcurl-devel chrony \\ wget dmidecode net-tools openssh-server perl-CPAN perl-IPC-Cmd RUN yum install -y kde-l10n-Chinese \u0026\u0026 \\ yum reinstall -y glibc-common \u0026\u0026 \\ localedef -c -f GB18030 -i zh_CN zh_CN.GB18030 \u0026\u0026 \\ updatedb RUN cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-2.18.tar.gz \u0026\u0026 \\ tar -xvf glibc-2.18.tar.gz \u0026\u0026 \\ cd glibc-2.18 \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* RUN cd /tmp \u0026\u0026 mkdir gcc9 \u0026\u0026 cd gcc9 \u0026\u0026 \\ wget --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz \u0026\u0026 \\ tar zxvf gcc-9.2.0.tar.gz \u0026\u0026 \\ cd gcc-9.2.0 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 \u0026\u0026 \\ tar jxvf gmp-6.1.0.tar.bz2 \u0026\u0026 \\ tar zxvf mpc-1.0.3.tar.gz \u0026\u0026 \\ tar jxvf mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ tar jxvf isl-0.18.tar.bz2 \u0026\u0026 \\ ln -s gmp-6.1.0 gmp \u0026\u0026 \\ ln -s mpfr-3.1.4 mpfr \u0026\u0026 \\ ln -s mpc-1.0.3 mpc \u0026\u0026 \\ ln -s isl-0.18 isl \u0026\u0026 \\ sudo ./configure --prefix=/usr/local/gcc9 --enable-bootstrap --enable-checking=release --enable-languages=c,c++ --disable-multilib \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ echo \"export PATH=/usr/local/gcc9/bin:$PATH\" \u003e\u003e /etc/profile.d/gcc.sh \u0026\u0026 \\ source /etc/profile.d/gcc.sh \u0026\u0026 \\ ln -sv /usr/local/gcc9/include/ /usr/include/gcc \u0026\u0026 \\ echo \"/usr/local/gcc9/lib64\" \u003e\u003e /etc/ld.so.conf.d/gcc.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ ldconfig -p |grep gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/g++ /usr/bin/g++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/gcc /usr/bin/gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/c++ /usr/bin/c++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/cc /usr/bin/cc \u0026\u0026 \\ rm -rf /tmp/gcc* RUN cd /tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/openssl/include/openssl /usr/include/openssl \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \u0026\u0026 \\ echo \"/usr/local/openssl/lib64\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/openssl* RUN cd /tmp \u0026\u0026 wget --no-check-certificate https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tar.xz \u0026\u0026 \\ tar -xvf Python-3.11.0.tar.xz \u0026\u0026 \\ cd Python-3.11.0 \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=/usr/local/python3 \\ --with-openssl=/usr/local/openssl \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \u0026\u0026 \\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \u0026\u0026 \\ python3 -m ssl \u0026\u0026 \\ rm -rf /tmp/Python* ENV TZ Asia/Shanghai RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone RUN mkdir -p /shared/trading /data ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" EXPOSE 22 80 WORKDIR /app CMD [\"/usr/sbin/init\"] ","date":"2022-11-22","objectID":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/:1:0","tags":["Docker","Dockerfile","image","container","部署","基础","数据","python","gcc"],"title":"制作一个基本Docker镜像","uri":"/2022-11-22-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E6%9C%ACdocker%E9%95%9C%E5%83%8F/"},{"categories":["tools"],"content":"从源代码开始编译、安装 Python3.11，由于从这个版本之后，Python 采用了 SSL 的加密方式，需要依赖 openssl-1.1.1。同时，如果我们开启了 --enable-optimization 优化选项，还需要依赖 gcc9 以上版本才能支持，否则会一直出现报错。 ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:0:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装依赖包 yum update -y \u0026\u0026 yum install -y \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ bzip2 mlocate sqlite-devel \\ zlib zlib-devel libffi-devel \\ openssl-devel libcurl-devel chrony \\ wget dmidecode net-tools openssh-server openssh-client perl-CPAN perl-IPC-Cmd \u0026\u0026 \\ yum clean all \u0026\u0026 \\ rm -rf /var/cache/yum/* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:1:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 glibc cd /tmp \u0026\u0026 wget --no-check-certificate http://mirrors.ustc.edu.cn/gnu/libc/glibc-2.18.tar.gz \u0026\u0026 \\ tar -xvf glibc-2.18.tar.gz \u0026\u0026 \\ cd glibc-2.18 \u0026\u0026 \\ mkdir build \u0026\u0026 cd build \u0026\u0026 \\ ../configure --prefix=/usr \\ --disable-profile \\ --enable-add-ons \\ --with-headers=/usr/include \\ --with-binutils=/usr/bin \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ rm -rf /tmp/glibc* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:2:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 gcc9 cd /tmp \u0026\u0026 mkdir gcc9 \u0026\u0026 cd gcc9 \u0026\u0026 \\ wget --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz \u0026\u0026 \\ tar zxvf gcc-9.2.0.tar.gz \u0026\u0026 \\ cd gcc-9.2.0 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \u0026\u0026 \\ wget --no-check-certificate ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 \u0026\u0026 \\ tar jxvf gmp-6.1.0.tar.bz2 \u0026\u0026 \\ tar zxvf mpc-1.0.3.tar.gz \u0026\u0026 \\ tar jxvf mpfr-3.1.4.tar.bz2 \u0026\u0026 \\ tar jxvf isl-0.18.tar.bz2 \u0026\u0026 \\ ln -s gmp-6.1.0 gmp \u0026\u0026 \\ ln -s mpfr-3.1.4 mpfr \u0026\u0026 \\ ln -s mpc-1.0.3 mpc \u0026\u0026 \\ ln -s isl-0.18 isl \u0026\u0026 \\ sudo ./configure --prefix=/usr/local/gcc9 \\ --enable-bootstrap \\ --enable-checking=release \\ --enable-languages=c,c++ \\ --disable-multilib \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ echo \"export PATH=/usr/local/gcc9/bin:$PATH\" \u003e\u003e /etc/profile.d/gcc.sh \u0026\u0026 \\ source /etc/profile.d/gcc.sh \u0026\u0026 \\ ln -sv /usr/local/gcc9/include/ /usr/include/gcc \u0026\u0026 \\ echo \"/usr/local/gcc9/lib64\" \u003e\u003e /etc/ld.so.conf.d/gcc.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ ldconfig -p |grep gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/g++ /usr/bin/g++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/gcc /usr/bin/gcc \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/c++ /usr/bin/c++ \u0026\u0026 \\ ln -sf /usr/local/gcc9/bin/cc /usr/bin/cc \u0026\u0026 \\ rm -rf /tmp/gcc* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:3:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 openssl cd /tmp \u0026\u0026 wget --no-check-certificate https://www.openssl.org/source/openssl-3.0.7.tar.gz \u0026\u0026 \\ tar -xvf openssl-3.0.7.tar.gz \u0026\u0026 \\ cd openssl-3.0.7 \u0026\u0026 \\ ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl no-shared zlib-dynamic \u0026\u0026 \\ make \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/openssl/include/openssl /usr/include/openssl \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/local/lib64/libssl.so \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1 \u0026\u0026 \\ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \u0026\u0026 \\ echo \"/usr/local/openssl/lib64\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ rm -rf /tmp/openssl* 这里需要注意： 指定了安装路径：``–prefix=/usr/local/openssl，这个在安装 Python` 的时候使用 ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:4:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 安装 Python 3.11 export PYTHON_VERSION=3.11.1 cd /tmp \u0026\u0026 \\ # wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ wget --no-check-certificate https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ tar -xvf Python-${PYTHON_VERSION}.tar.xz \u0026\u0026 \\ cd Python-${PYTHON_VERSION} \u0026\u0026 \\ export LDFLAGS=-rdynamic \u0026\u0026 \\ CFLAGS=\"-I/usr/local/openssl/include\" LDFLAGS=\"-L/usr/local/openssl/lib64\" \\ ./configure \\ --enable-shared \\ --enable-optimizations \\ --enable-loadable-sqlite-extensions \\ --prefix=/usr/local/python3 \\ --with-openssl=/usr/local/openssl \u0026\u0026 \\ make -j \u0026\u0026 make install \u0026\u0026 \\ ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \u0026\u0026\\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \u0026\u0026 \\ ln -s /usr/local/python3/bin/pip3 /usr/bin/pip \u0026\u0026 \\ echo \"export PATH=/usr/local/python3/bin:$PATH\" \u003e\u003e /etc/profile.d/python3.sh \u0026\u0026 \\ echo \"/usr/local/python3/lib\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 \\ ldconfig -v \u0026\u0026 \\ python3 -m ssl \u0026\u0026 \\ rm -rf /tmp/Python* ","date":"2022-11-22","objectID":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:5:0","tags":["python","python3.11","openssl","gcc","源代码","编译"],"title":"Python3.11：源代码编译安装","uri":"/2022-11-22-python3.11-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["tools"],"content":" 如何搭建 Stock.Daily 数据Created: November 18, 2022 10:09 PM Last Edited Time: November 18, 2022 11:43 PM Type: Technical Spec 对于股票研究与交易，我们需要一份内容正确且规则统一的历史数据 ，尽可能的降低数据噪音，避免因为数据错误导致的谬误，提高实证研究的可靠性与准确性。 根据现有的数据，我们复原了2014年1月至今的股票日频数据（stock.daly），运用统一的规则，对历史数据与每日更新的实盘数据进行获取、清洗、转换、验证、入库。 本文档旨在介绍股票日盘数据库的整理规则与入库标准，以供参考。 数据概览","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:0:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据来源 历史数据（2014.01.01 ~ 2022.11.18） PreClose、OHLC、Volume、Turnover 来自交易所 上海：根据购买的交易所历史数据（Day.csv） 深圳：从深交所网站爬虫获取 UpperLimit、LowerLimit：来自 RiceQuant api 获取 每日更新数据（2022-11-18起） PreClose、UpperLimit、LowerLimit：来自交易柜台查询（xtp_info, xeleq_info） OHLC、Volume、Turnover 来自万得落地数据库（MySQL）、交易所网站爬虫 BeginDay、EndDay：爬虫交易所股票列表 TotalShare、FloatAShare：万得落地数据库（MySQL）、交易所网站爬虫 STStatus：根据股票名称是否包含 ST|退 判断，实盘数据来自交易柜台查询、历史数据来自网易财经 Net163Scraper ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:1:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 每日更新时间：18:30/19:30","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:2:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据库格式 CREATE TABLE stock.daily ( `TradingDay` Date, `Exchange` LowCardinality(String), `Category` Enum('X'=0,'FUTURES'=1,'STOCK'=2,'BOND'=3,'FUND'=4), `Product` Enum('X'=0,'STK'=1,'ETF'=2,'INDEX'=3), `Symbol` LowCardinality(String), `PreClose` Nullable(Float32), `Open` Nullable(Float32), `High` Nullable(Float32), `Low` Nullable(Float32), `Close` Float32, `UpperLimit` Nullable(Float32), `LowerLimit` Nullable(Float32), `Volume` Nullable(UInt64), `Amount` Nullable(Float64), `BeginDay` Nullable(Date), `EndDay` Nullable(Date), `STStatus` Enum('TRUE'=1,'FALSE'=0) DEFAULT 0, `TradeStatus` Enum('X'=0,'NEW'=1,'TRADING'=2,'SUSPENDED'=3), `TotalShare` Nullable(Float32), `FloatAShare` Nullable(Float32) ) ENGINE = MergeTree ORDER BY (TradingDay, Exchange, Symbol) SETTINGS index_granularity = 8192 ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:3:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 字段说明 Category 与 Product 用于区分不同交易市场 FUTURES：期货类 STOCK：证券类 STK INDEX BOND：债券类 FUND：基金类 ETF PreClose : 交易所除权除息后的昨收，可结合 LastClose 计算复权因子（AdjFactor） BeginDay : 股票上市日期 EndDay : 股票退市日期 STStatus : 股票是否出于 ST 状态（ST|S|*ST|SST|退市），每日根据股票名称是否包含ST或退来判断 TradeStatus : 当天的交易状态 NEW : 上市第一日 TRADING : 正常交易 SUSPENDED : 当日停牌 TotalShare : 总股本（万得对应：TOT_SHARE_TODAY） FloatAShare : 流通股（总股本减去限售股） ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:4:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 数据清洗规则 对于没有涨跌停的合约（上市前五日），统一设置涨跌停价格为 UPPER_LIMIT_PX_THRES = 999999.999 LOWER_LIMIT_PX_THRES = 0.001 df.fillna({'UpperLimit': self.UPPER_LIMIT_PX_THRES}, inplace = True) df.fillna({'LowerLimit': self.LOWER_LIMIT_PX_THRES}, inplace = True) df.loc[((df['days'] \u003c= 5) | (df.TradeStatus.isin(['NEW']))) \u0026 (df.UpperLimit \u003c= 0.01), 'UpperLimit'] = self.UPPER_LIMIT_PX_THRES df.loc[((df['days'] \u003c= 5) | (df.TradeStatus.isin(['NEW']))) \u0026 (df.LowerLimit \u003c= 0.01), 'LowerLimit'] = self.LOWER_LIMIT_PX_THRES 对于停牌的股票： 有可能拿不到当日的数据，这时候需要先把当日所有的合约补齐（TRADING + SUSPENDED） _day = cal.ymd(df.TradingDay.values[0]) sql = f\"\"\" select Exchange,Symbol, OnlistingDay, DelistingDay from bardata.listing where OnlistingDay \u003c= '{_day}' and DelistingDay \u003e '{_day}' \"\"\" df_listing = ch.read(sql) ## 先合成所有的上市合约 df = pd.merge(df, df_listing, on = 'Symbol', how = 'outer', suffixes = ['', '_listing']) 使用上一次有效交易日的收盘价作为当天的 OHLC，Volume = 0, Turnover = 0.0, UpperLimit = LowerLimit = PreClose ## 获取上一次有效交易日的数据 sql = f\"\"\" select stock.daily.* from stock.daily as a, (select Symbol, max(TradingDay) as LastDay from stock.daily where TradingDay \u003c '{_day}' and Volume \u003e 0 group by Symbol) as b where a.Symbol = b.Symbol and a.TradingDay = b.LastDay and BeginDay \u003c= '{_day}' and EndDay \u003e '{_day}' \"\"\" df_last = self.ch.read(sql) ## 然后使用上一次最后交易的数据来补充 df = pd.merge(df, df_last, on = 'Symbol', how = 'outer', suffixes = ['', '_last']) l = ['PreClose', 'Open', 'High', 'Low', 'Close', 'UpperLimit', 'LowerLimit', 'Volume', 'Amount', 'STStatus', 'TradeStatus', 'TotalShare', 'FloatAShare'] for col in l: if col in ['Volume', 'Amount']: val = 0 elif col in ['PreClose', 'Open', 'High', 'Low', 'Close', 'UpperLimit', 'LowerLimit']: val = df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col])) | (df.Volume \u003c= 0.0001)), \"Close_last\"] elif col in ['TradeStatus']: val = 'SUSPENDED' else: val = df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col])) | (df.Volume \u003c= 0.0001)), f\"{col}_last\"] df.loc[(df.Product_last == 'STK') \u0026 (df.Exchange_last.isin(['sse', 'szse'])) \u0026 ((pd.isna(df[col]) | (df.Volume \u003c= 0.0001))), col] = val 对于指数，统一设置： for col in ['Open', 'High', 'Low']: df.loc[(df.Product == 'INDEX') \u0026 (df[col] \u003c= 0.0001), col] = df.loc[(df.Product == 'INDEX') \u0026 (df[col] \u003c= 0.0001), 'Close'] for col in ['UpperLimit', 'LowerLimit', 'TotalShare', 'FloatAShare']: df.loc[df.Product == 'INDEX', col] = np.nan df.loc[df.Product == 'INDEX', 'TradeStatus'] = 'TRADING' df.loc[df.Product == 'INDEX', 'STStatus'] = False STStatue 规则： _day = cal.ymd(df.TradingDay.values[0])[:10] df_xtp = self.read_xtp_info(_day) df = pd.merge(df, df_xtp, left_on = ['Symbol'], right_on = ['Symbol'], how = 'left', suffixes = ['', '_xtp']) df['STStatus'] = df['TickerName'].apply( lambda x: True if re.search(r\"sT|St|st|ST|退|退市|^退\", str(x), re.IGNORECASE) else False ) 其他字段设置： df['Category'] = df[['Category', 'Symbol']].apply( lambda x: self.convert_category( x[0] if x[0] in self.CATEGORY_DICT else self.guess_category_from_symbol(x[1]) ), axis = 1) df['Product'] = df[['Product', 'Symbol']].apply( lambda x: self.convert_product( x[0] if not pd.isna(x[0]) else self.guess_product_from_symbol(x[1]) ), axis = 1) df['STStatus'] = df['STStatus'].apply(lambda x: 1 if x else 0) df['TradeStatus'] = df['TradeStatus'].apply(self.convert_tradestatus) ","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:5:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":["tools"],"content":" 入库前检查规则 PreClose, Open, High, Low, Close, UpperLimit, LowerLimit, (Amount/Volume), 这几个应该是同一个数量级； TotalShare, FloatAShare, FreeShare, (NetAsset/Close) 应该是差不多是一个。 检查项目： 1. vwap vs close 2. turnover = Volume/FloatAShare \u003c 1.0， 3. lower_limit \u003c= px \u003c= upper_limit 4. pb \u003e 0.2(去掉负的 NetAsset) 5. 涨跌停幅度（去掉新股） 6. 关于 TotalShare vs TotalShareToday: 前面是全部股本,后面是当日股本,比如 TotalShare \u003c FloatAShare: --------------------------- TradingDay Symbol TotalShare FloatAShare 2020-10-19 603882.SH 457,884,577.000000 459,487,577.000000 7. 如果是 ST, 涨跌幅是 5% 可以再加两个检查， 1. 就是'STK'里TradeStatus不应该出现'X'(我这边现在就是用Suspen来判断股票不交易)。 2. 也可以检查一下每天，Volume=0, Amount=0和TradeStatus='Sus' 是不是同一批股票 对于index的检查(000016.SH, 000300.SH, 000905.SH, 000852.SH, 000985.CSI)暂时只需要检查这五个就行了。 1. 每天都有数据 2. PreClose, Open, High, Low, Close，Volume, Amount不能有NaN。UpperLimit, LowerLimit，Totalshare, FloatAshares强制是NaN. 历史数据 每日更新数据","date":"2022-11-19","objectID":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/:6:0","tags":["stock","daily"],"title":"如何搭建 Stock.Daily 数据","uri":"/2022-11-19-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-stock.daily-%E6%95%B0%E6%8D%AE/"},{"categories":[],"content":"ADSP(Algo + Data Structure = Programming) 是一个优秀的播客网站，经常邀请一些编程界的大佬的探讨技术性话题，截止目前（2022-10-20）已经录制正好100期节目了。 该网站同时还提供了音频下载，方便用户离线收听。不过对于懒人如我者（程序员福利），当然想着使用脚本来自动化下载了。话不多说，show the code。 import bs4 import re import requests import os from datetime import datetime links = [] for i in range(1,21): if i == 1: url = f\"https://adspthepodcast.com\" else: url = f\"https://adspthepodcast.com/blog/page{i}/\" rsp = requests.get(url) soup = bs4.BeautifulSoup(rsp.text, 'html.parser').find_all('a') links.extend([link.get('href') for link in soup if 'Episode' in link.get('href')]) for k in links: url = f\"https://adspthepodcast.com/{k}\" print(f\"{datetime.now()} processing url ==\u003e {url}\") rsp = requests.get(url) soup = bs4.BeautifulSoup(rsp.text, 'html.parser') ## 这里需要查看一下 soup 里面具体的格式 ## 发现 section 这个地方出现了下载链接 res = soup.find_all(name='section')[0].find('script').get('src') res = re.sub(r\".js\", r\".mp3\", res) ## 提取title # title = re.sub('.*(episode.*mp3).*', '\\\\1', res) title = '-'.join(res.split('?')[0].split('/')[-1].split('-')[1:]) filename = f'/home/william/Downloads/ADSP/{title}' if os.path.isfile(filename): continue mp3 = requests.get(res) with open(filename, 'wb') as f: f.write(mp3.content) print(f\"{datetime.now()} saved file ==\u003e {filename}\") ","date":"2022-10-22","objectID":"/2022-10-22-adsp-%E4%B8%8B%E8%BD%BDmp3/:0:0","tags":["ADSP","mp3","python"],"title":"ASDP 下载mp3","uri":"/2022-10-22-adsp-%E4%B8%8B%E8%BD%BDmp3/"},{"categories":["tools"],"content":"之前一直有遇到需要转换 bash 字符串大小写的问题。 exch=sh ## 大写 echo ${exch^^} exch=SH ## 小写 echo ${exch,,} ","date":"2022-09-23","objectID":"/2022-09-23-bash-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/:0:0","tags":["bash","大小写"],"title":"bash 大小写转换","uri":"/2022-09-23-bash-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/"},{"categories":["tools"],"content":"使用 VIm 打开 Ansi 颜色的文件。 ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:0:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":" 使用 vim.plug Plug 'powerman/vim-plugin-AnsiEsc' \"autocmd BufRead * AnsiEsc :AnsiEsc ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:1:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":" 直接安装 git clone https://github.com/powerman/vim-plugin-AnsiEsc.git cp -r vim-plugin-AnsiEsc ~/.vim vim -R +AnsiEsc # 或者 :AnsiEsc ","date":"2022-09-16","objectID":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/:2:0","tags":["vim","ansi"],"title":"vim 打开 Ansi 文件","uri":"/2022-09-16-vim-%E6%89%93%E5%BC%80-ansi-%E6%96%87%E4%BB%B6/"},{"categories":["tools"],"content":"In this document we discuss best practices for using EASTL. The primary emphasis is on performance with a secondary emphasis on correctness and maintainability. Some best practices apply only to some situations, and these will be pointed out as we go along. In order to be easily digestible, we present these practices as a list of items in the tone of the Effective C++ series of books. ","date":"2022-09-13","objectID":"/2022-09-13-eastl-best-practices/:0:0","tags":["c++"],"title":"eastl best practices","uri":"/2022-09-13-eastl-best-practices/"},{"categories":["tools"],"content":" set autochdir let NERDTreeChDirMode=2 nnoremap \u003cleader\u003en :NERDTree .\u003cCR\u003e so that NERDTree always opens in the current folder. With the 1st line, the working directory is always the one where the active buffer is located. With the 2nd line, I make sure the working directory is set correctly. With the 3rd line, I hit \u003cleader\u003en to open NERDTree. ","date":"2022-09-13","objectID":"/2022-09-13-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/:0:0","tags":["vim","nerdtree"],"title":"nerdtree 自动切换到当前目录","uri":"/2022-09-13-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/"},{"categories":["tools"],"content":"解决密码输入正确，但是依然报错的问题。 jupyter notebook list ## 生成配置文件，输入密码 ## 但是需要修改配置，否则会出现密码错误: Invalid credentials cd ~ jupyter notebook --generate-config jupyter-notebook password jupyter notebook --no-browser --port 58888 ## 要把把 passwor 和 token 都设置为空字符串 vim jupyter_notebook_config.py c.NotebookApp.password = u'' c.NotebookApp.token = '' c.NotebookApp.open_browser = False c.NotebookApp.ip = '0.0.0.0' c.NotebookApp.port = 58888 ","date":"2022-09-13","objectID":"/2022-09-13-jupyter-%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/:0:0","tags":["ipython","jupyter"],"title":"jupyter 输入密码错误","uri":"/2022-09-13-jupyter-%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/"},{"categories":["tools"],"content":"通过配置 ipython 以获得更好的编辑体验。 ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:0:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" prompt 设置","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:1:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 配置文件 ~/anaconda3/bin/ipython profile create [ProfileCreate] Generating default config file: '/home/william/.ipython/profile_default/ipython_config.py' [ProfileCreate] Generating default config file: '/home/william/.ipython/profile_default/ipython_kernel_config.py' cd ~/.ipython/profile_default/ vim ipython_config.py ## 修改颜色 ## Set the color scheme (NoColor, Neutral, Linux, or LightBG). # Choices: any of ['Neutral', 'NoColor', 'LightBG', 'Linux'] (case-insensitive) # Default: 'Neutral' # c.InteractiveShell.colors = 'Neutral' c.InteractiveShell.colors = 'NoColor' 或者启动的时候指定颜色方案 ~/anaconda3/bin/ipython --colors=NoColor 或者运行时设置 [1] %colors nocolor ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:1:1","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":["tools"],"content":" 定制配置在 ``~.ipython/profile_default/ipython_config.py` 添加 # ~/anaconda3/bin/ipython profile create # vim ~/.ipython/profile_default/ipython_config.py from IPython.terminal.prompts import Prompts, Token import os class MyPrompt(Prompts): def in_prompt_tokens(self, cli=None): # custom path = os.path.basename(os.getcwd()) user = os.environ['USER'] return [ (Token.Prompt, ''), (Token.PromptNum, f\"{path}❯ \"), (Token.Prompt, 'In ['), (Token.PromptNum, str(self.shell.execution_count)), (Token.Prompt, ']'), (Token.Prompt, ': '), ] ## ==================================================== c = get_config() c.TerminalInteractiveShell.prompts_class = MyPrompt c.InteractiveShell.colors = 'NoColor' c.TerminalIPythonApp.display_banner = False ## ==================================================== \"\"\" 如果需要运行时设置，可以使用以下命令 ip = get_ipython() ip.prompts = MyPrompt(ip) \"\"\" ","date":"2022-09-13","objectID":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/:2:0","tags":["ipython","python"],"title":"ipython 配置","uri":"/2022-09-13-ipython-%E9%85%8D%E7%BD%AE/"},{"categories":[],"content":"RSS 提供了订阅式的信息获取机制，我们可以按照自己感兴趣的话题，订阅高质量的博客网站。对比于推送式（系统推荐），这能够拓展我们的信息边界，而不是陷入信息茧房。 RSS","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:0:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" Chrome 工具","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" RSS FinderRss Finder ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:1","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" slick-rssslick-rss ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:1:2","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" Thunderbird","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:2:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" RssHubRssHub ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:0","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 安装可以参考 官网教程 sudo yum install docker docker-compose sudo systemctl start docker wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml ## 配置 vim docker-compose.yml # 也可以是你喜欢的编辑器 docker volume create redis-data docker-compose up -d ## 访问 curl 127.0.0.1:1200 ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:1","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 设置阿里云访问 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=1200/tcp --permanent systemctl stop firewalld.service 然后需要在阿里云-【安全组】-选择开放 1200 端口访问。 接着设置阿里云域名解析 记录类型：A 主机记录：rss （.wuyacapital.com） 记录值：阿里IP（不带端口，需要通过nginx配置） ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:2","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 配置 nginx cd /etc/nginx vim nginx.conf ## 尽量在前面添加 ## 在 htpp {} 里面 server { listen 80; server_name rss.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:1200; } } systemctl restart nginx nginx -s reload 现在可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:3","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":[],"content":" 添加 httpscertbot 常用的 RSS 资源 Chrome 工具RSS Finderslick-rssThunderbirdRssHub安装设置阿里云访问配置 nginx添加 https ","date":"2022-09-13","objectID":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/:3:4","tags":[],"title":"rss 与信息获取","uri":"/2022-09-13-rss-%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"},{"categories":["tools"],"content":"conflicts with clear screen #9 Since I misunderstood README and lost a bit of time figuring this out, I want to clarify what can be done to restore behavior. If you use tpm, put restoring bind after calling package manager: run '~/.tmux/plugins/tpm/tpm' bind-key -n C-l if-shell \"$is_vim\" \"send-keys C-l\" \"send-keys C-l\" (if you don’t use tpm - just do not put “bind-key -n C-l” line in config) Do this part of README in vimrc (also wo C-l line) let g:tmux_navigator_no_mappings = 1 nnoremap \u003csilent\u003e \u003cC-h\u003e :TmuxNavigateLeft\u003ccr\u003e nnoremap \u003csilent\u003e \u003cC-j\u003e :TmuxNavigateDown\u003ccr\u003e nnoremap \u003csilent\u003e \u003cC-k\u003e :TmuxNavigateUp\u003ccr\u003e ","date":"2022-09-13","objectID":"/2022-09-13-tmux-vim-%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-ctrl-l-%E6%B8%85%E5%B1%8F/:0:0","tags":["tmux","vim"],"title":"tmux vim 导致无法使用 ctrl l 清屏","uri":"/2022-09-13-tmux-vim-%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-ctrl-l-%E6%B8%85%E5%B1%8F/"},{"categories":["tools"],"content":"通过在 Linux 系统配置一个超级用户程序，获取 root 权限 c程序 一定要使用普通用户 // super.c // -------- #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e int main(void) { setuid(0); clearenv(); system(\"export PATH=/sbin:/bin:/usr/bin:/usr/local/bin:$PATH; export TERM=linux; /bin/bash\"); } 编译 一定要使用普通用户 gcc super.c -o super 这里可以试一下执行程序，发现依然是当前用户 [trader@localhost ~]$ ll total 16 -rwxrwxr-x 1 trader trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [trader@localhost trader]$ whoami trader 权限下面，我们来设置这个可执行程序的权限，使得其可以在普通用户的环境中，也是可以使用默认的 root 权限运行的。 使用 root 权限修改可执行程序： sudo chown root super sudo chmod ug+s super sudo chmod a+x super 如此一来，我们便可以通过执行 super 自动获取 root 权限了 [trader@localhost ~]$ ll total 16 -rwsrwsr-x 1 root trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [root@localhost trader]# whoami root [root@localhost trader]# mkdir -p /usr/test [root@localhost trader]# rm -rf /usr/test [root@localhost trader]# 添加用户到 sudoers sudo vim /etc/sudoers ## 多个命令用逗号分割 ## NOPASSWD 表示不用输入密码 ops ALL=(ALL) NOPASSWD:/usr/bin/bash ","date":"2022-09-13","objectID":"/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/:0:0","tags":["linux","c","root"],"title":"linux 设置超级用户程序","uri":"/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/"},{"categories":[],"content":"最近在写一个集合竞价的下单算法，里面用到了集合竞价逐笔行情、撮合可能的成交价格与数量、自己预计下单对市场的影响、在一个绑定CPU的时间线程判断临近集合竞价结束执行下单。感觉挺花心血，为了提高撮合的性能，连续两个周末在测试各个环节消耗的时间，优化相应的撮合算法，与小刘讨论如何减少尝试下单的次数等。然后在不同的情况下，使用 simu 进行系统的测试，得到正确且快速的结果。 本来心想着高高兴兴上实盘，结果遇到一个莫名其妙的 bug，两个几乎在同时启动的策略程序，在相同的时间里执行了下单，导致 gw 报单出现重复订单。整个事情看起来有点神奇，理论上应该两个程序是不能同时启动的，而是后面一个程序会先杀掉前面的程序。但是由于一些运维上面的原因，导致这个间歇时间有点长，后起的程序没有成功杀掉前面的程序。 今天的事情搞得心情有点不太好，甚至怀疑自己写的程序有点问题。后面也排除了这个原因。但是整个事情对自己的影响还是挺大的，有点想要辞职的冲动了。 最近团队在转型，人手又不够，自己得处理一堆非交易相关的事情，面对的券商又不是很给力，经常出错。可以说这段时间是非常艰难了，简直在浪费时间与生命。这跟自己原先想做交易的想法完全南辕北辙，相差甚远。 也许有了勇气，我会致辞的。现在做的不一定是自己想要的，中年人唯一的倔强，应该是勇敢一搏吧。 ","date":"2022-09-13","objectID":"/2022-09-13-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%97%A0%E5%8A%9B%E6%84%9F/:0:0","tags":[],"title":"第一次无力感","uri":"/2022-09-13-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%97%A0%E5%8A%9B%E6%84%9F/"},{"categories":["tools"],"content":"通过 nginx 实现端口转发 安装 nginx with stream ## 如果是从源代码安装，需要在编译时候配置 ./configure --prefix=/opt/apps/nginx --with-stream make \u0026\u0026 make install ## 或者直接用下面的命令安装 #执行下面的命令，根据提示完成安装 wget https://raw.githubusercontent.com/helloxz/nginx-cdn/master/nginx.sh \u0026\u0026 bash nginx.sh #安装完成后执行下面的命令让环境变量生效 source /etc/profile #执行下面的命令查看nginx信息 nginx -V ## 在版本 1.9 以上会出现 --with-stream，即可证明可以用 sshd 断隧道功能了 配置端口转发 cd /etc/nginx vim nginx.conf ## stream 是与 http 通级别的 #... ... #... ... events { use epoll; worker_connections 65535; } #stream配置 stream { #将12345端口转发到192.168.1.23的3306端口 server { listen 12345; proxy_connect_timeout 1h; proxy_timeout 1h; proxy_pass 192.168.1.23:3306; } #将tcp 1022端口转发到192.168.1.23 22端口 server { listen 1022 reuseport; proxy_timeout 1h; proxy_pass 192.168.1.23:22; } #将udp 53端口转发到192.168.1.23 53端口 server { listen 53 udp reuseport; proxy_timeout 1h; proxy_pass 192.168.1.23:53; } #ipv4转发到ipv6 server { listen 9135; proxy_connect_timeout 10s; proxy_timeout 30s; proxy_pass [2607:fcd0:107:3cc::1]:9135; } } http { #... ... #... ... } listen：后面填写源端口（也就是当前服务器端口），默认协议为TCP，可以指定为UDP协议 proxy_connect_timeout：连接超时时间 proxy_timeout：超时时间 proxy_pass：填写转发目标的IP及端口号 这样，我们可以访问 nginx 所在网络的指定端口，去访问目标机器 nginx -s reload ssh -p 1022 user@127.0.0.1 ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E5%AE%9E%E7%8E%B0-sshd-%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/:0:0","tags":["ngix","sshd","端口转发"],"title":"nginx 实现 sshd 的端口转发功能","uri":"/2022-09-13-nginx-%E5%AE%9E%E7%8E%B0-sshd-%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/"},{"categories":["tools"],"content":"通过配置，运行直接在浏览器访问网站二级域名，实现对指定端口的服务程序的访问。 ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:0:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 服务程序假设我们有一项服务程序，如 RssHub 可以参考 官网教程 sudo yum install docker docker-compose sudo systemctl start docker wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml ## 配置 vim docker-compose.yml # 也可以是你喜欢的编辑器 docker volume create redis-data docker-compose up -d ## 访问 curl 127.0.0.1:1200 为了可以通过访问阿里云的二级域名，即在浏览器直接打开可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:1:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 设置阿里云访问 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=1200/tcp --permanent systemctl stop firewalld.service 然后需要在阿里云-【安全组】-选择开放 1200 端口访问。 接着设置阿里云域名解析 记录类型：A 主机记录：rss （.wuyacapital.com） 记录值：阿里IP（不带端口，需要通过nginx配置） ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:2:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 配置 nginx cd /etc/nginx vim nginx.conf ## 尽量在前面添加 ## 在 htpp {} 里面 server { listen 80; server_name rss.wuyacapital.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:1200; } } systemctl restart nginx nginx -s reload 在 http{} 里面增加一个 server 配置 server_name 指定阿里云二级域名：rss.wuyacapital.com 在location 填写指定代理转发的服务程序端口 1200：proxy_pass http://127.0.0.1:1200 现在可以通过访问：https://rss.wuyacapital.com/ ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:3:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":" 添加 httpscertbot ","date":"2022-09-13","objectID":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/:4:0","tags":["ngix"],"title":"nginx 配置阿里云二级域名访问","uri":"/2022-09-13-nginx-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"},{"categories":["tools"],"content":"使用 v2ray 实现江湖失传已久的轻功。 安装 v2ray 服务器 bash \u003c(curl -s -L https://git.io/v2ray.sh) 可以顺便给 vps 测速 ## superspeed bash \u003c(curl -Lso- https://git.io/superspeed) ————————————————————————SuperSpeed 全面测速版————————————————————————— 使用方法: bash \u003c(curl -Lso- https://git.io/superspeed) 查看全部节点: https://git.io/superspeedList 节点更新日期: 2019/12/23 脚本更新日期: 2020/03/09 —————————————————————————————————————————————————————————————————————— 选择测速类型: 1. 三网测速 (各取部分节点) 2. 取消本次测速 3. 电信节点测速 4. 联通节点测速 5. 移动节点测速 请输入数字选择: 1 —————————————————————————————————————————————————————————————————————— ID 测速服务器信息 上传速度 下载速度 延迟 3633 电信|上海　128.98 Mbit/s 384.05 Mbit/s 160.994 ms 24012 电信|内蒙古呼和浩特　66.38 Mbit/s 49.28 Mbit/s 198.881 ms 27377 电信|北京５Ｇ　116.61 Mbit/s 321.02 Mbit/s 161.536 ms 17145 电信|安徽安徽合肥　124.96 Mbit/s 373.35 Mbit/s 144.317 ms 27594 电信|广东广州５Ｇ　4.84 Mbit/s 23.16 Mbit/s 197.118 ms 27810 电信|广西南宁　60.62 Mbit/s 119.87 Mbit/s 172.267 ms 27575 电信|新疆乌鲁木齐　71.01 Mbit/s 147.04 Mbit/s 206.973 ms 26352 电信|江苏南京５Ｇ　141.18 Mbit/s 365.73 Mbit/s 138.398 ms 5396 电信|江苏苏州　141.03 Mbit/s 335.99 Mbit/s 138.572 ms 7509 电信|浙江杭州　112.69 Mbit/s 63.09 Mbit/s 210.463 ms 28225 电信|湖南长沙　98.16 Mbit/s 135.78 Mbit/s 188.638 ms 3973 电信|甘肃兰州　65.89 Mbit/s 30.87 Mbit/s 181.112 ms 19076 电信|重庆　55.81 Mbit/s 111.58 Mbit/s 252.101 ms 24447 联通|上海５Ｇ　117.29 Mbit/s 107.46 Mbit/s 187.886 ms 5103 联通|云南昆明　18.49 Mbit/s 7.01 Mbit/s 341.216 ms 5145 联通|北京　114.97 Mbit/s 278.81 Mbit/s 160.176 ms 9484 联通|吉林长春　111.22 Mbit/s 273.19 Mbit/s 174.654 ms 2461 联通|四川成都　78.93 Mbit/s 190.73 Mbit/s 201.194 ms 27154 联通|天津５Ｇ　129.92 Mbit/s 342.59 Mbit/s 155.246 ms —————————————————————————————————————————————————————————————————————— 测试完成, 本次测速耗时: 7 分 52 秒 当前时间: 2020-03-18 18:02:46 # 三网测速中为避免节点数不均及测试过久，每部分未使用所有节点， # 如果需要使用全部节点，可分别选择三网节点检测。 # Superspeed.sh wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh chmod +x superspeed.sh ./superspeed.sh ## SuperBench.sh ## 一键检测VPS的CPU、内存、负载、IO读写、机房带宽等脚本 wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash #或者 curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash ## Zench ## Zench可以看作是Bench.sh 和 SuperBench的结合版本，加入 Ping 以及 路由测试 功能，会生成测评报告，可以很方便地分享给其他朋友看自己的测评数据 wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh \u0026\u0026 bash ZBench-CN.sh # 项目：https://github.com/FunctionClub/ZBench -------------------------------------------------------------------------- CPU 型号 : QEMU Virtual CPU version (cpu64-rhel6) CPU 核心数 : 2 CPU 频率 : 2699.998 MHz 总硬盘大小 : 20.4 GB (2.6 GB Used) 总内存大小 : 1007 MB (240 MB Used) SWAP大小 : 259 MB (3 MB Used) 开机时长 : 0 days, 3 hour 42 min 系统负载 : 1.78, 0.57, 0.20 系统 : CentOS 7.7.1908 架构 : x86_64 (64 Bit) 内核 : 4.10.4-1.el7.elrepo.x86_64 虚拟化平台 : kvm -------------------------------------------------------------------------- 硬盘I/O (第一次测试) : 389 MB/s 硬盘I/O (第二次测试) : 622 MB/s 硬盘I/O (第三次测试) : 568 MB/s -------------------------------------------------------------------------- 节点名称 IP地址 下载速度 延迟 CacheFly 205.234.175.175 112MB/s 0.433 ms ping: speedtest.tokyo.linode.com: Name or service not known Usage: ping [-aAbBdDfhLnOqrRUvV64] [-c count] [-i interval] [-I interface] [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] [hop1 ...] destination Usage: ping -6 [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-p pattern] [-Q tclass] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] destination Linode, Tokyo, JP ms Linode, Singapore, SG 139.162.23.4 12.1MB/s 180.628 ms Linode, London, UK 176.58.107.39 17.6MB/s 135.277 ms Linode, Frankfurt, DE 139.162.130.8 15.5MB/s 144.360 ms Linode, Fremont, CA 50.116.14.9 58.2MB/s 10.185 ms Softlayer, Dallas, TX 173.192.68.18 54.2MB/s 32.237 ms Softlayer, Seattle, WA 67.228.112.250 62.5MB/s 26.613 ms Softlayer, Frankfurt, D","date":"2022-09-13","objectID":"/2022-09-13-v2ray%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:0","tags":["v2ray"],"title":"v2ray配置教程","uri":"/2022-09-13-v2ray%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["tools"],"content":"重新学习 git。 安装 配置:configgit 要求给出开发人员的基本信息： 名字 邮件 这是为了更好的最终文件修改人。这个配置可以是全局、或者单独针对某个项目。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:0:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" global git config --global user.name \"william\" git config --global user.email \"william.x.x@gmail.com\" 使用","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:1:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 新建空项目:init mkdri testing cd testing git init Initialized empty Git repository in /tmp/testing/.git/ ls -alh ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:2:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 添加文件:add git add readme.md git add install.sh ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:3:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 提交修改:commit git commit -m \"init project and add readme\" [master (root-commit) f78741f] init project and add readme 2 files changed, 2 insertions(+) create mode 100644 install.sh create mode 100644 readme.md ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:4:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看当前状态:status echo \"hello, world\" \u003e\u003e readme.md echo \"this is new line\" \u003e\u003e readme.md git status On branch master Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: readme.md no changes added to commit (use \"git add\" and/or \"git commit -a\") ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:5:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看不同:diff git diff readme.md diff --git a/readme.md b/readme.md index 63173a9..cea5572 100644 --- a/readme.md +++ b/readme.md @@ -1 +1,3 @@ # git testing +hello, world +this is new line ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:6:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 查看日志:loggit 处理的是每一次修改的快照(snapshot)，为每一次的修改生成一次 log 条目，用于查看该次修改的日志说明。 git log commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:7:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 回滚:resetHEAD 表示当前版本号，可以使用 HEAD^ 返回上一个版本，或者 HEAD~n 返回之前n个版本 ## 上一个版本，也可以用 HEAD~n，其中n表示之前多少个log git reset --hard HEAD^ HEAD is now at f78741f init project and add readme git log commit f78741f31fe3f5600a8c003aa456744668a09da2 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 当然，如果我们想恢复之前的第二个修改，在上面的 git log 我们知道这个版本的修改 commit id commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme 所以我们还是可以在不同的 commit id 来回跳转的 ## 一般写前面几位就可以了，不需要整个 id #git reset --hard 3a0003085047a83783a7fff67b3904ccd2154ff0 git reset --hard 3a0003 commit 3a0003085047a83783a7fff67b3904ccd2154ff0 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 我们看到，当前的版本又重新回到的最近的修改了。Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git 仅仅是把 HEAD 从指向对应的 commit id。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:8:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 重看log:reflog像上面那样，如果我们 reset 了 HEAD，结果把屏幕清除了，导致我们记不起之前的 commit id。该怎么办呢？其实 git 提供了对每次修改的记录查新，可以很方便的看到每次操作的历史记录 git reflog 3a00030 (HEAD -\u003e master) HEAD@{0}: reset: moving to 3a0003 f78741f HEAD@{1}: reset: moving to HEAD^ 3a00030 (HEAD -\u003e master) HEAD@{2}: commit: modify readme f78741f HEAD@{3}: commit (initial): init project and add readme 从上面的记录我们看到，reset: moving to HEAD^ 是我们把 HEAD 往前回滚了一次，到了 f78741f ，这时候 3a00030 就是后面一条最新的版本，所以还是可以回滚到这个版本的 git reset --hard 3a0003 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:9:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 撤销修改:checkout有时候，我们对于修改的文件，想要丢弃，恢复到原先的状态。这时候可以使用 checkout ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:0","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 在工作区未提交如果我们的修改只是在工作区，则可以直接丢弃修改即可 git status . On branch master nothing to commit, working tree clean echo \"add extra line\" \u003e\u003e readme.md git status . On branch master Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: readme.md no changes added to commit (use \"git add\" and/or \"git commit -a\") 从上面我们看出来，当前工作区有一个 modified 没有提交到缓存区 Changes not staged for commit。如果我们想放弃本次修改，可以直接使用命令 checkout git checkout readme.md git status On branch master nothing to commit, working tree clean 可以看到，本次修改已经被丢弃，当前分支是干净的。 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:1","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 已经 add 到缓存区如果修改已经提交到了缓存区，我们可以用 reset HEAD filename 将缓存区(stage)退回到与当前分支一样的状态(HEAD)，然后在用 checkout 丢弃修改 echo \"add extra line\" \u003e\u003e readme.md git add readme.md git status . On branch master Changes to be committed: (use \"git reset HEAD \u003cfile\u003e...\" to unstage) modified: readme.md 看到上面的已经被 add 到了缓存区。那么，我们可以用 reset HEAD \u003cfile\u003e 命令将其从缓存区放弃 ## 先将其从缓存区放弃 git reset HEAD readme.md ## 然后在从工作区放弃 git checkout readme.md ## 现在查看状态已经是干净的了 git status On branch master nothing to commit, working tree clean ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:2","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":["tools"],"content":" 已经 commit 到分支对于已经提交到分支的修改，我们可以用 reset commit_id 退回到上一个版本（这个 commit_id 指的是上一个版本号）。 echo \"add extra line3\" \u003e\u003e readme.md git add readme.md git commit -m \"add extra line3 into readme\" git log commit 18529d695e8e4ce797f7878135369a11ef658549 (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 11:07:35 2022 +0800 add extra line3 in readme commit 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 10:54:59 2022 +0800 add extra line in readme commit 3a0003085047a83783a7fff67b3904ccd2154ff0 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 我们发现本次修改已经在当前分支了，log 已经能查询本次修改。那么，我们可以退回上一次的修改，commit_id 对应是 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e git reset --hard 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e git log commit 9205b630a3efd2b5c2ddd7ea732a53e5f0a3bd6e (HEAD -\u003e master) Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 10:54:59 2022 +0800 add extra line in readme commit 3a0003085047a83783a7fff67b3904ccd2154ff0 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 09:05:39 2022 +0800 modify readme commit f78741f31fe3f5600a8c003aa456744668a09da2 Author: “williamlfang” \u003c“william.lian.fang@gmail.com”\u003e Date: Sun Jul 24 08:58:23 2022 +0800 init project and add readme 现在已经没有 line3 的修改记录了。 如果没有添加 –hard 这表示本次修改依然保留在工作区 ","date":"2022-09-13","objectID":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/:10:3","tags":["git"],"title":"重拾 git","uri":"/2022-09-13-%E9%87%8D%E6%8B%BE-git/"},{"categories":[],"content":"在 C++ std::thread 创建的时候，绑定 cpu 核。 //先申明一个 thread std::thread _thr; #define FOR_EACH_ALGO(FUNC) \\ for (auto\u0026 e : _symbols) \\ { \\ auto single_eng = e.second.get(); \\ for (auto\u0026 exec : single_eng-\u003ealgos()) \\ { \\ auto algo = reinterpret_cast\u003cexec_algo_cv_alpha_t*\u003e(exec); \\ algo-\u003eFUNC(_ac); \\ } \\ } std::thread( [this]() { const auto\u0026 cfg = _shell-\u003econf(); if (cfg.has(\"auction_cpu\")) { int cpuid = std::stoi(cfg(\"auction_cpu\")); cpu_set_t cpuset; CPU_ZERO(\u0026cpuset); CPU_SET(cpuid, \u0026cpuset); int rtn = pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), \u0026cpuset); if (rtn != 0) L_err(\"fail to call pthread_setaffinity_np, error rtn:\", rtn); else L_inf(\"succ to call pthread_setaffinity_np\"); DBG({ print_cpu_affinity(cpuid); }) } while (true) { _ac.ntime = to_ntime(microtime().now().count()); if (_ac.ntime \u003e _ac.end_ntime + 10) { FOR_EACH_ALGO(on_auction_deactivate) break; } if (_ac.ntime \u003e= _ac.insert_ntime \u0026\u0026 _ac.ntime \u003c= _ac.end_ntime \u0026\u0026 !_ac.is_triggered) { _ac.is_triggered = true; FOR_EACH_ALGO(on_auction_activate) } std::this_thread::sleep_for(std::chrono::microseconds(10)); } L_inf(\"end of engine thread, ntime:\", _ac.ntime); }).swap(_thr); // 从主线程分离 _thr.detach(); // 在析构停止 if (_thr.joinable()) _thr.join(); 有一个小工具可以查看是否绑核成功 void print_cpu_affinity(int coreid) { cpu_set_t mask; long nproc; if (::sched_getaffinity(0, sizeof(cpu_set_t), \u0026mask) == -1) { L_inf(\"fail to sched_getaffinity:\", coreid); } nproc = sysconf(_SC_NPROCESSORS_ONLN); if (coreid \u003c 0) { for (int i = 0; i \u003c nproc; i++) L_inf(\"cpu afffinity core:\", i, \", is_set:\", CPU_ISSET(i, \u0026mask)); } else { L_inf(\"cpu afffinity core:\", coreid, \", is_set:\", CPU_ISSET(coreid, \u0026mask)); } } ","date":"2022-09-13","objectID":"/2022-09-13-c-thread-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%97%B6%E7%BB%91%E6%A0%B8/:0:0","tags":["c++","thread","pthread"],"title":"c++ thread 线程创建时绑核","uri":"/2022-09-13-c-thread-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%97%B6%E7%BB%91%E6%A0%B8/"},{"categories":["tools"],"content":" mkdir -p ~/Downloads/docky cd ~/Downloads/docky wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-sharp2/libgconf2.0-cil_2.24.2-4_all.deb wget -c http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1_amd64.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring-common_3.12.0-1build1_all.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/libg/libgnome-keyring/libgnome-keyring0_3.12.0-1build1_amd64.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/gnome-keyring-sharp/libgnome-keyring1.0-cil_1.0.0-5_amd64.deb sudo apt-get install ./*.deb wget -c http://archive.ubuntu.com/ubuntu/pool/universe/d/docky/docky_2.2.1.1-1_all.deb sudo apt-get install ./docky_2.2.1.1-1_all.deb ","date":"2022-09-13","objectID":"/2022-09-13-ubuntu20-%E5%AE%89%E8%A3%85-docky/:0:0","tags":["ubuntu","docky"],"title":"ubuntu20 安装 docky","uri":"/2022-09-13-ubuntu20-%E5%AE%89%E8%A3%85-docky/"},{"categories":["tools"],"content":"Ubuntu 可以 ping 别人，无法从外面 ping 自己。需要修改网络设置。 cd /etc/netplan vim 1-network-manager-all.yaml # Let NetworkManager manage all devices on this system network: version: 2 renderer: NetworkManager ethernets: enp0s31f6: dhcp4: no addresses: [192.168.1.88/24] gateway4: 192.168.1.1 nameservers: addresses: [114.114.114.114] sudo netplan apply ","date":"2022-09-13","objectID":"/2022-09-13-ubuntu-%E5%8F%AF%E4%BB%A5-ping-%E5%88%AB%E4%BA%BA%E6%97%A0%E6%B3%95%E4%BB%8E%E5%A4%96%E9%9D%A2-ping-%E8%87%AA%E5%B7%B1/:0:0","tags":["ubuntu","ping","network","网络"],"title":"ubuntu 可以 ping 别人,无法从外面 ping 自己","uri":"/2022-09-13-ubuntu-%E5%8F%AF%E4%BB%A5-ping-%E5%88%AB%E4%BA%BA%E6%97%A0%E6%B3%95%E4%BB%8E%E5%A4%96%E9%9D%A2-ping-%E8%87%AA%E5%B7%B1/"},{"categories":["tools"],"content":" —– BEGIN LICENSE —– Mifeng User Single User License EA7E-1184812 C0DAA9CD 6BE825B5 FF935692 1750523A EDF59D3F A3BD6C96 F8D33866 3F1CCCEA 1C25BE4D 25B1C4CC 5110C20E 5246CC42 D232C83B C99CCC42 0E32890C B6CBF018 B1D4C178 2F9DDB16 ABAA74E5 95304BEF 9D0CCFA9 8AF8F8E2 1E0A955E 4771A576 50737C65 325B6C32 817DCB83 A7394DFA 27B7E747 736A1198 B3865734 0B434AA5 —— END LICENSE —— ","date":"2022-09-13","objectID":"/2022-09-13-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/:0:0","tags":["subl","sublime"],"title":"Sublime4 注册码","uri":"/2022-09-13-sublime4-%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"categories":[],"content":"把 git 改成 ssh，这样可以直接 push，而不需要输入账户和密码。 git remote set-url origin git@github.com:williamlfang/williamlfang.github.io.git ","date":"2022-09-13","objectID":"/2022-09-13-git-%E4%BF%AE%E6%94%B9-https-%E4%B8%BA-ssh/:0:0","tags":["git","ssh","https"],"title":"git 修改 https 为 ssh","uri":"/2022-09-13-git-%E4%BF%AE%E6%94%B9-https-%E4%B8%BA-ssh/"},{"categories":["tools"],"content":"在 Ubuntu 机器连接远程 Windows 虚拟机 ","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:0:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":" 安装 FreeRDP sudo apt-get install -y freerdp2-x11 xfreerdp --help FreeRDP - A Free Remote Desktop Protocol Implementation See www.freerdp.com for more information Usage: xfreerdp [file] [options] [/v:\u003cserver\u003e[:port]] Syntax: /flag (enables flag) /option:\u003cvalue\u003e (specifies option with value) +toggle -toggle (enables or disables toggle, where '/' is a synonym of '+') /a:\u003caddin\u003e[,\u003coptions\u003e] Addin /action-script:\u003cfile-name\u003e Action script /admin Admin (or console) session +aero Enable desktop composition /app:\u003cpath\u003e or ||\u003calias\u003e Remote application program /app-cmd:\u003cparameters\u003e Remote application command-line parameters /app-file:\u003cfile-name\u003e File to open with remote application /app-guid:\u003capp-guid\u003e Remote application GUID /app-icon:\u003cicon-path\u003e Remote application icon for user interface /app-name:\u003capp-name\u003e Remote application name for user interface /app-workdir:\u003cworkspace path\u003e Remote application workspace path /assistance:\u003cpassword\u003e Remote assistance password /auto-request-control Automatically request remote assistance input control +async-channels Enable Asynchronous channels (experimental) +async-input Enable Asynchronous input +async-update Enable Asynchronous update /audio-mode:\u003cmode\u003e Audio output mode +auth-only Enable Authenticate only -authentication Disable Authentication (experimental) +auto-reconnect Enable Automatic reconnection /auto-reconnect-max-retries:\u003cretries\u003e Automatic reconnection maximum retries, 0 for unlimited [0,1000] +bitmap-cache Enable bitmap cache /bpp:\u003cdepth\u003e Session bpp (color depth) /buildconfig Print the build configuration /cert:[deny,ignore,name:\u003cname\u003e,tofu,fingerprint:\u003chash\u003e:\u003chash as hex\u003e [,fingerprint:\u003chash\u003e:\u003canother hash\u003e]] Certificate accept options. Use with care! * deny ... Automatically abort connection if the certificate does not match, no user interaction. * ignore ... Ignore the certificate checks altogether (overrules all other options) * name ... Use the alternate \u003cname\u003e instead of the certificate subject to match locally stored certificates * tofu ... Accept certificate unconditionally on first connect and deny on subsequent connections if the certificate does not match * fingerprints ... A list of certificate hashes that are accepted unconditionally for a connection /cert-deny [deprecated, use /cert:deny] Automatically abort connection for any certificate that can not be validated. /cert-ignore [deprecated, use /cert:ignore] Ignore certificate /cert-name:\u003cname\u003e [deprecated, use /cert:name:\u003cname\u003e] Certificate name /cert-tofu [deprecated, use /cert:tofu] Automatically accept certificate on first connect /client-build-number:\u003cnumber\u003e Client Build Number sent to server (influences smartcard behaviour, see [MS-RDPESC]) /client-hostname:\u003cname\u003e Client Hostname to send to server -clipboard Disable Redirect clipboard /codec-cache:[rfx|nsc|jpeg] Bitmap codec cache -compression Disable compression /compression-level:\u003clevel\u003e Compression level (0,1,2) +credentials-delegation Enable credentials delegation /d:\u003cdomain\u003e Domain -decorations Disable Window decorations /disp Display control /drive:\u003cname\u003e,\u003cpath\u003e Redirect directory \u003cpath\u003e as named share \u003cname\u003e. Hotplug support is enabled with /drive:hotplug,*. This argument provides the same function as \"Drives that I plug in later\" option in MSTSC. +drives Enable Redirect all mount points as shares /dvc:\u003cchannel\u003e[,\u003coptions\u003e] Dynamic virtual channel /dynamic-resolution Send resolution updates when the window is resized /echo Echo channel -encryption Disable Encryption (experimental) /encryption-methods:[40,][56,][128,][FIPS] RDP standard security encryption methods /f Fullscreen mode (\u003cCtrl\u003e+\u003cAlt\u003e+\u003cEnter\u003e toggles fullscreen) -fast-path Disable fast-path input/output +fipsmode Enable FIPS mode /floatbar[:sticky:[on|off],default:[visible|hidden],show: [always|fullscreen||window]] floatbar is disabled by default (when enabled defaults to sticky in fullscreen mode) -fonts Disable smooth fonts (ClearType) /frame-ack:\u003cnumber\u003e Number of frame acknowledgement /from","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:1:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":" 使用 xfreerdp /w:1920 /h:1080 /u:\"Administrator\" /p:xxxxxxxxx /v:10.32.233.100:3389 ","date":"2022-09-12","objectID":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/:2:0","tags":["Windows","xfreerdp","remote","desktop"],"title":"Ubuntu 连接 Windows 远程桌面","uri":"/2022-09-12-ubuntu-%E8%BF%9E%E6%8E%A5-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"categories":["tools"],"content":"对于非 git 的 ops 用户，如果需要 clone 一个项目，我们可以通过添加 Deploy Keys 来开放权限。 Deploy Keys ","date":"2022-09-10","objectID":"/2022-09-10-git-%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/:0:0","tags":["git","ops","运维"],"title":"git 添加非用户权限","uri":"/2022-09-10-git-%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"},{"categories":["tools"],"content":"记录一下那些年里，我追随的博客们。 ","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:0:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" CS and Programming","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:1:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Linux","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:2:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" C++","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:3:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Python","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:4:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" R","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:5:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Stat","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:6:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" Financial","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:7:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":" 其他","date":"2022-05-13","objectID":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/:8:0","tags":["blog","博客","技术","成长","linux","c++","python"],"title":"那些年我追的博客们","uri":"/2022-05-13-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E8%BF%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%AC/"},{"categories":["tools"],"content":"上交所提供了证券、可转债、ETF 等多个交易品种。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:0:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 上交所技术公司上交所技术公司（上证所信息网络有限公司）是上交所旗下的技术开发公司，负责上交所技术开发、提供开发文档等。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:1:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 技术文档可以通过[产品服务] -\u003e [业务文档]找到页面，查找相关的接口说明书。 可转债技术参考：[上海证券交易所 LDDS 系统债券 Level-2 行情接口说明书](上海证券交易所 LDDS 系统债券 Level-2 行情接口说明书) 上海可转债推送的逐笔委托自2021年12月1日日变更为原始订单数据，而不是之前的撮合完成后剩余的订单数据。比如，一个市价单，按照原来的方式，是直接完成了撮合，不再推送该逐笔委托；而在新转债行情系统，则会先推送逐笔委托，然后再推送逐笔成交。 ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:1:1","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 上交所交易规则","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:2:0","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["tools"],"content":" 市价单参考：沪深交易所市价单。 上交所市价单包括 最优五档剩余撤销 最优五档剩余转限价(以最后成交价为报单价格) ","date":"2022-05-13","objectID":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/:2:1","tags":["上交所","sse","交易","交易所","行情","网关"],"title":"上交所sse相关技术汇总","uri":"/2022-05-13-%E4%B8%8A%E4%BA%A4%E6%89%80sse%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"},{"categories":["books"],"content":"推荐一些我常用的电子书网址。 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:0:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" https://book-searcher.eu.org/","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:1:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 乐知堂藏书我是在一次搜索一本电子书的时候，发现了乐知堂藏书。这个网站提供了相对较新的书单，而且支持 azw3 格式。 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:2:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 恩京的书房","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:3:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" kindle8可以通过baidu网盘下载 ","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:4:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 书舟搜索","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:5:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 书籍知识库","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:6:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 计算机中文书籍","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:7:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["books"],"content":" 资源帝","date":"2022-04-30","objectID":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/:8:0","tags":["电子书"],"title":"推荐电子书网站","uri":"/2022-04-30-%E6%8E%A8%E8%8D%90%E7%94%B5%E5%AD%90%E4%B9%A6%E7%BD%91%E7%AB%99/"},{"categories":["Tools"],"content":"Terminator 是一款优秀的 Linux 终端模拟器。 ","date":"2022-04-24","objectID":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/:0:0","tags":["linux","terminator","onedark"],"title":"Terminator 配置方案","uri":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/"},{"categories":["Tools"],"content":" 配置 OneDark 方案 vim ~/.config/terminator [global_config] focus = system window_state = maximise title_hide_sizetext = True title_transmit_bg_color = \"#d30102\" enabled_plugins = TerminatorThemes, TerminalShot, LaunchpadCodeURLHandler suppress_multiple_term_dialog = True title_use_system_font = False title_font = FiraCode Nerd Font 8 [keybindings] copy = \u003cPrimary\u003ec paste = \u003cAlt\u003ev [profiles] [[default]] background_image = None background_color = \"#282c34\" background_type = transparent background_darkness = 0.85 cursor_color = \"#bbbbbb\" foreground_color = \"#abb2bf\" scrollbar_position = hidden palette = \"#000000:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#b2b2b2:#50536b:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#dfdfdf\" use_system_font = False font = FiraCode Nerd Font Mono 12 icon_bell = False show_titlebar = False copy_on_selection = True [[One dark]] background_image = None background_color = \"#282c34\" background_type = transparent background_darkness = 0.85 cursor_color = \"#bbbbbb\" foreground_color = \"#abb2bf\" scrollbar_position = hidden palette = \"#000000:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#b2b2b2:#50536b:#eb6e67:#95ee8f:#f8c456:#6eaafb:#d886f3:#6cdcf7:#dfdfdf\" use_system_font = False font = FiraCode Nerd Font Mono 12 icon_bell = False show_titlebar = False copy_on_selection = True [layouts] [[default]] [[[child1]]] parent = window0 profile = One dark type = Terminal [[[window0]]] parent = \"\" type = Window [plugins] ","date":"2022-04-24","objectID":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/:1:0","tags":["linux","terminator","onedark"],"title":"Terminator 配置方案","uri":"/2022-04-24-terminator-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/"},{"categories":["tool"],"content":"作为 IT 开发人员，我们常常需要了解新的技术，学习新的技能。从个人的经验看，我偏向于通过 Google 和 YouTube 获取新信息，一方面是原生的英文文档更新相对比较及时，另外这些渠道的分享资源相对比较优质。 YouTube 上面有大量的技术分享视频、各种专业的会议视频（如CppCon），在本篇博文，我简单介绍几种获取 YouTube 视频的方法。 ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:0:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" AddonCropRef:https://addoncrop.com/v2/youtube-downloader/ ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:1:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" Chrome 下载插件之前有一个非常优秀的 YouTube 视频下载网站，savefrom，非常遗憾的被迫关闭了。但是这个网站提供了一种下载 YouTube 视频的思路：可以通过插件的形式，把需要下载的视频作为缓存，进行拼接保存下来。 下载Youtube视频的几种常用方法和软件 有比较详细的介绍： 首先给你的Chrome安装上Tampermonkey 然后在Greasyfork安装本地Youtube下载器激活即可。 ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:2:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["tool"],"content":" yt-dlp 命令行youtube-dl 是一个十分优秀的命令行下载视频的工具，而这款 yt-dlp 则是基于其而增强功能的升级版，使用起来也很简单。 我写了一个简单的 bash 脚本，可以循环下载整个视频列表。 #!/bin/bash url=\"https://www.youtube.com/watch?v=SbQVY-JOrgg\u0026list=PLHTh1InhhwT6VxYHtoWIvOup9gz0p95Qr\u0026index=8\u0026t=26s\" while true do yt-dlp --playlist-start 1 --yes-playlist --write-sub --sub-format \"ass/srt/best\" --convert-subs \"srt\" $url status=$? if [[ $status = 0 ]]; then exit fi done ","date":"2022-04-17","objectID":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/:3:0","tags":["linux","chrome","youtube","youtube-dl","yt-dlp"],"title":"下载 YouTube 视频的几种方法","uri":"/2022-04-17-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["programming"],"content":"基于 Linux 守护进程服务 systemd 实现了端口转发功能，这里有一个小坑，为了保证系统监控到 ssh，需要程序驻留在主进程，也就是不能添加 -f 这个参数选项。 ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:0:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":["programming"],"content":" 配置 service ## CentOS cd /usr/lib/systemd/system ## Ubuntu cd /etc/systemd/system ## 创建服务 vim port_forwarding.service [Unit] Description=PordForwaring-Daemon After=syslog.target network.target Wants=network.target [Service] Type=simple ## 使用用户执行命令 User=william Restart=on-failure RestartSec=5s ## 注意不能添加 -f 的选项 #ExecStartPre= ExecStart=/usr/bin/ssh -NC -o \"PubkeyAuthentication=yes\" -o \"StrictHostKeyChecking=false\" -o \"ServerAliveInterval 60\" -o \"ServerAliveCountMax 100\" -o \"ExitOnForwardFailure=True\" -R *:10088:localhost:22 lfang@192.168.1.178 #ExecStartPost= [Install] WantedBy=multi-user.target ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:1:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":["programming"],"content":" 启动服务 systemctl daemon-reload systemctl enable port_forwarding.service systemctl start port_forwarding.service systemctl status port_forwarding.service ## 查看运行日志 journalctl -u port_forwarding.service ","date":"2022-04-16","objectID":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/:2:0","tags":["linux","systemd","ssh","端口转发","port-forward"],"title":"systemd 实现端口转发","uri":"/2022-04-16-systemd-%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"categories":[],"content":"hacking C++ 提供了大量学习 C++ 的资源链接，其中 List of Educational Videos 收集了相关的 YouTube 网站视频，并且对相关的内容做了分类整理。 ","date":"2022-04-11","objectID":"/2022-04-11-hacking-c-youtube-%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB/:0:0","tags":[],"title":"hacking c++：YouTube 视频分享","uri":"/2022-04-11-hacking-c-youtube-%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB/"},{"categories":["Tools"],"content":"在 Kindle 上面最优的阅读体验，首选肯定是官方支持的 azw3 格式。但是当我们需要阅读一些论文或者电子书籍的时候，往往可以获取得到的只有 PDF 格式的电子版。PDF 一般是以 A4 样式存在，对于小屏幕的电子设置，往往阅读体验不是特(hen)别(zao)好(gao)。 直观的想法就是，我们可以通过某种方式，把 A4 大小的电子文档，通过一定的分割方式，转化成适合小屏幕阅读的格式。所谓的[某种格式]，其实就是利用了 OCR 的文字识别功能，通过算法整合，形成新的电子文档。 这款开源神器，K2pdfopt ，应运而生。 ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:0:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" 安装网站上提供了编译好的可执行文件，直接下载到本地，即可使用。 ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:1:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" 使用 ./K2pdfopt your_file.pdf ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:2:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["Tools"],"content":" epub to mobi alias kindle.mobi='for book in *.epub; do echo \"Converting $book\"; ebook-convert \"$book\" \"$(basename \"$book\" .epub).mobi\"; done' alias kindle.pdf='for book in *.pdf; do echo \"Converting $book\"; yes \"\" | /home/william/k2pdfopt ${book}; done' ","date":"2022-04-08","objectID":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/:3:0","tags":["kindle","pdf"],"title":"Kindle PDF 阅读器：k2pdfopt","uri":"/2022-04-08-kindle-pdf-%E9%98%85%E8%AF%BB%E5%99%A8-k2pdfopt/"},{"categories":["programming"],"content":"通过在 Ubuntu 系统安装 Deepin，可以实现使用微信、企业微信、QQ 等多款社交工具。 ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:0:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 安装 Deepin 套件访问官网deepin-wine，可以发现很多的宝藏工具。 首次使用需要先添加仓库 wget -O- https://deepin-wine.i-m.dev/setup.sh | sh 后面就可以直接安装需要的软件了，具体的名称可以从列表获取得到。比如，我们需要安装微信 apt install com.qq.weixin.deepin ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:1:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 微信字体为方框（显示不正常）","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:0","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 终极方法发现之前的方法都是不对的，需要这样处理。主要是参考了这篇博客：关于Ubuntu 20.04 安装Deepin Wine Wechat后输入框中文方框。 ## 1. 先查看使用的字体 vim ~/.deepinwine/Deepin-WeChat/system.reg ## 查找使用的字体，发现需要使用 SimSun \"MS Shell Dlg\"=\"SimSun\" \"MS Shell Dlg 2\"=\"Tahoma\" ## 2. 那就下载一份相关的字体 ## SimSun: https://github.com/micmro/Stylify-Me/blob/main/.fonts/SimSun.ttf wget https://github.com/micmro/Stylify-Me/blob/main/.fonts/SimSun.ttf cp SimSun.ttf ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/ ## 3. 执行注册表 WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/system.reg ## 4. 重启wechat即可解决 综合上述，写了一个简单的脚本 ## ============================================================= ## 杀掉某个指定的进程 ## killx program_name killx () { list=$(ps aux | grep -i $1| grep -v color | awk '{print $2}') if [ -n \"$list\" ]; then echo \"Killing... $1\" echo $list | xargs kill -9 else echo \"Not running $1\" fi } ## ============================================================= ## ============================================================= wechat() { killx wechat killx wine cp ~/SimSun.ttf ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/ ## wine 的可执行图标位于 ## /opt/apps/com.qq.weixin.deepin/entries/applications WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/system.reg /opt/apps/com.qq.weixin.deepin/files/run.sh \u0026 } ## ============================================================= ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:1","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":" 无效方法需要我们修改默认的系统字体 cd /opt/deepinwine/tools/ ll total 2.1M drwxr-xr-x 2 root root 4.0K Mar 29 00:18 . drwxr-xr-x 4 root root 4.0K Oct 24 2020 .. -rwxr-xr-x 1 root root 2.1K Dec 9 19:25 add_hotkeys -rwxr-xr-x 1 root root 112K Feb 23 2016 app-uninstaller.exe -rwxr-xr-x 1 root root 15K Dec 20 14:44 fontconfig -rwxr-xr-x 1 root root 714 Dec 9 19:25 get_tray_window -rwxr-xr-x 1 root root 6.3K Dec 9 19:25 kill.sh -rwxr-xr-x 1 root root 1.1K Dec 9 19:25 log.sh -rwxr-xr-x 1 root root 898 Dec 9 19:25 map_device.sh -rwxr-xr-x 1 root root 19K Dec 20 14:44 QQGameRunner -rwxr-xr-x 1 root root 808 Dec 9 19:25 register_font.sh -rwxr-xr-x 1 root root 22K Mar 29 00:13 run.sh -rwxr-xr-x 1 root root 12K Mar 29 00:13 run_v2.sh -rwxr-xr-x 1 root root 13K Mar 29 00:13 run_v3.sh -rwxr-xr-x 1 root root 14K Mar 29 00:18 run_v4.sh -rwxr-xr-x 1 root root 13K Dec 9 19:25 sendkeys.exe -rwxr-xr-x 1 root root 2.4K Dec 9 19:25 sendkeys.sh -rwxr-xr-x 1 root root 1.5K Dec 9 19:25 SetDpi.sh -rwxr-xr-x 1 root root 3.1K Feb 22 2016 uninstall.sh -rwxr-xr-x 1 root root 1.9M Dec 20 14:44 updater 这里，我们需要修改 #安装需要的字体 sudo apt-get install -y ttf-wqy-microhei sudo apt-get install -y ttf-wqy-zenhei sudo apt-get install -y xfonts-wqy #解决微信无法查看发送图片问题 sudo apt install libjpeg68:i386 #参考：https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/136 #终极解决方案 #上述方式略微有一些缺陷，修复如下： #在run.sh/v2/v3/v4的开头，添加如下： export LC_ALL=zh_CN.UTF-8 如果以上步骤还是不行，则可以尝试下面的方法： ## 到 https://github.com/qiuhuachuan/fonts/blob/main/MSYH.TTC 下载字体 wget https://github.com/qiuhuachuan/fonts/blob/main/MSYH.TTC ## 拷贝到指定位置 cp MSYH.TTC ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/msyh.ttc ## 将字体注册到 Wine vim ~/.deepinwine/Deepin-WeChat/font.reg ## 复制一下内容 REGEDIT4 [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes] \"MS Shell Dlg\"=\"msyh\" \"MS Shell Dlg 2\"=\"msyh\" [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink] \"Lucida Sans Unicode\"=\"msyh.ttc\" \"Microsoft Sans Serif\"=\"msyh.ttc\" \"MS Sans Serif\"=\"msyh.ttc\" \"Tahoma\"=\"msyh.ttc\" \"Tahoma Bold\"=\"msyhbd.ttc\" \"msyh\"=\"msyh.ttc\" \"Arial\"=\"msyh.ttc\" \"Arial Black\"=\"msyh.ttc\" ## 在命令行执行以下操作 ## 如果提示有 wine 程序在执行，需要全部kill掉 WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine regedit ~/.deepinwine/Deepin-WeChat/font.reg ## 现在重新运行微信就可以显示中文字体了 ","date":"2022-03-29","objectID":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/:2:2","tags":["linux","deepin","wechat"],"title":"ubuntu 使用 wechat","uri":"/2022-03-29-ubuntu-%E4%BD%BF%E7%94%A8-wechat/"},{"categories":["programming"],"content":"vim 素有「编辑器之神」的称呼。对于 「Linux-er」，vim 是我们日常写代码的得力助手。 当然，这个「助手」并非那么「听话」，有时还很「高冷」。据说 SO 上面关于 Vim 问答最活跃的一个帖子，是如何退出。 我曾经也是一名小白。从一开始的「恐vim」心态，逐渐变成「爱不释手」，这过程中所经历的曲折不尽其数。为了让自己更加熟悉 Vim，也为了后来者有所参数，我决定以博客的形式，记录自己在使用 Vim 过程中所思所想、所感所悟，希望对自己有所总结，对他人有所启发。 文中主要以使用工具的实践为导向，介绍相关的插件与配置。 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:0:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Ref之所以先把参考资源相关的连接放在前面，是因为我在修炼 Vim 的道路上，得到了这些前辈高手的指点与启发。在这里表示诚挚的感谢！ 所需即所获：像 IDE 一样使用 vim：这篇博文可以说是我的启蒙之光了，从非常使用的角度指导如何配置 Vim，使之成为一个得力的工具。我的大部分配置都参考了这个神作。在此向作者表示敬意！ ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:1:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 打开大文件 \" ref:https://vim.fandom.com/wiki/Faster_loading_of_large_files \" 处理 vim 打开大文件较慢的问题 \" file is large from 10mb let g:LargeFile = 1024 * 1024 * 10 \"10MB augroup LargeFile au! autocmd BufReadPre * let f=getfsize(expand(\"\u003cafile\u003e\")) | if f \u003e g:LargeFile || f == -2 | call LargeFile() | endif augroup END function! LargeFile() \" no syntax highlighting etc set eventignore+=FileType \" save memory when other file is viewed setlocal bufhidden=unload \" is read-only (write with :w new_filename) setlocal buftype=nowrite \" no undo possible setlocal undolevels=-1 \" display message autocmd VimEnter * echo \"The file is larger than \" . (g:LargeFile / 1024 / 1024) . \" MB, so some options are changed (see .vimrc for details).\" endfunction ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:2:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" YouCompleteMe(YCM)对于经常使用 Vim 编辑 C++ 项目，我们需要一款得力的自动补全工具。 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 使用 Plug 安装（大概有不行） Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --go-completer --js-completer', 'on': [] } ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:1","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 使用 git 安装(可行方案) ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:2","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 配置","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:3:3","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" NerdTree","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:4:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Seiya: 透明化背景 Plug 'miyakogi/seiya.vim' \"使用命令:SeiyaEnable,SeiyaDisable let g:seiya_auto_enable=1 \"默认启动 seiya ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:5:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" tagbar","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:6:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Vim-Tmux 补全 插件：tmux-complete.vim 功能：允许用户在编辑 vim 文件的时候，自动补全 Tmux 出现的字段 ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:7:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" 安装 Plug 'prabirshrestha/async.vim' Plug 'prabirshrestha/asyncomplete.vim' Plug 'wellle/tmux-complete.vim' let g:tmuxcomplete#asyncomplete_source_options = { \\ 'name': 'tmuxcomplete', \\ 'whitelist': ['*'], \\ 'config': { \\ 'splitmode': 'words', \\ 'filter_prefix': 1, \\ 'show_incomplete': 1, \\ 'sort_candidates': 0, \\ 'scrollback': 0, \\ 'truncate': 0 \\ } \\ } \"\" 设置：解决 enter 不能新起一行的问题 let g:tmuxcomplete#trigger = 'omnifunc' imap \u003cc-space\u003e \u003cPlug\u003e(asyncomplete_force_refresh) inoremap \u003cexpr\u003e \u003cCR\u003e pumvisible() ? asyncomplete#close_popup() . \"\\\u003cCR\u003e\" : \"\\\u003cCR\u003e\" ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:7:1","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":" Devicons ## 首先需要安装 nerd-fond git clone https://github.com/ryanoasis/nerd-fonts.git cd nerd-fonts bash ./install.sh ## 需要设置 Terminator 的字体为 FiraCode Nerd Font Mono ## 然后安装插件即可显示 Plug 'ryanoasis/vim-devicons' ","date":"2022-03-17","objectID":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/:8:0","tags":["linux","vim","plugin","ide","tmux","zsh"],"title":"vim 打怪之旅","uri":"/2022-03-17-vim-%E6%89%93%E6%80%AA%E4%B9%8B%E6%97%85/"},{"categories":["programming"],"content":"Sublim4 更新了一些功能，需要重新制作一个破解版。 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:0:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":" 破解Patch-Sublime-License-Message Open sublime_text.exe in any hex editor. Search HEX-template -\u003e B2690031C9E8E0A5170084C07410488D0DFBFE68004883C428E9025517009048 Replace it to -\u003e B2690031C9909090909090909090909090909090909090909090909090909048 Save. This is nop call function for show message. This is not hacking software! Working on 28.05.2021 UPDATED!!! For Linux (Tested on Arch Linux) Search HEX-template -\u003e 50befcd82000baab10210031ffe8bd79180084c07416488b05b9ed4a00bea7ae210031ff31d231c94158ffe058 Replace it to -\u003e 909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090 Save. Working on 10.02.2021 for Sublime Text Build 4113 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:1:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":" 禁止更新 ## vim /etc/hosts 127.0.0.1 www.sublimetext.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 127.0.0.1 www.sublimetext.com 127.0.0.1 sublimetext.com 127.0.0.1 sublimehq.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 ","date":"2022-03-14","objectID":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/:2:0","tags":["subl4"],"title":"subl4 设置","uri":"/2022-03-14-subl4-%E8%AE%BE%E7%BD%AE/"},{"categories":["programming"],"content":"「黑客」似乎不是一个好词。我们往往望文生义，以为带着「黑」字，这个称呼便不是什么善茬。而现实中，各路媒体也略有偏见的报道以这个旗子做掩护的各种「黑料」，这导致我们以为「黑客」真的挺「黑」。 其实，「黑客」是一个英译词，词根是 「hack」。原本的意思是「带有攻击性的创造」，即通过拆解复杂事物以获得更全面的认识，并加以改造，使用符合自己的使用目的。而这个被改造的功能，往往也物品原有的功能不尽相同。故谓之「破坏性创造」。传播媒体大肆渲染的，其实是另外一种活动，「crack」，即「恶意的破坏、窃取利益」等。很明显，这两者的词性完全相反。 The basic difference is this: hackers build things, crackers break them. 在计算机领域，「黑客」不仅仅指代一群特殊身份的人，还表示由这群人所组合而成的文化氛围。「黑客」成长于互联网分享的时代，受益于开源软件运动，对技术痴迷，钦佩大牛，推崇共享的精神。在当前，「黑客」精神已经渗透到社会生活的各个领域。 今天刚好在网上看到 ESR 多年前写的博客，讨论是什么是「黑客」，怎样成为一名合格且优秀的「黑客」，收益良多！ ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:0:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 什么是黑客黑客文件起源于上世纪六七十年代，与互联网分享、叛逆、创新、创造等时代特征融为一体： There is a community, a shared culture, of expert programmers and networking wizards that traces its history back through decades to the first time-sharing minicomputers and the earliest ARPAnet experiments. The members of this culture originated the term ‘hacker’. Hackers built the Internet. Hackers made the Unix operating system what it is today. Hackers make the World Wide Web work. If you are part of this culture, if you have contributed to it and other people in it know who you are and call you a hacker, you’re a hacker. 黑客已经不再局限计算机领域，已经成为人们的一种精神 The hacker mind-set is not confined to this software-hacker culture. There are people who apply the hacker attitude to other things, like electronics or music — actually, you can find it at the highest levels of any science or art. Software hackers recognize these kindred spirits elsewhere and may call them ‘hackers’ too — and some claim that the hacker nature is really independent of the particular medium the hacker works in. But in the rest of this document we will focus on the skills and attitudes of software hackers, and the traditions of the shared culture that originated the term ‘hacker’. 再次强调，黑客与「害客」不同： There is another group of people who loudly call themselves hackers, but aren’t. These are people (mainly adolescent males) who get a kick out of breaking into computers and phreaking the phone system. Real hackers call these people ‘crackers’ and want nothing to do with them. Real hackers mostly think crackers are lazy, irresponsible, and not very bright, and object that being able to break security doesn’t make you a hacker any more than being able to hotwire cars makes you an automotive engineer. Unfortunately, many journalists and writers have been fooled into using the word ‘hacker’ to describe crackers; this irritates real hackers no end. The basic difference is this: hackers build things, crackers break them. ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:1:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 黑客精神 To follow the path: look to the master, follow the master, walk with the master, see through the master, become the master. The world is full of fascinating problems waiting to be solved No problem should ever have to be solved twice Boredom and drudgery are evil Freedom is good Attitude is no substitute for competence ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:2:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" 如何成为黑客1. Learn how to program. 2. Get one of the open-source Unixes and learn to use and run it. 3. Learn how to use the World Wide Web and write HTML. 4. If you don’t have functional English, learn it. ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:3:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":" Ref: ESR: How To Become A Hacker Peter Norvig: Teach Yourself Programming in Ten Years ","date":"2022-03-14","objectID":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/:4:0","tags":["hacker","learning"],"title":"成为 hacker","uri":"/2022-03-14-%E6%88%90%E4%B8%BA-hacker/"},{"categories":["programming"],"content":"最近在看这本经典书籍，可谓是言简意赅，却句句提纲挈领，读后非常有收获。所以决定写一篇读书笔记，以表敬意！ ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:0:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" Chap.4 Interfaces/接口","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" prototype/原型 It’s not usually until you’ve build and used a version of the program that you understand the issues well enough to get the design right. 在真实的软件开发过程中，我们经常从业务部门接到开发需求。理想的情况是：该需求是明确、且可以验证的。然而很多的时候，往往业务人员并不是特别清楚自己的想法，我们只有在一次次地与他们的沟通中，才能发现真正的业务需求，并逐步在脑海里形成一个初步的开发原型，我们对业务的理解也是在这个不断尝试的过程中渐渐清楚，决定需要采用哪种数据结构与算法，设计怎样的模式来更好的实现需要。 prototype 这个单词原来有草稿的意思，用在这里代表对需求逐步探索和逐步靠近的过程。 ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:1","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["programming"],"content":" Ref: exercises from the book Writing Clean Code and the Practice of Programming ","date":"2022-03-13","objectID":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:0","tags":["programming","style","design","c","c++"],"title":"The Practice of Programming 读书笔记","uri":"/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Linux"],"content":"设置 coredump 保存的文件路径。 ## echo 后面内容最好不要带上引号，有的系统会把引号也带入 ## 通过设置 core 文件的名称以及路径，程序 coredump 的时候就会在指定路径按照指定的规则命名生成 core 文件。 ## 可以在 core_pattern 模板中使用变量见下面的列表： ## - %% 单个 % 字符 ## - %p 所 dump 进程的进程 ID ## - %u 所 dump 进程的实际用户 ID ## - %g 所 dump 进程的实际组 ID ## - %s 导致本次 core dump 的信号 ## - %t core dump 的时间 (由 1970 年 1 月 1 日计起的秒数) ## - %h 主机名 ## - %e 程序文件名 ## 临时修改 echo /usr/core_log/core_%e_%t_%p \u003e /proc/sys/kernel/core_pattern ## 永久修改在 /etc/sysctl.conf ## 在该文件的最后加上两行： kernel.core_pattern = /var/core_log/core_%e_%t_%p kernel.core_uses_pid = 0 ## 可以使用以下命令，使修改结果马上生效。 /usr/sbin/sysctl -p ## 临时修改 ulimit-c unlimited ## 永久修改：打开 /etc/security/limits.conf 文件，在该文件的最后加上两行 ## 配置好后，放回原目录，重启 reboot。 ## 下面是我的配置 @root soft core unlimited @root hard core unlimited gdb 打开 core 文件时，有显示没有调试信息，因为之前编译的时候没有带上 -g 选项，没有调试信息是正常的，实际上它也不影响调试 core 文件。因为调试 core 文件时，符号信息都来自符号表，用不到调试信息。 查看堆栈使用 bt 或者 where 命令 此时，frame addr(帧数) 或者简写如上，f 1 跳转到 core 堆栈的第 1 帧。因为第 0 帧是 libc 的代码，已经不是我们自己代码了。 当然，现实环境中，coredump 的场景肯定远比这个复杂，都是逻辑都是一样的，我们需要先找到 coredump 的位置，再结合代码以及 core 文件推测 coredump 的原因。 ","date":"2022-03-10","objectID":"/2022-03-10-%E8%AE%BE%E7%BD%AE-coredump-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/:0:0","tags":["coredump"],"title":"设置 coredump 文件路径","uri":"/2022-03-10-%E8%AE%BE%E7%BD%AE-coredump-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"},{"categories":["Programming","Trading"],"content":"在金融市场交易中，我们可以获取两类行情： 基于订单、成交的逐笔行情 对订单薄进行切片得到的快照行情 我们可以利用以上数据复原订单薄「orderbook」。 ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:0:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" 利用 TtickByTick","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:1:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" 利用 Snapshot","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Talk is cheap sliu: 这样啊，就是之前每一个没有trade的价位上，我们本来算了一个max(snap1_vol-snap2_vol,0)视作cxl，现在新加一个max(snap2_vol-snap1_vol,0)视作order吧 这样一来，假如一个价位的order从10到了20，那么我们就用一个10的order去消一下outstanding ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:1","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Show me code 计算两个 snaps1、snaps2 之间的 vwap 设 $\\Delta Volume = Volume_2 - Volume_1$ 如果 $\\Delta Volume = 0$， sliu: 计算 cxl 的订单，刷新一下ob，然后用 cxl 噢！有一个点，我忽略了，如果完全没有Turnover，但是挂单超过了我们的outstanding，其实也应该撮合的 否则$\\Delta Volume \\neq 0$，需要计算 vwap $$ \\begin{align} vwap \u0026= \\frac{\\Delta Turnover}{\\Delta Volume} \\newline \u0026= \\frac{Turnover_2 - Turnover_1}{Volume_2 - Volume_1}\\end{align} $$ 我们可以对比 vwap 与 snaps1.ap1，来判断这是主动买方向还是主动卖方向（用来提取 snap1 的价格）。区分主动买/主动卖的目的，在于找到哪些是 full_traded，哪些是 partial_traded 的情况 if $vwap \\gt snaps1.ap1$，判断为主动买，需要找到卖单序列（snaps.ask_px）: full ：从 snaps1.ask_px[0] 开始直到 snaps1.ask_px[i] \u003c vwap part：snaps1.ask_px[j] \u003e vwap 且不在 snap2.ask_px 里面的，从 snaps1.ask_px[j] \u003e vwap 开始处理，遇到 snaps2.ask_px[j] \u003e= snaps1.ask_px[i] 且 snaps2.ask_qty[j] != 0 就停止搜索；如果没有找到，使用最后遇到的 snaps2.ask_qty[j] else if $snaps1.bp1 \\lt vwap \\lt snaps.ap1$，特殊情况，发现序列都是空的，使用 snap1.bp1 与 snaps.ap1，然后转化成第一种情况处理 else if $vwap \\lt snaps1.bp1$，判断为主动卖，需要找到买单序列（snaps1.bid_px）: full ：从 snaps1.bid_px[i] \u003c vwap 开始直到 snaps1.bid_px[0] part：snaps1.ask_px[j] \u003e vwap 且不在 snap2.ask_px 里面的，从 snaps1.bid_px[j] \u003c vwap 开始处理，遇到 snaps2.bid_px[j] \u003c= snaps1.bid_px[i] 且 snaps2.bid_qty[j] != 0 就停止搜索；如果没有找到，使用最后遇到的 snaps2.bid_qty[j] 我们知道， 对于 full_trade 的序列，已经推算出 trade 与 cxl 的情况 (solve_equation) 但是对于 part_trade 的序列，我们还需要使用 snaps2 上面的同一个价格档位的 qty 来计算从 snaps1 变成 snaps2 过程中发生的 cxl_qty 标记为 part_snaps_qty_vec，且记录 if (part_snaps_qty_vec.empty()) { rsp.cxl_qty = std::max(qty_vec[i] - rsp.trade_qty, 0); } else { rsp.cxl_qty = std::max(qty_vec[i] - rsp.trade_qty - part_snaps_qty_vec[i], 0); } 这样，我们一共有 using px_qty_t = std::pair\u003cdouble/*px*/, int/*qty*/\u003e; std::vector\u003cpx_qty_t\u003e full_vec; std::vector\u003cpx_qty_t\u003e part_vec; // NOTE[20220317 14:57:42]: 用来确定对应价位上面的 cxl 数量 std::vector\u003cint\u003e part_snaps_qty_vec; double full_vwap {.0}; int full_idx { 0}; int part_vwap {.0}; int part_idx { 0}; 虚拟的 rsp 数据结构为 struct fake_rsp_t { double px {.0}; int order_qty {0}; // 订单的挂单数量，需要乘以 q 表示这个订单有多少概率排在我们订单前面 int trade_qty {0}; // int cxl_qty {0}; // int leaves_qty {0}; // 前面一个 snaps 剩余的数量，表示一定会排在我们订单前面的数量 bool is_long {false}; friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const fake_rsp_t\u0026 rsp) { os \u003c\u003c \"px:\" \u003c\u003c rsp.px \u003c\u003c \", order_qty:\" \u003c\u003c rsp.order_qty \u003c\u003c \", trade_qty:\" \u003c\u003c rsp.trade_qty \u003c\u003c \", cxl_qty:\" \u003c\u003c rsp.cxl_qty \u003c\u003c \", leaves_qty:\" \u003c\u003c rsp.leaves_qty \u003c\u003c std::endl; return os; } }; 撮合 撮合的前半部分就是生成这些东西来和outstanding撮合 后半部分是我们自己的order进来，先和新ob撮合，生成rsp和outstanding撮合 如果完了还有剩的，就计算一个wait然后进入outstanding 那个时候的wait就是max{0, vol_1 - trade - cxl} + max{0, vol_2 - max{0, vol_1 - trade - cxl}} * q max{0, vol_1 - trade - cxl} + max{0, vol_2 - max{0, vol_1 - trade - cxl}} * q 里面其实 max{0, vol_2 - max{0, vol_1 - trade - cxl}} 就是你这里的order吧 lfang：leaves_qty 相当于表示上次还剩多少肯定排在我们订单前面，然后再用一个 q 的概率表示在新 snaps2 上面的订单排在前面的可能性 所以 wait_qty = rsp.leaves_qty + rsp.order_qty * q ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:2:2","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming","Trading"],"content":" Ref How to manage a local order book correctly Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth. Buffer the events you receive from the stream. Get a depth snapshot from https://api.binance.com/api/v3/depth?symbol=BNBBTC\u0026limit=1000 . Drop any event where u is \u003c= lastUpdateId in the snapshot. The first processed event should have U \u003c= lastUpdateId+1 AND u \u003e= lastUpdateId+1. While listening to the stream, each new event’s U should be equal to the previous event’s u+1. The data in each event is the absolute quantity for a price level. If the quantity is 0, remove the price level. Receiving an event that removes a price level that is not in your local order book can happen and is normal. ","date":"2022-03-09","objectID":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/:3:0","tags":["orderbook","HFT"],"title":"xeng 设计与实现","uri":"/2022-03-09-xeng-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"categories":["Programming"],"content":"so that NERDTree always opens in the current folder. set autochdir let NERDTreeChDirMode=2 nnoremap \u003cleader\u003en :NERDTree .\u003cCR\u003e With the 1st line, the working directory is always the one where the active buffer is located. With the 2nd line, I make sure the working directory is set correctly. With the 3rd line, I hit \u003cleader\u003en to open NERDTree. ","date":"2022-01-12","objectID":"/2022-01-12-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/:0:0","tags":["Linux","vim","nerdtree"],"title":"NerdTree 自动切换到当前目录","uri":"/2022-01-12-nerdtree-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/"},{"categories":["Programming"],"content":"cin 不要明文显示","date":"2021-11-20","objectID":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"通过隐藏实现，可以很好的避免执行命令被监控到。 ","date":"2021-11-20","objectID":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:0:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mymain #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003ctermios.h\u003e #include \u003cunistd.h\u003e using namespace std; int main() { termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); string passwd; getline(cin, passwd); cout \u003c\u003c passwd \u003c\u003c endl; return 0; }//main ","date":"2021-11-20","objectID":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:1:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" myssh #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(void) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string cmd; // std::cout \u003c\u003c cmd \u003c\u003c std::endl; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:2:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mysync #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(int argc, char* argv[]) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string srcpath; std::cout \u003c\u003c \"srcpath: \"; std::cin \u003e\u003e srcpath; std::string destpath; std::cout \u003c\u003c \"destpath: \"; std::cin \u003e\u003e destpath; std::cout \u003c\u003c std::endl; std::string cmd; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:3:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/archives/2021-11-20-linux-c++-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"cin 不要明文显示","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"通过隐藏实现，可以很好的避免执行命令被监控到。 ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:0:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mymain #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003ctermios.h\u003e #include \u003cunistd.h\u003e using namespace std; int main() { termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); string passwd; getline(cin, passwd); cout \u003c\u003c passwd \u003c\u003c endl; return 0; }//main ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:1:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" myssh #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(void) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string cmd = \"sshpass -p \" + passwd + \" -P22 ssh william@127.0.0.1\"; // std::cout \u003c\u003c cmd \u003c\u003c std::endl; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:2:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":" mysync #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ctermios.h\u003e using namespace std; int main(int argc, char* argv[]) { // ------------------------------------------------------------------- termios oldt; tcgetattr(STDIN_FILENO, \u0026oldt); termios newt = oldt; newt.c_lflag \u0026= ~ECHO; tcsetattr(STDIN_FILENO, TCSANOW, \u0026newt); std::string passwd; std::cout \u003c\u003c \"welcome: \"; getline(cin, passwd); std::string answer; for (const auto\u0026 e : {\"************\"}) answer += e; if (passwd != answer) { std::cout \u003c\u003c \"Bye!\" \u003c\u003c std::endl; return -1; } std::cout \u003c\u003c std::endl; tcsetattr(STDIN_FILENO, TCSANOW, \u0026oldt); // ------------------------------------------------------------------- std::string srcpath; std::cout \u003c\u003c \"srcpath: \"; std::cin \u003e\u003e srcpath; std::string destpath; std::cout \u003c\u003c \"destpath: \"; std::cin \u003e\u003e destpath; std::cout \u003c\u003c std::endl; std::string cmd; system(cmd.c_str()); } ","date":"2021-11-20","objectID":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/:3:0","tags":["Linux","c++"],"title":"Linux c++ 隐藏 cin 输入","uri":"/2021-11-20-linux-c-%E9%9A%90%E8%97%8F-cin-%E8%BE%93%E5%85%A5/"},{"categories":["Programming"],"content":"由于 Realtek 2.5Gb 网卡比较新，CentOS 无法识别出来，需要单独手动安装。","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":"由于 CentOS7 无法识别最新的 Realtek 网卡，我们需要通过单独安装一个内核程序才能使用网卡。 ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:0:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":" 安装依赖 elrepo-release-7.0-5.el7.elrepo.noarch.rpm kernel-3.10.0-1160.el7.x86_64.rpm kmod-r8125-9.003.05-1.el7_8.elrepo.x86_64.rpm linux-firmware-20200421-79.git78c0348.el7.noarch.rpm rpm -Uvh .*rpm reboot ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:1:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":" 识别网卡 nmtui Reference 这个更简单：Centos安装拓展PCIe网卡驱动 超贴心）Centos7 安装 2.5G 网卡驱动（Realtek 3000）_音程的博客 CentOS 添加网卡 没有对应网卡配置文件解决方法 ","date":"2021-11-13","objectID":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/:2:0","tags":["CentOS","Realtek","网卡","内核"],"title":"Centos 手动安装 Realtek 网卡","uri":"/2021-11-13-centos-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-realtek-%E7%BD%91%E5%8D%A1/"},{"categories":["Programming"],"content":"github 近期更新了密码政策，不能直接在命令行输入账户和密码进行 push，需要指定生成 token。","date":"2021-09-12","objectID":"/archives/2021-09-12-github-%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5/","tags":["Linux","git","github"],"title":"github 使用秘钥","uri":"/archives/2021-09-12-github-%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5/"},{"categories":["Programming"],"content":"错误提示如下： git push origin master Alias tip: gp origin master Username for 'https://github.com': williamlfang Password for 'https://williamlfang@github.com': remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead. remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information. fatal: Authentication failed for 'https://github.com/williamlfang/blog.git/' 参考：How to fix the GitHub Support for password authentication error To fix the error, follow the below steps: Open GitHub.com, click on your profile picture, then click on settings. Now, scroll to the bottom of a page and click on the Developer settings tab. Now, click on Personal access tokens and generate a new token by giving the name and expiration date, etc. Once you successfully generated the Personal access token copy it. Now, open the Git repository where you got the error and remove the current origin by running the following command. git remote remove origin git remote add origin https://\u003cToken\u003e@github.com/williamlfang/blog.git git push --set-upstream origin master ","date":"2021-09-12","objectID":"/archives/2021-09-12-github-%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5/:0:0","tags":["Linux","git","github"],"title":"github 使用秘钥","uri":"/archives/2021-09-12-github-%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5/"},{"categories":["Programming"],"content":"python 本地安装 requirements.txt","date":"2021-08-23","objectID":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/","tags":["Linux","python","pip"],"title":"python 本地安装 requirements.txt","uri":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/"},{"categories":["Programming"],"content":" # pip download -r requirements.txt # pip install --no-index --find-links=./ -r requirements.txt pybind11 pandas requests clickhouse_driver==0.2.1 paramiko loguru xlrd==1.2.0 clickhouse-cli ","date":"2021-08-23","objectID":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/:0:0","tags":["Linux","python","pip"],"title":"python 本地安装 requirements.txt","uri":"/2021-08-23-python-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-requirements.txt/"},{"categories":["Programming"],"content":"Centos 安装与使用 clickhouse 数据库","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"Clickhouse 是一款高性能的列式存储数据库。 安装参考官网安装页面。 ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 源代码安装可以通过下载源代码的方式进行安装，网址： # export LATEST_VERSION=`curl https://api.github.com/repos/ClickHouse/ClickHouse/tags 2\u003e/dev/null | grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | head -n 1` export LATEST_VERSION=21.8.4.51 wget https://repo.clickhouse.tech/tgz/stable/clickhouse-common-static-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-common-static-dbg-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-server-${LATEST_VERSION}.tgz wget https://repo.clickhouse.tech/tgz/stable/clickhouse-client-${LATEST_VERSION}.tgz tar -xzvf clickhouse-common-static-$LATEST_VERSION.tgz sudo bash clickhouse-common-static-$LATEST_VERSION/install/doinst.sh tar -xzvf clickhouse-common-static-dbg-$LATEST_VERSION.tgz sudo bash clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh tar -xzvf clickhouse-server-$LATEST_VERSION.tgz sudo bash clickhouse-server-$LATEST_VERSION/install/doinst.sh sudo /etc/init.d/clickhouse-server start tar -xzvf clickhouse-client-$LATEST_VERSION.tgz sudo bash clickhouse-client-$LATEST_VERSION/install/doinst.sh 配置 server 的配置文件位于：/etc/clickhouse-server config.xml users.xml client ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 设置访问 IP默认只能在本机访问，可以修改 /etc/clickhouse-server/config.xml \u003c!-- Default values - try listen localhost on IPv4 and IPv6. --\u003e \u003c!-- \u003clisten_host\u003e::1\u003c/listen_host\u003e \u003clisten_host\u003e127.0.0.1\u003c/listen_host\u003e --\u003e \u003c!-- Default values - try listen localhost on IPv4 and IPv6. --\u003e \u003clisten_host\u003e::1\u003c/listen_host\u003e \u003clisten_host\u003e0.0.0.0\u003c/listen_host\u003e ","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 添加 admin 管理员取消用户管理的注释： \u003c!-- User can create other users and grant rights to them. --\u003e \u003c!-- \u003caccess_management\u003e1\u003c/access_management\u003e --\u003e \u003c!-- User can create other users and grant rights to them. --\u003e \u003caccess_management\u003e1\u003c/access_management\u003e ## 使用 default 账户登录并创建其他用户 clickhouse-client -h 127.0.0.1 -u default --password ilove ## 创建账户 CREATE USER lfang IDENTIFIED WITH plaintext_password BY 'XIA...qq' DEFAULT ROLE ALL; ## 权限 GRANT all ON default to lfang; ## 使用新账户登录，可以看到数据库了 clickhouse-client -h 127.0.0.1 -u lfang --password data101 :) show databases; SHOW DATABASES Query id: 005f9f65-7183-4dcc-b3b6-5187685c168c ┌─name────┐ │ default │ └─────────┘ 1 rows in set. Elapsed: 0.003 sec. 使用 clickhouse-client -h 127.0.0.1 -u default --password ilove ~/anaconda3/bin/python3 -m pip install clickhouse-cli ~/anaconda3/bin/clickhouse-cli -h 127.0.0.1 -p8123 -u default -Pilove ~/anaconda3/bin/clickhouse-cli -h 192.168.1.101 -p8123 -u default -Pilove show databases; 技巧","date":"2021-08-20","objectID":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Linux","Centos","clickhouse","ch","数据库"],"title":"Clickhouse 安装与使用","uri":"/2021-08-20-clickhouse-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"Linux 操作系统使用组播方式收包与解析报文。","date":"2021-08-18","objectID":"/archives/2021-08-18-linux-%E7%BB%84%E6%92%AD%E6%94%B6%E5%8C%85/","tags":["Linux","multicast","solarflare","组播","多播","网络","网卡"],"title":"Linux 组播收包","uri":"/archives/2021-08-18-linux-%E7%BB%84%E6%92%AD%E6%94%B6%E5%8C%85/"},{"categories":["Programming"],"content":" 建立组播 tcpdump 解析报文 Tips\u0026Tricks","date":"2021-08-18","objectID":"/archives/2021-08-18-linux-%E7%BB%84%E6%92%AD%E6%94%B6%E5%8C%85/:0:0","tags":["Linux","multicast","solarflare","组播","多播","网络","网卡"],"title":"Linux 组播收包","uri":"/archives/2021-08-18-linux-%E7%BB%84%E6%92%AD%E6%94%B6%E5%8C%85/"},{"categories":["Programming"],"content":"vim 出现中文乱码","date":"2021-08-17","objectID":"/archives/2021-08-17-vim-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/","tags":["linux","vim","中文","乱码"],"title":"vim 中文乱码","uri":"/archives/2021-08-17-vim-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":"在 ~/.vimrc 添加 set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 set termencoding=utf-8 set encoding=utf-8 另外，有可能出现 ^M 这样的表示符号，其实是 return 的显示，替换掉 :%s/\\r//g ","date":"2021-08-17","objectID":"/archives/2021-08-17-vim-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:0:0","tags":["linux","vim","中文","乱码"],"title":"vim 中文乱码","uri":"/archives/2021-08-17-vim-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":"frp.service","date":"2021-08-12","objectID":"/archives/2021-08-12-frp.service/","tags":["frp"],"title":"frp.service","uri":"/archives/2021-08-12-frp.service/"},{"categories":["Programming"],"content":" [Unit] Description=frp network service After=network.target network-online.target [Service] Type=forking Restart=always RestartSec=5 ExecStart=/root/tools/frp_0.37.0_linux_amd64/start.sh ExecReload=/root/tools/frp_0.37.0_linux_amd64/start.sh ExecStop=/root/tools/frp_0.37.0_linux_amd64/start.sh [Install] WantedBy=multi-user.target #!/usr/bin/env bash ## 1.kill ps aux |grep frpc |awk '{print $2}' |xargs kill -9 ## 2.start nohup /root/tools/frp_0.37.0_linux_amd64/frpc -c /root/tools/frp_0.37.0_linux_amd64/frpc.ini \u0026 ","date":"2021-08-12","objectID":"/archives/2021-08-12-frp.service/:0:0","tags":["frp"],"title":"frp.service","uri":"/archives/2021-08-12-frp.service/"},{"categories":["Programming"],"content":"Linux 解压 zip 遇到中文乱码的解决方法。","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":" 一招解决 unar ","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:1:0","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":" 无效方法windows中压缩的zip包，如果含有中文，在linux下解压时会出现乱码，刚才就出现了这个问题。 搜得一个帖子， 解决了乱码问题。帖子来源： http://www.ubuntuchina.com/viewthread.php?tid=7356。 ubuntu linux 压缩文件zip中文乱码问题在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压，中文文件名会出现乱码。 虽然2005年就有人把这报告为bug, 但是info-zip的官方网站没有把自动识别编码列入计划，可能他们不认为这是个问题。Sun对java中存在N年的zip编码问题，采用了同样的处理方式。 有2种方式解决问题： 通过unzip行命令解压，指定字符集 unzip -O CP936 xxx.zip (用GBK, GB18030也可以) 有趣的是unzip的manual中并无这个选项的说明, unzip –help对这个参数有一行简单的说明。 在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件 /etc/environment中加入2行 UNZIP=\"-O CP936\" ZIPINFO=\"-O CP936\" 这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。 采用了上面的第一个方法，问题解决。 另一方法为采用java的jar命令解压zip包 JAR 解压 jar xvf file.name ","date":"2021-08-11","objectID":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:2:0","tags":["Linux","ubuntu","zip","解压","乱码","中文"],"title":"Linux 解压 zip 中文乱码","uri":"/2021-08-11-linux-%E8%A7%A3%E5%8E%8B-zip-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":"Rstudio with ldap","date":"2021-08-11","objectID":"/archives/2021-08-11-rstudio-server-with-ldap/","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/archives/2021-08-11-rstudio-server-with-ldap/"},{"categories":["Programming"],"content":" wget https://download2.rstudio.org/server/centos7/x86_64/rstudio-server-rhel-1.4.1717-x86_64.rpm yum install rstudio-server-rhel-1.4.1717-x86_64.rpm sudo rstudio-server restart sudo cp /etc/pam.d/login /etc/pam.d/rstudio ","date":"2021-08-11","objectID":"/archives/2021-08-11-rstudio-server-with-ldap/:0:0","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/archives/2021-08-11-rstudio-server-with-ldap/"},{"categories":["Programming"],"content":"Rstudio with ldap","date":"2021-08-11","objectID":"/2021-08-11-rstudio-server-with-ldap/","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/2021-08-11-rstudio-server-with-ldap/"},{"categories":["Programming"],"content":"To install Rstudio in CentOS system, we need to run following commands: wget https://download2.rstudio.org/server/centos7/x86_64/rstudio-server-rhel-1.4.1717-x86_64.rpm yum install rstudio-server-rhel-1.4.1717-x86_64.rpm sudo rstudio-server restart sudo cp /etc/pam.d/login /etc/pam.d/rstudio ","date":"2021-08-11","objectID":"/2021-08-11-rstudio-server-with-ldap/:0:0","tags":["Rstudio","ldap"],"title":"Rstudio server with ldap","uri":"/2021-08-11-rstudio-server-with-ldap/"},{"categories":["Programming"],"content":"R nanotime.","date":"2021-08-07","objectID":"/archives/2021-08-07-r-nanotime/","tags":["R","nanotime"],"title":"R:nanotime","uri":"/archives/2021-08-07-r-nanotime/"},{"categories":["Programming"],"content":" library(nanotime) options(\"nanotimeTz\"=\"Asia/Shanghai\") options(\"nanotimeFormat\"=\"%Y-%m-%d %H:%M:%E9S %Z\") ## 2021-08-07 15:00:54.080453230 nanotime(1628319654080453230) [1] 2021-08-07 15:00:54.080453120 CST ","date":"2021-08-07","objectID":"/archives/2021-08-07-r-nanotime/:0:0","tags":["R","nanotime"],"title":"R:nanotime","uri":"/archives/2021-08-07-r-nanotime/"},{"categories":["Programming"],"content":"git 添加 submodule。","date":"2021-08-05","objectID":"/archives/2021-08-05-git-%E6%B7%BB%E5%8A%A0-submodule/","tags":["Linux","git","submodule","c++"],"title":"git 添加 submodule","uri":"/archives/2021-08-05-git-%E6%B7%BB%E5%8A%A0-submodule/"},{"categories":["Programming"],"content":"Docker 容器内无法使用 systemctl 开启系统服务，需要设置。","date":"2021-08-04","objectID":"/archives/2021-08-04-docker-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C-systemctl/","tags":["Linux","Docker","systemctl"],"title":"Docker 无法运行 systemctl","uri":"/archives/2021-08-04-docker-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C-systemctl/"},{"categories":["Programming"],"content":" ## 启动的时候添加 /sbin/init ## 不是 /usr/sbin/init/ 因为有可能找不到 docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 wuya-centos7-r4.0:v1.0 /sbin/init docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 -p50022:22 192.168.1.88:5000/wuya/centos7-r4.0:v1.0 /sbin/init ## 运行的时候添加 bash docker exec -it rshiny bash sudo systemctl start rstudio-server sudo systemctl start shiny-server ","date":"2021-08-04","objectID":"/archives/2021-08-04-docker-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C-systemctl/:0:0","tags":["Linux","Docker","systemctl"],"title":"Docker 无法运行 systemctl","uri":"/archives/2021-08-04-docker-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C-systemctl/"},{"categories":["安装 R"],"content":"https://www.osradar.com/how-to-install-r-and-rstudio-on-centos-8/ ","date":"2021-08-03","objectID":"/archives/2021-08-03-r-%E7%9A%84%E5%90%84%E7%A7%8D%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/:0:0","tags":["linux","R","r"],"title":"R 的各种版本安装","uri":"/archives/2021-08-03-r-%E7%9A%84%E5%90%84%E7%A7%8D%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":"根据上海和深圳的股票、可转债逐笔委托与逐笔成交数据，依据一定的撮合规则，建立订单薄（orderbook）。","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 深圳交易所","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:0:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 深圳可转债 可转债使用的价格笼子为除权除息之后的前收价 ","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:1:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 深圳主板","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:2:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 深圳创业板 使用的基准价为即时揭示的价格，这意味着每次有 order/cxl/trans 推送的时候，我们都需要去看一下 ob 的 best-bid 与 best-ask 是不是变化了，然后再去更新价格笼子 对于市价单的情况，有可能是先有一系列的 trans，然后再转化成限价单，为了对应一个 seq 只生成一个 snaps 的原则，我们需要的所有跟市价单相关的事件处理完成后，才去推送撮合的成交、并更新相应的 snaps 这里有一点是，在市价单撮合的过程中，会存在市价单被撤单，也同样需要更新价格笼子，然后再次撮合，但是我们需要把这次撮合的也标记成是因为市价单事件导致的 trans-cache，所以需要一起等到改市价单事件完成后一次性的推送和更新 上海交易所","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:3:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 上海可转债","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:4:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":" 上海股票","date":"2021-07-26","objectID":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/:5:0","tags":["hft","trading","orderbook","matching","sse","szse","量化","交易"],"title":"ob 撮合逻辑","uri":"/archives/2021-07-26-ob-%E6%92%AE%E5%90%88%E9%80%BB%E8%BE%91/"},{"categories":["Programming"],"content":"zsh 报错：compdef not found.","date":"2021-07-18","objectID":"/archives/2021-07-18-zsh-%E6%8A%A5%E9%94%99--compdef-not-found/","tags":["linux","zsh"],"title":"zsh 报错: compdef not found","uri":"/archives/2021-07-18-zsh-%E6%8A%A5%E9%94%99--compdef-not-found/"},{"categories":["Programming"],"content":"主要在 ~/.zshrc 最上面添加 ## 记得在最上面添加 autoload -Uz compinit compinit ","date":"2021-07-18","objectID":"/archives/2021-07-18-zsh-%E6%8A%A5%E9%94%99--compdef-not-found/:0:0","tags":["linux","zsh"],"title":"zsh 报错: compdef not found","uri":"/archives/2021-07-18-zsh-%E6%8A%A5%E9%94%99--compdef-not-found/"},{"categories":["Programming"],"content":"通过配置 CMakeListst.txt，可以让 ycm 自动识别补全路径。","date":"2021-07-13","objectID":"/archives/2021-07-13-ycm-%E4%B8%8E-cmake/","tags":["linux","vim","ycm","cmake"],"title":"Ycm 与 cmake","uri":"/archives/2021-07-13-ycm-%E4%B8%8E-cmake/"},{"categories":["Programming"],"content":"最近在配置 vim 的 ycm 插件，发现如果需要针对某个非系统的头文件路径，需要单独修改 third_party/ycmd/.ycm_extra_conf.py。 '-isystem','cpp/ycm/benchmarks/benchmark/include', '-isystem','/shared/trading/Wuya/release/include', 这样的话，如果更换了项目，需要每次都重新修改配置文件，显得似乎有点多余。后来在网站看到可以通过配置 CMakeLists.txt 文件来达到编译的时候自动更新 ycm 的查找路径，从而可以针对每个项目进行独立的配置。 具体是在 CMakeListst.txt 添加一下编译选项： SET(CMAKE_EXPORT_COMPILE_COMMANDS ON) IF(EXISTS \"${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json\") EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json ) ENDIF() 可以参考链接：YouCompleteMe and CMake ","date":"2021-07-13","objectID":"/archives/2021-07-13-ycm-%E4%B8%8E-cmake/:0:0","tags":["linux","vim","ycm","cmake"],"title":"Ycm 与 cmake","uri":"/archives/2021-07-13-ycm-%E4%B8%8E-cmake/"},{"categories":["Programming"],"content":"巧妙使用 do...while(false) 可以替换掉臭名昭著的 goto 语句。","date":"2021-07-12","objectID":"/archives/2021-07-12-c++-%E5%B7%A7%E7%94%A8-do...while.false/","tags":["c++"],"title":"c++ 巧用 do...while.false","uri":"/archives/2021-07-12-c++-%E5%B7%A7%E7%94%A8-do...while.false/"},{"categories":["Programming"],"content":"今天看代码发现一个比较巧妙的方法，可以参考 SO 链接 对比两个 c++ 代码段 do { // code if (condition) break; // or continue // more code } while(false); 完爆一下的 goto { // code if (condition) goto end; // more code } end: do{...}while(false);提供了提前退出的机制，可以替代臭名昭著的 goto 语法，实现在一个代码段内进行判断与退出的巧妙机制。 可以参考以下的这篇文章，讲解的更加清晰： do…while ","date":"2021-07-12","objectID":"/archives/2021-07-12-c++-%E5%B7%A7%E7%94%A8-do...while.false/:0:0","tags":["c++"],"title":"c++ 巧用 do...while.false","uri":"/archives/2021-07-12-c++-%E5%B7%A7%E7%94%A8-do...while.false/"},{"categories":["Programming"],"content":"使用 Rshiny 构建可视化展示的网页","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" RShiny 是什么Shiny 是一个 R 语言的软件包，提供了用于制作 Web-UI/app 的便捷工具。这些应用提供了交互式的数据展示、实时的统计分析与高度可定制化的操作界面，并且可以以网站或者独立的应用分享和发布。通过 RShiny，我们可以非常方便的与他人分享自己的数据研究成果，随时监控关心的信号指标。 可以访问 RShiny 的官网查看案例集，你会发现原来可以通过在 R 中调用简单的几个命令，就可以制作出如此精妙的 Web-UI，而不用再纠结与 HTML-CSS-Javascript 的细枝末节里。实在是「居家旅行、获奖无数」的必备良品。 是不是很期待？来吧，接下来请接受代码的暴风雨。。。。。。 怎么使用","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:0:0","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 安装由于 Shiny 会开启 systemd 网站服务，因此安装 Shiny 需要管理员 root 权限。 当然，我们也可以在 Docker 中安装，然后把相关的 3838 端口转发出来，一样可以在外部访问该服务。 ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:0","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 安装 shiny 包 ## 1. Shiny 包安装，一定要使用 root 权限，才可以添加服务项 $ sudo su -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/', dep=TRUE)\\\"\" ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:1","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 安装 gdebi ## 2. 安装 gdebi（用于安装 Shiny Server 及其所有依赖项）和 Shiny Server $ sudo apt-get install gdebi-core $ wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.14.948-amd64.deb $ sudo gdebi shiny-server-1.5.14.948-amd64.deb ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:2","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 开启 shiny-server 服务 ## 3. shiny-server 命令 #启动 $ sudo systemctl start shiny-server #停止 $ sudo systemctl stop shiny-server #重启 $ sudo systemctl restart shiny-server #查看状态 $ sudo systemctl status shiny-server #服务器重新初始化，但不会中断服务器当前进程或任何连接。 $ sudo systemctl kill -s HUP --kill-who=main shiny-server $ sudo reload shiny-server #shiny-server状态 $ sudo systemctl status shiny-server ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:3","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 查看安装 ## 4. 查看 shiny-server: http://localhost:3838/ ## 查看 demo: http://localhost:3838/sample-apps/hello/ ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:4","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 配置 ## 5. 配置 /etc/shiny-server/shiny-server.conf /opt/shiny-server/config/default.config # Instruct Shiny Server to run applications as the user \"shiny\" run_as shiny; # Define a server that listens on port 3838 server { #listen 3838; listen 3838 0.0.0.0; # Define a location at the base URL location / { # Host the directory of Shiny Apps stored in this directory site_dir /srv/shiny-server; # Log all Shiny output to files in this directory log_dir /var/log/shiny-server; # When a user visits the base URL rather than a particular application, # an index of the applications available in this directory will be shown. directory_index on; } } ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:5","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 添加用户 ## 6. 创建用户 ## sudo /opt/shiny-server/bin/sspasswd /etc/shiny-server/passwd admin ## 7. Rmarkdown $ sudo su - -c \"R -e \\\"install.packages('rmarkdown',repos='http://mirror.bjtu.edu.cn/cran/')\\\"\" ## 8. 所有的 app 都放在 /srv/shiny-server ## 9. 外部可以访问 192.168.1.88:3838 ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:1:6","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" Demo library(shiny) library(ggplot2) library(ggthemes) library(plotly) ui \u003c- fluidPage( titlePanel(\"Plotly\"), sidebarLayout( sidebarPanel(), mainPanel( plotlyOutput(\"plot2\")))) server \u003c- function(input, output) { output$plot2 \u003c- renderPlotly({ print( ggplotly( ggplot(data = mtcars, aes(x = disp, y = cyl)) + geom_smooth(method = lm, formula = y~x) + geom_point() + theme_gdocs() ) ) }) } shinyApp(ui, server) ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:2:0","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 技术细节为了搭建 Shiny 服务，我们首先需要制作一个快加，把需要的元素放在这里 library(shiny) # Define UI ---- ui \u003c- fluidPage( ) # Define server logic ---- server \u003c- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:3:0","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" ui 前端 ui \u003c- fluidPage( titlePanel(\"title panel\"), sidebarLayout( position = \"right\", sidebarPanel(\"sidebar panel\"), mainPanel(\"main panel\") ) ) titlePanel and sidebarLayout are the two most popular elements to add to fluidPage. They create a basic Shiny app with a sidebar. sidebarLayout always takes two arguments: sidebarPanel function output mainPanel function output The sidebar panel will appear on the left side of your app by default. You can move it to the right side by giving sidebarLayout the optional argument position = \"right\". 布局可以参考：Application layout guide shiny function HTML5 equivalent creates p \u003cp\u003e A paragraph of text h1 \u003ch1\u003e A first level header h2 \u003ch2\u003e A second level header h3 \u003ch3\u003e A third level header h4 \u003ch4\u003e A fourth level header h5 \u003ch5\u003e A fifth level header h6 \u003ch6\u003e A sixth level header a \u003ca\u003e A hyper link br \u003cbr\u003e A line break (e.g. a blank line) div \u003cdiv\u003e A division of text with a uniform style span \u003cspan\u003e An in-line division of text with a uniform style pre \u003cpre\u003e Text ‘as is’ in a fixed width font code \u003ccode\u003e A formatted block of code img \u003cimg\u003e An image strong \u003cstrong\u003e Bold text em \u003cem\u003e Italicized text HTML Directly passes a character string as HTML code ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:3:1","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 输入 The standard Shiny widgets are: function widget actionButton Action Button checkboxGroupInput A group of check boxes checkboxInput A single check box dateInput A calendar to aid date selection dateRangeInput A pair of calendars for selecting a date range fileInput A file upload control wizard helpText Help text that can be added to an input form numericInput A field to enter numbers radioButtons A set of radio buttons selectInput A box with choices to select from sliderInput A slider bar submitButton A submit button textInput A field to enter text library(shiny) # Define UI ---- ui \u003c- fluidPage( titlePanel(\"Basic widgets\"), fluidRow( column(3, h3(\"Buttons\"), actionButton(\"action\", \"Action\"), br(), br(), submitButton(\"Submit\")), column(3, h3(\"Single checkbox\"), checkboxInput(\"checkbox\", \"Choice A\", value = TRUE)), column(3, checkboxGroupInput(\"checkGroup\", h3(\"Checkbox group\"), choices = list(\"Choice 1\" = 1, \"Choice 2\" = 2, \"Choice 3\" = 3), selected = 1)), column(3, dateInput(\"date\", h3(\"Date input\"), value = \"2014-01-01\")) ), fluidRow( column(3, dateRangeInput(\"dates\", h3(\"Date range\"))), column(3, fileInput(\"file\", h3(\"File input\"))), column(3, h3(\"Help text\"), helpText(\"Note: help text isn't a true widget,\", \"but it provides an easy way to add text to\", \"accompany other widgets.\")), column(3, numericInput(\"num\", h3(\"Numeric input\"), value = 1)) ), fluidRow( column(3, radioButtons(\"radio\", h3(\"Radio buttons\"), choices = list(\"Choice 1\" = 1, \"Choice 2\" = 2, \"Choice 3\" = 3),selected = 1)), column(3, selectInput(\"select\", h3(\"Select box\"), choices = list(\"Choice 1\" = 1, \"Choice 2\" = 2, \"Choice 3\" = 3), selected = 1)), column(3, sliderInput(\"slider1\", h3(\"Sliders\"), min = 0, max = 100, value = 50), sliderInput(\"slider2\", \"\", min = 0, max = 100, value = c(25, 75)) ), column(3, textInput(\"text\", h3(\"Text input\"), value = \"Enter text...\")) ) ) # Define server logic ---- server \u003c- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:3:2","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" serverShiny provides a family of functions that turn R objects into output for your user interface. Each function creates a specific type of output. Output function Creates dataTableOutput DataTable htmlOutput raw HTML imageOutput image plotOutput plot tableOutput table textOutput text uiOutput raw HTML verbatimTextOutput text render function creates renderDataTable DataTable renderImage images (saved as a link to a source file) renderPlot plots renderPrint any printed output renderTable data frame, matrix, other table like structures renderText character strings renderUI a Shiny tag object or HTML 一个实际的例子 ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:3:3","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 设计框架RShiny 包含两部分内容，一个是前端的 UI 界面部分，另一个是后端的 Server 服务。 ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:4:0","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 前端 UI我们首先需要定义前端，即需要先规划好想要表达的内容与方式。 ## ------------------------------------------------------------------------------------ ## ui = header + sidebar + body ## icon: https://fontawesome.com/icons?d=gallery\u0026p=1 header \u003c- dashboardHeader(title = \"RShiny @william\") sidebar \u003c- dashboardSidebar( sidebarMenu( menuItem(\"CFFEX\", tabName = \"CFFEX\", icon = icon(\"warehouse\")), menuItem(\"CFFEX_T\", tabName = \"CFFEX_T\", icon = icon(\"ticket-alt\")), menuItem(\"SHFE\", tabName = \"SHFE\", icon = icon(\"city\")), menuItem(\"DCE\", tabName = \"DCE\", icon = icon(\"shopping-basket\")), menuItem(\"STOCKS\", tabName = \"STOCKS\", icon = icon(\"coins\")), menuItem(\"ConvBond\", tabName = \"CV\", icon = icon(\"comment-dollar\")) ) ) tab_main \u003c- function(exch) { ## some R code goes here } tab_product \u003c- function(exch) { ## some R code goes here } body \u003c- dashboardBody( tabItems( ## CFFEX ---------------------------------------------- begin tabItem(tabName = \"CFFEX\", navbarPage(\"\", id = \"CFFEX_nav\", theme = shinytheme(\"flatly\"), tab_main(\"CFFEX\"), tab_product(\"CFFEX\"), tab_data(\"CFFEX\"), tab_sig(\"CFFEX\") ) ), ## CFFEX ---------------------------------------------- end ) ) ## gear up all dashboardPage(header, sidebar, body) ui = dashboardPage(header, sidebar, body) ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:4:1","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 后端 Serverserver 其实是一个很大的函数，包含了三个具体的参数，这个函数有点类似 callback，允许我们在里面定义自己的操作，然后把这个函数传递给 shiny 进行具体的解析。 server = function(input, output, session) { ## some R code goes here } 其中， input 是我们可以从 UI 界面交互获取的内容，比如 input$CFFEX_main_select_session，通过这个变量我们就可以实时的从界面获取用户想要我们执行的参数 output 是我们想要 server 计算的结果返回给 UI。比如，我们在上面的 UI 定义了一个 tab_main 的组件，代码里面包含了这么一个命令 plotlyOutput(sprintf(\"%s_sig\", exch), width = \"100%\", height = \"620px\") 即 UI 期望可以通过 Server 获取到这个返回，那么我们的 output 就可以写成这样 output$CFFEX_T_main \u003c- renderPlotly({ ## some R code goes here }) 细心的你，还发现我添加了一些按钮，你只需要轻松的点击按钮或者选择框，就可以得到想要的结果。这个用编程语言讲，叫做事件触发。我们通过添加观察组，针对不同的事件执行相应的策略。比如，观察到用户选择不同的信号名称，那么我们就更新相应的图片： observe({ if (input$CFFEX_sig_reset == 0) { updateCheckboxGroupInput(session, inputId=\"CFFEX_sig_select_signame\", label = NULL, choices = all.cffex.sig.names, selected = grep(\"pred\", all.cffex.sig.names, value = T), inline = TRUE) } else { updateCheckboxGroupInput(session, inputId=\"CFFEX_sig_select_signame\", label = NULL, choices = all.cffex.sig.names, selected = grep(\"pred\", all.cffex.sig.names, value = T), inline = TRUE) } }) ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:4:2","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 完工最后，我们把 UI 和 Server 交给 shiny去解析并生成相应的网页信息即可 ## ------------------------------------------------------------------------------------ shinyApp(ui, server) Docker 安装 Rshiny docker run --name rshiny -dit --privileged=true -p 58787:8787 -p 53838:3838 wuya-centos7-r4.0:v1.0 /sbin/init ## 添加用户，需要进入 docker 添加用户 docker exec -it rshiny bash sudo adduser tester sudo passwd tester ## 安装 R https://www.osradar.com/how-to-install-r-and-rstudio-on-centos-8/ ","date":"2021-07-10","objectID":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/:4:3","tags":["R","Shiny","Rstudio","docker"],"title":"RShiny 使用指南","uri":"/archives/2021-07-10-rshiny-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"clickhouse 对于连接的错误次数有限制，当尝试连接的错误次数超过阈值，就会报错。这时需要我们修改这个阈值。","date":"2021-07-07","objectID":"/archives/2021-07-07-clickhouse-%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF%E6%AC%A1%E6%95%B0/","tags":["clickhouse"],"title":"Clickhouse 连接错误次数","uri":"/archives/2021-07-07-clickhouse-%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF%E6%AC%A1%E6%95%B0/"},{"categories":["Programming"],"content":"问题： \u003e DBI::dbSendQuery(conn, sql) Error in select(conn@ptr, statement) : DB::Exception: All attempts to get table structure failed. Log: Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: Code: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 10.20.140.3:9000 (10.20.140.3:9000) (version 21.4.7.3 (official bui ld)) Code: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 10.20.140.3:9000 (10.20.140.3:9000) (version 21.4.7.3 (official bui ld)) Code: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 10.20.140.3:9000 (10.20.140.3:9000) (version 21.4.7.3 (official bui ld)) 解决方案参考：Inconsistent behaviour of Distributed table engine and remote table function when called with cluster and with list of addresses SET connections_with_failover_max_tries = 5 ","date":"2021-07-07","objectID":"/archives/2021-07-07-clickhouse-%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF%E6%AC%A1%E6%95%B0/:0:0","tags":["clickhouse"],"title":"Clickhouse 连接错误次数","uri":"/archives/2021-07-07-clickhouse-%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF%E6%AC%A1%E6%95%B0/"},{"categories":["Programming"],"content":"设置可以在终端显示 git 修改的颜色。","date":"2021-07-05","objectID":"/archives/2021-07-05-git-%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/","tags":["linux","zsh","git"],"title":"git 显示修改颜色","uri":"/archives/2021-07-05-git-%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":" git config --global color.diff auto git config --global color.status auto ","date":"2021-07-05","objectID":"/archives/2021-07-05-git-%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/:0:0","tags":["linux","zsh","git"],"title":"git 显示修改颜色","uri":"/archives/2021-07-05-git-%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":"通过一定的配置，可以把 vim 打造成为一款强大的 C++ 开发工具。","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 安装 Vim8","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:0:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 使用 Anaconda-python ## 不需要 lto export LDFLAGS=\"-fno-lto\" ## 有可能需要添加环境路径 ## 1. ldconfig -p |grep libSM ldconfig -p |grep libuuid ## 2. export PATH= export LD_LIBRARY_PATH= ./configure --prefix=$HOME/opt \\ --enable-python3interp=yes \\ --enable-cscope \\ --enable-gui=auto \\ --enable-gtk2-check \\ --enable-gnome-check \\ --with-features=huge \\ --enable-multibyte \\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"xorpd\" \\ --enable-fail-if-missing \\ --with-python3-command=$HOME/anaconda3/bin/python3 \\ --with-python3-config-dir=$HOME/anaconda3/lib/python3.7/config-3.7m-x86_64-linux-gnu make -j \u0026\u0026 make install ~/opt/bin/vim --version |grep python /home/ops/opt/bin/vim: /home/ops/anaconda3/lib/libuuid.so.1: no version information available (required by /lib64/libSM.so.6) +cmdline_hist +langmap -python +visual +cmdline_info +libcall +python3 +visualextra Linking: gcc -fno-lto -L/usr/local/lib -Wl,--as-needed -o vim -lSM -lICE -lXt -lX11 -lSM -lICE -lm -ltinfo -lselinux -ldl -L/home/ops/anaconda3/lib/python3.7/config-3.7m-x86_64-linux-gnu -lpython3.7m -lcrypt -lpthread -ldl -lutil -lrt -lm ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 使用系统自带 python3 ./configure --prefix=$HOME/opt \\ --with-features=huge \\ --enable-multibyte \\ --enable-rubyinterp=yes \\ --enable-python3interp=yes \\ --with-python3-config-dir=$(python3-config --configdir) \\ --enable-perlinterp=yes \\ --enable-luainterp=yes \\ --enable-gui=gtk2 \\ --enable-cscope\\ --enable-largefile \\ --disable-netbeans \\ --with-x \\ --with-compiledby=\"xorpd\" \\ --enable-fail-if-missing ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 使用源代码编译 python ## 为了避免出现 _ctypes 错误 ## 建议安装一下 yum install libffi-devel ## 需要安装动态库 ## 在安装 Python 的时候，最好添加命令 ## ./configure --enable-optimizations --enable-share export LDFLAGS=\"-rdynamic\" export LDFLAGS=\"-fno-lto\" export PATH= export LD_LIBRARY_PATH= ./configure --prefix=$HOME/opt \\ --enable-python3interp=yes \\ --enable-cscope \\ --enable-gui=auto \\ --enable-gtk2-check \\ --enable-gnome-check \\ --with-features=huge \\ --enable-multibyte \\ --enable-largefile \\ --disable-netbeans \\ --with-compiledby=\"xorpd\" \\ --enable-fail-if-missing \\ --with-python3-command=$HOME/opt/bin/python3.9 \\ --with-python3-config-dir=$HOME/opt/lib/python3.9/config-3.9-x86_64-linux-gnu 安装插件随着 Vim 生态环境的改善，现在我们有了更多的插件管理器。从早期的 Vundle 到新晋网红 Vim-Plug，插件的管理功能逐渐得到改善，如支持并行安装、按需加载功能、异步调用等。 当前最为推荐的Vim插件，当属 Vim-Plug。 ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 安装 Vim-Plug简单粗暴，直接下载到 ~/.vim 目录下即可 sh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim' ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:4:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 如何使用 Vim-Plug 安装插件跟 Vundle 一样的方法，我们可以通过在~/.vimrc添加 \" ================================ \" 设置安装插件的路径 call plug#begin('~/.vim/plugged') \"\" 安装指定插件，可以通过 github 找到 repo 的地址 \"\" 如:https://github.com/airblade/vim-gitgutter \"\" 我们就直接使用url，让管理器自动安装 Plug 'airblade/vim-gitgutter' call plug#end() \" ================================ 这样，就把需要安装的插件地址配置好了，接下来需要 Vim 进行插件的安装 ## 打开 Vim ## 然后进入命令模式 ## 运行: PlugInstall 就会自动安装相关的插件了 ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:5:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 特色功能","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:6:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" for:针对某个语言加载","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:6:1","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" on:按照需要加载","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:6:2","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 几个常用命令 配置 .vimrc","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:6:3","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 主题配色","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:7:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" onedark.vim 不要使用管理器来安装，这样安装后无法修改配色方案，需要手动安装。 到 onedark.vim 下载相应的配色方案 ~/.vim/colors/onedark.vim ~/.vim/autoload/onedark.vim 接下来我们需要修改 ~/.vim/colors/onedark.vim \"\" ============================================================================= call s:h(\"Pmenu\", { \"bg\": s:menu_grey }) \" Popup menu: normal item. call s:h(\"PmenuSel\", { \"fg\": s:dark_yellow, \"bg\": s:special_grey }) \" Popup menu: selected item. call s:h(\"PmenuSbar\", { \"bg\": s:special_grey }) \" Popup menu: scrollbar. call s:h(\"PmenuThumb\", { \"bg\": s:white }) \" Popup menu: Thumb of the scrollbar. \"\" ============================================================================= 因为 onedark.vim 会覆盖其他的配色方案，如果我们需要单独进行配置，一定要写在这后面。比如，对行号的高亮 \"\" ========================================================= \"\" 所有的设置需要在 coloscheme 前面 \"\" ========================================================= \"\" https://github.com/joshdick/onedark.vim let g:onedark_terminal_italics=1 let g:airline_theme='onedark' \"\"hi LineNr ctermfg=240 \"\" ========================================================= \"\" 所有设置都会被覆盖 \"let g:onedark_termcolors=256 colorscheme onedark \"colorscheme space-vim-dark \"hi Normal ctermbg=NONE guibg=NONE \"hi LineNr ctermbg=NONE guibg=NONE \"hi SignColumn ctermbg=NONE guibg=NONE \" 高亮当前行 ================================================ \"高亮当前行和行号 \" -highlght 主要是用来配色的，包括语法高亮等个性化的配置。可以通过:h highlight，查看详细信息 \" -CursorLine 和 CursorColumn 分别表示当前所在的行列 \" -cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。 \" -ctermbg 设置终端vim的背景色 \" -ctermfg 设置终端vim的前景色 \" -guibg 和 guifg 分别是设置gvim的背景色和前景色，本人平时都是使用终端打开vim，所以只是设置终端下的样式 \" 设置高亮行和列 \"set cursorcolumn set cursorline \"设置高亮效果 \" Removes the underline causes by enabling cursorline: highlight clear CursorLine \"highlight CursorLine cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE \"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE highlight CursorLine cterm=NONE ctermbg=black ctermfg=none guibg=NONE guifg=NONE highlight CursorColumn cterm=NONE ctermbg=black ctermfg=none guibg=NONE guifg=NONE highlight LineNr term=bold cterm=bold ctermfg=DarkGrey ctermbg=NONE gui=None guifg=DarkGrey guibg=NONE highlight CursorLineNR term=bold ctermfg=DarkGreen ctermbg=black cterm=bold \"highlight CursorLineNR term=bold ctermfg=DarkGreen ctermbg=DarkGrey cterm=bold set linebreak \" wrap long lines between words \"\" ========================================================= ","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:7:1","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 常用工具","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:8:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 快捷键","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:9:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":" 设置技巧","date":"2021-06-24","objectID":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:10:0","tags":["Linux","vim","cpp","c++","开发","配置",".vimrc"],"title":"Vim 配置强大的C++开发环境","uri":"/archives/2021-06-24-vim-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%9A%84c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Programming"],"content":"在企业内部搭建 DockerHub 以及运维的常用技巧。","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 安装 Docker","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:0:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:1:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:2:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 安装 sudo yum install docker.io 或者使用国内 daocloud 一键安装命令： ## daocloud curl -sSL https://get.daocloud.io/docker | sh 搭建私有 DockerHub","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:3:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 建立 registry ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry ## 为了防止不小心删掉，我们将其挂载到 /data/Docker/registry 这个目录下 mkdir -p /data/Docker/registy docker run --name docker.registry \\ -d -p 5000:5000 \\ -v /data/Docker/registy:/tmp/registry \\ registry docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --permanent--add-port=5000/tcp firewall-cmd --reload ## 如果出现错误 ## -i docker0: iptables: no chain/target/match by that name. ## Ref:https://blog.csdn.net/xujiamin0022016/article/details/108124725 systemctl restart docker ## 测试访问 curl http://127.0.0.1:5000/v2/ ## 返回 {} 说明正常运行了 ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:4:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 配置需要配置 daemon.json 允许访问本地使用 DockerHub sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"192.168.1.183:5000\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } 这里需要注意需要重启 docker 服务 systemctl restart docker ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:5:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 测试 ## 查看当前有哪些 images docker image ls docker tag hello-world 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing docker push 192.168.1.183:5000/testing ## 可以看一下是不是有这个 repo 了 curl http://192.168.1.183:5000/v2/_catalog 常用命令 编写 Dockerfile","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:6:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" Centos7.9可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 查看 centos https://hub.docker.com/_/centos?tab=tags\u0026page=1\u0026ordering=last_updated FROM centos:centos7.9.2009 MAINTAINER WuyaCapital LABEL Remarks=\"CentOS7.9 Develop\u0026Testing Environment @WuyaCapital\" RUN yum -y install \\ sudo vim git make cmake htop\\ gcc gcc-c++ kernel-devel \\ openssl-devel libcurl-devel RUN mkdir -p /shared/trading /data ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" EXPOSE 22 80 WORKDIR /home CMD /bin/bash 命令说明： CMD 指定容器启动时执行的命令，注意，和RUN的区别是：RUN是在打包过程中执行的命令。镜像中只能有一条CMD指令，如果有多个CMD指令，则以最后一条为准，所以我们可以覆盖基础镜像中定义的CMD指令。CMD指令支持三种格式： CMD [\"executable\", \"param1\", \"param2\"] 使用exec执行，这是使用CMD的首选方法 CMD command param1 param2 使用/bin/sh -c执行 CMD [\"param1\", \"param2\"] 提供给ENTRYPOINT的默认参数 注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。 ENTRYPOINT 容器启动入口，即容器启动后执行的命令，不会被CMD指令覆盖，如果存在ENTRYPOINT，那么CMD指令会充当ENTRYPOINT的参数。 ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:7:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 搭建 docker build -t wuya-centos7:v1.0 . docker image ls ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run --name mycentos7 --net=host -dit wuya-centos7:v1.0 ## 启动实例 docker exec -it mycentos7 /bin/bash 发布 Docker","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:8:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" 打包一个容器 docker commit -a \"william\" -m \"wuya-centos7:v1.0\" [container_id] image_id:version 当然，也可以直接打包成一个压缩包 ## 打包 docker save wuya-centos7:v1.0 \u003e mycetnos7.tar ## 加载 docker load -i mycetnos7.tar 我们也可以选择发布到 Dockerhub docker tag wuya-centos7:v1.0 192.168.1.183:5000/wuya/centos7:v1.0 docker push 192.168.1.183:5000/wuya/centos7:v1.0 docker pull 192.168.1.183:5000/wuya/centos7:v1.0 curl http://192.168.1.183:5000/v2/_catalog curl http://192.168.1.183:5000/v2/wuya/centos7/tags/list 这样，我们可以建立一个新的容器了 ## 记得修改 vim /etc/docker/daemon.json docker pull 192.168.1.183:5000/wuya/centos7:v1.0 docker image ls docker run -dit --name testing 192.168.1.183:5000/wuya/centos7:v1.0 docker ps -a docker exec -it testing /bin/bash Q\u0026A","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:9:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":" build 的时候无法使用 pip 直接安装程序 这个是因为 Docker 的 DNS 没有识别到，需要处理一下。 Ref:[Can’t install pip packages inside a docker container with Ubuntu](https://stackoverflow.com/questions/28668180/cant-install-pip-packages-inside-a-docker-container-with-ubuntu) ## 编辑 sudo vim /etc/default/docker ## 添加 DNS DOCKER_OPTS=\"--dns 8.8.8.8\" ## 重启 sudo systemctl restart docker ","date":"2021-06-22","objectID":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/:10:0","tags":["Linux","Docker","ops"],"title":"Docker 运维小记","uri":"/archives/2021-06-22-docker-%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"},{"categories":["Programming"],"content":"让 Vim 自动识别 log 文件，并且可以语法高亮错误日志。","date":"2021-06-22","objectID":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/","tags":["Linux","Vim","log"],"title":"Vim 自动识别 log 文件","uri":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":" 自动识别 log 文件 # 在 ~/.vimrc 添加 au BufNewFile,BufRead *.log set filetype=log 添加语法高亮","date":"2021-06-22","objectID":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/:0:0","tags":["Linux","Vim","log"],"title":"Vim 自动识别 log 文件","uri":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":" systax \" Vim syntax file \" Language: Generic log files \" Maintainer: Alex Dzyoba \u003cavd@reduct.ru\u003e \" Latest Revision: 2013-03-08 \" Changes: 2013-03-08 Initial version \" Based on messages.vim - syntax file for highlighting kernel messages au BufRead,BufNewFile *.log set filetype=log if exists(\"b:current_syntax\") finish endif syn match log_fatal '\\c.*\\\u003c\\(FATAL\\|FTL\\|FAIL\\|FAILED\\|FAILURE\\).*' syn match log_error '\\c.*\\\u003c\\(ERR\\|ERROR\\|ERRORS\\).*' syn match log_warning '\\c.*\\\u003c\\(WARNING\\|DELETE\\|DELETING\\|DELETED\\|RETRY\\|RETRYING\\).*' syn region log_string start=/'/ end=/'/ end=/$/ skip=/\\\\./ syn region log_string start=/\"/ end=/\"/ skip=/\\\\./ syn match log_number '0x[0-9a-fA-F]*\\|\\[\u003c[0-9a-f]\\+\u003e\\]\\|\\\u003c\\d[0-9a-fA-F]*' syn match log_date '\\(Jan\\|Feb\\|Mar\\|Apr\\|May\\|Jun\\|Jul\\|Aug\\|Sep\\|Oct\\|Nov\\|Dec\\) [ 0-9]\\d *' syn match log_date '\\d\\{4}-\\d\\d-\\d\\d' syn match log_date '^202\\d\\{1}\\d\\d\\d\\d' syn match log_time '\\d\\d:\\d\\d:\\d\\d\\s*' syn match log_time '\\c\\d\\d:\\d\\d:\\d\\d\\(\\.\\d\\+\\)\\=\\([+-]\\d\\d:\\d\\d\\|Z\\)' hi def link log_string Comment \"\"String hi def link log_number Comment \"\"Number hi def link log_date Constant hi def link log_time Type hi def link log_fatal ErrotMsg hi def link log_error Error hi def link log_warning WarningMsg let b:current_syntax = \"log\" ","date":"2021-06-22","objectID":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/:1:0","tags":["Linux","Vim","log"],"title":"Vim 自动识别 log 文件","uri":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":" ftdetect ## 在 ~/.vimrc/ftdetect/log.vim au BufNewFile,BufRead *.log set filetype=log ","date":"2021-06-22","objectID":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/:2:0","tags":["Linux","Vim","log"],"title":"Vim 自动识别 log 文件","uri":"/archives/2021-06-22-vim-%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB-log-%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":"打包一个 python 的 packages，然后托管在 github 上面。","date":"2021-06-08","objectID":"/archives/2021-06-08-python-%E6%89%93%E5%8C%85-packages/","tags":["Python","package","module","py"],"title":"python 打包 packages","uri":"/archives/2021-06-08-python-%E6%89%93%E5%8C%85-packages/"},{"categories":["Programming"],"content":" 项目结构 ├── readme.md ├── wepy │ ├── ch │ ├── __init__.py │ ├── __pycache__ │ ├── requirements.txt │ ├── setup.py │ ├── utils │ ├── __version__.py │ └── wechat 我们的git项目叫做 wepy，里面的代码放在了 wepy 这个目录，使用以下命令安装 git clone git@192.168.1.171:lfang/wepy.git cd wepy ~/anaconda3/bin/python3 wepy/setup.py install from wepy.utils.test import hi hi() setup.py # -*- coding: utf-8 -*- # @Author: “williamlfang” # @Date: 2021-06-08 11:11:16 # @Last Modified by: “williamlfang” # @Last Modified time: 2021-06-08 11:14:11 #!/usr/bin/env python # -*- coding: utf-8 -*- # from distutils.core import setup import setuptools from setuptools import setup #with open(\"README.md\", \"r\") as fh: # long_description = fh.read() with open('./wepy/requirements.txt') as f: requirements = f.read().splitlines() setup( name = \"wepy\", version = \"0.0.1\", author = \"william\", author_email = \"william.lian.fang@gmail.com\", url = \"git@192.168.1.171:lfang/wepy.git\", description = \"a python package for WuyaCapital\", install_requires=requirements, classifiers = [ \"Programming Language :: Python :: 3\", \"License :: OSI Approved :: MIT License\", \"Operating System :: OS Independent\" ], packages = setuptools.find_packages(), py_modules = [ \"wepy.wechat\", \"wepy.test\", ] ) 安装步骤 git clone git@192.168.1.171:lfang/wepy.git cd wepy ~/anaconda3/bin/python3 wepy/setup.py install from wepy.utils.test import hi hi() ","date":"2021-06-08","objectID":"/archives/2021-06-08-python-%E6%89%93%E5%8C%85-packages/:0:0","tags":["Python","package","module","py"],"title":"python 打包 packages","uri":"/archives/2021-06-08-python-%E6%89%93%E5%8C%85-packages/"},{"categories":["Programming"],"content":"设置 rsync 如果断线，可以自动重连，直到文件同步完成","date":"2021-06-04","objectID":"/archives/2021-06-04-rsync-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/","tags":["Linux","rsync","重连"],"title":"rsync 自动重连","uri":"/archives/2021-06-04-rsync-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":" while true do sleep 1 #rsync --progress -avPz -r -e \"ssh -p60001\" tbt.colo101.$(date +\"%Y%m\")*.tar.bz2 ops@58.33.72.179:/data/Xtp/FromZZ.SH exitCode=$? ## ------------------------------------------------------------------------- case $exitCode in 10 | 23 | 30 | 35) echo \"$(date): rsync finished with a network related error: $exitCode\" ;; 0) echo \"$(date): rsync finished without error\" break # leave the while loop ;; *) # all other cases echo \"$(date): rsync finished with an unexpected error: $exitCode\" ## break # we don't know whether repeating it makes sense ;; esac ## ------------------------------------------------------------------------- done ","date":"2021-06-04","objectID":"/archives/2021-06-04-rsync-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/:0:0","tags":["Linux","rsync","重连"],"title":"rsync 自动重连","uri":"/archives/2021-06-04-rsync-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":"从远程服务器把数据迁移到新的 clickhouse 数据库。","date":"2021-05-26","objectID":"/archives/2021-05-26-clickhouse-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/","tags":["Linux","ch","clickhouse","data","数据","备份"],"title":"clickhouse 数据迁移","uri":"/archives/2021-05-26-clickhouse-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["Programming"],"content":" 使用 Remote 方式 INSERT INTO tickdata.szse_tbt_Colo102 SELECT * FROM remote('192.168.1.192:9000', 'tickdata', 'szse_tbt_Colo102', 'sig', 'sig@R7_ch') WHERE TradingDay = '2021-05-25' 使用 Clickhouse Copier 方式 使用文件冷备份 参考链接 记一次 ClickHouse 数据迁移 ","date":"2021-05-26","objectID":"/archives/2021-05-26-clickhouse-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:0:0","tags":["Linux","ch","clickhouse","data","数据","备份"],"title":"clickhouse 数据迁移","uri":"/archives/2021-05-26-clickhouse-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["Programming"],"content":"通过cpu隔核，优化性能。","date":"2021-05-24","objectID":"/archives/2021-05-24-linux-cpu-%E9%9A%94%E6%A0%B8%E8%AE%BE%E7%BD%AE/","tags":["Linux","cpu","affinity","隔核","优化"],"title":"Linux cpu 隔核设置","uri":"/archives/2021-05-24-linux-cpu-%E9%9A%94%E6%A0%B8%E8%AE%BE%E7%BD%AE/"},{"categories":["Programming"],"content":" 设置 ## 查看多少个 cpu 核 cat /proc/cpuinfo |grep \"model name\" ## 修改 grub vim /etc/default/grub ## 找到 GRUB_CMDLINE_LINUX 增加 ## 隔离 1-2， 7-8 ## 从 0 开始计数 ioslcpus=1-2,7-8 ## 更新配置 grub2-mkconfig -o /boot/grub2/grub.cfg ## 重启生效 reboot ## 查看是否生效 cat /proc/cmdline 直接修改 ``/boot/grub2/grub.cfg` vim /boot/grub2/grub.cfg linux16 /vmlinuz-3.10.0-1160.6.1.el7.x86_64 root=UUID=f11d0edd-f9a9-4b29-9811-eaafe33f61d5 ro crashkernel=auto rhgb quiet LANG=en_US.UTF-8 ## 修改成 linux16 /vmlinuz-3.10.0-1160.6.1.el7.x86_64 root=UUID=f11d0edd-f9a9-4b29-9811-eaafe33f61d5 ro crashkernel=auto rhgb quiet LANG=en_US.UTF-8 intel_idle.max_cstate=0 processor.max_cstate=0 idle=poll pcie_aspm.policy=performance mce=ignore_ce nmi_watchdog=0 transparent_hugepage=never hpet=disable irqaffinity=0 noht nohz=on nosoftlockup isolcpus=1-15 rcu_nocbs=1-15 nohz_full=1-15 参考链接 Linux 如何隔离CPU核心 isolcpus=0-2 ","date":"2021-05-24","objectID":"/archives/2021-05-24-linux-cpu-%E9%9A%94%E6%A0%B8%E8%AE%BE%E7%BD%AE/:0:0","tags":["Linux","cpu","affinity","隔核","优化"],"title":"Linux cpu 隔核设置","uri":"/archives/2021-05-24-linux-cpu-%E9%9A%94%E6%A0%B8%E8%AE%BE%E7%BD%AE/"},{"categories":[],"content":"扩大 Linux 系统的 shm 大小。 ## 查看 shm 大小 df -h /dev/shm ## 修改大小 ## 记得一定要使用 tab 来分割 sudo vim /etc/fstab ## 使用 MB tmpfs /dev/shm tmpfs defaults,size=4096M 0 0 ## 使用 GB tmpfs /dev/shm tmpfs defaults,size=4G 0 0 ## 重新挂载，需要确保没有被占用 sudo umount -l /dev/shm sudo mount /dev/shm sudo mount -o remount /dev/shm ## 重新查看大小 df -h /dev/shm ","date":"2021-05-18","objectID":"/2021-05-18-linux-%E6%89%A9%E5%B1%95-shm-%E7%A9%BA%E9%97%B4/:0:0","tags":[],"title":"Linux 扩展 shm 空间","uri":"/2021-05-18-linux-%E6%89%A9%E5%B1%95-shm-%E7%A9%BA%E9%97%B4/"},{"categories":["Programming"],"content":"使用 chrony 设置时间校准服务。","date":"2021-05-18","objectID":"/archives/2021-05-18-chrony-%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86/","tags":["Linux","chrony","chronyd","时间","校准","ntp"],"title":"chrony 时间校准","uri":"/archives/2021-05-18-chrony-%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86/"},{"categories":["Programming"],"content":" 安装 yum -y install chrony 配置 ## 配置文件修改 vim /etc/chrony.conf ## 把不需要的 server 注释掉 ## 然后增加需要时间对准的服务器IP server ntp2.xtp.com iburst server 10.228.39.1 iburst driftfile /var/lib/chrony/drift makestep 1.0 3 rtcsync ## 如果是服务器，需要开启这个允许IP接入 ## allow 10.36.0.0/16 logdir /var/log/chrony 服务 systemctl enable chronyd.service systemctl start chronyd.service systemctl status chronyd.service -l #确认同步来源的状态 chronyc activity #立即手工同步 chronyc -a makestep #查看时间同步源 chronyc sources -v #查看时间同步源状态 chronyc sourcestats -v #校准时间服务器 chronyc tracking -v #硬件时间默认为UTC timedatectl set-local-rtc 1 查看结果 chronyc sources -v 210 Number of sources = 1 .-- Source mode '^' = server, '=' = peer, '#' = local clock. / .- Source state '*' = current synced, '+' = combined , '-' = not combined, | / '?' = unreachable, 'x' = time may be in error, '~' = time too variable. || .- xxxx [ yyyy ] +/- zzzz || Reachability register (octal) -. | xxxx = adjusted offset, || Log2(Polling interval) --. | | yyyy = measured offset, || \\ | | zzzz = estimated error. || | | \\ MS Name/IP address Stratum Poll Reach LastRx Last sample =============================================================================== ^* 10.228.39.1 1 6 7 2 -574us[ +411us] +/- 1500ms ","date":"2021-05-18","objectID":"/archives/2021-05-18-chrony-%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86/:0:0","tags":["Linux","chrony","chronyd","时间","校准","ntp"],"title":"chrony 时间校准","uri":"/archives/2021-05-18-chrony-%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86/"},{"categories":["Programming"],"content":"优化 Linux 网络参数。","date":"2021-05-16","objectID":"/archives/2021-05-16-linux-%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/","tags":["Linux","socket","TCP","UDP","网络","优化"],"title":"Linux 网络参数优化","uri":"/archives/2021-05-16-linux-%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"},{"categories":["Programming"],"content":" 设置 sysctl ## 如果出现报错 sysctl: cannot stat /proc/sys/–p: No such file or directory ## 则需要执行以下命令 modprobe br_netfilter ls /proc/sys/net/bridge ## 记得输入该命令及时生效 sysctl -p /etc/sysctl.conf文件是一个允许你改变正在运行中的Linux系统的接口。它包含一些TCP/IP堆栈和虚拟内存系统的高级选项，可用来控制Linux网络配置，由于/proc/sys/net目录内容的临时性，建议把TCPIP参数的修改添加到``/etc/sysctl.conf`文件, 然后保存文件，使用命令“/sbin/sysctl –p”使之立即生效。具体修改方案参照上文： 设置网络参数可以先查看网络参数 cat /proc/sys/net/core/rmem_max ## 128MB=134217728 ## 1GB =1073741824 接着修改/proc/sys/net/core/rmem_max 以及rmem_default数值到128M大小，命令如下 sysctl –w net.core.rmem_default=”134217728” #128M sysctl –w net.core.rmem_max=”134217728” #128M sysctl –w net.core.wmem_default=”134217728” #128M sysctl –w net.core.wmem_max=”134217728” #128M sysctl –w net.ipv4.udp_mem=” 134217728 134217728 268435456” sysctl –w net.ipv4.udp_rmem_min=” 134217728” #128M sysctl –w net.ipv4.udp_wmem_min=” 134217728” #128M 然后保存修改 /etc/sysctl.conf vim /etc/sysctl.conf # 添加下面的参数 ## 允许送到队列的数据包的最大数目 net.core.netdev_max_backlog=262144 ## 用来限制监听(LISTEN)队列最大数据包的数量 net.core.somaxconn=4096 ## 修改内核缓存大小 net.core.rmem_default=134217728 ## 128M net.core.rmem_max=134217728 ## 128M net.core.wmem_default=134217728 ## 128M net.core.wmem_max=134217728 ## 128M #内核分配给TCP连接的内存，单位是Page，1 Page = 4096 Bytes，可用命令查看： #getconf PAGESIZE #第一个数字表示，当 tcp 使用的 page 少于 1048576 时，kernel 不对其进行任何的干预 #第二个数字表示，当 tcp 使用了超过 1310720 的 pages 时，kernel 会进入 “memory pressure” 压力模式 #第三个数字表示，当 tcp 使用的 pages 超过 1572864 时（相当于1.6GB内存），就会报：Out of socket memory ## net.ipv4.tcp_mem = 1048576 1310720 1572864 net.ipv4.tcp_mem = 94500000 915000000 927000000 net.ipv4.tcp_rmem = 4096 87380 4194304 net.ipv4.tcp_wmem = 4096 16384 4194304 net.ipv4.udp_mem = 134217728 134217728 268435456 ## 128M net.ipv4.udp_rmem_min = 134217728 ## 128M net.ipv4.udp_wmem_min = 134217728 ## 128M ## 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭 net.ipv4.tcp_tw_reuse=1 ## 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭 net.ipv4.tcp_tw_recycle=1 ## keepalive的保持时间 net.ipv4.tcp_keepalive_time=300 ## 表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间（可改为30，一般来说FIN-WAIT-2的连接也极少） net.ipv4.tcp_fin_timeout=30 ## 示那些尚未收到客户端确认信息的连接（SYN消息）队列的长度，默认为1024，加大队列长度为819200，可以容纳更多等待连接的网络连接数。 net.ipv4.tcp_max_syn_backlog=819200 ## 表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印告警信息。默认为180000，更改为8192000.对于Apache，Nginx等服务器，上几行参数可以很好的减少TIME_WAIT套接字数量，但是对于Squid，效果不大。此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死 net.ipv4.tcp_max_tw_buckets = 8192000 ## 该参数用于设定系统中最多允许存在多少tcp套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，没有与用户文件句柄关联的tcp套接字符将立即被复位，同时给出警告信息。这个限制只是为了防止简单的DoS工具。一般在系统内存比较充足的情况下，可以增大这个参数的赋值： net.ipv4.tcp_max_orphans=3276800 ## 管理TCP的选择性应答，允许接收端向发送端传递关于字节流中丢失的序列号，减少了段丢失时需要重传的段数目，当段丢失频繁时，sack是很有益的。 net.ipv4.tcp_sack=1 ## 支持更大的TCP窗口. 如果TCP窗口最大超过65535(64K), 必须设置该数值为1 net.ipv4.tcp_window_scaling=1 ## tcp_synack_retries 显示或设定 Linux 核心在回应 SYN 要求时会尝试多少次重新发送初始 SYN,ACK 封包后才决定放弃。这是所谓的三段交握 (threeway handshake) 的第二个步骤。即是说系统会尝试多少次去建立由远端启始的 TCP 连线。tcp_synack_retries 的值必须为正整数，并不能超过 255。因为每一次重新发送封包都会耗费约 30 至 40 秒去等待才决定尝试下一次重新发送或决定放弃。tcp_synack_retries 的缺省值为 5，即每一个连线要在约 180 秒 (3 分钟) 后才确定逾时. net.ipv4.tcp_synack_retries = 1 ## kernel 相关 ## 由于linux下的程序有时候需要根据core文件来判断出错的 kernel.core_uses_pid = 1 kernel.msgmnb = 65536 kernel.msgmax = 65536 kernel.shmmax = 68719476736 kernel.shmall = 4294967296 ##　文件系统相关 fs.file-max=65535 fs.inotify.max_user_instances=8192 执行命令保存永久修改 ## 永久修改，配置后需要执行sysctl -p生效 sysctl -p 最后，需要把 /proc/sys/net/core/netdev_max_backlog 调整到4000 cat /proc/sys/net/core/netdev_max_backlog vim /proc/sys/net/core/netdev_max_backlog ## 设置为 4000 设置 rx/tx 大小 ethtool -g ifname ethtool -G ifname rx/tx 4096 参考链接 Linux下TCP/IP内核参数优化 Linux内核socket优化项 ethtool原理介绍和解决网卡丢包排查思路 ","date":"2021-05-16","objectID":"/archives/2021-05-16-linux-%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/:0:0","tags":["Linux","socket","TCP","UDP","网络","优化"],"title":"Linux 网络参数优化","uri":"/archives/2021-05-16-linux-%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"},{"categories":["Programming"],"content":"testing.","date":"2021-05-16","objectID":"/archives/2021-05-16-testing/","tags":["testing"],"title":"testing","uri":"/archives/2021-05-16-testing/"},{"categories":["Programming"],"content":"testing. ","date":"2021-05-16","objectID":"/archives/2021-05-16-testing/:0:0","tags":["testing"],"title":"testing","uri":"/archives/2021-05-16-testing/"},{"categories":["Programming"],"content":"使用 autossh 时常备的一些小技巧。","date":"2021-05-07","objectID":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/","tags":["linux","ssh","autossh","端口转发"],"title":"autossh 的几个小技巧","uri":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["Programming"],"content":" 查看帮助，设置环境变量 autossh --help usage: autossh [-V] [-M monitor_port[:echo_port]] [-f] [SSH_OPTIONS] -M specifies monitor port. May be overridden by environment variable AUTOSSH_PORT. 0 turns monitoring loop off. Alternatively, a port for an echo service on the remote machine may be specified. (Normally port 7.) -f run in background (autossh handles this, and does not pass it to ssh.) -V print autossh version and exit. Environment variables are: AUTOSSH_GATETIME - how long must an ssh session be established before we decide it really was established (in seconds). Default is 30 seconds; use of -f flag sets this to 0. AUTOSSH_LOGFILE - file to log to (default is to use the syslog facility) AUTOSSH_LOGLEVEL - level of log verbosity AUTOSSH_MAXLIFETIME - set the maximum time to live (seconds) AUTOSSH_MAXSTART - max times to restart (default is no limit) AUTOSSH_MESSAGE - message to append to echo string (max 64 bytes) AUTOSSH_PATH - path to ssh if not default AUTOSSH_PIDFILE - write pid to this file AUTOSSH_POLL - how often to check the connection (seconds) AUTOSSH_FIRST_POLL - time before first connection check (seconds) AUTOSSH_PORT - port to use for monitor connection AUTOSSH_DEBUG - turn logging to maximum verbosity and log to stderr 可以看到，我们通过设置环境变量，来配置 autossh 的参数 ## 设置日志级别 export AUTOSSH_DEBUG=1 ## 设置日志文件 export AUTOSSH_LOGFILE=$HOME/autossh.log ","date":"2021-05-07","objectID":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/:1:0","tags":["linux","ssh","autossh","端口转发"],"title":"autossh 的几个小技巧","uri":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["Programming"],"content":" 处理 bind: Cannot assign requested address根据这篇博客的观点，有可能是使用了 IPV6，我们可以强制要求使用 IPV4 vim ~/.ssh/config Host * AddressFamily inet ","date":"2021-05-07","objectID":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/:2:0","tags":["linux","ssh","autossh","端口转发"],"title":"autossh 的几个小技巧","uri":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["Programming"],"content":" 处理经常断线的问题有可能是 id_rsa 错误了，需要重新生成一份，然后指定 -i 的路径 ","date":"2021-05-07","objectID":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/:3:0","tags":["linux","ssh","autossh","端口转发"],"title":"autossh 的几个小技巧","uri":"/archives/2021-05-07-autossh-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["Programming"],"content":"sleek 是一款用于管理 todo list 的软件。","date":"2021-04-27","objectID":"/archives/2021-04-27-sleek-%E7%AE%A1%E7%90%86todo%E5%88%97%E8%A1%A8/","tags":["linux","sleek","todo"],"title":"sleek:管理todo列表","uri":"/archives/2021-04-27-sleek-%E7%AE%A1%E7%90%86todo%E5%88%97%E8%A1%A8/"},{"categories":["Programming"],"content":"通过向服务器在固定间隔时间发送请求来保持 ssh 不断线。","date":"2021-04-23","objectID":"/archives/ssh-config-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%96%AD/","tags":["Linux","ssh","config"],"title":".ssh config 保持连接不断","uri":"/archives/ssh-config-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%96%AD/"},{"categories":["Programming"],"content":"在 ~/.ssh/config 添加 Host * ServerAliveInterval 60 ","date":"2021-04-23","objectID":"/archives/ssh-config-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%96%AD/:0:0","tags":["Linux","ssh","config"],"title":".ssh config 保持连接不断","uri":"/archives/ssh-config-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%96%AD/"},{"categories":["Programming"],"content":"timed out waiting for input, auto-logout.","date":"2021-04-16","objectID":"/archives/2021-04-16-autossh-%E9%98%B2%E6%AD%A2-timed-out/","tags":["Linux","ssh","autossh","tunnel"],"title":"autossh 防止 timed out","uri":"/archives/2021-04-16-autossh-%E9%98%B2%E6%AD%A2-timed-out/"},{"categories":["Programming"],"content":"参考链接：终端 timed out waiting for input: auto-logout解决！ ## 先打印开一下有没有设置自动超时， ## 0或者空表示不会超时，其他表示超时多少秒会自动断线 echo $TMOUT ## 在 ~/.bash_profile 设置 0 表示不超时 ## 或者在 /etc/profile # ---------------------------- export TMOUT=0 # ---------------------------- ","date":"2021-04-16","objectID":"/archives/2021-04-16-autossh-%E9%98%B2%E6%AD%A2-timed-out/:0:0","tags":["Linux","ssh","autossh","tunnel"],"title":"autossh 防止 timed out","uri":"/archives/2021-04-16-autossh-%E9%98%B2%E6%AD%A2-timed-out/"},{"categories":["Programming"],"content":"zsh compinit：insecure directories, run compaudit for list。","date":"2021-04-16","objectID":"/archives/2021-04-16-zsh-%E6%8A%A5%E9%94%99-zsh-compinit--insecure-directories-run-compaudit-for-list/","tags":["Linux","bash","zsh"],"title":"zsh 报错:zsh compinit: insecure directories, run compaudit for list","uri":"/archives/2021-04-16-zsh-%E6%8A%A5%E9%94%99-zsh-compinit--insecure-directories-run-compaudit-for-list/"},{"categories":["Programming"],"content":"解决方案 compaudit | xargs chmod g-w ","date":"2021-04-16","objectID":"/archives/2021-04-16-zsh-%E6%8A%A5%E9%94%99-zsh-compinit--insecure-directories-run-compaudit-for-list/:0:0","tags":["Linux","bash","zsh"],"title":"zsh 报错:zsh compinit: insecure directories, run compaudit for list","uri":"/archives/2021-04-16-zsh-%E6%8A%A5%E9%94%99-zsh-compinit--insecure-directories-run-compaudit-for-list/"},{"categories":["Programming"],"content":"bash 显示指定的名称。","date":"2021-04-14","objectID":"/archives/2021-04-14-bash-%E6%98%BE%E7%A4%BA-ps1/","tags":["Linux","bash"],"title":"bash 显示 PS1","uri":"/archives/2021-04-14-bash-%E6%98%BE%E7%A4%BA-ps1/"},{"categories":["Programming"],"content":" export PS1=\"\\[\\e[01;32m\\][\\u@\\h:\\w]\\$ \\[\\e[00m\\]\" ","date":"2021-04-14","objectID":"/archives/2021-04-14-bash-%E6%98%BE%E7%A4%BA-ps1/:0:0","tags":["Linux","bash"],"title":"bash 显示 PS1","uri":"/archives/2021-04-14-bash-%E6%98%BE%E7%A4%BA-ps1/"},{"categories":["Programming"],"content":"ag 是一个比 grep/egrep 更好用的快速检索工具，可以递归执行搜索。","date":"2021-04-04","objectID":"/archives/2021-04-04-linux-%E4%BD%BF%E7%94%A8-ag-%E5%BF%AB%E9%80%9F%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/","tags":["Linux","ag","grep","egrep"],"title":"Linux 使用 ag 快速模糊搜索","uri":"/archives/2021-04-04-linux-%E4%BD%BF%E7%94%A8-ag-%E5%BF%AB%E9%80%9F%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/"},{"categories":["Programming"],"content":" 安装 ","date":"2021-04-04","objectID":"/archives/2021-04-04-linux-%E4%BD%BF%E7%94%A8-ag-%E5%BF%AB%E9%80%9F%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/:0:0","tags":["Linux","ag","grep","egrep"],"title":"Linux 使用 ag 快速模糊搜索","uri":"/archives/2021-04-04-linux-%E4%BD%BF%E7%94%A8-ag-%E5%BF%AB%E9%80%9F%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/"},{"categories":["Programming"],"content":"通过 Docker 运行 Rstudio。","date":"2021-03-30","objectID":"/archives/2021-03-30-docker-%E8%BF%90%E8%A1%8C-rstudio/","tags":["Docker","Rstudio","R"],"title":"Docker 运行 rstudio","uri":"/archives/2021-03-30-docker-%E8%BF%90%E8%A1%8C-rstudio/"},{"categories":["Programming"],"content":" 参考链接：https://github.com/rocker-org/rocker/issues/206 https://hub.docker.com/r/rocker/rstudio ## 新建 Docker docker run -d --name rstudio -v $HOME:/home/`whoami` -e USER=lfang -e PASSWORD=****** -p 58787:8787 rocker/tidyverse docker exec -it rstudio /bin/bash 用户：lfang 密码：****** 端口：58787 ## 添加用户，需要进入 docker 添加用户 docker exec -it rstudio /bin/bash sudo adduser tester sudo passwd tester ","date":"2021-03-30","objectID":"/archives/2021-03-30-docker-%E8%BF%90%E8%A1%8C-rstudio/:0:0","tags":["Docker","Rstudio","R"],"title":"Docker 运行 rstudio","uri":"/archives/2021-03-30-docker-%E8%BF%90%E8%A1%8C-rstudio/"},{"categories":["Programming"],"content":"通过 autossh 配置反向代理，可以实现自动重连，保证不断线.","date":"2021-03-28","objectID":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/","tags":["autossh","ssh","linux","代理"],"title":"autossh 实现反向代理自动重连","uri":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":" 下载 ## https://www.harding.motd.ca/autossh/ wget https://www.harding.motd.ca/autossh/autossh-1.4g.tgz 安装 tar -xvf autossh-1.4g.tgz cd autossh-1.4g ./configure --prefix=$HOME/opt make -j \u0026\u0026 make install 使用","date":"2021-03-28","objectID":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/:0:0","tags":["autossh","ssh","linux","代理"],"title":"autossh 实现反向代理自动重连","uri":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":" 阿里云 ## 运行外部访问端口 8002 转发到 8001，然后由 8001 转发到托管机器 22 端口 ssh -fNCL *:8002:localhost:8001 localhost ","date":"2021-03-28","objectID":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/:1:0","tags":["autossh","ssh","linux","代理"],"title":"autossh 实现反向代理自动重连","uri":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":" 托管机器 ## 开启 8001，任何访问外网的端口会自动转发到 22，即 ssh 服务 ssh -fNCR 8001:localhost:22 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o ExitOnForwardFailure=True -p 22 root@47.98.117.71 autossh -M 60001 \\ -fN -o \"PubkeyAuthentication=yes\" \\ -o \"StrictHostKeyChecking=false\" -o \"ServerAliveInterval 60\" -o \"ServerAliveCountMax 3\" \\ -R 8001:localhost:22 \\ -p 22 root@47.98.117.71 命令说明： -M 60001 选项指定中继服务器上的监视端口，用于交换监视 SSH 会话的测试数据，需要保证该端口在服务器上未被占用，一般而言，``autossh还有再占用后面一到两个端口用于监控，所以如果在一个机器上面有多个autossh`，建议中间的端口会稍微岔开一些。 -o 用于设置 autossh 参数 -f 指定 autossh 在后台运行，并不会传给 ssh -R 远程连接，还有一种模式是 -L 本地转发 -p 登录的账户与端口信息 举个例子，我们在 XTP02 机器上面 ##[autossh] ## ops@R7 可以访问本地 ## ssh admin@127.0.0.1 -p 60002 autossh -M 51001 \\ -fN -o \"PubkeyAuthentication=yes\" \\ -o \"StrictHostKeyChecking=false\" -o \"ServerAliveInterval 60\" -o \"ServerAliveCountMax 3\" \\ -R 0.0.0.0:60002:localhost:22 \\ -p 60001 ops@58.33.72.179 ## HF02 可以访问ops@R7, 10.36.121.115 是本地前兆网卡地址 ## ssh ops@10.36.121.115 -p60001 autossh -M 51011 \\ -fN -o \"PubkeyAuthentication=yes\" \\ -o \"StrictHostKeyChecking=false\" -o \"ServerAliveInterval 60\" -o \"ServerAliveCountMax 3\" \\ -L 10.36.121.115:60001:localhost:22 \\ -p 60001 ops@58.33.72.179 ","date":"2021-03-28","objectID":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/:2:0","tags":["autossh","ssh","linux","代理"],"title":"autossh 实现反向代理自动重连","uri":"/archives/2021-03-28-autossh-%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/"},{"categories":["Programming"],"content":"通过把 Linux 多个网卡绑定成一个虚拟网卡，可以实现多网卡带宽叠加、负载均衡、主从备用等多种功能。","date":"2021-03-27","objectID":"/archives/2021-03-27-linux-%E5%A4%9A%E7%BD%91%E5%8D%A1-bond/","tags":["Linux","bond","网卡","网络"],"title":"Linux 多网卡 bond","uri":"/archives/2021-03-27-linux-%E5%A4%9A%E7%BD%91%E5%8D%A1-bond/"},{"categories":["Programming"],"content":"bond 可以将多个网卡绑定到一起，可以让两个或多个接口作为一个接口，同时提高带宽，并提供网络链路的冗余，当有其中一块网卡故障的时候，不会中断服务器的业务。 查看系统 bond ###bond模块常用信息 ## 查看bond模块信息 modinfo bonding ## 查看bond模块是否加载 lsmod | grep bonding ## 加载bond模块 modprobe --first-time bonding ##临时加载，重启失效 modprobe bonding ##永久加载 ## 可以卸载模块 modprobe -r bonding 设置网卡bondCentOS7 的网卡配置位于 ``/etc/sysconfig/network-scripts` cd /etc/sysconfig/network-scripts -rw-r--r--. 1 root root 363 Mar 23 07:52 ifcfg-em1 -rw-r--r--. 1 root root 100 Mar 26 05:56 ifcfg-em2 -rw-r--r--. 1 root root 100 Mar 26 05:56 ifcfg-em3 -rw-r--r--. 1 root root 275 Mar 20 02:45 ifcfg-em4 -rw-r--r--. 1 root root 254 Aug 24 2018 ifcfg-lo -rw-r--r--. 1 root root 281 Mar 22 08:42 ifcfg-p1p1 -rw-r--r--. 1 root root 312 Mar 25 06:27 ifcfg-p1p2 lrwxrwxrwx. 1 root root 24 Mar 20 02:42 ifdown -\u003e ../../../usr/sbin/ifdown -rwxr-xr-x. 1 root root 654 Aug 24 2018 ifdown-bnep -rwxr-xr-x. 1 root root 6532 Aug 24 2018 ifdown-eth -rwxr-xr-x. 1 root root 6190 Oct 30 2018 ifdown-ib -rwxr-xr-x. 1 root root 781 Aug 24 2018 ifdown-ippp -rwxr-xr-x. 1 root root 4540 Aug 24 2018 ifdown-ipv6 lrwxrwxrwx. 1 root root 11 Mar 20 02:42 ifdown-isdn -\u003e ifdown-ippp -rwxr-xr-x. 1 root root 2130 Aug 24 2018 ifdown-post -rwxr-xr-x. 1 root root 1068 Aug 24 2018 ifdown-ppp -rwxr-xr-x. 1 root root 870 Aug 24 2018 ifdown-routes -rwxr-xr-x. 1 root root 1456 Aug 24 2018 ifdown-sit -rwxr-xr-x. 1 root root 1621 Mar 17 2017 ifdown-Team -rwxr-xr-x. 1 root root 1556 Mar 17 2017 ifdown-TeamPort -rwxr-xr-x. 1 root root 1462 Aug 24 2018 ifdown-tunnel lrwxrwxrwx. 1 root root 22 Mar 20 02:42 ifup -\u003e ../../../usr/sbin/ifup -rwxr-xr-x. 1 root root 12415 Aug 24 2018 ifup-aliases -rwxr-xr-x. 1 root root 910 Aug 24 2018 ifup-bnep -rwxr-xr-x. 1 root root 13475 Aug 24 2018 ifup-eth -rwxr-xr-x. 1 root root 10114 Oct 30 2018 ifup-ib -rwxr-xr-x. 1 root root 12075 Aug 24 2018 ifup-ippp -rwxr-xr-x. 1 root root 11893 Aug 24 2018 ifup-ipv6 lrwxrwxrwx. 1 root root 9 Mar 20 02:42 ifup-isdn -\u003e ifup-ippp -rwxr-xr-x. 1 root root 650 Aug 24 2018 ifup-plip -rwxr-xr-x. 1 root root 1064 Aug 24 2018 ifup-plusb -rwxr-xr-x. 1 root root 4997 Aug 24 2018 ifup-post -rwxr-xr-x. 1 root root 4154 Aug 24 2018 ifup-ppp -rwxr-xr-x. 1 root root 2001 Aug 24 2018 ifup-routes -rwxr-xr-x. 1 root root 3303 Aug 24 2018 ifup-sit -rwxr-xr-x. 1 root root 1755 Mar 17 2017 ifup-Team -rwxr-xr-x. 1 root root 1876 Mar 17 2017 ifup-TeamPort -rwxr-xr-x. 1 root root 2711 Aug 24 2018 ifup-tunnel -rwxr-xr-x. 1 root root 1836 Aug 24 2018 ifup-wireless -rw-r--r--. 1 root root 2206 Mar 26 05:50 inactive -rwxr-xr-x. 1 root root 5419 Aug 24 2018 init.ipv6-global -rw-r--r--. 1 root root 20671 Aug 24 2018 network-functions -rw-r--r--. 1 root root 31027 Aug 24 2018 network-functions-ipv6 可以看到，当前系统有4个 em 千兆网卡，已经2个 p1 万兆网卡，接下来我们把 em2 和 em3 bond 到一个虚拟网卡上。注意，最好先备份网卡配置信息，因为我们做 bond 的时候不需要网卡 mac 地址，所以原来的信息会被删除，备份一个原来的文件比较安全。 说明：把原有的配置 ip 信息去掉，把 BOOTPROTO 修改成 none，然后新加 MASTER=bond0，SLAVE=yes 即可 ## 网卡 em2，不需要 mac 地址，绑定到 bond0 vim ifcfg-em2 NAME=em2 DEVICE=em2 TYPE=Ethernet BOOTPROTO=none NM_CONTROLLED=no ONBOOT=yes MASTER=bond0 SLAVE=yes ## 网卡 em3，不需要 mac 地址，绑定到 bond0 vim ifcfg-em3 NAME=em3 DEVICE=em3 TYPE=Ethernet BOOTPROTO=none NM_CONTROLLED=no ONBOOT=yes MASTER=bond0 SLAVE=yes ## 开始设置 bond0，设置模式 6：负载均衡 vim ifcfg-bond0 DEVICE=bond0 TYPE=Ethernet BOOTPROTO=static BONDING_MASTER=yes ONBOOT=yes BOOTPROTO=none BONDING_OPTS=\"mode=6 miimon=100\" ## 配置此项就无需创建modprobe.conf文件 IPADDR=192.168.1.213 PREFIX=24 GATEWAY=192.168.1.1 DNS1=8.8.8.8 DNS2=114.114.114.114 现在，我们可以重启网络 # 重启网络 systemctl restart network ## 如果报错 Failed to start LSB: Bring up/down networking ## 可能跟 NetworkManager 服务有冲突 systemctl stop NetworkManager chkconfig NetworkManager off # 查看bond信息 cat /proc/net/bonding/bond0 看到，目前的模式已经是 adaptive load balancing Bonding Mode: adaptive load balancing Primary Slave: None Currently Active Slave: em2 MII Status: up MII Polling Interval (ms): 100 Up Delay (ms): 0 Down Delay (ms): 0 Slave Interface: em2 MII Status: up Speed: 1000 Mbps Duplex: full Link Failure Count: 0 Permanent ","date":"2021-03-27","objectID":"/archives/2021-03-27-linux-%E5%A4%9A%E7%BD%91%E5%8D%A1-bond/:0:0","tags":["Linux","bond","网卡","网络"],"title":"Linux 多网卡 bond","uri":"/archives/2021-03-27-linux-%E5%A4%9A%E7%BD%91%E5%8D%A1-bond/"},{"categories":["Programming"],"content":"在 Docker 容器里搭建 openwrt 软路由。","date":"2021-03-19","objectID":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/","tags":["docker","openwrt","软路由"],"title":"Docker 搭建 openwrt","uri":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["Programming"],"content":"openwrt 可以实现旁路由功能。 ","date":"2021-03-19","objectID":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/:0:0","tags":["docker","openwrt","软路由"],"title":"Docker 搭建 openwrt","uri":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["Programming"],"content":" 安装 ip addr sudo ip link set eno1 promisc on sudo docker network create -d macvlan --subnet=192.168.3.0/24 --gateway=192.168.3.1 -o parent=eno1 macnet docker network inspect macnet docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 sudo docker run -d --restart always --name openwrt --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init sudo docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' ## 必须是这个 option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.3.101' option gateway '192.168.3.1' option dns '192.168.3.1' option broadcast '192.168.3.255' config interface 'vpn0' option ifname 'tun0' option proto 'none' sudo docker restart openwrt 密码：password ","date":"2021-03-19","objectID":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/:1:0","tags":["docker","openwrt","软路由"],"title":"Docker 搭建 openwrt","uri":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["Programming"],"content":" 宿主机与 Docker(openwrt) 无法通信 参考：在docker中运行openwrt #4 sudo ip link add link eno1 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.3.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ## 以下可能有错误 ======================= # #sudo ip route del default #删除默认路由 # sudo ip route add default via 192.168.3.105 dev hMACvLAN # 设置静态路由 # sudo echo \"nameserver 192.168.3.1\" \u003e /etc/resolv.conf # 设置静态 dns 服务器 # ping 192.168.3.105 # # 或者使用 nmcli # nmcli connection add type macvlan dev eno1 mode bridge ifname hMACvLAN autoconnect yes save yes docker import https://downloads.openwrt.org/releases/19.07.0/targets/x86/64/openwrt-19.07.0-x86-64-generic-rootfs.tar.gz openwrt:19.07.0 sudo docker run -d –restart unless-stopped –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 –name openwrt /sbin/init sudo docker run –restart always –name openwrt –network macvLan –privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init 无法访问国内网址： dns 选择：pdnsd：208.67.222.222(Open DNS) https://github.com/coolsnowwolf/lede/issues/5520 关闭 “系统” -\u003e “启动项” -\u003e “19”(firewall 需要禁止) “网络” -\u003e “接口” -\u003e “防火墙” -\u003e “区域”(需要全部选择接受) 然后在\"自定义规则里面\"，填写 iptables -t nat -I POSTROUTING -j MASQUERADE 在 “服务” -\u003e “PassWall” -\u003e “模式” TCP默认模式： GFW 列表 UDP默认模式：GFW 列表 路由器TCP：GFW（这个GFW模式就可以） 路由器UDP：GFW（这个GFW模式就可以） 5.手机连接 a. IP 手动： IP地址：192.168.3.29（自己手机的固定IP） 子网掩码：255.255.255.0 路由器：192.168.3.101（需要和openwrt路由器一样） b. 配置DNS，需要先删除掉原来的 手动：192.168.3.101（需要和openwrt路由器一样） William-Ubuntu 安装 ip add ## 如果原来有网卡，需要删除掉 sudo ifconfig hMACvLAN down sudo ip link delete hMACvLAN sudo ip link set enp0s31f6 promisc on ## 如果有，需要删掉 docker network ls docker network rm macnet docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=enp0s31f6 macnet docker network inspect macnet docker run -d \\ --restart always \\ --name openwrt \\ --network macnet \\ --privileged \\ registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 \\ /sbin/init docker exec -it openwrt /bin/bash vi /etc/config/network config interface 'loopback' option ifname 'lo' option proto 'static' option ipaddr '127.0.0.1' option netmask '255.0.0.0' config globals 'globals' option ula_prefix 'fd7d:334c:6108::/48' option packet_steering '1' config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option netmask '255.255.255.0' option ip6assign '60' option ipaddr '192.168.1.101' ## docker ip，可以打开监控界面 option gateway '192.168.1.1' option dns '192.168.1.1' config interface 'vpn0' option ifname 'tun0' option proto 'none' docker restart openwrt ## 管理界面密码 密码：password sudo ip link add link enp0s31f6 hMACvLAN type macvlan mode bridge sudo ip addr add 192.168.1.100/24 brd + dev hMACvLAN ## 增加一个网卡 sudo ip link set hMACvLAN up ","date":"2021-03-19","objectID":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/:2:0","tags":["docker","openwrt","软路由"],"title":"Docker 搭建 openwrt","uri":"/archives/2021-03-19-docker-%E6%90%AD%E5%BB%BA-openwrt/"},{"categories":["Programming"],"content":"把 pd.DataFrame 转化成 pnd 图片格式输出。","date":"2021-03-19","objectID":"/archives/2021-03-19-python-%E8%BD%AC%E6%8D%A2-dataframe-%E4%B8%BA%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/","tags":["Python","DataFrame","数据"],"title":"Python 转换 DataFrame 为图片格式","uri":"/archives/2021-03-19-python-%E8%BD%AC%E6%8D%A2-dataframe-%E4%B8%BA%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":"将 DataFrame 输出为图片形式，方便监控。 # -*- coding: utf-8 -*- # @Author: “williamlfang” # @Date: 2021-03-19 15:18:19 # @Last Modified by: “williamlfang” # @Last Modified time: 2021-03-19 16:18:32 import pandas as pd import numpy as np import matplotlib.pyplot as plt import six from matplotlib.ticker import FormatStrFormatter def render_mpl_table(data, savepath, title = \"\", col_width=2.0, row_height=0.625, font_size=12, header_color='#40466e', row_colors=['#f1f1f2', 'w'], edge_color='w', bbox=[0, 0, 1, 1], header_columns=0, ax=None, **kwargs): if ax is None: size = (np.array([0,1]) + np.array(data.shape[::-1]) + np.array([0, 1])) * np.array([col_width, row_height]) fig, ax = plt.subplots(figsize=size) ax.set_title(title, fontdict={'fontsize': 15, 'fontweight': 'bold', 'color': header_color, 'horizontalalignment':'center'}) ax.yaxis.set_major_formatter(FormatStrFormatter('%g')) # fig.tight_layout() ax.axis('off') mpl_table = ax.table(cellText=data.values, bbox=bbox, colLabels=data.columns, **kwargs) mpl_table.auto_set_font_size(False) mpl_table.set_fontsize(font_size) for k, cell in six.iteritems(mpl_table._cells): cell.set_edgecolor(edge_color) if k[0] == 0 or k[1] \u003c header_columns: cell.set_text_props(weight='bold', color='w') cell.set_facecolor(header_color) else: cell.set_facecolor(row_colors[k[0]%len(row_colors) ]) # return ax plt.savefig(savepath) plt.close() if __name__ == \"__main__\": df = pd.DataFrame() df['date'] = ['2016-04-01', '2016-04-02', '2016-04-03'] df['calories'] = [2200.343332424, 2100.34, 1500] df['sleep hours'] = [2200, 2100, 1500] df['gym'] = [True, False, False] # ========================================================================== render_mpl_table(df, savepath= '/tmp/dfm.png', title = \"My Title\", header_columns=0, col_width=2.0) # ========================================================================== ","date":"2021-03-19","objectID":"/archives/2021-03-19-python-%E8%BD%AC%E6%8D%A2-dataframe-%E4%B8%BA%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/:0:0","tags":["Python","DataFrame","数据"],"title":"Python 转换 DataFrame 为图片格式","uri":"/archives/2021-03-19-python-%E8%BD%AC%E6%8D%A2-dataframe-%E4%B8%BA%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":"在 Linux 操作环境中一键部署开发套件。","date":"2021-01-08","objectID":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/","tags":["Linux","zsh","autojump","tmux","vim","c++","python"],"title":"Linux开发环境一键部署","uri":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"},{"categories":["Programming"],"content":" 套件","date":"2021-01-08","objectID":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/:0:0","tags":["Linux","zsh","autojump","tmux","vim","c++","python"],"title":"Linux开发环境一键部署","uri":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"},{"categories":["Programming"],"content":" zsh ## 可以到主页看一下最新的版本号 ## https://www.zsh.org/ wget https://sunsite.icm.edu.pl/pub/unix/shells/zsh/zsh-5.8.tar.xz tar -xvf zsh-5.8.tar.xz cd zsh-5.8 ./configure --prefix=/home/lfang/opt make -j \u0026\u0026 make install ## 安装 oh-my-zsh ## sh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\" wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh bash install.sh ## 如果报错，则把 install.sh 里面的 https 换成 git，这是因为 curl 可能不是最新版的 # Cloning Oh My Zsh... # Cloning into '/home/lfang/.oh-my-zsh'... # fatal: unable to find remote helper for 'https' # Error: git clone of oh-my-zsh repo failed ## 安装 antigen mkdir -p ~/.zsh curl -L git.io/antigen \u003e ~/.zsh/antigen.zsh echo \" ## 需要找到相应的路径 fpath=(/home/lfang/opt/share/zsh/5.8/functions $fpath) export FPATH=\"/home/lfang/opt/share/zsh/5.8/functions:$FPATH\" source ~/.zsh/antigen.zsh # Bundles from the default repo (robbyrussell's oh-my-zsh). antigen bundles \u003c\u003cEOBUNDLES command-not-found colored-man-pages magic-enter heroku pip lein extract tmux ssh-agent zsh-users/zsh-completions zsh-users/zsh-autosuggestions hlissner/zsh-autopair zsh-users/zsh-syntax-highlighting zsh-users/zsh-history-substring-search # load after zsh-syntax-highlighting HeroCC/LS_COLORS rupa/z djui/alias-tips # Alias reminder when launching a command that is aliased EOBUNDLES # Tell Antigen that you're done. antigen apply \" \u003e\u003e ~/.zshrc source ~/.zshrc ","date":"2021-01-08","objectID":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/:1:0","tags":["Linux","zsh","autojump","tmux","vim","c++","python"],"title":"Linux开发环境一键部署","uri":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"},{"categories":["Programming"],"content":" autojump ","date":"2021-01-08","objectID":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/:2:0","tags":["Linux","zsh","autojump","tmux","vim","c++","python"],"title":"Linux开发环境一键部署","uri":"/archives/2021-01-08-linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"},{"categories":["Programming"],"content":"patat 是一款基于终端的课件制作工具，并且可以直接在slide里面运行 Linux 命令，输出结果。使用风格偏技术派，比较有科技感。","date":"2020-12-23","objectID":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/","tags":["Linux","terminal","patat","ansi","slide","presentation"],"title":"patat: 命令行ppt","uri":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/"},{"categories":["Programming"],"content":"patat 是一款比较符合极客风格的课件制作工具。 安装","date":"2020-12-23","objectID":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/:0:0","tags":["Linux","terminal","patat","ansi","slide","presentation"],"title":"patat: 命令行ppt","uri":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/"},{"categories":["Programming"],"content":" 安装 stack curl -sSL https://get.haskellstack.org/ | sh ","date":"2020-12-23","objectID":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/:1:0","tags":["Linux","terminal","patat","ansi","slide","presentation"],"title":"patat: 命令行ppt","uri":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/"},{"categories":["Programming"],"content":" 安装 patat git clone git@github.com:jaspervdj/patat.git cd patat stack setup stack install ## Make sure $HOME/.local/bin is in your $PATH patat v0.8.6.1 Usage: patat [FILENAME] [-w|--watch] Terminal-based presentations using Pandoc Controls: - Next slide: space, enter, l, right, pagedown - Previous slide: backspace, h, left, pageup - Go forward 10 slides: j, down - Go backward 10 slides: k, up - First slide: 0 - Last slide: G - Jump to slide N: N followed by enter - Reload file: r - Quit: q Available options: -h,--help Show this help text FILENAME Input file -f,--force Force ANSI terminal -d,--dump Just dump all slides and exit -w,--watch Watch file for changes --version Display version info and exit 使用 cd /home/william/workspace/patat cd tests/golden/inputs patat -w syntax.md 常用选项: -w：可以实时查看效果 -f：忽略 ANSI 不支持的问题 控制： Next slide: space, enter, l, →, PageDown Previous slide: backspace, h, ←, PageUp Go forward 10 slides: j, ↓ Go backward 10 slides: k, ↑ First slide: 0 Last slide: G Jump to slide N: N followed by enter Reload file: r Quit: q 效果","date":"2020-12-23","objectID":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/:2:0","tags":["Linux","terminal","patat","ansi","slide","presentation"],"title":"patat: 命令行ppt","uri":"/archives/2020-12-23-patat--%E5%91%BD%E4%BB%A4%E8%A1%8Cppt/"},{"categories":["Programming"],"content":"使用 ssh 反向代理机制,实现内网穿透的效果.","date":"2020-12-19","objectID":"/archives/2020-12-19-ssh-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","tags":["ssh","反向代理"],"title":"ssh 反向代理","uri":"/archives/2020-12-19-ssh-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"categories":["Programming"],"content":" 服务器端假设服务器[京东云]ip是：123.123.111.111 ## 启动 firewalld 服务，添加端口 6666 fuser -k 6666/tcp systemctl restart firewalld.service firewall-cmd --zone=public --add-port=6666/tcp --permanent systemctl stop firewalld.service ## 开启代理，通过外部访问 6666 转发到 6166(即内网服务器端口) ssh -fNCL *:6666:localhost:6166 localhost 客户端 ## 开启 6166，任何访问外网的端口会自动转发到 22，即 ssh 服务 ssh -4 -fNCR 6166:localhost:22 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o ExitOnForwardFailure=True -p 22 root@123.123.111.111 ","date":"2020-12-19","objectID":"/archives/2020-12-19-ssh-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/:0:0","tags":["ssh","反向代理"],"title":"ssh 反向代理","uri":"/archives/2020-12-19-ssh-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"categories":[],"content":" XTP","date":"2020-10-27","objectID":"/archives/2020-10-27-xtp-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/:0:0","tags":[],"title":"XTP 开发笔记","uri":"/archives/2020-10-27-xtp-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":"通过在 c 程序内部设置权限，使得可执行程序具有管理员的超级权限。","date":"2020-10-25","objectID":"/archives/2020-10-25-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/","tags":["linux","root","setuid","bash","sh","超级","管理员","服务器"],"title":"Linux 设置超级用户程序","uri":"/archives/2020-10-25-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/"},{"categories":["Programming"],"content":" c程序 一定要使用普通用户 // super.c // -------- #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003csys/types.h\u003e #include \u003cunistd.h\u003e int main(void) { setuid(0); clearenv(); system(\"export PATH=/sbin:/bin:/usr/bin:/usr/local/bin:$PATH; /bin/bash\"); } 编译 一定要使用普通用户 gcc super.c -o super 这里可以试一下执行程序，发现依然是当前用户 [trader@localhost ~]$ ll total 16 -rwxrwxr-x 1 trader trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [trader@localhost trader]$ whoami trader 权限下面，我们来设置这个可执行程序的权限，使得其可以在普通用户的环境中，也是可以使用默认的 root 权限运行的。 使用 root 权限修改可执行程序： sudo chown root super sudo chmod ug+s super 如此一来，我们便可以通过执行 super 自动获取 root 权限了 [trader@localhost ~]$ ll total 16 -rwsrwsr-x 1 root trader 8216 Oct 25 20:36 super -rw-r--r-- 1 root trader 170 Oct 25 20:34 super.c [trader@localhost ~]$ ./super [root@localhost trader]# whoami root [root@localhost trader]# mkdir -p /usr/test [root@localhost trader]# rm -rf /usr/test [root@localhost trader]# 参考链接 Calling a script from a setuid root C program - script does not run as root Can I make a script always execute as root? ","date":"2020-10-25","objectID":"/archives/2020-10-25-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/:0:0","tags":["linux","root","setuid","bash","sh","超级","管理员","服务器"],"title":"Linux 设置超级用户程序","uri":"/archives/2020-10-25-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/"},{"categories":["Programming"],"content":"通过在 Ubuntu 安装 deepin 实现了使用 wechat、wechat-work等软件。","date":"2020-10-24","objectID":"/archives/2020-10-24-ubuntu-%E5%AE%89%E8%A3%85-deepin-wechat/","tags":["deepin","wechat","ubuntu"],"title":"Ubuntu 安装 Deepin wechat","uri":"/archives/2020-10-24-ubuntu-%E5%AE%89%E8%A3%85-deepin-wechat/"},{"categories":["Programming"],"content":" 安装可以参考项目地址：deepin-wine。 ## 需要添加仓库 wget -O- https://deepin-wine.i-m.dev/setup.sh | sh ## 开始安装应用 ## wechat sudo apt-get install deepin.com.wechat ## wechat-work sudo apt install deepin.com.weixin.work 字体安装由于 wechat 使用了 文泉驿字体，因此需要再安装相关的字体 sudo apt-get install ttf-wqy-microhei #文泉驿-微米黑 sudo apt-get install ttf-wqy-zenhei #文泉驿-正黑 sudo apt-get install xfonts-wqy #文泉驿-点阵宋体 输入法有报告提出由于 wechat 和 sogou 使用的 qt 版本不一致，导致在微信的界面会出现卡死的现象。安装旧版本或者不使用。 使用","date":"2020-10-24","objectID":"/archives/2020-10-24-ubuntu-%E5%AE%89%E8%A3%85-deepin-wechat/:0:0","tags":["deepin","wechat","ubuntu"],"title":"Ubuntu 安装 Deepin wechat","uri":"/archives/2020-10-24-ubuntu-%E5%AE%89%E8%A3%85-deepin-wechat/"},{"categories":["Programming"],"content":"使用 catch2 作为测试框架。","date":"2020-10-19","objectID":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/","tags":["catch","catch2","c++","test","测试","TDD"],"title":"catch2: 测试框架","uri":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"},{"categories":["Programming"],"content":"catch2 是一个可扩展性非常高的测试框架。 安装 Demo","date":"2020-10-19","objectID":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/:0:0","tags":["catch","catch2","c++","test","测试","TDD"],"title":"catch2: 测试框架","uri":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"},{"categories":["Programming"],"content":" 代码 /* * @Author: \"william\" * @Date: 2020-10-19 17:21:32 * @Last Modified by: \"william\" * @Last Modified time: 2020-10-19 17:29:18 */ #define CATCH_CONFIG_RUNNER #include \"catch.hpp\" int main( int argc, char *argv[]) { int res = Catch::Session().run( argc, argv); return res; // ========================================================================= // Catch::Session session; // There must be exactly one instance // int height = 0; // Some user variable you want to be able to set // // Build a new parser on top of Catch's // using namespace Catch::clara; // auto cli // = session.cli() // Get Catch's composite command line parser // | Opt( height, \"height\" ) // bind variable to a new option, with a hint string // [\"-g\"][\"--height\"] // the option names it will respond to // (\"how high?\"); // description string for the help output // // Now pass the new composite back to Catch so it uses that // session.cli( cli ); // // Let Catch (using Clara) parse the command line // int returnCode = session.applyCommandLine( argc, argv ); // if( returnCode != 0 ) // Indicates a command line error // return returnCode; // return session.run(); // ========================================================================= } int Factorial( int number ) { return number \u003c= 1 ? number : Factorial( number - 1 ) * number; // fail // return number \u003c= 1 ? 1 : Factorial( number - 1 ) * number; // pass } TEST_CASE( \"Factorial of 0 is 1 (fail)\", \"[single-file]\" ) { REQUIRE( Factorial(0) == 1 ); } TEST_CASE( \"Factorials of 1 and higher are computed (pass)\", \"[single-file]\" ) { REQUIRE( Factorial(1) == 1 ); REQUIRE( Factorial(2) == 2 ); REQUIRE( Factorial(3) == 6 ); REQUIRE( Factorial(10) == 3628800 ); } ","date":"2020-10-19","objectID":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/:1:0","tags":["catch","catch2","c++","test","测试","TDD"],"title":"catch2: 测试框架","uri":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"},{"categories":["Programming"],"content":" 编译 g++ -std=c++11 main.cpp ","date":"2020-10-19","objectID":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/:2:0","tags":["catch","catch2","c++","test","测试","TDD"],"title":"catch2: 测试框架","uri":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"},{"categories":["Programming"],"content":" 运行 ./a.out [17:28:46] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ a.out is a Catch v2.13.0 host application. Run with -? for options ------------------------------------------------------------------------------- Factorial of 0 is 1 (fail) ------------------------------------------------------------------------------- main.cpp:44 ............................................................................... main.cpp:45: FAILED: REQUIRE( Factorial(0) == 1 ) with expansion: 0 == 1 =============================================================================== test cases: 2 | 1 passed | 1 failed assertions: 5 | 4 passed | 1 failed 技巧","date":"2020-10-19","objectID":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/:3:0","tags":["catch","catch2","c++","test","测试","TDD"],"title":"catch2: 测试框架","uri":"/archives/2020-10-19-catch2--%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"},{"categories":["Programming"],"content":"在 SnailCore 继承 util/main.hpp 父类，实现之类实例。","date":"2020-10-15","objectID":"/archives/2020-10-15-snailcore--%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/","tags":["snail","main","app","playground"],"title":"SnailCore: 开发实例","uri":"/archives/2020-10-15-snailcore--%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/"},{"categories":["Programming"],"content":" 项目结构 . ├── CMakeLists.txt └── main.cpp 0 directories, 2 files CMakeLists.txt ######################################################## snail_add_bin(test main.cpp) snail_bin_dep(test util shell) main.cpp #include \u003cshell/main.hpp\u003e #include \u003cutil/calendar.hpp\u003e #include \u003cutil/log.hpp\u003e using namespace snail; using namespace std; class playground_t: public snail::Main { public: using base_t = snail::Main; using base_t::base_t; playground_t() {}; ~playground_t() {}; const char* name() const override { return \"playground_t\"; }; bool do_init() override; void run() override; }; bool playground_t::do_init() { if (!base_t::do_init()) return false; return true; } void playground_t::run() { base_t::run(); for (auto\u0026 td : _calendar.trading_days()) { cout \u003c\u003c \"night:\" \u003c\u003c td.night \u003c\u003c \", day:\" \u003c\u003c td.day \u003c\u003c endl; } if (_calendar.has_session(microtime::now())) { cout \u003c\u003c \"has session:\" \u003c\u003c microtime::now().to_zgc_str() \u003c\u003c endl; } } int main(int argc, char* argv[]) { playground_t pl; return pl.main(argc, argv); } 注意事项 在 bool do_init() override; 的最后，一定要返回 return true;，否则会默认 false，导致后面面的 run 不会再继续运行。 bool playground_t::do_init() { if (!base_t::do_init()) return false; return true; // 需要加上 } 在 run 继承的时候，最好加上 base_t::run(); 以保证可以调用其他的参数 void playground_t::run() { base_t::run(); // 需要加上 for (auto\u0026 td : _calendar.trading_days()) { cout \u003c\u003c \"night:\" \u003c\u003c td.night \u003c\u003c \", day:\" \u003c\u003c td.day \u003c\u003c endl; } if (_calendar.has_session(microtime::now())) { cout \u003c\u003c \"has session:\" \u003c\u003c microtime::now().to_zgc_str() \u003c\u003c endl; } } ","date":"2020-10-15","objectID":"/archives/2020-10-15-snailcore--%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/:0:0","tags":["snail","main","app","playground"],"title":"SnailCore: 开发实例","uri":"/archives/2020-10-15-snailcore--%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/"},{"categories":["Programming"],"content":"通过使用源代码进行编译安装 OpenSSL-1.1.1。","date":"2020-10-14","objectID":"/archives/2020-10-14-openssl-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/","tags":["OpenSSL","编译"],"title":"OpenSSL 源代码编译安装","uri":"/archives/2020-10-14-openssl-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 下载到官网下载 wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1g.tar.gz 安装 tar -xvf openssl-1.1.1g.tar.gz cd openssl-1.1.1 ./config --prefix=/home/lfang/opt --libdir=lib no-shared zlib-dynamic make make install 设置 export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64 echo \"export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64\" \u003e\u003e ~/.bashrc 版本 openssl version -a ","date":"2020-10-14","objectID":"/archives/2020-10-14-openssl-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/:0:0","tags":["OpenSSL","编译"],"title":"OpenSSL 源代码编译安装","uri":"/archives/2020-10-14-openssl-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":"Clickhouse 是一个高性能列式的开源数据库。","date":"2020-09-21","objectID":"/archives/2020-09-21-clickhouse-%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/","tags":["clickhouse","database","sql","数据库","高性能","数据","时间序列"],"title":"Clickhouse 高性能列式数据库","uri":"/archives/2020-09-21-clickhouse-%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["Programming"],"content":"OLAP方案与其他常见方案（如OLTP或Key-Value访问）有很大不同。所以，如果你想获得不错的表现，尝试使用OLTP或Key-ValueDB来处理分析查询是没有意义的。例如，如果您尝试使用MongoDB或Elliptics进行分析，与OLAP数据库相比，您的性能会很差。 面向列的数据库更适合于OLAP方案（对于大多数查询，处理速度至少提高了100倍），原因如下： 对于I/O, 进行碎片化存储 对于CPU由于执行查询需要处理大量的行，因此它有助于为整个向量调度所有操作，而不是单独的行，或者实现查询引擎，这样就几乎没有调度成本。如果你不这样做，任何半象限的磁盘子系统(half-decent disk subsystem)，查询解释器不可避免地中断(阻塞)CPU。将数据存储在列中并在可能的情况下按列处理是有意义的。 对于分析查询，只需要读取少量的列。在面向列的数据库中，您只能读取所需的数据。例如，如果您需要100列中的5列，则I/O可能会减少20倍。 由于数据是以数据包的形式读取的，因此压缩比较容易。列中的数据也更容易压缩。这进一步减少了I/O量。 由于减少的I/O，更多的数据适合在系统缓存中。 安装 使用 高性能技巧 参考链接 什么是ClickHouse ClickHouse到底是什么？凭啥这么牛逼！ 行式和列式存储说明以及OLAP特点介绍 clickhouse的安装和使用（单机+集群） ClickHouse深度解析 ClickHouse - LowCardinality 数据类型的神秘之旅 深入理解ClickHouse-本地表和分布式表 ClickHouse - 多卷存储扩大存储容量（生产环境必备） 深入理解ClickHouse-本地表和分布式表 ClickHouse 新特性 Live View 体验 ClickHouse - 创建漂亮的 Grafana 仪表盘 clickhouse的索引结构和查询优化 A MAGICAL MYSTERY TOUR OF THE LOWCARDINALITY DATA TYPE Use of LowCardinality and/or INDEX to speed up query performance #4796 Building Infrastructure for ClickHouse Performance Should You Use ClickHouse as a Main Operational Database? https://www.slideshare.net/Altinity/clickhouse-query-performance-tips-and-tricks-by-robert-hodges-altinity-ceo https://blog.csdn.net/zhangpeterx/article/details/96494877 CLICKHOUSE-COPIER IN PRACTICE ","date":"2020-09-21","objectID":"/archives/2020-09-21-clickhouse-%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/:0:0","tags":["clickhouse","database","sql","数据库","高性能","数据","时间序列"],"title":"Clickhouse 高性能列式数据库","uri":"/archives/2020-09-21-clickhouse-%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["Programming"],"content":"使用 frp 配合 godday 实现内网服务直接解析成二级域名。 godday 域名解析godaddy 提供了泛域名解析，即通过二级域名即可匹配在服务器特定端口运行的后台服务，如 8080 对应的 gitlab 端口服务。 使用 godaddy 的 DNS Management 面板，增加一条域名 类型 名称 值 TTL 操作 A @ Parked 600 秒 编辑 A * 80.251.219.73 999999999 秒 godaddy 域名解析 vps 开启 80,443,7500 端口为了能够在浏览器支持直接打开网页地址，我们需要通过 vps 上运行的 frp 80 端口去自动匹配相关的转发端口。这样，在客户端，只需要记住相应的二级域名即可。 systemctl start firewalld.service ## http firewall-cmd --zone=public --add-port=80/tcp --permanent ## https firewall-cmd --zone=public --add-port=443/tcp --permanent ## frp 管理端口 firewall-cmd --zone=public --add-port=7500/tcp --permanent systemctl stop firewalld.service frps 设置在服务器上面，设置 frps.ini [common] # A literal address or host name for IPv6 must be enclosed # in square brackets, as in \"[::1]:80\", \"[ipv6-host]:http\" or \"[ipv6-host%zone]:80\" bind_addr = 0.0.0.0 bind_port = 7000 # udp port to help make udp hole to penetrate nat #bind_udp_port = 9001 # udp port used for kcp protocol, it can be same with 'bind_port' # if not set, kcp is disabled in frps #kcp_bind_port = 9000 # specify which address proxy will listen for, default value is same with bind_addr # proxy_bind_addr = 127.0.0.1 # if you want to support virtual host, you must set the http port for listening (optional) # Note: http port and https port can be same with bind_port vhost_http_port = 80 vhost_https_port = 433 # response header timeout(seconds) for vhost http server, default is 60s # vhost_http_timeout = 60 # set dashboard_addr and dashboard_port to view dashboard of frps # dashboard_addr's default value is same with bind_addr # dashboard is available only if dashboard_port is set dashboard_addr = 0.0.0.0 dashboard_port = 7500 # dashboard user and passwd for basic auth protect, if not set, both default value is admin dashboard_user = ********* dashboard_pwd = ********* # dashboard assets directory(only for debug mode) # assets_dir = ./static # console or real logFile path like ./frps.log #log_file = ./frps.log # trace, debug, info, warn, error log_level = trace log_max_days = 3 # disable log colors when log_file is console, default is false disable_log_color = false # auth token token = ********* # heartbeat configure, it's not recommended to modify the default value # the default value of heartbeat_timeout is 90 # heartbeat_timeout = 90 # only allow frpc to bind ports you list, if you set nothing, there won't be any limit #allow_ports = 5000-5010,8080 # pool_count in each proxy will change to max_pool_count if they exceed the maximum value max_pool_count = 10 # max ports can be used for each client, default value is 0 means no limit max_ports_per_client = 0 # if subdomain_host is not empty, you can set subdomain when type is http or https in frpc's configure file # when subdomain is test, the host used by routing is test.frps.com subdomain_host = williamlfang.com # if tcp stream multiplexing is used, default is true tcp_mux = true # custom 404 page for HTTP requests # custom_404_page = /path/to/404.html [plugin.user-manager] #addr = 127.0.0.1:9000 #path = /handler #ops = Login [plugin.port-manager] #addr = 127.0.0.1:9001 #path = /handler #ops = NewProxy 然后运行 nohup ./frps -c frps.ini \u0026 现在，我们便可以登录网址：http://frp.williamlfang.com:7500/ ，可视化的管理 frp 窗口了。 frp管理界面 frpc 设置在客户端设置 frpc [common] server_addr = frp.williamlfang.com server_port = 7000 token = [ssh135] type = tcp local_ip = 192.168.1.135 local_port = 22 remote_port = 6135 [ssh199] type = tcp local_ip = 192.168.1.199 local_port = 22 remote_port = 6199 [ssh135_gitlab] type = http local_ip = 192.168.1.135 local_port = 58080 subdomain = gitlab [ssh135_docker] type = http local_ip = 192.168.1.135 local_port = 5000 subdomain = docker [ssh135_docker_web] type = http local_ip = 192.168.1.135 local_port = 5001 subdomain = dockerweb 这里的关键步骤是，我们需要把远程的 ``server_addr设置成frp.williamlfang.com，这个是一级域名，然后通过底下的二级域名 gitlab` 找到对应的端口服务。 可以试着打开 http://gitlab.williamlfang.com/，发现不需要记住端口，即可访问服务器的 gitlab 服务项目了。 gitlab 如何 clone由于 gitlab 是处理当前内部网络，无法直接通过 ssh 进行 git clone，我们可以指定 https 的形式，把相应的端口转发出来。这里，http://192","date":"2020-09-11","objectID":"/archives/2020-09-11-frp-%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/:0:0","tags":["frp","godaddy","内网","穿透","端口","域名","解析","网站"],"title":"frp 实现域名解析","uri":"/archives/2020-09-11-frp-%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"},{"categories":["Programming"],"content":"在 CentOS7 上面搭建公司内部私有 DockerHub.","date":"2020-09-06","objectID":"/archives/2020-09-06-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/","tags":["centos","docker","hub","私有","容器"],"title":"CentOS7 搭建私有 DockerHub","uri":"/archives/2020-09-06-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["Programming"],"content":" 安装 Docker Register ## 使用 docker 进行 registry2 进行管理 docker pull registry ## 建立一个目录存放 docker 镜像, 默认是存放在 /tmp/registry mkdir -p /data/Docker/registy docker run --name docker.registry -d -p 5000:5000 -v /data/Docker/registy:/tmp/registry registry docker ps -a ## 开启防火墙5000端口 systemctl restart firewalld.service firewall-cmd --zone=public --add-port=5000/tcp --permanent firewall-cmd --reload ## 测试访问 curl http://192.168.1.135:5000/v2/ 使用 ## 测试 docker tag hello-world 192.168.1.135:5000/testing docker push 192.168.1.135:5000/testing 远程 ## 编辑 /etc/docker/daemon.json ## 添加 \"insecure-registries\" 里面的 \"docker.williamlfang.com:58080\" sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\", \"docker.williamlfang.com:58080\" ], \"debug\" : true, \"experimental\" : true, \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"1m\", \"max-file\": \"10\" } } sudo systemctl restart docker ## 获取镜像 docker pull docker.williamlfang.com:58080/testing Using default tag: latest latest: Pulling from testing Digest: sha256:90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 Status: Downloaded newer image for docker.williamlfang.com:58080/testing:latest docker.williamlfang.com:58080/testing:latest ","date":"2020-09-06","objectID":"/archives/2020-09-06-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/:0:0","tags":["centos","docker","hub","私有","容器"],"title":"CentOS7 搭建私有 DockerHub","uri":"/archives/2020-09-06-centos7-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-dockerhub/"},{"categories":["Programming"],"content":"记录在公司内部安装 Gitlab 全过程。","date":"2020-09-05","objectID":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/","tags":["git","gitlab","CentOS","frp","代码","仓库","技术","端口转发"],"title":"Gitlab 安装全过程","uri":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"},{"categories":["Programming"],"content":"记录在公司内部安装 Gitlab 全过程。 安装 Gitlab ## 安装必需的依赖项 sudo yum install curl policycoreutils-python openssh-server ## 将 SSH 服务设置成开机自启动 systemctl enable sshd ## 启动 SSH 服务 systemctl start sshd ## 邮件通知 sudo yum install postfix sudo systemctl start postfix sudo systemctl enable postfix ## 安装 Gitlab curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce Thank you for installing GitLab! ... Complete! ## 调整防火墙 ## 要访问GitLab界面，您需要打开端口80和443 sudo systemctl restart firewalld.service sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload ## 配置 Gitlab ## 默认是 8080 端口，如果 8080 已被占用，需更改为其它端口，并在防火墙开放对应端口 vim /etc/gitlab/gitlab.rb ## 修改配置文件中的 external_url 'http://192.168.1.135:58080' ## 改完之后执行重置 sudo gitlab-ctl reconfigure ## 重启 sudo gitlab-ctl restart ## 测试 curl 192.168.1.135:58080/gitlab ## 看到以下内容说明安装正确了 \u003chtml\u003e\u003cbody\u003eYou are being \u003ca href=\"http://192.168.1.135:58080/users/sign_in\"\u003eredirected\u003c/a\u003e.\u003c/body\u003e\u003c/html\u003e% 管理用户 ## 获取/修改超级管理员root的密码 ## 切换目录 cd /opt/gitlab/bin sudo gitlab-rails console production ## 进入 gitlab 终端操作 ## 在irb(main):001:0\u003e 后面运行 ## 查看当前用户 User.all =\u003e #\u003cActiveRecord::Relation [#\u003cUser id:4 @pc\u003e, #\u003cUser id:1 @root\u003e, #\u003cUser id:2 @fl\u003e, #\u003cUser id:3 @lhg\u003e]\u003e ##　切换用户，使用　id:n 来指定 u=User.where(id:1).first ## 输入密码，第一次只有 root, 后面可以通过　Gitlab 网页进行添加 u.password='******' u.password_confirmation='******' ## 保存，注意后面一定要添加符号　\"!\" u.save! 端口转发在 frps.ini [common] bind_port = 7000 vhost_http_port = 58080 在 frpc.ini [common] server_addr = *.*.*.* server_port = 7000 [ssh135_gitlab] type = http local_ip = 192.168.1.135 local_port = 58080 custom_domains = *.*.*.* ## 可以通过域名解析到自己的网址，现在先使用 server_addr 这样，可以通过打开网页：http://*.*.*.*:58080/ 访问我们的 Gitlab 了。 域名解析可以在 godday 上面使用 gitlab.wi********fang.com 进行解析 http://...:58080/。则每次只需要访问 \u003chttp://gitlab.wi********fang.com:58080/\u003e 远程访问","date":"2020-09-05","objectID":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/:0:0","tags":["git","gitlab","CentOS","frp","代码","仓库","技术","端口转发"],"title":"Gitlab 安装全过程","uri":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"},{"categories":["Programming"],"content":" 使用 http git clone http://gitlab.wi********fang.com:58080/fl/myctp.git 不过这样需要输入密码，可以参考: 修改 .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote \"origin\"] url = http://你的用户:你的密码@gitlab.wi********fang.com:58080/fl/myctp.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \"master\"] remote = origin merge = refs/heads/master 问题: gitlab使用http方式提交代码不输入密码 ? 背景: 假如你创建项目地址为 http://git.ops.test.com.cn/root/puppet.git 。 解决: 如果你已经执行过 git clone http://git.ops.test.com.cn/root/puppet.git ,则可以进入puppet目录，修改 .git/config中url = http://账号:密码@git.ops.test.com.cn/root/puppet.git ,再提交就发现不要输入密码了；或者直接在克隆仓库的时候直接 git clone http://账号:密码@git.ops.test.com.cn/root/puppet.git ，这样下次提交时也不需要输入密码。 ","date":"2020-09-05","objectID":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/:1:0","tags":["git","gitlab","CentOS","frp","代码","仓库","技术","端口转发"],"title":"Gitlab 安装全过程","uri":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"},{"categories":["Programming"],"content":" 使用 ssh上面虽然可以使用 gitlab，但是无法直接在外网使用项目地址进行clone。比如 git clone git@192.168.1.135:fl/myctp.git Cloning into 'myctp'... ssh: connect to host 192.168.1.135 port 22: No route to host fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 这是因为 192.168.1.135 是内网，无法被外网解析。这时，我们需要使用 ssh 的方式进行操作。 比如，我们已经把 192.168.1.135 的 22 端口通过 tcp 的方式，映射给了 *.*.*.* 的端口号 6135， 则可以使用 git clone ssh://git@*.*.*.*:6135/fl/myctp.git Cloning into 'myctp'... remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0) Receiving objects: 100% (3/3), done. 参考链接1.如何在CentOS 7上安装和配置GitLab 2.GitLab 部署及管理员账号初始化 ","date":"2020-09-05","objectID":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/:2:0","tags":["git","gitlab","CentOS","frp","代码","仓库","技术","端口转发"],"title":"Gitlab 安装全过程","uri":"/archives/2020-09-05-gitlab-%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"},{"categories":["Programming"],"content":"使用 Evans 进行 gRPC 客户端的交互式测试。","date":"2020-08-27","objectID":"/archives/2020-08-27-evans--grpc-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/","tags":["grpc","evans","测试","cli"],"title":"Evans: gRPC 交互式测试工具","uri":"/archives/2020-08-27-evans--grpc-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 安装到项目主页，找到发布地址，然后下载相应操作系统下的可执行文件。 cd /tmp wget https://github.com/ktr0731/evans/releases/download/0.9.0/evans_linux_amd64.tar.gz tar -xvf evans_linux_amd64.tar.gz ## 复制到系统路径 sudo mv evans /usr/local/bin 使用 evans --host 127.0.0.1 --port 50051 helloworld.proto ______ | ____| | |__ __ __ __ _ _ __ ___ | __| \\ \\ / / / _. | | '_ \\ / __| | |____ \\ V / | (_| | | | | | \\__ \\ |______| \\_/ \\__,_| |_| |_| |___/ more expressive universal gRPC client helloworld.Greeter@127.0.0.1:50051\u003e helloworld.Greeter@127.0.0.1:50051\u003e show package +------------+ | PACKAGE | +------------+ | helloworld | +------------+ helloworld.Greeter@127.0.0.1:50051\u003e package helloworld helloworld@127.0.0.1:50051\u003e show service +---------+----------+--------------+---------------+ | SERVICE | RPC | REQUEST TYPE | RESPONSE TYPE | +---------+----------+--------------+---------------+ | Greeter | SayHello | HelloRequest | HelloReply | +---------+----------+--------------+---------------+ helloworld@127.0.0.1:50051\u003e show message +--------------+ | MESSAGE | +--------------+ | HelloReply | | HelloRequest | +--------------+ ","date":"2020-08-27","objectID":"/archives/2020-08-27-evans--grpc-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:0:0","tags":["grpc","evans","测试","cli"],"title":"Evans: gRPC 交互式测试工具","uri":"/archives/2020-08-27-evans--grpc-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":"在多个合作的 git 项目中，由于每个人使用的代码风格各式各样，这造成团队成员之间阅读代码存在一定的困难。为了统一风格，可以在项目中配置代码风格(code style)，在每次代码提交的时候，都会自动进行代码格式的美化工作。","date":"2020-08-18","objectID":"/archives/2020-08-18-pre-commit--%E8%87%AA%E5%8A%A8%E7%BE%8E%E5%8C%96%E4%BB%A3%E7%A0%81/","tags":["git","pre-commit","commit","style","代码","风格"],"title":"pre commit: 自动美化代码","uri":"/archives/2020-08-18-pre-commit--%E8%87%AA%E5%8A%A8%E7%BE%8E%E5%8C%96%E4%BB%A3%E7%A0%81/"},{"categories":["Programming"],"content":" Python参考链接: pre-commit: A framework for managing and maintaining multi-language pre-commit hooks. Automate Python workflow using pre-commits: black and flake8 ## 安装 python -m pip install pre-commit ## 也可以直接下载安装 ## curl https://pre-commit.com/install-local.py | python - ## 查看版本 pre-commit -V pre-commit 2.6.0 ## 在项目中生成配置文件 ## 使用命令查看模板 # pre-commit sample-config ## 在 git 项目中安装 pre-commit install ## 配置文件 vim .pre-commit-config.yaml 可以参考一下这个配置文件 repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v2.3.0 hooks: - id: check-yaml - id: end-of-file-fixer - id: trailing-whitespace - repo: https://github.com/psf/black rev: 19.3b0 hooks: - id: black - repo: https://github.com/Lucas-C/pre-commit-hooks-bandit rev: v1.0.4 hooks: - id: python-bandit-vulnerability-check args: [-l, --recursive, -x, tests] files: .py$ - repo: https://github.com/asottile/reorder_python_imports rev: v1.6.1 hooks: - id: reorder-python-imports 这样，我们在每次提交 git commit 之前，都会先经过一遍代码风格的检查 git add data/csv_reader.py git commit -m \"test CsvTickData with ticks.dat\" [WARNING] Unstaged files detected. [INFO] Stashing unstaged files to /home/william/.cache/pre-commit/patch1597726472. Check Yaml...........................................(no files to check)Skipped Fix End of Files.........................................................Passed Trim Trailing Whitespace.................................................Passed black....................................................................Passed bandit...................................................................Passed Reorder python imports...................................................Passed [INFO] Restored changes from /home/william/.cache/pre-commit/patch1597726472. [ctpmd c7e7f4f] test CsvTickData with ticks.dat 1 file changed, 39 insertions(+), 23 deletions(-) C/C++","date":"2020-08-18","objectID":"/archives/2020-08-18-pre-commit--%E8%87%AA%E5%8A%A8%E7%BE%8E%E5%8C%96%E4%BB%A3%E7%A0%81/:0:0","tags":["git","pre-commit","commit","style","代码","风格"],"title":"pre commit: 自动美化代码","uri":"/archives/2020-08-18-pre-commit--%E8%87%AA%E5%8A%A8%E7%BE%8E%E5%8C%96%E4%BB%A3%E7%A0%81/"},{"categories":["Programming"],"content":"Google 退出的开源 C++ 基础库。","date":"2020-08-06","objectID":"/archives/2020-08-06-abseil-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/","tags":["Google","Linux","c++","abseil"],"title":"Abseil 代码阅读","uri":"/archives/2020-08-06-abseil-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Programming"],"content":"Google 评价 Abseil 为： 它是从 Google 内部代码块中抽取出来的一系列最基础的软件库。作为基本的组成部分，这些软件库支撑了几乎全部 Google 在运行的项目。以前这些 API 是零零散散地嵌入在 Google 的大部分开源项目中，现在我们将它们规整在一起，形成这样一个全面的项目。 Abseil 是 Google 代码库的最基本构建模块，其代码经过了生产环节测试，此后还会继续得到完全的维护。 Abseil 中包括如下的库： base ：初始化，以及其它的基础代码。 algorithm ：对 C++ 的\u003calgorithm\u003e库的补充，并为原算法提供了基于容器的版本。 container ：提供了更多的 STL 类型容器。 debugging ：用于检查泄漏的调试库。 memory ：包括兼容 C++ 11 版本的std::make_unique()和内存管理。 meta ：包括兼容 C++ 11 版本的类型检查，在 C++ 14 和 C++ 17 版本的 C++ \u003ctype_traits\u003e库中可用。 numeric ：兼容 C++ 11 的 128 位整数。 strings ：各种字符串工具。 synchronization ：并发原语和同步抽象。 time ：抽象了绝对时间点操作和时区操作。 types ：非容器工具的类型。 ","date":"2020-08-06","objectID":"/archives/2020-08-06-abseil-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/:0:0","tags":["Google","Linux","c++","abseil"],"title":"Abseil 代码阅读","uri":"/archives/2020-08-06-abseil-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Programming"],"content":"使用 k8s 管理容器。","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":"参考链接： ubuntu 使用阿里云镜像源快速搭建 kubernetes 1.15.2 集群 安装 sudo apt-get update \u0026\u0026 sudo apt-get install -y apt-transport-https curl echo \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt-get update ## 安装最新版 sudo apt install -y kubelet=1.18.5-00 kubeadm=1.18.5-00 kubectl=1.18.5-00 sudo apt-mark hold kubelet=1.18.5-00 kubeadm=1.18.5-00 kubectl=1.18.5-00 # sudo apt-get install -y kubelet kubeadm kubectl # sudo apt-mark hold kubelet kubeadm kubectl ","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" 更新 kubeadm参考：升级 kubeadm 集群 设置","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" 禁用 swap所有主机禁用 swap sudo sed -i '/swap/ s/^/#/' /etc/fstab sudo swapoff -a ","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" 安装 Docker所有主机均需要安装 Docker ","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" 安装 kubelet, kubeadm, kubectl所有主机需要安装 ","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" 主机安装 kubernetes 集群 sudo kubeadm init --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.18.5 --pod-network-cidr=192.169.0.0/16 | tee /etc/kube-server-key ","date":"2020-08-06","objectID":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:5:0","tags":["k8s","Docker","虚拟化","集群"],"title":"K8s 使用教程","uri":"/archives/2020-08-06-k8s-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":"把一个用户程序设置成系统服务(systemd service)","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" 方法","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:0:0","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" 新建一个服务文件 cd /usr/lib/systemd/system $ls -alh EasyMonitor.service xtp_md.service total 16K drwxr-xr-x 2 root root 4.0K Aug 6 13:37 ./ drwxr-xr-x 10 root root 4.0K Jun 8 16:25 ../ -rw-r--r-- 1 root root 998 Jan 7 2020 EasyMonitor.service -rwxr-xr-x 1 root root 292 Aug 6 13:54 xtp_md.service* 设置 xtp_md.sevice 服务内容 [Unit] Description=XTP mkdata After=network.target network-online.target [Service] Type=forking Restart=always RestartSec=5 ExecStart=/home/william/workspace/highfort/xtp_md_start.sh ExecReload=/home/william/workspace/highfort/xtp_md_restart.sh ExecStop=/home/william/workspace/highfort/xtp_md_stop.sh [Install] WantedBy=multi-user.target ","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:1:0","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" 编写相应的执行文件","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:2:0","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" xtp_md_start.sh #!/bin/bash export LD_LIBRARY_PATH=/home/william/workspace/highfort/hippo/external/exch/XTP:/usr/lib/x86_64-linux-gnu:/usr/local/lib:$LD_LIBRARY_PATH cd /home/william/workspace/highfort/hippo/build/install/bin nohup ./md /home/william/workspace/highfort/hippo/app/gw/xtp_gw/config/xtp_test_william.conf \u0026 ","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:2:1","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" xtp_md_stop.sh #!/bin/bash ps aux | grep \"xtp_test_william.conf\" | grep -v color | awk '{print $2}' | xargs kill -9 ","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:2:2","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":" xtp_md_restart.sh #!/bin/bash export LD_LIBRARY_PATH=/home/william/workspace/highfort/hippo/external/exch/XTP:/usr/lib/x86_64-linux-gnu:/usr/local/lib:$LD_LIBRARY_PATH cd /home/william/workspace/highfort/hippo/build/install/bin nohup ./md /home/william/workspace/highfort/hippo/app/gw/xtp_gw/config/xtp_test_william.conf \u0026 添加执行 ## 重新载入 sudo systemctl daemon-reload sudo systemctl enable xtp_md sudo systemctl start xtp_md sudo systemctl status xtp_md sudo systemctl stop xtp_md ## 显示所有服务 sudo systemctl --type=service systemctl ","date":"2020-08-06","objectID":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/:2:3","tags":["systemd","Linux","daemon","系统","后台"],"title":"Linux 添加 systemctl 服务","uri":"/archives/2020-08-06-linux-%E6%B7%BB%E5%8A%A0-systemctl-%E6%9C%8D%E5%8A%A1/"},{"categories":["Programming"],"content":"gRPC 相关的学习笔记。","date":"2020-07-31","objectID":"/archives/2020-07-31-grpc--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":["gRPC","web","socket","网络","数据"],"title":"gRPC: 学习笔记","uri":"/archives/2020-07-31-grpc--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":"参考链接： gRPC 官方文档中文版 https://leimao.github.io/blog/gRPC-Tutorial/ gRPC 编译参考官网 quick-start 需要指定版本号 configure 需要进行打包配置(package)，这个需要参考 ## 安装依赖包 sudo apt-get install golang sudo apt install autoconf automake libtool shtool ## 可以使用 curl -L http://grpc.io/release 查看当前支持的版本 git clone --recurse-submodules -b v1.20.0 https://github.com/grpc/grpc cd grpc mkdir -p ./cmake/build cd ./cmake/build cmake -DgRPC_INSTALL=ON \\ -DgRPC_BUILD_TESTS=OFF \\ -DgRPC_PROTOBUF_PROVIDER=package \\ -DgRPC_ZLIB_PROVIDER=package \\ -DgRPC_CARES_PROVIDER=package \\ -DgRPC_SSL_PROVIDER=package \\ -DCMAKE_BUILD_TYPE=Release \\ ../.. make -j sudo make install 使用","date":"2020-07-31","objectID":"/archives/2020-07-31-grpc--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:0:0","tags":["gRPC","web","socket","网络","数据"],"title":"gRPC: 学习笔记","uri":"/archives/2020-07-31-grpc--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":"使用 planner 进行项目进度管理。","date":"2020-07-31","objectID":"/archives/2020-07-31-planner--%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86/","tags":["Linux","项目","时间","管理","timing","plan","planner"],"title":"Planner: 项目进度管理","uri":"/archives/2020-07-31-planner--%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86/"},{"categories":["Programming"],"content":" 安装 sudo apt instal planner ","date":"2020-07-31","objectID":"/archives/2020-07-31-planner--%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86/:0:0","tags":["Linux","项目","时间","管理","timing","plan","planner"],"title":"Planner: 项目进度管理","uri":"/archives/2020-07-31-planner--%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86/"},{"categories":["Programming"],"content":"编译 Hippo 项目的填坑经历。","date":"2020-07-22","objectID":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/","tags":["Hippo","cmake","c++","编译","grpc","openssl","libcurl"],"title":"Hippo: 编译项目","uri":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/"},{"categories":["Programming"],"content":" 安装 clang9 wget https://releases.llvm.org/9.0.0/clang%2bllvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz tar -xvf clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz cd clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04 sudo mkdir /usr/lib/llvm-9 sudo cp -r ./* /usr/lib/llvm-9 ProtoBuf sudo apt-get install autoconf automake libtool -y git clone https://github.com/google/protobuf.git cd protobuf git submodule update --init --recursive ./autogen.sh ./configure make make check sudo make install sudo ldconfig gRPC 编译参考官网 quick-start 需要指定版本号 v1.20.0 configure 需要进行打包配置(package)，这个需要参考 ## 安装依赖包 sudo apt-get install golang sudo apt install autoconf automake libtool shtool git clone --recurse-submodules -b v1.20.0 https://github.com/grpc/grpc cd grpc ## --------------------------------------------------- ## 使用 gcc6.2 set(CMAKE_CXX_COMPILER \"/usr/local/packages/gcc/bin/g++\") set(CMAKE_C_COMPILER \"/usr/local/packages/gcc/bin/gcc\") set(CMAKE_CXX_STANDARD 11) cmake -DgRPC_INSTALL=ON \\ -DCMAKE_BUILD_TYPE=Release \\ -DgRPC_BUILD_TESTS=OFF \\ -DCMAKE_INSTALL_PREFIX=/home/lfang/opt \\ -DgRPC_SSL_PROVIDER=package \\ ../.. ## --------------------------------------------------- mkdir -p ./cmake/build cd ./cmake/build cmake -DgRPC_INSTALL=ON \\ -DgRPC_BUILD_TESTS=OFF \\ -DgRPC_PROTOBUF_PROVIDER=package \\ -DgRPC_ZLIB_PROVIDER=package \\ -DgRPC_CARES_PROVIDER=package \\ -DgRPC_SSL_PROVIDER=package \\ -DCMAKE_BUILD_TYPE=Release \\ ../.. make -j sudo make install libcurl git clone https://github.com/curl/curl.git cd curl ./buildconf ./configure --without-ssl --without-libidn2 --without-zlib make -j sudo make install cd include # ONLY install the include folder (with curl.h, etc) make install pistache git clone https://github.com/oktal/pistache.git cd pistache mkdir build cd build cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release .. make sudo make install hiredis git clone https://github.com/redis/hiredis.git make USE_SSL=1 OpenSSL 编译访问官网，下载对应版本号 wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1.tar.gz tar -xzvf openssl-1.1.1.tar.gz cd openssl-1.1.1 ./config --prefix=/usr/local --openssldir=/usr/local/openssl make -j \u0026\u0026 make install RabbitMQ","date":"2020-07-22","objectID":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/:0:0","tags":["Hippo","cmake","c++","编译","grpc","openssl","libcurl"],"title":"Hippo: 编译项目","uri":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/"},{"categories":["Programming"],"content":" 安装 Erlang wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add - ## Ubuntu 20.04: echo \"deb https://packages.erlang-solutions.com/ubuntu focal contrib\" | sudo tee /etc/apt/sources.list.d/rabbitmq.list ## Ubuntu 18.04: echo \"deb https://packages.erlang-solutions.com/ubuntu bionic contrib\" | sudo tee /etc/apt/sources.list.d/rabbitmq.list sudo apt update sudo apt install erlang ","date":"2020-07-22","objectID":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/:1:0","tags":["Hippo","cmake","c++","编译","grpc","openssl","libcurl"],"title":"Hippo: 编译项目","uri":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/"},{"categories":["Programming"],"content":" 安装 rabbitmq-c使用 rabbitmq-c sudo apt-get install libssl-dev git clone https://github.com/alanxz/rabbitmq-c cd rabbitmq-c mkdir build cd build cmake .. cmake --build . make -j sudo make install ","date":"2020-07-22","objectID":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/:2:0","tags":["Hippo","cmake","c++","编译","grpc","openssl","libcurl"],"title":"Hippo: 编译项目","uri":"/archives/2020-07-22-hippo--%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE/"},{"categories":["Programming"],"content":"使用 gtest/gmock 进行 C++ 单元测试。","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":"项目地址：googletest GoogleTest考虑到 gtest 和 gmock 两个项目均是针对单元测试 This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together. ","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:0:0","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 安装","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:0","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" Ubuntu git clone git@github.com:google/googletest.git cd googletest cmake -DBUILD_SHARED_LIBS=ON .. make -j ## install: YES sudo make install ## install: NO cp -r ../include/gtest ~/usr/gtest/include/ cp ./lib/*.so ~/usr/gtest/lib ## check sudo ldconfig -v | grep gtest sudo ldconfig -v | grep gmock ","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:1","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" CentOS7","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:2","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" Demo","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:0","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 单独文件vim test.cpp: #include \u003cgtest/gtest.h\u003e TEST(MathTest, TwoPlusTwoEqualsFour) { EXPECT_EQ(2 + 2, 4); } int main(int argc, char **argv) { ::testing::InitGoogleTest( \u0026argc, argv ); return RUN_ALL_TESTS(); } Compile: g++ test.cpp -lgtest -o test ./test [==========] Running 1 test from 1 test suite. [----------] Global test environment set-up. [----------] 1 test from MathTest [ RUN ] MathTest.TwoPlusTwoEqualsFour [ OK ] MathTest.TwoPlusTwoEqualsFour (0 ms) [----------] 1 test from MathTest (0 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test suite ran. (0 ms total) [ PASSED ] 1 test. ","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:1","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 使用 Cmake 测试文件可以使用类，注意这里使用 TEST_F #include \u003cgtest/gtest.h\u003e #include \u003cvector\u003e // 使用共享数据 class VectorTest : public testing::Test { protected: virtual void SetUp() override { vec.push_back(1); vec.push_back(2); vec.push_back(3); } std::vector\u003cint\u003e vec; }; // 注意这里使用 TEST_F，而不是 TEST TEST_F(VectorTest, PushBack) { // 虽然这里修改了 vec，但对其它测试函数来说是不可见的 vec.push_back(4); EXPECT_EQ(vec.size(), 4); EXPECT_EQ(vec.back(), 4); } TEST_F(VectorTest, Size) { EXPECT_EQ(vec.size(), 3); } int main(int argc, char *argv[]) { ::testing::InitGoogleTest(\u0026argc, argv); return RUN_ALL_TESTS(); } CMakeLists.txt cmake_minimum_required(VERSION 3.15) project(mytest) find_package(GTest REQUIRED) add_executable(mytest main.cpp) target_include_directories(mytest PRIVATE ${GTEST_INCLUDE_DIRS}) target_link_libraries(mytest PRIVATE ${GTEST_BOTH_LIBRARIES}) add_test(Test mytest) enable_testing() 构建 $ cmake .. -- The C compiler identification is GNU 7.5.0 -- The CXX compiler identification is GNU 9.2.0 -- Check for working C compiler: /usr/bin/cc -- Check for working C compiler: /usr/bin/cc -- works -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Detecting C compile features -- Detecting C compile features - done -- Check for working CXX compiler: /usr/bin/c++ -- Check for working CXX compiler: /usr/bin/c++ -- works -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Detecting CXX compile features -- Detecting CXX compile features - done -- Found GTest: /usr/local/lib/libgtest.so -- Configuring done -- Generating done -- Build files have been written to: /home/william/Desktop/mycpp/build $ make -j Scanning dependencies of target mytest [ 50%] Building CXX object CMakeFiles/mytest.dir/main.cpp.o [100%] Linking CXX executable mytest [100%] Built target mytest $./mytest [==========] Running 2 tests from 1 test suite. [----------] Global test environment set-up. [----------] 2 tests from VectorTest [ RUN ] VectorTest.PushBack [ OK ] VectorTest.PushBack (0 ms) [ RUN ] VectorTest.Size [ OK ] VectorTest.Size (0 ms) [----------] 2 tests from VectorTest (0 ms total) [----------] Global test environment tear-down [==========] 2 tests from 1 test suite ran. (0 ms total) [ PASSED ] 2 tests. 当然，可以直接使用命令运行测试 make test Running tests... Test project /home/william/Desktop/mycpp/build Start 1: Test 1/1 Test #1: Test ............................. Passed 0.02 sec 100% tests passed, 0 tests failed out of 1 Total Test time (real) = 0.02 sec ","date":"2020-07-15","objectID":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:2","tags":["gtest","gmock","C++","单元测试","Linux"],"title":"gtest,gmock: 使用总结","uri":"/archives/2020-07-15-gtestgmock--%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":"为 CentOS7 安装图形化桌面系统。","date":"2020-07-14","objectID":"/archives/2020-07-14-centos7--%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/","tags":["CentOS","GUI","图形","桌面"],"title":"CentOS7: 安装图形界面","uri":"/archives/2020-07-14-centos7--%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"},{"categories":["Programming"],"content":" 安装 ","date":"2020-07-14","objectID":"/archives/2020-07-14-centos7--%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/:0:0","tags":["CentOS","GUI","图形","桌面"],"title":"CentOS7: 安装图形界面","uri":"/archives/2020-07-14-centos7--%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"},{"categories":["Programming"],"content":"使用 CppServer 实现 TCP/UDP 通信。","date":"2020-07-09","objectID":"/archives/2020-07-09-cppserver/","tags":["c++","server","tcp","udp","http","client","通信"],"title":"CppServer","uri":"/archives/2020-07-09-cppserver/"},{"categories":["Programming"],"content":"使用 CppServer 实现 TCP/UDP 通信。 安装 apt-get install uuid-dev pip3 install gil git clone https://github.com/chronoxor/CppServer.git cd CppServer gil update cd modules rm -rf asio pc git clone git@github.com:chriskohlhoff/asio.git 编译 cd build ./unix.sh ","date":"2020-07-09","objectID":"/archives/2020-07-09-cppserver/:0:0","tags":["c++","server","tcp","udp","http","client","通信"],"title":"CppServer","uri":"/archives/2020-07-09-cppserver/"},{"categories":["Programming"],"content":"使用 RabbitMQ 消息队列。","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 消息队列RabbitMQ 是一个在 AMQP（Advanced Message Queuing Protocol ）基础上实现的、可复用的企业消息系统。它可以用于大型软件系统各个模块之间的高效通信，支持高并发，支持可扩展。 ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" AMQP即 Advanced Message Queuing Protocol, 一个提供统一消息服务的应用层标准高级消息队列协议, 是应用层协议的一个开放标准, 为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端 / 中间件不同产品，不同的开发语言等条件的限制。 ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" MQ全称为 Message Queue, 消息队列。是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。 消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信。队列的使用除去了接收和发送应用程序同时执行的要求。 在项目中，将一些无需即时返回且耗时的操作提取出来，进行了异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。 ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" RabbitMQ 应用场景 降低耦合 削峰 支持持久化 支持消息的确认机制 集群扩展 提供了 Web 可视化管理和监控 RabbitMQ 工作原理 安装","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" Ubuntu为了安装新版本，建议到官网 ## 安装依赖包　socat sudo apt install socat wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.5/rabbitmq-server_3.8.5-1_all.deb sudo dpkg -i rabbitmq-server_3.8.5-1_all.deb ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" CentOS7 sudo yum install -y socat # 下载 $ wget https://github.com/rabbitmq/erlang-rpm/releases/download/v22.3/erlang-22.3-1.el7.x86_64.rpm # 安装 $ rpm -ivh erlang-22.3-1.el7.x86_64.rpm 使用","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:5:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 启动服务使用命令启动服务 # 直接启动 sudo rabbitmq-server # -detached为可选参数，表示后台开启 sudo rabbitmq-server -detached #关闭RabbitMQ服务： sudo rabbitmqctl stop 启动成功后显示 ## ## RabbitMQ 3.8.5 ## ## ########## Copyright (c) 2007-2020 VMware, Inc. or its affiliates. ###### ## ########## Licensed under the MPL 1.1. Website: https://rabbitmq.com Doc guides: https://rabbitmq.com/documentation.html Support: https://rabbitmq.com/contact.html Tutorials: https://rabbitmq.com/getstarted.html Monitoring: https://rabbitmq.com/monitoring.html Logs: /var/log/rabbitmq/rabbit@william-pc.log /var/log/rabbitmq/rabbit@william-pc_upgrade.log Config file(s): (none) Starting broker... completed with 0 plugins. ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:6:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 插件管理 需要先启动插件，然后在启动 rabbitmq 服务 sudo rabbitmq-plugins enable rabbitmq_management 启动成功后 Enabling plugins on node rabbit@william-pc: rabbitmq_management The following plugins have been configured: rabbitmq_management rabbitmq_management_agent rabbitmq_web_dispatch Applying plugin configuration to rabbit@william-pc... The following plugins have been enabled: rabbitmq_management rabbitmq_management_agent rabbitmq_web_dispatch started 3 plugins. 这样 先启动插件管理 然后启动服务 产生以下结果 ## ## RabbitMQ 3.8.5 ## ## ########## Copyright (c) 2007-2020 VMware, Inc. or its affiliates. ###### ## ########## Licensed under the MPL 1.1. Website: https://rabbitmq.com Doc guides: https://rabbitmq.com/documentation.html Support: https://rabbitmq.com/contact.html Tutorials: https://rabbitmq.com/getstarted.html Monitoring: https://rabbitmq.com/monitoring.html Logs: /var/log/rabbitmq/rabbit@william-pc.log /var/log/rabbitmq/rabbit@william-pc_upgrade.log Config file(s): (none) Starting broker... completed with 3 plugins. 说明使用了 3 个插件： Starting broker... completed with 3 plugins. ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:7:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" Web 访问Web 管理程序的端口号是 15672，在浏览器中输入 http://localhost:15672，即可以访问。 ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:8:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 用户管理登录以上 Web 管理界面后，需要我们输入账户和密码。 增加用户 ## 增加用户，并配置密码 sudo rabbitmqctl add_user william \u003cPassword\u003e 删除用户 sudo rabbitmqctl delete_user william 修改用户密码 sudo rabbitmqctl change_password william \u003cPassword\u003e 列出用户 sudo rabbitmqctl list_users 设置用户权限 用户的角色可以分为5种: 超级管理员 (administrator)：可登陆管理控制台 (启用 management plugin 的情况下)，可查看所有的信息，并且可以对用户，策略(policy) 进行操作。 监控者 (monitoring)：可登陆管理控制台 (启用 management plugin 的情况下)，同时可以查看 rabbitmq 节点的相关信息 (进程数，内存使用情况，磁盘使用情况等) 策略制定者 (policymaker)：可登陆管理控制台 (启用 management plugin 的情况下), 同时可以对 policy 进行管理。但无法查看节点的相关信息 (上图红框标识的部分)。 普通管理者 (management)：仅可登陆管理控制台 (启用 management plugin 的情况下)，无法看到节点信息，也无法对策略进行管理。 其他 设置用户角色的命令为： ## 设置用户角色 sudo rabbitmqctl set_user_tags william administrator ## 也可以给同一用户设置多个角色，例如 sudo rabbitmqctl set_user_tags william administrator monitoring policymaker 应用","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:9:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 连接过程消息队列的使用过程大概如下： 客户端连接到消息队列服务器(broker)，打开一个 channel。 客户端声明一个 exchange，并设置相关属性。 客户端声明一个 queue，并设置相关属性。 客户端使用 routing key，在 exchange 和 queue 之间建立好绑定关系。 客户端投递消息到 exchange。 ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:10:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" PythonPython 环境下可以使用 pika 软件包 python -m pip install pika ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" server.py import pika connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost')) channel = connection.channel() try: channel.exchange_declare(exchange='logs', exchange_type='fanout', durable=True) except: channel = connection.channel() channel.exchange_delete( exchange='logs' ) channel.exchange_declare(exchange='logs', exchange_type='fanout', durable=True) from time import sleep counter = 0 channel.basic_qos(prefetch_count=1) while 1: counter += 1 message = \"[{}] info: Hello World!\".format(counter) channel.basic_publish(exchange='logs', routing_key='', body=message, properties=pika.BasicProperties(delivery_mode = 2)) print(\" [x] Sent %r\" % message) sleep(1) connection.close() ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:1","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" client.py import pika connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost')) channel = connection.channel() channel.exchange_declare(exchange='logs', exchange_type='fanout', durable=True) result = channel.queue_declare(queue = \"\", exclusive=True, durable=True) queue_name = result.method.queue channel.queue_bind(exchange='logs', queue=queue_name) print(' [*] Waiting for logs. To exit press CTRL+C') def callback(ch, method, properties, body): print(\" [x] %r\" % body) channel.basic_qos(prefetch_count=1) channel.basic_consume(on_message_callback = callback, queue = queue_name, auto_ack = True) channel.start_consuming() ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:11:2","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" C++","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:12:0","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" AMQP-CPP这个项目相对比较活跃，而且支持 C++11 标准。 AMQP-CPP is a C++ library for communicating with a RabbitMQ message broker. The library can be used to parse incoming data from a RabbitMQ server, and to generate frames that can be sent to a RabbitMQ server. AMQP-CPP is fully asynchronous and does not do any blocking (system) calls, so it can be used in high performance applications without the need for threads. git clone git@github.com:CopernicaMarketingSoftware/AMQP-CPP.git mkdir build cd build ## cmake .. [-DAMQP-CPP_BUILD_SHARED] [-DAMQP-CPP_LINUX_TCP] cmake .. -DAMQP-CPP_BUILD_SHARED=ON -DAMQP-CPP_LINUX_TCP=ON sudo cmake --build . --target install ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:12:1","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" Demo git clone git@github.com:hoxnox/examples.amqp-cpp.git cd examples.amqp-cpp mkdir build cd build cmake .. make -j ./receive ./send ","date":"2020-07-09","objectID":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:12:2","tags":["RabbitMQ","消息队列","c++","Linux"],"title":"RabbitMQ: 安装与使用","uri":"/archives/2020-07-09-rabbitmq--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"侯捷老师在线教学：C++ 面向对象高级编程的课堂笔记。 介绍","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:0:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 课程目标侯捷老师在整个课程的讲授过程中，一直都非常强调「大气的编程习惯」，即从宏观设计、全局把握，然后再从微观编写、认真调试的编程风格。这一点非常重要，尤其对于大型的软件工程，我们往往需要在大局上进行深度的思考与设计，并且在细节上注重品质，才能编写出稳健而持续运行的程序。 ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:1:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 现代 C++现代c++ 从 C++11 开始，人们开始认识到这个古老的编程语言似乎焕发出新的生命，既注重程序的运行效率（不妥协）、也开始关注程序猿的编程效率，提供了更多的、更加灵活的编程语言内容的特征，如 auto、lambda、thread 多线程等，旨在为程序猿提供更加友好的编程环境。因此，我们常常说，C++11 是现代化的 C++ 升级版。 我原来的大学本科学习的是 c 编程语言，后面使用的主要也是面向过程的编程语言，如 R、Matlab。从思维方式来看，这种面向过程的编程语言，思维的逻辑性更强，要求使用者能够实现把解决问题的思路想清楚，然后安装一定的逻辑流程进行编写相应的程序处理过程。相反，对于面向对象的编程语言，如 C++、Java，则是思维的抽象性更强，需要把具体的问题抽象成可处理的对象，然后再赋予对象一定的可操作的逻辑。 我们无法说到底是面向过程的编程语言、还是面向对象的编程语言，哪种更好。我们只能说，不同的应用场景下，不同的编程语言各有利弊。从这几年 C++ 语言的发展轨迹上看，我们更发现其不仅仅是作为一门编程语言工具使用，更是为程序员提供了一种理解计算机的思维方式，那就是从底层硬件映射抽象的对象、以编译器的思考方式来理解程序的运行方式，这样，我们能够更好的理解我们所写的程序是如何在计算机内部工作，是如何一步一步的执行我们设计的算法步骤。因此， C++11 也成为了我目前主要的开发语言。 c-vs-c++ 头文件需要提供「头文件保护」(header guard) #ifndef __CLASS_NAME__H__ #define __CLASS_NAME__H__ ... #endif // __CLASS_NAME__H__ 类设计的 6 大金刚 构造函数 析构函数 拷贝构造 拷贝赋值 移动构造 移动赋值 c++ 面向对象的编程风格指两个方面的意思： 「object-based」：即以对象作为操作的基本单位: class with pointer member Class without pointer member 「object-oriented」：即有不同的类构成的层次体系: inheritance：表示 「is-a」 composition：表示 「has-a」 delegation： oop ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:2:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" compositioncomposition 模式下，container 与 component 的生命周期是一样的。 ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:3:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 构造与析构顺序 构造由内向外 析构由外向内 composition ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:3:1","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" delegation(pImpl) Body-handle pImpl：pointer-to-implementation composition by reference 在 delegation 模式下，body 与 handle 的生命周期是不一样的，handle 是一个指针，独立于 body 之外。 delegation ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:4:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" inheritanceinheritance ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:5:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 构造与析构顺序 构造由内向外 析构由外向内 inheritance 构造函数","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:5:1","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 初始化列表initializer-list 先于其他构造，能够保证构造函数的实现，这尤其对于类继承，可能保证基类初始化。 class Strategy { public: Strategy(std::string id): strategyid(id) // 初始化列表 { } }; ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:6:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 构造函数放在 private一般来说，我们会把各种形式的构造函数(ctor)放在 public 声明范围内，表示外部可以调用构造函数。但是，也一种设计模式叫做 Singleton，只允许通过函数调用来实现构造函数，这时，要求我们把构造函数放在 private 范围内。 ctor-singleton 析构函数对于动态内存分配的成员变量，需要在析构函数中进行释放。 dtor-string 成员函数","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:7:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" const 成员函数const-member-function const 用在类的成员函数时，表示该成员函数调用时不会改变类成员变量的值。从编译器的角度来看，其实是做了一次「承诺」。因此，如果是对于 const 类对象的实例，其实是约定了整个类不会改变成员变量，这时去调用没有添加const限定的成员函数时，编译器会报错，因为我们在声明类实例的时候，明明说好了不会改变，但是调用非const成员函数，则有可能破坏这个约定，因此编译器不会通过。 总结一下，就是： 如果成员函数肯定不会修改成员变量的，尽量添加 const 限定。 ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:8:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" pass-by-value vs pass-by-reference两种传递参数的方式： pass-by-value：需要把参数压入 heap，即复制后传递给函数 pass-by-reference：直接传入引用，不需要额外的开销。如果需要限定不会修改参数，最好增加 pass-by-reference-to-const，即 void func(const int \u0026arg); // 传入常量引用 可以这样理解，「传入引用相当于传入指针」，因为在底层引用是指针。 pass-by-value-vs-pass-by-reference ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:9:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" return-by-value vs return-by-referencereturn-by-value-vs-return-by-reference 需要注意的是，return-by-reference 要求变量在函数调用结束后，不会被销毁，是在堆栈中仍然存在的变量。 return-by-value-vs-return-by-reference ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:10:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" friend 友元函数对于类声明的私有变量，一般规定外部函数时无法获取的，所以我们需要编写getter函数。但是，如果把一个函数声明为这个类的friend，则允许直接获取类的私有变量。这样做有一定的方便性，但也是有一定的危险，毕竟我们把类私有变量封装起来的目的，就是不想让外部函数直接伸手进来操作。 friend 另外，我们需要注意，相同类之间生成的实例、父类与之类之间，互为friend。 friend ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:11:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" operator overloading在 c++ 里，有两种 overloading: operator overloading function overloading 所谓的 overloading，就是对原来语义的重新定义，使之能够作用于新的对象。 operator-overloading operator-overloading ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:12:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" virtual 函数在 c++ 中，子类继承父类的函数，实际上是继承了函数的调用权。 pure k ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:13:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" converion function 不需要指定返回类型，因为 operator 已经知道了 类型可以是任意的，包括 build-in 、user-defined-type conversion-function ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:14:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" explicit","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:15:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" pointer-like-class类对象可以像操作指针一样进行运算符重载。 pointer-like-class ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:16:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" function-like-class","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:17:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" member template在类模板里面，成员函数也是一个模板函数。 member-template 内存分配与管理stack-heap ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:18:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" Stack","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:19:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" Heap","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:20:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 变量的生命周期 全局变量 静态变量 局部变量 global-object static-object heap-object ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:21:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" nekw 先分配内存大小，然后调用构造函数 void *mem = operator new( sizeof(Complex) ); // 分配内存 Complex *p = static_cast\u003cComplex*\u003emem; // 类型转化 p-\u003eComplex(); // 调用构造函数 在底层实现机制上，new 也是调用了 malloc。但是与当初的 malloc 只分配内存、不调用构造函数不同，new 同时还保证了类的构造函数会被调用，以进行初始化操作。 new ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:22:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" delete 先调用析构函数，然后删除内存大小 delete ","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:23:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" array: new, deletenew 和 delete 一定要配对出现 单个 new 对应单个 delete array new 对应 array-delete，否则会出现只是析构了第一个类，而后面的对象没有完全析构，导致内存泄露。 auto p = new Complex[3]; delete[] p; array-new-delete static静态限定只有在第一次初始化的时候进行内存分配，以后所有的类实例都可以共享这个静态变量。 class A { public: static double m_data; static double get_data() { return m_data; } }; double A::mdata = 10; // 变量定义，所有实例共同使用 调用 static 函数的方式有两种： 通过类调用：A::get_data()，需要指定类作用域 通过实例调用：a.get_data() static 类模板推荐写类模板的方法： 先按照某个特定版本的类进行设计、编写、调试 待以上特定版本的类完成后，使用 template 类型进行替代 class-template namespace using directive using namespace std; using declaration using std::cout; using alias： using hiorder = hicloud::OrderData; namespace 标准库:std STL C++11 新特征","date":"2020-06-26","objectID":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/:24:0","tags":["c++","面向对象","编程","侯捷"],"title":"侯捷: C++ 面向对象高级编程","uri":"/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c++-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":"使用 Docker 封装程序的运行环境，实现开发-测试的快速部署。","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":"Docker 一些实用技巧。 安装","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:0:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" UbuntuUbuntu 操作系统的安装步骤可以参考官网说明 卸载旧版本 sudo apt-get remove docker docker-engine docker.io containerd runc Reading package lists... Done Building dependency tree Reading state information... Done Package 'docker-engine' is not installed, so not removed Package 'docker' is not installed, so not removed Package 'containerd' is not installed, so not removed Package 'docker.io' is not installed, so not removed Package 'runc' is not installed, so not removed 0 upgraded, 0 newly installed, 0 to remove and 43 not upgraded. 添加软件源 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - echo $(lsb_release -cs) Linux Mint Releases Version Codename Package base 19.1 Tessa Ubuntu Bionic 19 Tara Ubuntu Bionic 18.3 Sylvia Ubuntu Xenial 18.2 Sonya Ubuntu Xenial # sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu Bionic stable\" 开始安装 sudo apt-get update sudo apt install docker.io 设置启动服务 sudo systemctl start docker ## 添加开机启动 sudo systemctl enable docker 查看 Docker 版本 docker --version Docker version 19.03.6, build 369ce74a3c Docker 后台服务需要具有 sudo 权限。为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。 ## 建立 docker 组 sudo groupadd docker ## 把当前用户添加到 docker 组 sudo usermod -aG docker $USER 然后先退出账户(logout)，再次登录(login)即可使用 docker 命令了 运行试试看 docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 0e03bdcc26d7: Pull complete Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 如果还有出现以下的报错，需要修改权限 WARNING: Error loading config file: /home/william/.docker/config.json: stat /home/william/.docker/config.json: permission denied sudo chown william:william /home/william/.docker -R 由于某些原因，国内访问 Docker 的软件源速度是比较慢的。幸好，我们可以更改指定的源，使用国内阿里云或者网易可以大大的加速访问速度。 ## 修改 docker 配置文件 sudo vim /etc/docker/daemon.json { \"registry-mirrors\" : [ \"http://ovfftd6p.mirror.aliyuncs.com\", \"http://registry.docker-cn.com\", \"http://docker.mirrors.ustc.edu.cn\", \"http://hub-mirror.c.163.com\" ], \"insecure-registries\" : [ \"registry.docker-cn.com\", \"docker.mirrors.ustc.edu.cn\" ], \"debug\" : true, \"experimental\" : true } sudo systemctl restart docker.service ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:1:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" CentOS 删除旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 添加软件源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum update 安装 sudo yum install docker.io 也可以使用国内 daocloud 一键安装命令： ## 阿里 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ## daocloud curl -sSL https://get.daocloud.io/docker | sh 加入 docker 用户组命令 sudo usermod -aG docker trader 添加启动 sudo systemctl enable docker sudo systemctl start docker 运行测试 sudo docker run hello-world 基础概念 编写 Dockerfile可以使用一下的模板来编写一个测试使用的 CentOS7 开发环境 FROM centos:7 MAINTAINER WilliamFang LABEL Remarks=\"CentOS7.5 Develop\u0026Testing Environment\" RUN yum -y install vim git sudo \u0026\u0026 yum -y install make \u0026\u0026 \\ yum -y install gcc gcc-c++ kernel-devel \u0026\u0026 \\ yum -y install cmake bzip2 htop tldr pigz pbzip2 \u0026\u0026 \\ yum -y install bzip2-devel.x86_64 \u0026\u0026 \\ yum -y install libxslt-devel libffi-devel openssl-devel libcurl-devel ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin ENV LANG=en_US.UTF-8 ENV BASH_ENV=~/.bashrc \\ ENV=~/.bashrc \\ PROMPT_COMMAND=\"source ~/.bashrc\" 然后使用命令开始搭建 sudo docker build -t myctp:v1.0 . 然后就可以看到 docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE myctp v1.0 91b0c32f2935 2 minutes ago 564MB centos 7 b5b4d78bc90c 7 weeks ago 203MB 现在，我们就可以愉快的使用 Docker 进行测试了 ## 查看当前运行的 docker container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 说明当前还没有生成相应的实例。我们可以启动使用命令启动 ## 使用 REPOSITORY:TAG ## 使用 -v 可以挂载主机文件 docker run -dit -v /home/william:/mnt myctp:v1.0 /bin/bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2b40845d0309 myctp:v1.0 \"/bin/bash\" 4 seconds ago Up 3 seconds upbeat_montalcini docker run --name rshiny -dit -e USER=rshiny -e PASSWORD=ilovewuya -p 58787:8787 -p 53838:3838 wuya-centos7:v1.0 ## 添加用户，需要进入 docker 添加用户 docker exec -it rshiny /bin/bash sudo adduser tester sudo passwd tester 然后开始启动 ## 挂载到实例 docker exec -it b3c220b3c9c6 /bin/bash [root@b3c220b3c9c6 /]# whoami root [root@b3c220b3c9c6 /]# gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper Target: x86_64-redhat-linux Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux Thread model: posix gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) [root@b3c220b3c9c6 /]# 退出会依然可以看到程序在运行中 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b3c220b3c9c6 myctp:v1.0 \"/bin/bash\" 2 minutes ago Up 2 minutes gallant_bell ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:2:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 删除 ## 列出所有 docker ps -aq #＃ 删除指定 id docker rm ## 删除 image docker rmi 列出所有容器 ID docker ps -aq 查看所有运行或者不运行容器 docker ps -a 停止所有的 container（容器），这样才能够删除其中的 images： docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) 如果想要删除所有 container（容器）的话再加一个指令： docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) 查看当前有些什么 images docker images 删除 images（镜像），通过 image 的 id 来指定删除谁 docker rmi \u003cimage id\u003e 想要删除 untagged images，也就是那些 id 为的 image 的话可以用 docker rmi $(docker images | grep \"^\u003cnone\u003e\" | awk \"{print $3}\") 要删除全部 image（镜像）的话 docker rmi $(docker images -q) 强制删除全部 image 的话 docker rmi -f $(docker images -q) 从容器到宿主机复制 docker cp tomcat：/webapps/js/text.js /home/admin docker cp 容器名: 容器路径 宿主机路径 从宿主机到容器复制 docker cp /home/admin/text.js tomcat：/webapps/js docker cp 宿主路径中文件 容器名 容器路径 删除所有停止的容器 docker container prune 删除所有不使用的镜像 docker image prune --force --all或者docker image prune -f -a 停止、启动、杀死、重启一个容器 docker stop Name或者ID docker start Name或者ID docker kill Name或者ID docker restart name或者ID 发布 docker为了方便移植，Docker 允许我们通过两个方式来分享配置好的运行环境。 ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:3:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" Docker Hub通过使用 Docker Hub 来发布。 ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:4:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 提交 docker commit -a \"william\" -m \"myctp:v0.1\" -p myctp.new myctp:v0.1 ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:5:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 导出 docker save -o myctp.v0.1.tar myctp:v0.1 ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:6:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 导入 docker run -d --name myctp -it -v /home/william:/mnt myctp:v0.1 /bin/zsh ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:7:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 运行 docker exec -it myctp.new /bin/zsh ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:8:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 提交 Docker Hub docker login UserName: williamlfnag Password: ************ ## 标记需要处理的image docker tag myctp:v0.1.2 williamlfang/myctp REPOSITORY TAG IMAGE ID CREATED SIZE myctp v0.1.2 9c41f991a440 13 minutes ago 4.57GB williamlfang/myctp latest 9c41f991a440 13 minutes ago 4.57GB myctp v0.1.1 59c7bc923b02 3 days ago 4.02GB myctp v0.1 e8a31774a8c6 4 days ago 2.49GB centos 7 b5b4d78bc90c 8 weeks ago 203MB docker push williamlfang/myctp docker pull williamlfang/myctp 使用 williamlfang ## 显示当前可用镜像 docker image ls ## 如果没有 williamlfang/myctp docker pull williamlfang/myctp ## 再次确认已经下载到本地 docker image ls ## 基于此镜像生成 container docker run -d --name myctp.dockerhub -it williamlfang/myctp /bin/zsh ## 查看 docker 目前的所有 container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dcc7924f4c1a williamlfang/myctp \"/bin/zsh\" 4 seconds ago Up 3 seconds myctp.dockerhub c57d4de5205b f03a8c4cf617 \"/bin/zsh\" 12 days ago Exited (255) 4 minutes ago myctp b50399b23d5b myctp:v0.1 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.test 11953e12a6b5 e2c0099752c8 \"/bin/zsh\" 13 days ago Exited (137) 13 days ago myctp.new ## 进入 container 操作 docker exec -it myctp.dockerhub /bin/zsh 以下就是进入我们的操作系统后的截图显示 ⚡ root@centos7  /  j myctp anaconda-post.log bin data dev etc home lib lib64 log media mnt opt proc root run sbin srv sys tmp usr var /root/myCTP build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src ⚡ root@centos7  myCTP  ll build CMakeLists.txt config CTP踩坑记.md data deps include libs log scripts src total 64K drwxr-xr-x 11 root root 4.0K Jul 4 17:06 . dr-xr-x--- 1 root root 4.0K Jul 13 17:27 .. drwxr-xr-x 4 root root 4.0K Jul 4 16:59 build -rw-r--r-- 1 root root 5.6K Jul 4 16:51 CMakeLists.txt drwxr-xr-x 2 root root 4.0K Jul 4 16:37 config -rw-r--r-- 1 root root 5.0K Jul 4 16:37 CTP踩坑记.md drwx------ 3 root root 4.0K Jul 4 17:06 data drwxr-xr-x 5 root root 4.0K Jul 4 16:42 deps drwxr-xr-x 10 root root 4.0K Jul 4 16:37 include drwxr-xr-x 11 root root 4.0K Jul 4 16:59 libs drwx------ 4 root root 4.0K Jul 4 17:06 log drwxr-xr-x 2 root root 4.0K Jul 4 16:39 scripts drwxr-xr-x 10 root root 4.0K Jul 4 16:37 src 使用技巧可以执行变量名称 ## 增加额外运行参数 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_simnow \\ -v /home/william/mkdata:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 重新打 tag docker tag 8557026cb47e[原来的image id] registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 ## 报错无法删除 ## Ref: https://stackoverflow.com/questions/38118791/can-t-delete-docker-image-with-dependent-child-images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker rmi c565603bc87f # 设置日志文件 docker tag 29db0d77705f registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker push registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker pull registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=colo_gtja \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_hf \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker run -d \\ --name ctpmd -it \\ --restart=always \\ --log-driver json-file \\ --log-opt max-size=1000m \\ --log-opt max-file=30 \\ --network=\"host\" \\ --ipc=\"host\" \\ -e ACCOUNT=local_zz \\ -v /data:/data \\ registry.corp.highfortfunds.com/highfort/ctpmd:v0.1 docker exec -it ctpmd /bin/bash ","date":"2020-06-24","objectID":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/:9:0","tags":["Linux","Docker","开发","封装","测试","c++"],"title":"Docker 使用总结","uri":"/archives/2020-06-24-docker-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":"由于项目需要指定版本的 MySQL 连接，因此在这里记录如何通过命令行进行操作。","date":"2020-06-16","objectID":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/","tags":["MySQL",5.5,"Linux","Ubuntu"],"title":"MySQL: 指定安装版本5.5","uri":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/"},{"categories":["Programming"],"content":"参考连接：Is it possible to install MySQL 5.5 or 5.6 on Ubuntu 16.04? StackOverFlowStep by step guide* to install mysql 5.5.x on Ubuntu 16.04 Xenial-Xerus. Please see this documentation OR See steps below: Installing MySQL 5.5.51 on Ubuntu 16.06 Uninstall any existing version of MySQL sudo rm /var/lib/mysql/ -R Delete the MySQL profile sudo rm /etc/mysql/ -R Automatically uninstall mysql sudo apt-get autoremove mysql* --purge sudo apt-get remove apparmor Download version 5.5.51 from MySQL site wget https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.56-linux-glibc2.5-x86_64.tar.gz Add mysql user group sudo groupadd mysql Add mysql (not the current user) to mysql user group sudo useradd -g mysql mysql Extract mysql-5.5.51-linux2.6-x86_64.tar.gz to /usr/local cd /usr/local sudo tar -xvf mysql-5.5.49-linux2.6-x86_64.tar.gz Create mysql folder in /usr/local sudo mv mysql-5.5.49-linux2.6-x86_64 mysql Set mysql directory owner and user group cd mysql sudo chown -R mysql:mysql * Install the required lib package sudo apt-get install libaio1 Execute mysql installation script sudo scripts/mysql_install_db --user=mysql Set mysql directory owner from outside the mysql directory sudo chown -R root . Set data directory owner from inside mysql directory sudo chown -R mysql data Copy the mysql configuration file sudo cp support-files/my-medium.cnf /etc/my.cnf Start mysql sudo bin/mysqld_safe --user=mysql \u0026 sudo cp support-files/mysql.server /etc/init.d/mysql.server Initialize root user password sudo bin/mysqladmin -u root password '111111' Start mysql server sudo /etc/init.d/mysql.server start Stop mysql server sudo /etc/init.d/mysql.server stop Check status of mysql sudo /etc/init.d/mysql.server status Enable myql on startup sudo update-rc.d -f mysql.server defaults Disable mysql on startup (Optional) sudo update-rc.d -f mysql.server remove Add mysql path to the system sudo ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql Now directly use the command below to start mysql mysql -u root -p PS: One needs to reboot in order for the changes to take place. Based on a Chinese blog ubuntu 16.04 mysql 相关 ubuntu 16.04 mysql 相关","date":"2020-06-16","objectID":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/:0:0","tags":["MySQL",5.5,"Linux","Ubuntu"],"title":"MySQL: 指定安装版本5.5","uri":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/"},{"categories":["Programming"],"content":" 如何彻底卸载某一版本的数据库彻底删除ubuntu下的mysql： 1、删除mysql的数据文件 sudo rm /var/lib/mysql/ -R 2、删除mqsql的配置文件 sudo rm /etc/mysql/ -R 3自动卸载mysql的程序 sudo apt-get autoremove mysql* --purge sudo apt-get remove apparmor ","date":"2020-06-16","objectID":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/:0:1","tags":["MySQL",5.5,"Linux","Ubuntu"],"title":"MySQL: 指定安装版本5.5","uri":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/"},{"categories":["Programming"],"content":" ubuntu 16.04上如何安装mysql 5.5.49版本此网址打开以后选择linux－generic平台，最后一个文件 然后按以下步骤安装 参考官方原文 1、添加mysql用户组 sudo groupadd mysql 2、添加 mysql（不是当前用户）添加到 mysql 用户组 sudo useradd -g mysql mysql 3、解压 mysql-5.5.49-linux2.6-x86_64.tar.gz（我将此文件放在了git［当前用户］的文档文件夹中） 到 /usr/local 进入 /usr/local cd /usr/local sudo tar zvxf /home/git/文档/mysql-5.5.49-linux2.6-x86_64.tar.gz sudo mv mysql-5.5.49-linux2.6-x86_64 mysql 4、设置 mysql 目录的拥有者和所属的用户组 cd mysql sudo chown -R mysql . sudo chgrp -R mysql . 5、安装所需要lib包 sudo apt-get install libaio1 6、执行mysql 安装脚本 sudo scripts/mysql_install_db --user=mysql 7、再次设置 mysql 目录的拥有者 sudo chown -R root . 8、设置 data 目录的拥有者 sudo chown -R mysql data 9、复制 mysql 配置文件 sudo cp support-files/my-medium.cnf /etc/my.cnf 10、启动 mysql sudo bin/mysqld_safe --user=mysql \u0026 sudo cp support-files/mysql.server /etc/init.d/mysql.server 11、初始化 root 用户密码 sudo bin/mysqladmin -u root password '111111' 12、启动 sudo /etc/init.d/mysql.server start 13、停止 sudo /etc/init.d/mysql.server stop 14、查看状态 sudo /etc/init.d/mysql.server status 15、开机启动 sudo update-rc.d -f mysql.server defaults 16、停止开机启动 sudo update-rc.d -f mysql.server remove 17、把 /usr/local/mysql/bin/mysql 命令加到用户命令中，这样就不用每次都加 mysql命令的路径 sudo ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql 现在就直接可以使用 mysql 命令了 mysql -u root -p Written on April 30, 2016 Ubuntu 完全卸载、源代码安装 MySQL8.0首先用 dpkg –list|grep mysql 查看自己的 mysql 有哪些依赖 dpkg --list|grep mysql 先卸载 sudo apt-get remove mysql-common 然后： sudo apt-get autoremove --purge mysql-server-5.0 再查看，还剩什么就卸载什么 dpkg --list|grep mysql 最后清楚残留数据： dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P 就可以了 CentOS7：安装 MySQL5.5 ## 有可能报错：myriadb-libs ## 需要删除 rpm -qa | grep mariadb sudo rpm -ev --nodeps mariadb-libs-5.5.65-1.el7.x86_64 rpm -ev --nodeps mariadb-5.5.65-1.el7.x86_64 rpm -ev --nodeps mariadb-devel-5.5.65-1.el7.x86_64 rm /usr/lib64/mysql/libmysqlclient.so.18 rm -rf /var/lib/mysql/ rm -rf /usr/mysql/ rm -rf /usr/share/mysql rm -rf /etc/my.cnf rm -rf /var/log/mysqld.log ## 如果不删除，会影响新安装的 MySQL 无法写入密码 ## 安装 net-tools yum install net-tools ## 1. 先安装 MySQL-shared-compat sudo rpm -ivh MySQL-shared-compat-5.5.60-1.el7.x86_64.rpm ## 2. 接着安装 rpm -ivh MySQL-server-5.5.60-1.el7.x86_64.rpm ## 3. 然后安装 rpm -ivh MySQL-client-5.5.60-1.el7.x86_64.rpm ## 4. 继续安装 rpm -ivh MySQL-devel-5.5.60-1.el7.x86_64.rpm ## 5. 最后安装依赖包 rpm -ivh MySQL-shared-5.5.60-1.el7.x86_64.rpm rpm -ivh MySQL-shared-compat-5.5.60-1.el7.x86_64.rpm ## 启动 /etc/init.d/mysql start ## 修改密码 /usr/bin/mysqladmin -u root password '******' sudo mysql_install_db --datadir=/var/lib/mysql sudo chown mysql:mysql /var/lib/mysql -R ## 安全设置 /usr/bin/mysql_secure_installation ## 帮助 /usr/sbin/mysqld --help service mysql start mysql -uroot -p https://www.jianshu.com/p/fbd2686e3acb ","date":"2020-06-16","objectID":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/:0:2","tags":["MySQL",5.5,"Linux","Ubuntu"],"title":"MySQL: 指定安装版本5.5","uri":"/archives/mysql-%E6%8C%87%E5%AE%9A%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC5.5/"},{"categories":["Programming"],"content":"arguments:451 vim files function definition file not found。","date":"2020-06-15","objectID":"/archives/2020-06-15-zsh-%E6%8A%A5%E9%94%99-arguments-451-vim-files-function-definition-file-not-found/","tags":["zsh","vim"],"title":"zsh 报错: arguments:451: vim-files: function definition file not found","uri":"/archives/2020-06-15-zsh-%E6%8A%A5%E9%94%99-arguments-451-vim-files-function-definition-file-not-found/"},{"categories":["Programming"],"content":" rm -rf ~/.zcompdump* rm -rf ~/.z exec zsh ","date":"2020-06-15","objectID":"/archives/2020-06-15-zsh-%E6%8A%A5%E9%94%99-arguments-451-vim-files-function-definition-file-not-found/:0:0","tags":["zsh","vim"],"title":"zsh 报错: arguments:451: vim-files: function definition file not found","uri":"/archives/2020-06-15-zsh-%E6%8A%A5%E9%94%99-arguments-451-vim-files-function-definition-file-not-found/"},{"categories":["Programming"],"content":"使用 cgdb 进行代码调试。","date":"2020-05-31","objectID":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":["linux","gdb","cgdb","c++","调试","debug"],"title":"cgdb: 安装与使用","uri":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 安装","date":"2020-05-31","objectID":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["linux","gdb","cgdb","c++","调试","debug"],"title":"cgdb: 安装与使用","uri":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 安装 cgdb git clone git@github.com:cgdb/cgdb.git cd cgdb ./autogen.sh ## 安装依赖包 ## CentOS yum install ncurses-devel yum install texinfo ## 如果是 CentOS8 yum config-manager --set-enabled PowerTools yum install help2man yum install readline-devel yum install flex ## Ubuntu sudo apt-get install texinfo sudo apt-get install flex ./configure --prefix=/usr/local make -j sudo make install ","date":"2020-05-31","objectID":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["linux","gdb","cgdb","c++","调试","debug"],"title":"cgdb: 安装与使用","uri":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 配置参考官方说明：CGDB 中文手册。 vim ~/.cgdb/cgdbrc ## 忽略大小写 set ignorecase ## 高亮调试对应的代码行 set arrowstyle=highlight ## tab = 4 set tabstop==4 ## 显示发送的命令 set showtgdbcommands ## 重新加载 set autosourcereload set wso=vertical #set eld=shortarrow set autosourcereload ## 加了一个 F9 的快捷键，用于跳出循环 map \u003cF9\u003e :until\u003ccr\u003e ","date":"2020-05-31","objectID":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["linux","gdb","cgdb","c++","调试","debug"],"title":"cgdb: 安装与使用","uri":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":" 中文显示打印变量时可能出现中文字符乱码，可以根据以下步骤解决这个问题。 cd /lib/x86_64-linux-gnu ls -al libncurse* sudo rm -rf libncurses.so.5 sudo ln -s libncursesw.so.5.9 libncurses.so.5 试着打印中文字符变量，这时候就能正确显示了。 使用安装好了以后，输入“cgdb 要调试的程序名”即可以进行调试。 ","date":"2020-05-31","objectID":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["linux","gdb","cgdb","c++","调试","debug"],"title":"cgdb: 安装与使用","uri":"/archives/2020-05-31-cgdb--%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Programming"],"content":"无法找到 GLIBCXX 的解决方法。 ## Ubuntu cd /usr/lib/x86_64-linux-gnu/ ## CentOS cd /usr/lib64 ll |grep libstd strings libstdc++.so.6 | grep GLIBCXX ## 有可能找不到 GLIBCXX_3.2.26 locate libstdc++.so.6 strings /usr/local/gcc/lib64/libstdc++.so.6 | grep GLIBCXX cp /usr/local/gcc/lib64/libstdc++.so.6 /usr/lib/x86_64-linux-gnu strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX ","date":"2020-05-26","objectID":"/archives/2020-05-26-glibcxx--not-found/:0:0","tags":["Linux","c++","gnu","glib","cxx"],"title":"GLIBCXX: not found","uri":"/archives/2020-05-26-glibcxx--not-found/"},{"categories":["Programming"],"content":"通过设置新购的硬盘，实现系统的逻辑硬盘扩容。","date":"2020-05-25","objectID":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/","tags":["Linux","CentOS","磁盘","扩容","逻辑盘","LLVM"],"title":"","uri":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["Programming"],"content":"参考链接: linux新增大于2T硬盘，分区并挂载 Linux磁盘扩容后处理（parted） 最近公司给原来的服务器添加了一块 8T 的 DellSAS 硬盘，原来存放数据。由于Linux采用了逻辑硬盘LLVM的方式来组织多块硬盘，我们需要通过以下步骤，实现把新购硬盘添加到系统的逻辑硬盘，并通过磁盘扩容，增加目录 /data 的存储空间。 扩展 8T 硬盘 ## 可用 parted /dev/sda (parted) mklabel gpt (parted) unit s (parted) mkpart primary ext4 0% 100% ## 开始执行 sudo parted /dev/sdb # rm 用于删除 # rm 1 ## 查看 print ## mklabel gpt ## 创建分区 ## 只有一卷 mkpart primary xfs 1 -1 ## 安装比例分配 mkpart primary 0% 25% mkpart primary 26% 50% mkpart primary 51% 100% mkpart primary 0 100% ## 退出 quit ## 开始分区 sudo mkfs.ext4 /dev/sdb1 pvcreate /dev/sdb1 pvdisplay 新磁盘添加到逻辑盘 主要参考了网站的教程：手把手教你给 CentOS 7 添加硬盘及扩容(LVM) ","date":"2020-05-25","objectID":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:0:0","tags":["Linux","CentOS","磁盘","扩容","逻辑盘","LLVM"],"title":"","uri":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["Programming"],"content":" 添加物理分区 ## 使用 fdisk 查看新添加的硬盘信息：/dev/sdc: 8T fdisk -l ## 对新盘进行分区处理 fdisk /dev/sdc ## 主要使用命令 1. n: 添加新的物理分区 2. p: 选择主分区类型(1-4, 如果已经使用了 1（对应 /dev/sdc1），就选择 2，以此类推) 3. 起始扇区: 默认 4. Last扇区: 默认 5. t: 修改分区, 选择 1-4， 对应 /dev/sdc1-4 6. L: 列出所有的分区ID, 8e 为 Linux LVM 7. 8e: 8. w: 将修改写入磁盘 ## 使用 partprobe 命令重新读取分区表 partprobe ## 查看修改后的结果 fdisk -l ","date":"2020-05-25","objectID":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:1:0","tags":["Linux","CentOS","磁盘","扩容","逻辑盘","LLVM"],"title":"","uri":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["Programming"],"content":" 添加逻辑分区 # 创建新物理卷前查看 PV pvdisplay # 创建 PV, 对应 /dev/sdc1, /dev/sdc2,... pvcreate /dev/sdc1 # 再次查看，可看到新的 PV pvdisplay # 查看卷组 vgdisplay --- Volume group --- VG Name VolGroup ## 对应的 vg 名称 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 20 VG Access read/write VG Status resizable MAX LV 0 Cur LV 10 Open LV 9 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.27 TiB PE Size 4.00 MiB Total PE 1907074 Alloc PE / Size 1906176 / 7.27 TiB Free PE / Size 898 / 3.51 GiB VG UUID WZIDPF-5X39-1qac-L9oP-jCQm-C9im-pQBfs4 # 将新的 PV 加入 VolGroup 组卷，使用 vgdisplay 获取得到的 `VG Name` vgextend VolGroup /dev/sdc1 vgdisplay ## 查看当前逻辑磁盘的空间大小 lvdisplay ## 查看系统可用空间大小 vgdisplay 磁盘扩容 ## 查看文件路径对应的逻辑分卷 df Filesystem Size Used Avail Use% Mounted on /dev/mapper/VolGroup-LogVol07 689G 149G 506G 23% / tmpfs 79G 842M 78G 2% /dev/shm /dev/sda1 477M 184M 269M 41% /boot /dev/mapper/VolGroup-LogVol08 5.1T 3.4T 1.5T 71% /data /dev/mapper/VolGroup-LogVol06 1008G 610G 347G 64% /home /dev/mapper/VolGroup-LogVol01 59G 335M 56G 1% /opt /dev/mapper/VolGroup-LogVol02 59G 52M 56G 1% /private /dev/mapper/VolGroup-LogVol03 118G 1.1G 111G 1% /tmp /dev/mapper/VolGroup-LogVol04 355G 15G 322G 5% /usr /dev/mapper/VolGroup-LogVol05 217G 87G 119G 43% /var ## 查看系统可用空间大小 vgdisplay ## 开始进行磁盘扩展，增加 500G 到 /dev/mapper/VolGroup-LogVol08（也就是 /data） lvextend -L +500G /dev/mapper/VolGroup-LogVol08 xfs_growfs /dev/mapper/VolGroup-LogVol08 ## CentOS6 使用命令 resize2fs df -h ","date":"2020-05-25","objectID":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/:2:0","tags":["Linux","CentOS","磁盘","扩容","逻辑盘","LLVM"],"title":"","uri":"/archives/2020-05-25-linux--%E6%96%B0%E8%B4%AD%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/"},{"categories":["Programming"],"content":"安装 tensorflow。","date":"2020-05-16","objectID":"/archives/2020-05-16-r--%E5%AE%89%E8%A3%85-tensorflow/","tags":["R","tensorflow"],"title":"R: 安装 tensorflow","uri":"/archives/2020-05-16-r--%E5%AE%89%E8%A3%85-tensorflow/"},{"categories":["Programming"],"content":" Sys.setenv(TENSORFLOW_PYTHON=\"/home/fl/anaconda3/bin\") devtools::install_github(\"rstudio/tensorflow\") devtools::install_github(\"rstudio/keras\") library(tensorflow) hello \u003c- tf$constant(\"Hello\") print(hello) ","date":"2020-05-16","objectID":"/archives/2020-05-16-r--%E5%AE%89%E8%A3%85-tensorflow/:0:0","tags":["R","tensorflow"],"title":"R: 安装 tensorflow","uri":"/archives/2020-05-16-r--%E5%AE%89%E8%A3%85-tensorflow/"},{"categories":["Programming"],"content":"R4.0 正式发布了。本文将介绍如何通过源代码的方式进行安装。","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":"R4.0 正式发布上线了。新版本的代码在性能和编程方面均有出色的提升。本文将介绍如何通过源代码的方式安装程序，并在 Rstudio 当中指定可执行路径。 获取最新本 R可以通过官网找到相应的源代码压缩包。 cd ~/Downloads wget https://cran.rstudio.com/src/base/R-4/R-4.0.0.tar.gz tar -xvf R-4.0.0.tar.gz cd R-4.0.0 关于 BLAS The BLAS libraries are not part of the open source R binaries, but they speed up calculations that are common in many analytic methods. If you are going through the effort of building R from source you probably want to take advantage of the performance benefits that are enabled by the BLAS libraries. 安装参考这篇博客来安装依赖包：Compiling R-3.4.2 on CentOS 6 with GNU ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:0:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 安装 zlib wget http://zlib.net/zlib-1.2.11.tar.gz tar -zxvf zlib-1.2.11 cd zlib-1.2.11 configure --prefix=/usr/local/zlib-1.2.11 make -j make install export LD_LIBRARY_PATH=/usr/local/zlib-1.2.11/lib:$LD_LIBRARY_PATH ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:1:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 安装 bzip wget https://sourceforge.net/projects/bzip2/files/bzip2-1.0.6.tar.gz tar -xvf bzip2-1.0.6.tar.gz cd bzip2-1.0.6 make -f Makefile-libbz2_so make clean make -n install PREFIX=/usr/local/R4.0 make install PREFIX=/usr/local/R4.0 ## 或者直接安装 yum -y install cmake bzip2 htop tldr pigz pbzip2 ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:2:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 安装 liblzma or xz wget http://tukaani.org/xz/xz-5.2.3.tar.gz --no-check-certificate tar xzvf xz-5.2.3.tar.gz cd xz-5.2.3 ./configure --prefix=/usr/local/xz-5.2.3 make -j8 make install export LD_LIBRARY_PATH=/usr/local/xz-5.2.3/lib:$LD_LIBRARY_PATH ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:3:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 安装 pcre2pcre2简介 ## Ubuntu sudo apt-get install -y pcre2-utils libpcre2-dev ## CentOS sudo yum install -y pcre2-tools pcre2-devel ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:4:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 处理环境变量 export CFLAGS=\"-I/usr/local/zlib-1.2.11/include -I/usr/local/xz-5.2.3/include\" export LDFLAGS=\"-L/usr/local/zlib-1.2.11/lib -L/usr/local/bzip2-1.0.6/lib -L/usr/local/xz-5.2.3/lib -L/usr/local/xz-5.2.3/lib\" ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:5:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 安装 R ## --prefix 指定路径，如果没有，会自动创建 ## Note that the –enable-R-shlib option is required in order to ## make the underlying R shared library available to RStudio Server. ## link to the system BLAS libraries rather than use the R internal versions sudo ./configure --prefix=/usr/local/R4.0 --enable-R-shlib --with-blas --with-lapack --enable-utf8 LDFLAGS=\"-L/usr/local/zlib-1.2.11/lib -L/usr/local/bzip2-1.0.6/lib -L/usr/local/xz-5.2.3/lib -L/usr/local/xz-5.2.3/lib\" CFLAGS=\"-I/usr/local/zlib-1.2.11/include -I/usr/local/xz-5.2.3/include\" make -j ## 不管以前的错误，直接安装 make install ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:6:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":" 启动 /usr/local/R4.0/bin/R install.packages(\"https://github.com/jeroen/curl/archive/master.tar.gz\", repos = NULL) ","date":"2020-05-14","objectID":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/:7:0","tags":["R",4,"源代码","source"],"title":"R:4.0 源代码安装","uri":"/archives/r4.0-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85/"},{"categories":["Programming"],"content":"数据结构与算法编程的相关学习资源。","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" 网站","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:0:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" 演算法是什么","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:1:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" 算法笔记 本算法笔记采用Go语言描述，同时内部引用了Go的一些专有函数，如append()，这样做屏蔽了很多底层数据元素的操作细节，但是快速实现了数据结构，适合解题与实际应用，不是学院派风格。 ","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:2:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" Code::Force 讨论","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:3:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" All the good tutorials found for Competitive Programming","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:4:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" Good Blog Post Resources about Algorithm and Data Structures","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:5:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" awesome-competitive-programming A curated list of awesome Competitive Programming, Algorithm and Data Structure resources. ","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:6:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":" Awesome Competitive Programming","date":"2020-05-07","objectID":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/:7:0","tags":["Algorithms","算法","计算机"],"title":"算法学习资源","uri":"/archives/2020-05-07-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"categories":["Programming"],"content":"通过安装 Chrome 插件，解除 Medium 文章的阅读限制，实现无限畅饮功能。","date":"2020-04-30","objectID":"/archives/2020-04-30-%E6%97%A0%E9%99%90%E7%95%85%E9%A5%AE-medium-%E6%96%87%E7%AB%A0/","tags":["medium","unlimited","无限","chrome"],"title":"无限畅饮 Medium 文章","uri":"/archives/2020-04-30-%E6%97%A0%E9%99%90%E7%95%85%E9%A5%AE-medium-%E6%96%87%E7%AB%A0/"},{"categories":["Programming"],"content":"Medium 是一个推荐专业阅读文章的博客网站，上面的资讯是比较专业，也有一定的深度。这当然要归功与 Medium 花钱请了大佬长期驻扎在大本营。总结起来，Medium 的商业模式就是： 高价聘请专栏博客写主在上面发表专业的资讯文章 通过要求读者支付费用来实现盈利 当然，“博客收费”这个事情天经地义，合理合法，既尊重了知识产权，也保护了作者的利益，还能保证提供的是专业的信息。不过，今天我想要查看文章时，却一直跳窗出来让我加入会员，这个比较反感。为了，专门搜索了一圈，发现可以通过在 Chrome 浏览器安装一个小的插件，即可实现无限阅读的功能了。 安装参考连接：Medium Unlimited。安装上面的步骤进行安装即可。 阅读","date":"2020-04-30","objectID":"/archives/2020-04-30-%E6%97%A0%E9%99%90%E7%95%85%E9%A5%AE-medium-%E6%96%87%E7%AB%A0/:0:0","tags":["medium","unlimited","无限","chrome"],"title":"无限畅饮 Medium 文章","uri":"/archives/2020-04-30-%E6%97%A0%E9%99%90%E7%95%85%E9%A5%AE-medium-%E6%96%87%E7%AB%A0/"},{"categories":["Programming"],"content":"使用 Sublime 的时候，我们可以通过添加插件 BracketHighlighter 来高亮括号对应的代码段。","date":"2020-04-22","objectID":"/archives/2020-04-22-sublime--brackethighlighter-%E9%AB%98%E4%BA%AE%E6%8B%AC%E5%8F%B7/","tags":["Sublime","highligh","高亮","IDE"],"title":"Sublime: BracketHighlighter 高亮括号","uri":"/archives/2020-04-22-sublime--brackethighlighter-%E9%AB%98%E4%BA%AE%E6%8B%AC%E5%8F%B7/"},{"categories":["Programming"],"content":"在开发一个比较大的工程项目时，有时候我们会写一些比较长的代码块。如果没有良好的插件做辅助，单单凭借肉眼很难看清整个代码的层次关系。这时候，一款得心应手的代码块高亮工具就显得十分可贵。 像上面这个 c++ 代码，我们可以非常清晰的看到： 左侧边栏的 () 是否补全 在代码内部的逻辑层次 以上的实现是通过在 Sublime 安装插件 BracketHighlighter 来完成的。 项目地址：BracketHighlighter Documentation 安装打开 Sublime，使用 Shift+Ctrl+P 开始搜索软件名 BracketHighlighter，然后安装就可以了。 配置以下是我的配置方案 { // Debug logging \"debug_enable\": false, // When only either the left or right bracket can be found // this defines if the unmatched bracket should be shown. \"show_unmatched\": true, // Do the opposite of `show_unmatched` for the languages listed below \"show_unmatched_exceptions\": [], // Enable high visibility by default when sublime starts up // If sublime is already running and this gets changed, // you will not see any changes (restart required to see change) \"high_visibility_enabled_by_default\": false, // Experimental: Creates a visible bar at the beginning of all lines between // multiline bracket spans. // \"content_highlight_bar\": false, \"content_highlight_bar\": true, // Show hover popup // This will show a hover popup when mousing over // the visible bracket if the other // highlighted matching bracket is off screen. // It will show line text of the off screen bracket -/+ 128 chars // from the bracket start and end points. // A link will be available allowing the user to click and jump to // the other bracket. \"show_offscreen_bracket_popup\": true, // If enabled with `show_offscreen_bracket_popup`,the popup will be shown // even if brackets are onscreen. // \"show_bracket_popup_always\": false, \"show_bracket_popup_always\": true, // Adjust char per line context of bracket popup. \"popup_char_context\": 120, // Adjust number of lines of additional context // that are shown when brackets are vertically off screen. // Specified line count is split to context before and after the target line. // So a value of 4 would give you two lines of context before and two lines after. \"popup_line_context\": 2, // Experimental: Use `popup_bracket_emphasis` to customize the popup's bracket emphasis color \"use_custom_popup_bracket_emphasis\": false, // Experimental: Specify the scope (to get color) to emphasize the off screen bracket // in popups. Alternatively you can use a hex value in the form `#rgb` or `#rrggbb`. \"popup_bracket_emphasis\": \"keyword\", // Experimental: Align the content highlight bar at the bracket indent level // \"align_content_highlight_bar\": false, \"align_content_highlight_bar\": true, // Experimental: Allow bracket highlighter to search in widgets. // Most widgets use Plain Text which BH should ignore, // But regex find views views are usually regular expression // Which should be the only views to trigger BH. \"search_in_widgets\": false, // Show brackets in the minimap. // Depending on your highlight style, regions may not be visible in minimap. // \"underline\" won't show up due to it being a style consisting of // multiple zero width selections to create a fat underline. // But the following styles should show up fine as they are normal regions styles: // - thin_underline // - solid // - outline // - squiggly // - stippled // \"show_in_minimap\": false, \"show_in_minimap\": true, // High visibility style and color for high visibility mode // (`solid`|`outline`|`underline`) // ST3 has additional options of (`thin_underline`|`squiggly`|`stippled`) \"high_visibility_style\": \"outline\", // (scope|__default__|__bracket__) \"high_visibility_color\": \"__bracket__\", // Match brackets only when the cursor is touching the inside of the bracket \"match_only_adjacent\": false, // Outside adjacent bracket matching \"bracket_outside_adjacent\": true, // Experimental: Special matching mode for block cursor. // Essentially, this provides a matching mode that makes a little more // sense to some in regards to the visual representation of block cursors. // This will ignore `bracket_outside_adjacent`. \"block_cursor_mode\": false, // When `bracket_outside_adjacent` is set, and a plugin command explicitly sets // `no_outside_adj` to `None` instead of `true`","date":"2020-04-22","objectID":"/archives/2020-04-22-sublime--brackethighlighter-%E9%AB%98%E4%BA%AE%E6%8B%AC%E5%8F%B7/:0:0","tags":["Sublime","highligh","高亮","IDE"],"title":"Sublime: BracketHighlighter 高亮括号","uri":"/archives/2020-04-22-sublime--brackethighlighter-%E9%AB%98%E4%BA%AE%E6%8B%AC%E5%8F%B7/"},{"categories":["Programming"],"content":"通过 hicloudR 演示如何开发一个　Ｒ 软件包。","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" hicloudRR package for hicloud ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:0:0","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 开发指南假设这个包的名称叫 hicloudR ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:1:0","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 目录结构 需要建立一个 R 目录 添加 DESCRIPTION 用来说明开发包 添加 NAMESPACE 提供函数 ## 建立一个 R 目录 mkdir R ## 建立一个描述文档 touch DESCRIPTION ## 提供函数 touch NAMESPACE 在 DESCRIPTION 添加 Package: hicloudR Version: 0.1 在 ``NAMESPACE` 添加 ## 暴露所有函数 exportPattern(\"^[[:alpha:]]+\") ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:1:1","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 使用 Rcpp 在 DESCRIPTION 添加 Package: hicloudR Version: 0.1 LinkingTo: Rcpp Imports: Rcpp 在 NAMESPACE 添加 exportPattern(\"^[[:alpha:]]+\") useDynLib(hicloudR) importFrom(Rcpp, sourceCpp) 把 myRcpp.cpp 放在 src 目录下面 然后在这个包目录 （与 R、src 并行的）运行 tree -L 2 . ├── data ├── DESCRIPTION ├── man ├── NAMESPACE ├── R │ ├── about.R │ └── RcppExports.R ├── README.md ├── src │ ├── myRcpp.cpp │ └── RcppExports.cpp └── tests Rscript -e \"Rcpp::compileAttributes()\" 这样会生成两个文件 R/RcppExports.R src/RcppExports.cpp ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:2:0","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 打包打开终端执行 ## 需要跳转到上面一层 cd .. R CMD build hicloudR * checking for file ‘hicloudR/DESCRIPTION’ ... OK * preparing ‘hicloudR’: * checking DESCRIPTION meta-information ... OK * checking for LF line-endings in source and make files and shell scripts * checking for empty or unneeded directories * building ‘hicloudR_0.1.tar.gz’ ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:2:1","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 安装 R CMD INSTALL hicloudR_0.1.tar.gz * installing to library ‘/home/william/R/x86_64-pc-linux-gnu-library/3.6’ * installing *source* package ‘hicloudR’ ... ** using staged installation ** R ** byte-compile and prepare package for lazy loading 这是一个 hicloudR 的软件包，目前基于开源协议 MIT 进行创作。 所有版权归属汉云投资。 @williamlfang ** help No man pages found in package ‘hicloudR’ *** installing help indices ** building package indices ** testing if installed package can be loaded from temporary location ** testing if installed package can be loaded from final location ** testing if installed package keeps a record of temporary installation path * DONE (hicloudR) ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:2:2","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 使用 devtoolsdevtools 提供了更加优雅的方式，可以直接在 R 运行环境中进行构建 devtools::build() devtools::install() ❯ setwd('/home/william/Documents/hicloudR') ✔ 95.6 MiB master* ❯ devtools::build() ✔ checking for file ‘/home/william/Documents/hicloudR/DESCRIPTION’ ... ─ preparing ‘hicloudR’: ✔ checking DESCRIPTION meta-information ─ checking for LF line-endings in source and make files and shell scripts ─ checking for empty or unneeded directories ─ building ‘hicloudR_0.1.tar.gz’ [1] \"/home/william/Documents/hicloudR_0.1.tar.gz\" ❯ devtools::install() ✔ checking for file ‘/home/william/Documents/hicloudR/DESCRIPTION’ ... ─ preparing ‘hicloudR’: ✔ checking DESCRIPTION meta-information ─ checking for LF line-endings in source and make files and shell scripts ─ checking for empty or unneeded directories ─ building ‘hicloudR_0.1.tar.gz’ Running /usr/lib/R/bin/R CMD INSTALL /tmp/RtmpDbpRnz/hicloudR_0.1.tar.gz --install-tests * installing to library ‘/home/william/R/x86_64-pc-linux-gnu-library/3.6’ * installing *source* package ‘hicloudR’ ... ** using staged installation ** R ** byte-compile and prepare package for lazy loading 这是一个 hicloudR 的软件包，目前基于开源协议 MIT 进行创作。 所有版权归属汉云投资。 @williamlfang ** help No man pages found in package ‘hicloudR’ *** installing help indices ** building package indices ** testing if installed package can be loaded from temporary location ** testing if installed package can be loaded from final location ** testing if installed package keeps a record of temporary installation path * DONE (hicloudR) ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:2:3","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 托管到 github","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:3:0","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 添加 repo git add ./* git commit -m 'init' git push ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:3:1","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 安装然后就可以直接安装了 devtools::install_github(\"williamlfang/hicloudR\") ❯ devtools::install_github(\"williamlfang/hicloudR\") Downloading GitHub repo williamlfang/hicloudR@master ✔ checking for file ‘/tmp/RtmpDbpRnz/remotes41d42dcbca76/williamlfang-hicloudR-20b2dbf/DESCRIPTION’ ... ─ preparing ‘hicloudR’: ✔ checking DESCRIPTION meta-information ─ checking for LF line-endings in source and make files and shell scripts ─ checking for empty or unneeded directories ─ building ‘hicloudR_0.1.tar.gz’ Installing package into '/home/william/R/x86_64-pc-linux-gnu-library/3.6' (as 'lib' is unspecified) * installing *source* package ‘hicloudR’ ... ** using staged installation ** R ** byte-compile and prepare package for lazy loading 这是一个 hicloudR 的软件包，目前基于开源协议 MIT 进行创作。 所有版权归属汉云投资。 @williamlfang ** help No man pages found in package ‘hicloudR’ *** installing help indices ** building package indices ** testing if installed package can be loaded from temporary location ** testing if installed package can be loaded from final location ** testing if installed package keeps a record of temporary installation path * DONE (hicloudR) ","date":"2020-04-21","objectID":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:3:2","tags":["R","packages","devtools","开发","软件包","hicloud","hicloudR"],"title":"R: package 开发指南","uri":"/archives/2020-04-21-r--package-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"涵盖基本的 JupyterLab 配置说明。","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"jupyterlab 是対 ipython notebook 的全新改良版，提供了一个基于网页的功能套件，集成了多种数据分析工具，如 python、R、Julia 的内核。 安装 ## 使用 conda 安装，解决依赖包问题 conda install -c conda-forge jupyterlab ## 也可以使用 pip 安装 pip install jupyterlab ## 安装完成后查看版本信息 python -c \"import jupyterlab; print(jupyterlab.__version__)\" 设置","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:0:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 允许外部访问 ## 设置运行所有ip都可以访问 ---------------------------- ## The IP address the notebook server will listen on. ##c.NotebookApp.ip = 'localhost' c.NotebookApp.ip = '0.0.0.0' ## 设置默认端口打开 ----------------------------- ## The port the notebook server will listen on. ##c.NotebookApp.port = 8888 c.NotebookApp.port = 9999 ## 设置服务器端不要打开网页，使用客户端在浏览器打开 ----------------------------------- ## Whether to open in a browser after starting. The specific browser used is ## platform dependent and determined by the python standard library `webbrowser` ## module, unless it is overridden using the --browser (NotebookApp.browser) ## configuration option. ##c.NotebookApp.open_browser = True c.NotebookApp.open_browser = False ","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:1:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 显示 jupyter notebook list ","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:2:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 密码 cd ~ jupyter notebook --generate-config jupyter-notebook password ","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:3:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 端口 jupyter notebook --port 9999 启动 cd ~ fuser -k 8899/tcp nohup jupyter lab --no-browser --port=8899 \u0026 ","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:4:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 杀掉 ps aux |grep jupyter | awk '{print $2}' | xargs kill -9 端口转发在本地机器上执行 ## 如果已经占用端口，执行命令 fuser -k 9001/tcp sudo fuser -k 9001/tcp ## 启动后台服务 ## 9001 是本地， 8899 是远程服务器 nohup ssh -N -L 9001:localhost:8899 lhg@192.168.1.231 -p 22\u0026 ","date":"2020-04-20","objectID":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/:5:0","tags":["python","jupyter","anaconda"],"title":"JupyterLab: 配置指南","uri":"/archives/2020-04-20-jupyterlab--%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"R 是一门统计编程语言，提供了丰富的统计分析方法，并允许用户安装第三方软件库，可以快速地构建从想法到实践的全过程。但是 R 毕竟是一门解释性语言，天然具有一定的性能瓶颈。Rcpp 正是为了解决性能问题，实现了用户使用更高性能的编译语言 c++ 优化运行速度。","date":"2020-04-20","objectID":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","tags":["R","cpp","Rcpp","性能","效率","接口"],"title":"Rcpp: 开发指南","uri":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"R 是一门统计编程语言，提供了丰富的统计分析方法，并允许用户安装第三方软件库，可以快速地构建从想法到实践的全过程。但是 R 毕竟是一门解释性语言，天然具有一定的性能瓶颈。Rcpp 正是为了解决性能问题，实现了用户使用更高性能的编译语言 c++ 优化运行速度。 安装 Rcpp 开发","date":"2020-04-20","objectID":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:0:0","tags":["R","cpp","Rcpp","性能","效率","接口"],"title":"Rcpp: 开发指南","uri":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 使用 cppFunction","date":"2020-04-20","objectID":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:1:0","tags":["R","cpp","Rcpp","性能","效率","接口"],"title":"Rcpp: 开发指南","uri":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 使用 sourceRcpp 注意","date":"2020-04-20","objectID":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:2:0","tags":["R","cpp","Rcpp","性能","效率","接口"],"title":"Rcpp: 开发指南","uri":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" Reference v.s. Copy在 Rcpp 中，当我们把一个向量【赋值】给另外一个向量时，如果是使用 = (如 v2=v1)，则 v2 变成了 v1 的引用（reference），是 v1 的一个别名（alias）。也就是说，两者实际上依然指向同一个指针位置，从而修改 v2 会产生副作用：v1 也会跟着变化。 如果先完全复制一个向量，需要使用 clone 函数，此时两者就变成独立的变量了。 NumericVector v1 = {1,2,3}; // create a vector v1 NumericVector v2 = v1; // v1 is assigned to v2 through shallow copy. NumericVector v3 = clone(v1); // v1 is assigned to v3 through deep copy. v1[0] = 100; // changing value of a element of v1 // Following output shows that // the modification of v1 element // is also applied to v2 but not to v3 Rcout \u003c\u003c \"v1 = \" \u003c\u003c v1 \u003c\u003c endl; // 100 2 3 Rcout \u003c\u003c \"v2 = \" \u003c\u003c v2 \u003c\u003c endl; // 100 2 3 Rcout \u003c\u003c \"v3 = \" \u003c\u003c v3 \u003c\u003c endl; // 1 2 3 性能优化 参考链接 Rcpp FAQ：Dirk Eddelbuettel 亲自编写的关于 Rcpp 问题小结，短小精悍，非常值得一读。 Rcpp for everyone：可以说是非常通俗易懂的一个网上电子书，并且还提供实例。对于 c++ 基础相对薄弱的同学，Rcpp 的入门比较高，因此可以先对照着这本书上面的案例，从编写简单的 demo 开始逐步掌握。 ","date":"2020-04-20","objectID":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/:3:0","tags":["R","cpp","Rcpp","性能","效率","接口"],"title":"Rcpp: 开发指南","uri":"/archives/2020-04-20-rcpp--%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"用于测试服务器磁盘的IO读写性能。","date":"2020-04-18","objectID":"/archives/2020-04-18-dd--%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6/","tags":["io","性能"],"title":"dd: 测试磁盘IO读写速度","uri":"/archives/2020-04-18-dd--%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6/"},{"categories":["Programming"],"content":" ## 测试写速度 time dd if=/dev/zero of=/tmp/test bs=8k count=1000000 ## 测试读速度 time dd if=/tmp/test of=/dev/null bs=8k ## 测试读写速度 time dd if=/tmp/test of=/var/test bs=64k 参数说明： time有计时作用，dd用于复制，从if读出，写到of； if=/dev/zero不产生IO，因此可以用来测试纯写速度； 同理of=/dev/null不产生IO，可以用来测试纯读速度； 将/tmp/test拷贝到/var则同时测试了读写速度； bs是每次读或写的大小，即一个块的大小，count是读写块的数量。 ","date":"2020-04-18","objectID":"/archives/2020-04-18-dd--%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6/:0:0","tags":["io","性能"],"title":"dd: 测试磁盘IO读写速度","uri":"/archives/2020-04-18-dd--%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6/"},{"categories":["Programming"],"content":"增加阿里云服务器磁盘空间。","date":"2020-04-17","objectID":"/archives/2020-04-17-%E9%98%BF%E9%87%8C%E4%BA%91%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E4%B8%8E%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/","tags":["阿里云","扩容","fdisk","resize2fs"],"title":"阿里云磁盘扩容与扩展分区","uri":"/archives/2020-04-17-%E9%98%BF%E9%87%8C%E4%BA%91%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E4%B8%8E%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/"},{"categories":["Programming"],"content":" 在线扩容去阿里云控制台下单采购：在线扩容 采购完成后，大概经过 1 分钟左右，即可在对应的服务器看到增加的磁盘空间了 fdisk -l 但是，这时候直接使用 df -h 是无法看到实际的分区已经增加空间了。这是因为目前购买的这块硬盘，可以理解成\"裸硬盘\"，是需要经过设置才能增加到服务器的文件系统中。 扩展分区阿里提供了详细的操作指南：扩展分区和文件系统_Linux系统盘 ## 安装工具 yum install cloud-utils-growpart yum install xfsprogs ## 查看磁盘大小，包含扩容的空间 fdisk -l Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0008d73a Device Boot Start End Blocks Id System /dev/vda1 * 2048 104857566 52427759+ 83 Linux ## 查看文件系统，这时还没有增加，需要我们自己操作 df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 40G 33G 5.2G 87% / devtmpfs 1.9G 0 1.9G 0% /dev tmpfs 1.9G 0 1.9G 0% /dev/shm tmpfs 1.9G 360K 1.9G 1% /run tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup tmpfs 380M 0 380M 0% /run/user/1000 ## 从上面的 fdisk 看到磁盘在 /dev/vda ## 我们想要分配到 /dev/vda1 growpart /dev/vda 1 ## 调用resize2fs扩容文件系统 resize2fs /dev/vda1 ## 现在看已经成功扩展文件系统了 ## 总体是 50G df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 50G 32G 15G 69% / devtmpfs 1.9G 0 1.9G 0% /dev tmpfs 1.9G 0 1.9G 0% /dev/shm tmpfs 1.9G 360K 1.9G 1% /run tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup tmpfs 380M 0 380M 0% /run/user/1000 ","date":"2020-04-17","objectID":"/archives/2020-04-17-%E9%98%BF%E9%87%8C%E4%BA%91%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E4%B8%8E%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/:0:0","tags":["阿里云","扩容","fdisk","resize2fs"],"title":"阿里云磁盘扩容与扩展分区","uri":"/archives/2020-04-17-%E9%98%BF%E9%87%8C%E4%BA%91%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E4%B8%8E%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/"},{"categories":["Programming"],"content":"colorout 提供了自定义的终端输出主题配置。","date":"2020-04-16","objectID":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/","tags":["R","colorour","terminal","主题"],"title":"R:colorout 设置终端输出的主题颜色","uri":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":"项目地址：colorout 安装在终端运行 cd ~/Documents git clone https://github.com/jalvesaq/colorout.git R CMD INSTALL colorout 配置方案","date":"2020-04-16","objectID":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/:0:0","tags":["R","colorour","terminal","主题"],"title":"R:colorout 设置终端输出的主题颜色","uri":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":" 转化函数 to_ansi #' Helper for generating ansi color codes with hex color codes. #' #' After generating ansi color codes, feed input to `colorout::setOutputColors`. #' #' @param fg Foreground color in hex format (ie '#000000'). Leave blank for default. #' @param bg Background color in hex format (ie '#000000'). Leave blank for default. #' @param fo Formatting (see details) #' #' @details #' Value Formating #' 0 No formating #' 1 Bold or bright #' 2 Faint #' 3 Italic or inverse #' 4 Underline #' 5 Blink slowly #' 6 Blink quickly #' 7 Invert to_ansi \u003c- function(col, fg = '', bg = '', fo = '') { escape \u003c- '\\\\x1b[' if (fg != '') fg \u003c- { rgb_fg \u003c- col2rgb(fg) paste0(\"38;2;\", rgb_fg[1], \";\", rgb_fg[2], \";\", rgb_fg[3]) } if (bg != '') bg \u003c- { rgb_bg \u003c- col2rgb(bg) paste0(\";48;2;\", rgb_bg[1], \";\", rgb_bg[2], \";\", rgb_bg[3]) } fo \u003c- if (fo != '') paste0(';', fo) # Use `cat`, not `paste0`, for correctly printing escape char '\\x1b[' cat(col, ': ', escape, fg, bg, fo, 'm', '\\n', sep = '') } ","date":"2020-04-16","objectID":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/:1:0","tags":["R","colorour","terminal","主题"],"title":"R:colorout 设置终端输出的主题颜色","uri":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":" 主题配置 # Fill in color names, foreground colors, background colors and formatting (ie bold/italic). For default, leave it blank. theme \u003c- list( colors = c('white', 'black', 'snow', 'turquoise', 'dark_red', 'dark_green', 'yellow', 'green', 'red', 'yellow_bold'), foreground = c(\"#ECEFF4\", \"#4C566A\", '#D8DEE9', '#88C0D0', \"#B48EAD\", \"#8FBCBB\", \"#EBCB8B\", \"#A3BE8C\", \"#BF616A\", \"#EBCB8B\"), background = c(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"), formatting = c(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", 1) ) # - Manually copy \u0026 paste color codes (in character type) to `colorout::setOutputColors`. It's okay because you only set it once-and-for-all. Otherwise, you can assign the colors to variables and remove them after calling `colorout::setOutputColors` # - or assign them to variables AND make sure to remove them after calling `colorout::setOutputColors` because you don't want them to contaminate your environments. suppressMessages( { sink( \"/tmp/null\" ) invisible( mapply(to_ansi, theme[[1]], theme[[2]], theme[[3]], theme[[4]]) ) # capture.output( # invisible( mapply(to_ansi, theme[[1]], theme[[2]], theme[[3]], theme[[4]]) ), # file='NUL' # ) sink() } )) # white: \\x1b[38;2;236;239;244m # black: \\x1b[38;2;76;86;106m # snow: \\x1b[38;2;216;222;233m # turquoise: \\x1b[38;2;136;192;208m # dark_red: \\x1b[38;2;180;142;173m # dark_green: \\x1b[38;2;143;188;187m # yellow: \\x1b[38;2;235;203;139m # green: \\x1b[38;2;163;190;140m # red: \\x1b[38;2;191;97;106m # yellow_bold: \\x1b[38;2;235;203;139;1m # General ---------------------------------------- colorout::setOutputColors( index = '\\x1b[38;2;76;86;106m', normal = '\\x1b[38;2;216;222;233m', number = '\\x1b[38;2;236;239;244m', negnum = '\\x1b[38;2;180;142;173m', zero = '\\x1b[38;2;136;192;208m', zero.limit = 0.01, infinite = '\\x1b[38;2;236;239;244m', string = '\\x1b[38;2;235;203;139m', date = '\\x1b[38;2;236;239;244m', const = '\\x1b[38;2;136;192;208m', true = '\\x1b[38;2;163;190;140m', false = '\\x1b[38;2;191;97;106m', warn = '\\x1b[38;2;235;203;139m', stderror = '\\x1b[38;2;191;97;106m', error = '\\x1b[38;2;191;97;106m', verbose = FALSE ) # Custom patterns -------------------------------- # NOTE Do not copy all. Pick what you use/like. # _ {data.table} --------------------------------- colorout::addPattern('[0-9]*:', '\\x1b[38;2;143;188;187m') # Row num colorout::addPattern('---', '\\x1b[38;2;76;86;106m') # Row splitter colorout::addPattern('\u003c[a-z]*\u003e', '\\x1b[38;2;143;188;187m') # Col class ## Nord # colorout::addPattern('[0-9]*:', '\\x1b[38;2;143;188;187m') # Row num # colorout::addPattern('---', '\\x1b[38;2;76;86;106m') # Row splitter # colorout::addPattern('\u003c[a-z]*\u003e', '\\x1b[38;2;143;188;187m') # Col class ## Monokai # colorout::addPattern('[0-9]*:', '\\x1b[38;2;117;113;94m') # Row num # colorout::addPattern('---', '\\x1b[38;2;117;113;94m') # Row splitter # colorout::addPattern('\u003c[a-z]*\u003e', '\\x1b[38;2;117;113;94m') # Col class # _ `str` ---------------------------------------- # Class colorout::addPattern(' num ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' int ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' chr ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' Factor ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' Ord.factor ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' logi ', '\\x1b[38;2;143;188;187m') colorout::addPattern('function ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' dbl ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' lgcl ', '\\x1b[38;2;143;188;187m') colorout::addPattern(' cplx ', '\\x1b[38;2;143;188;187m') # Misc colorout::addPattern('$ ', '\\x1b[38;2;76;86;106m') # _ `str`, {mlr3} -------------------------------- # R6 field name colorout::addPattern('* [A-z]*:', '\\x1b[38;2;235;203;139m') colorout::addPattern(\"* [A-z]* [A-z]*:\", '\\x1b[38;2;235;203;139m') colorout::addPattern(\"* [A-z]* [A-z]* [A-z]*:\", '\\x1b[38;2;235;203;139m') colorout::addPattern(\"* [A-z]* [A-z]* [A-z]* [A-z]*:\", '\\x1b[38;2;235;203;139m') # So on... # Clean up rm(theme, to_ansi) ","date":"2020-04-16","objectID":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/:2:0","tags":["R","colorour","terminal","主题"],"title":"R:colorout 设置终端输出的主题颜色","uri":"/archives/2020-04-16-r-colorout-%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"},{"categories":["Programming"],"content":"feather 提供了快速序列化数据的文件存储格式，能够实现在　Ｒ 与　Python 之间共享数据存储对象。","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":" 更新看新闻报道，feather 现在正式升级为 Apache Arrow 项目成员，得到业内大佬们的提携，性能上更加优秀。 项目地址：Apache Arrow Python 的版本现在改成了 pyarrow R 的版本改成了 ``arrrow` ## python 安装 ## R 安装 install.packages(\"arrow\") arrow::install_arrow() 使用 R 与 Python 共同的数据存储文件格式：feather项目的详细介绍在github: https://github.com/wesm/feather ","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/:0:0","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":" python pip install feather-format ","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/:1:0","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":" R install.packages(\"feather\") %%bash ls -alh /home/william/20200414 total 2.4G drwx------ 2 william william 4.0K Apr 15 17:57 . drwxr-xr-x 107 william william 12K Apr 15 17:57 .. -rw-r--r-- 1 william william 6.4K Apr 14 08:37 commission.csv -rw-r--r-- 1 william william 1.6M Apr 14 08:37 instrument.csv -rw-r--r-- 1 william william 2.4G Apr 14 15:32 tick.csv ","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/:2:0","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":" 性能测试: python import pandas as pd import numpy as np import feather %time tick_csv = pd.read_csv(\"/home/william/20200414/tick.csv\") for col in tick_csv.columns[6:]: tick_csv[col] = tick_csv[col].astype(float) \u003cstring\u003e:2: DtypeWarning: Columns (6,7,13,14,15,16,17,19) have mixed types.Specify dtype option on import or set low_memory=False. CPU times: user 37.1 s, sys: 3.31 s, total: 40.4 s Wall time: 41.1 s tick_csv.head(10) len(tick_csv) 13373363 ## 写文件相对比较慢，因为要做序列化 %time tick_csv.to_feather(\"/home/william/20200414/tick.feather\") CPU times: user 3.26 s, sys: 1.49 s, total: 4.75 s Wall time: 6.13 s ## 读文件非常快 %time tick_feather = pd.read_feather(\"/home/william/20200414/tick.feather\") CPU times: user 4.34 s, sys: 1.51 s, total: 5.85 s Wall time: 5.15 s tick_feather.head(10) len(tick_feather) 13373363 ","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/:3:0","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":" 性能测试: R %load_ext rpy2.ipython %%R library(data.table) %%R system.time({dt \u003c- fread('/home/william/20200414/tick.csv', verbose = FALSE, showProgress = FALSE)}) user system elapsed 63.591 1.474 18.146 %%R head(dt) %%R system.time({dt_feather \u003c- feather::read_feather('/home/william/20200414/tick.feather')}) user system elapsed 8.342 0.761 9.112 %%R head(dt_feather) %%R system.time({ fst::write_fst(dt, \"/home/william/20200414/tick.fst\") }) user system elapsed 10.718 1.065 4.356 %%R system.time({ dt_fst \u003c- fst::read_fst(\"/home/william/20200414/tick.fst\", as.data.table = TRUE) }) user system elapsed 6.918 0.751 5.671 R -\u003e Python from rpy2.robjects import r, pandas2ri pandas2ri.activate() %%R r_data = data.table(x = 1, y = 2) r.r_data x y 1 1.0 2.0 py_data = r.r_data print(py_data) x y 1 1.0 2.0 ","date":"2020-04-15","objectID":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/:4:0","tags":["feather","R","python","数据存储"],"title":"feather:在R与python之间共享数据存储格式","uri":"/archives/2020-04-15-feather-%E5%9C%A8r%E4%B8%8Epython%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"},{"categories":["Programming"],"content":"lbzip2 实现了多线程进行压缩、解压。 安装 wget https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/lbzip2/2.5-2/lbzip2_2.5.orig.tar.bz2 tar -xvf lbzip2_2.5.orig.tar.bz2 cd lbzip2-2.5 sudo ./configure --prefix=/usr sudo make -j sudo make install 对比演示文件信息 -rw-r--r--. 1 1001 1001 5.2G Apr 14 15:15 20200414.csv -rw-r--r--. 1 root hy 1007M Apr 15 10:58 20200414.tar.bz2 ","date":"2020-04-15","objectID":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/:0:0","tags":["lbzip2","bz2","压缩","解压","多线程"],"title":"lbzip2 多线程并行压缩、解压","uri":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/"},{"categories":["Programming"],"content":" lbzip2 time tar -cvf - 20200414.csv | lbzip2 \u003e 20200414.tar.bz2 real 0m19.618s user 9m48.298s sys 0m22.568s ","date":"2020-04-15","objectID":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/:1:0","tags":["lbzip2","bz2","压缩","解压","多线程"],"title":"lbzip2 多线程并行压缩、解压","uri":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/"},{"categories":["Programming"],"content":" pbzip2 time tar -cvf - 20200414.csv | pbzip2 \u003e 20200414.tar.bz2 real 0m52.157s user 21m41.673s sys 0m32.150s ","date":"2020-04-15","objectID":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/:2:0","tags":["lbzip2","bz2","压缩","解压","多线程"],"title":"lbzip2 多线程并行压缩、解压","uri":"/archives/2020-04-15-lbzip2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B/"},{"categories":["Programming"],"content":"在服务器上面挂载另外一台服务器磁盘，像读取本地文件一样使用远程服务器磁盘。 ## https://unix.stackexchange.com/questions/37168/unable-to-use-o-allow-other-with-sshfs-option-enabled-in-fuse-conf vim /etc/fuse.conf # Set the maximum number of FUSE mounts allowed to non-root users. # The default is 1000. # #mount_max = 1000 # Allow non-root users to specify the 'allow_other' or 'allow_root' # mount options. # user_allow_other chmod a+r /etc/fuse.conf ## ubuntu sudo apt install sshfs sudo apt install fuse ## CentOS sudo yum install sshfs sudo yum install fuse ## cd /mnt mkdir From135 chmod -R 777 /mnt/From135 ## sshfs trader@192.168.1.135:/ /mnt/From135 -o port=22,compression=yes,reconnect,idmap=user,allow_other -o ro alias mount.135='sshfs trader@192.168.1.135:/data /mnt/From135 -o reconnect,idmap=user,allow_other -o ro' alias unmount.135='fusermount -u /mnt/From135 \u0026\u0026 umount -l /mnt/From135' ","date":"2020-04-14","objectID":"/archives/2020-04-14-sshfs-%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82%E8%BD%BD/:0:0","tags":["ssh","sshfs","remote","服务器","挂载"],"title":"sshfs 远程服务器挂载","uri":"/archives/2020-04-14-sshfs-%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82%E8%BD%BD/"},{"categories":["Programming"],"content":"通过指定编译器路径，实现不同项目的构建。","date":"2020-04-08","objectID":"/archives/2020-04-08-cmake-%E6%8C%87%E5%AE%9A%E7%BC%96%E8%AF%91%E5%99%A8%E8%B7%AF%E5%BE%84/","tags":["cmake","g++"],"title":"cmake 指定编译器路径","uri":"/archives/2020-04-08-cmake-%E6%8C%87%E5%AE%9A%E7%BC%96%E8%AF%91%E5%99%A8%E8%B7%AF%E5%BE%84/"},{"categories":["Programming"],"content":"原来是在 CMakeLists.txt 里设置编译器路径，但是发现这个没有生效： set(CMAKE_CXX_COMPILER g++) 后面在 SO 上面找到答案：需要使用 export 指定路径。How to specify new GCC path for CMake export CC=/usr/local/bin/gcc export CXX=/usr/local/bin/g++ cmake /path/to/your/project make 这里提醒一下，尽量避免使用 set 语句。 使用set()在CMakeLists.txt 文件中设置CMAKE_FOO_COMPILER 变量值为有效的编译器名称或者全路径。必须在任何语言之前调用set（比如project()或enable_language()）。 ","date":"2020-04-08","objectID":"/archives/2020-04-08-cmake-%E6%8C%87%E5%AE%9A%E7%BC%96%E8%AF%91%E5%99%A8%E8%B7%AF%E5%BE%84/:0:0","tags":["cmake","g++"],"title":"cmake 指定编译器路径","uri":"/archives/2020-04-08-cmake-%E6%8C%87%E5%AE%9A%E7%BC%96%E8%AF%91%E5%99%A8%E8%B7%AF%E5%BE%84/"},{"categories":["Programming"],"content":"在 zsh 中无法使用 vim 自动补全功能。","date":"2020-04-08","objectID":"/archives/2020-04-08-zsh-%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8--_arguments-451--_vim_files--function-definition-file-not-found/","tags":["zsh","vim"],"title":"zsh 无法使用 vim 自动补全: _arguments:451: _vim_files: function definition file not found","uri":"/archives/2020-04-08-zsh-%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8--_arguments-451--_vim_files--function-definition-file-not-found/"},{"categories":["Programming"],"content":"在 zsh 中使用 vim 补全功能时，会出现以下报错： _arguments:451: _vim_files: function definition file not found 参考 SO 的答疑：zsh fails at path completition when command is vim。 解决方法是： rm $ZSH_COMPDUMP ## 一定要执行一次 exec zsh ","date":"2020-04-08","objectID":"/archives/2020-04-08-zsh-%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8--_arguments-451--_vim_files--function-definition-file-not-found/:0:0","tags":["zsh","vim"],"title":"zsh 无法使用 vim 自动补全: _arguments:451: _vim_files: function definition file not found","uri":"/archives/2020-04-08-zsh-%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8-vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8--_arguments-451--_vim_files--function-definition-file-not-found/"},{"categories":["Programming"],"content":"loguru 是一款轻量级的　ｃ++ 日志模块，提供了多种格式的日志输出，并且可以使用 fmtlib 的格式化。 总结： 如果使用 fmtlib，则需要在编译静态库的时候，设置 include 之前添加 #define LOGURU_USE_FMTLIB 1 #include \"loguru.hpp\" 编译可执行的时候，需要确保先链接 loguru，然后在链接 fmt target_link_libraries(ctpmd PRIVATE thostmduserapi_se # NanoLog # fmt loguru fmt ## 确定 fmt 是在后面 yaml-cpp ) loguru 安装由于我们后面需要使用 fmtlib 模块用于更好的输出日志，所以需要先进行安装。 ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:0:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 安装 fmtlib cd ~/Downloads git clone git@github.com:fmtlib/fmt.git mkdir build cd build sudo cmake .. sudo make sudo install ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:1:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 安装 loguru首先，我们把这个项目拷贝到本地，然后再通过修改相应的模块。 git clone git@github.com:emilk/loguru.git 定制 loguru由于这个提供了源代码，我们可以根据公司的日志记录需要，进行定制化配置。 ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:2:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 修改日志头文件 // vim loguru.cpp // 1. 修改日志表头的显示 // #define LOGURU_PREAMBLE_WIDTH (53 + LOGURU_THREADNAME_WIDTH + LOGURU_FILENAME_WIDTH) #define LOGURU_PREAMBLE_WIDTH (57 + LOGURU_THREADNAME_WIDTH + LOGURU_FILENAME_WIDTH) ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:3:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 修改 micro 精确的时间戳 // vim loguru.cpp //## 2. 增加 micro 时间戳 void write_date_time(char* buff, size_t buff_size) { auto now = system_clock::now(); long long ms_since_epoch = duration_cast\u003cmicroseconds\u003e(now.time_since_epoch()).count(); time_t sec_since_epoch = time_t(ms_since_epoch / 1000000); tm time_info; localtime_r(\u0026sec_since_epoch, \u0026time_info); snprintf(buff, buff_size, \"%04d%02d%02d_%02d%02d%02d.%06lld\", 1900 + time_info.tm_year, 1 + time_info.tm_mon, time_info.tm_mday, time_info.tm_hour, time_info.tm_min, time_info.tm_sec, ms_since_epoch % 1000000); } ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:4:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 打印 micro 时间戳 // vim loguru.cpp // 打印 micro 时间戳 static void print_preamble(char* out_buff, size_t out_buff_size, Verbosity verbosity, const char* file, unsigned line) { if (out_buff_size == 0) { return; } out_buff[0] = '\\0'; if (!g_preamble) { return; } long long ms_since_epoch = duration_cast\u003cmicroseconds\u003e(system_clock::now().time_since_epoch()).count(); time_t sec_since_epoch = time_t(ms_since_epoch / 1000000); tm time_info; localtime_r(\u0026sec_since_epoch, \u0026time_info); auto uptime_ms = duration_cast\u003cmilliseconds\u003e(steady_clock::now() - s_start_time).count(); auto uptime_sec = uptime_ms / 1000.0; char thread_name[LOGURU_THREADNAME_WIDTH + 1] = {0}; get_thread_name(thread_name, LOGURU_THREADNAME_WIDTH + 1, true); if (s_strip_file_path) { file = filename(file); } char level_buff[6]; const char* custom_level_name = get_verbosity_name(verbosity); if (custom_level_name) { snprintf(level_buff, sizeof(level_buff) - 1, \"%s\", custom_level_name); } else { snprintf(level_buff, sizeof(level_buff) - 1, \"% 4d\", verbosity); } long pos = 0; if (g_preamble_date \u0026\u0026 pos \u003c out_buff_size) { pos += snprintf(out_buff + pos, out_buff_size - pos, \"%04d-%02d-%02d \", 1900 + time_info.tm_year, 1 + time_info.tm_mon, time_info.tm_mday); } if (g_preamble_time \u0026\u0026 pos \u003c out_buff_size) { pos += snprintf(out_buff + pos, out_buff_size - pos, \"%02d:%02d:%02d.%06lld \", time_info.tm_hour, time_info.tm_min, time_info.tm_sec, ms_since_epoch % 1000000); } if (g_preamble_uptime \u0026\u0026 pos \u003c out_buff_size) { //pos += snprintf(out_buff + pos, out_buff_size - pos, \"(%8.3fs) \", // uptime_sec); pos += snprintf(out_buff + pos, out_buff_size - pos, \"(%9.3fs) \", uptime_sec); } if (g_preamble_thread \u0026\u0026 pos \u003c out_buff_size) { pos += snprintf(out_buff + pos, out_buff_size - pos, \"[%-*s]\", LOGURU_THREADNAME_WIDTH, thread_name); } if (g_preamble_file \u0026\u0026 pos \u003c out_buff_size) { char shortened_filename[LOGURU_FILENAME_WIDTH + 1]; snprintf(shortened_filename, LOGURU_FILENAME_WIDTH + 1, \"%s\", file); pos += snprintf(out_buff + pos, out_buff_size - pos, \"%*s:%-5u \", LOGURU_FILENAME_WIDTH, shortened_filename, line); } if (g_preamble_verbose \u0026\u0026 pos \u003c out_buff_size) { pos += snprintf(out_buff + pos, out_buff_size - pos, \"%4s\", level_buff); } if (g_preamble_pipe \u0026\u0026 pos \u003c out_buff_size) { pos += snprintf(out_buff + pos, out_buff_size - pos, \"| \"); } } ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:5:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 修改函数运行时间计数器 // vim loguru.cpp // 3.修改函数运行时间 #if LOGURU_VERBOSE_SCOPE_ENDINGS auto duration_sec = (now_ns() - _start_time_ns) / 1e9; #if LOGURU_USE_FMTLIB //auto buff = textprintf(\"{:.{}f} s: {:s}\", duration_sec, LOGURU_SCOPE_TIME_PRECISION, _name); auto buff = textprintf(\"[{:.{}f} s]: {:s}\", duration_sec, LOGURU_SCOPE_TIME_PRECISION, _name); #else //auto buff = textprintf(\"%.*f s: %s\", LOGURU_SCOPE_TIME_PRECISION, duration_sec, _name); auto buff = textprintf(\"[%.*f s: %s]\", LOGURU_SCOPE_TIME_PRECISION, duration_sec, _name); #endif ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:6:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" 增加 fmtlib 支持 // vim loguru.hpp // 增加 fmt 支持 #define LOGURU_USE_FMTLIB 1 #include \"loguru.hpp\" #ifndef LOGURU_SCOPE_TIME_PRECISION // Resolution of scope timers. 3=ms, 6=us, 9=ns // #define LOGURU_SCOPE_TIME_PRECISION 3 #define LOGURU_SCOPE_TIME_PRECISION 6 #endif #ifndef LOGURU_FILENAME_WIDTH // Width of the column containing the file name // #define LOGURU_FILENAME_WIDTH 23 #define LOGURU_FILENAME_WIDTH 18 #endif #ifndef LOGURU_THREADNAME_WIDTH // Width of the column containing the thread name // #define LOGURU_THREADNAME_WIDTH 16 #define LOGURU_THREADNAME_WIDTH 12 #endif 编译静态库 ## CMakeLists.txt project(loguru) cmake_minimum_required(VERSION 3.10) set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -o3\") set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/) add_library(loguru STATIC loguru.cpp) target_link_libraries(loguru fmt) 我的配置方案","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:7:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" loguru.hpp /* Loguru logging library for C++, by Emil Ernerfeldt. www.github.com/emilk/loguru If you find Loguru useful, please let me know on twitter or in a mail! Twitter: @ernerfeldt Mail: emil.ernerfeldt@gmail.com Website: www.ilikebigbits.com # License This software is in the public domain. Where that dedication is not recognized, you are granted a perpetual, irrevocable license to copy, modify and distribute it as you see fit. # Inspiration Much of Loguru was inspired by GLOG, https://code.google.com/p/google-glog/. The choice of public domain is fully due Sean T. Barrett and his wonderful stb libraries at https://github.com/nothings/stb. # Version history * Version 0.1.0 - 2015-03-22 - Works great on Mac. * Version 0.2.0 - 2015-09-17 - Removed the only dependency. * Version 0.3.0 - 2015-10-02 - Drop-in replacement for most of GLOG * Version 0.4.0 - 2015-10-07 - Single-file! * Version 0.5.0 - 2015-10-17 - Improved file logging * Version 0.6.0 - 2015-10-24 - Add stack traces * Version 0.7.0 - 2015-10-27 - Signals * Version 0.8.0 - 2015-10-30 - Color logging. * Version 0.9.0 - 2015-11-26 - ABORT_S and proper handling of FATAL * Version 1.0.0 - 2016-02-14 - ERROR_CONTEXT * Version 1.1.0 - 2016-02-19 - -v OFF, -v INFO etc * Version 1.1.1 - 2016-02-20 - textprintf vs strprintf * Version 1.1.2 - 2016-02-22 - Remove g_alsologtostderr * Version 1.1.3 - 2016-02-29 - ERROR_CONTEXT as linked list * Version 1.2.0 - 2016-03-19 - Add get_thread_name() * Version 1.2.1 - 2016-03-20 - Minor fixes * Version 1.2.2 - 2016-03-29 - Fix issues with set_fatal_handler throwing an exception * Version 1.2.3 - 2016-05-16 - Log current working directory in loguru::init(). * Version 1.2.4 - 2016-05-18 - Custom replacement for -v in loguru::init() by bjoernpollex * Version 1.2.5 - 2016-05-18 - Add ability to print ERROR_CONTEXT of parent thread. * Version 1.2.6 - 2016-05-19 - Bug fix regarding VLOG verbosity argument lacking (). * Version 1.2.7 - 2016-05-23 - Fix PATH_MAX problem. * Version 1.2.8 - 2016-05-26 - Add shutdown() and remove_all_callbacks() * Version 1.2.9 - 2016-06-09 - Use a monotonic clock for uptime. * Version 1.3.0 - 2016-07-20 - Fix issues with callback flush/close not being called. * Version 1.3.1 - 2016-07-20 - Add LOGURU_UNSAFE_SIGNAL_HANDLER to toggle stacktrace on signals. * Version 1.3.2 - 2016-07-20 - Add loguru::arguments() * Version 1.4.0 - 2016-09-15 - Semantic versioning + add loguru::create_directories * Version 1.4.1 - 2016-09-29 - Customize formating with LOGURU_FILENAME_WIDTH * Version 1.5.0 - 2016-12-22 - LOGURU_USE_FMTLIB by kolis and LOGURU_WITH_FILEABS by scinart * Version 1.5.1 - 2017-08-08 - Terminal colors on Windows 10 thanks to looki * Version 1.6.0 - 2018-01-03 - Add LOGURU_RTTI and LOGURU_STACKTRACES settings * Version 1.7.0 - 2018-01-03 - Add ability to turn off the preamble with loguru::g_preamble * Version 1.7.1 - 2018-04-05 - Add function get_fatal_handler * Version 1.7.2 - 2018-04-22 - Fix a bug where large file names could cause stack corruption (thanks @ccamporesi) * Version 1.8.0 - 2018-04-23 - Shorten long file names to keep preamble fixed width * Version 1.9.0 - 2018-09-22 - Adjust terminal colors, add LOGURU_VERBOSE_SCOPE_ENDINGS, add LOGURU_SCOPE_TIME_PRECISION, add named log levels * Version 2.0.0 - 2018-09-22 - Split loguru.hpp into loguru.hpp and loguru.cpp * Version 2.1.0 - 2019-09-23 - Update fmtlib + add option to loguru::init to NOT set main thread name. # Compiling Just include \u003cloguru.hpp\u003e where you want to use Loguru. Then, in one .cpp file #include \u003cloguru.cpp\u003e Make sure you compile with -std=c++11 -lstdc++ -lpthread -ldl # Usage For details, please see the official documentation at emilk.github.io/loguru #include \u003cloguru.hpp\u003e int main(int argc, char* argv[]) { loguru::init(argc, argv); // Put every log message in \"everything.log\": loguru::add_file(\"everything.log\", loguru::Append, loguru::Verbosity_MAX); LOG_F(INFO, \"The magic number is %d\", 42); } */ #if defined(LOGURU_IMPLEMENTATIO","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:8:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" loguru.cpp #ifndef _WIN32 // Disable all warnings from gcc/clang: #pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Wpragmas\" #pragma GCC diagnostic ignored \"-Wc++98-compat\" #pragma GCC diagnostic ignored \"-Wc++98-compat-pedantic\" #pragma GCC diagnostic ignored \"-Wexit-time-destructors\" #pragma GCC diagnostic ignored \"-Wformat-nonliteral\" #pragma GCC diagnostic ignored \"-Wglobal-constructors\" #pragma GCC diagnostic ignored \"-Wgnu-zero-variadic-macro-arguments\" #pragma GCC diagnostic ignored \"-Wmissing-prototypes\" #pragma GCC diagnostic ignored \"-Wpadded\" #pragma GCC diagnostic ignored \"-Wsign-compare\" #pragma GCC diagnostic ignored \"-Wsign-conversion\" #pragma GCC diagnostic ignored \"-Wunknown-pragmas\" #pragma GCC diagnostic ignored \"-Wunused-macros\" #pragma GCC diagnostic ignored \"-Wzero-as-null-pointer-constant\" #else #ifdef _MSC_VER #pragma warning(push) #pragma warning(disable:4018) #endif // _MSC_VER #endif #define LOGURU_USE_FMTLIB 1 #include \"loguru.hpp\" #ifndef LOGURU_HAS_BEEN_IMPLEMENTED #define LOGURU_HAS_BEEN_IMPLEMENTED // #define LOGURU_PREAMBLE_WIDTH (53 + LOGURU_THREADNAME_WIDTH + LOGURU_FILENAME_WIDTH) #define LOGURU_PREAMBLE_WIDTH (57 + LOGURU_THREADNAME_WIDTH + LOGURU_FILENAME_WIDTH) #undef min #undef max #include \u003calgorithm\u003e #include \u003catomic\u003e #include \u003cchrono\u003e #include \u003ccstdarg\u003e #include \u003ccstdio\u003e #include \u003ccstdlib\u003e #include \u003ccstring\u003e #include \u003cmutex\u003e #include \u003cregex\u003e #include \u003cstring\u003e #include \u003cthread\u003e #include \u003cvector\u003e #ifdef _WIN32 #include \u003cdirect.h\u003e #define localtime_r(a, b) localtime_s(b, a) // No localtime_r with MSVC, but arguments are swapped for localtime_s #else #include \u003csignal.h\u003e #include \u003csys/stat.h\u003e // mkdir #include \u003cunistd.h\u003e // STDERR_FILENO #endif #ifdef __linux__ #include \u003clinux/limits.h\u003e // PATH_MAX #elif !defined(_WIN32) #include \u003climits.h\u003e // PATH_MAX #endif #ifndef PATH_MAX #define PATH_MAX 1024 #endif #ifdef __APPLE__ #include \"TargetConditionals.h\" #endif // TODO: use defined(_POSIX_VERSION) for some of these things? #if defined(_WIN32) || defined(__CYGWIN__) #define LOGURU_PTHREADS 0 #define LOGURU_WINTHREADS 1 #ifndef LOGURU_STACKTRACES #define LOGURU_STACKTRACES 0 #endif #elif defined(__rtems__) || defined(__ANDROID__) || defined(__FreeBSD__) #define LOGURU_PTHREADS 1 #define LOGURU_WINTHREADS 0 #ifndef LOGURU_STACKTRACES #define LOGURU_STACKTRACES 0 #endif #else #define LOGURU_PTHREADS 1 #define LOGURU_WINTHREADS 0 #ifndef LOGURU_STACKTRACES #define LOGURU_STACKTRACES 1 #endif #endif #if LOGURU_STACKTRACES #include \u003ccxxabi.h\u003e // for __cxa_demangle #include \u003cdlfcn.h\u003e // for dladdr #include \u003cexecinfo.h\u003e // for backtrace #endif // LOGURU_STACKTRACES #if LOGURU_PTHREADS #include \u003cpthread.h\u003e #if defined(__FreeBSD__) #include \u003cpthread_np.h\u003e #include \u003csys/thr.h\u003e #elif defined(__OpenBSD__) #include \u003cpthread_np.h\u003e #endif #ifdef __linux__ /* On Linux, the default thread name is the same as the name of the binary. Additionally, all new threads inherit the name of the thread it got forked from. For this reason, Loguru use the pthread Thread Local Storage for storing thread names on Linux. */ #define LOGURU_PTLS_NAMES 1 #endif #endif #if LOGURU_WINTHREADS #ifndef _WIN32_WINNT #define _WIN32_WINNT 0x0502 #endif #define WIN32_LEAN_AND_MEAN #define NOMINMAX #include \u003cwindows.h\u003e #endif #ifndef LOGURU_PTLS_NAMES #define LOGURU_PTLS_NAMES 0 #endif namespace loguru { using namespace std::chrono; #if LOGURU_WITH_FILEABS struct FileAbs { char path[PATH_MAX]; char mode_str[4]; Verbosity verbosity; struct stat st; FILE* fp; bool is_reopening = false; // to prevent recursive call in file_reopen. decltype(steady_clock::now()) last_check_time = steady_clock::now(); }; #else typedef FILE* FileAbs; #endif struct Callback { std::string id; log_handler_t callback; void* user_data; Verbosity verbosity; // Does not change! close_handler_t close; flush_handler_t flush; unsigned indentation; }; using CallbackVec = std::vector\u003cCallback\u003e; using StringPair = std::pair\u003cstd::string, std::string\u003e; using Strin","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:9:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" CMakeLists.txt project(loguru) cmake_minimum_required(VERSION 3.10) set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -o3\") set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/) add_library(loguru STATIC loguru.cpp) target_link_libraries(loguru fmt) ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:10:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" demo . ├── build ├── CMakeLists.txt └── main.cpp 1 directory, 2 files ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:11:0","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" main.cpp #include \u003cchrono\u003e #include \u003cthread\u003e #define LOGURU_USE_FMTLIB 1 #include \"loguru.hpp\" void sleep_ms(int ms) { VLOG_F(2, \"Sleeping for %d ms\", ms); std::this_thread::sleep_for(std::chrono::milliseconds(ms)); } void foo() { LOG_SCOPE_F(INFO, \"foo\"); for (int i = 0; i \u003c 10; ++i) { LOG_F(INFO, \"%d\", i); LOG_F(INFO, \"foo for loop\"); } } void complex_calculation() { LOG_SCOPE_F(INFO, \"complex_calculation\"); LOG_F(INFO, \"Starting time machine...\"); sleep_ms(200); LOG_F(WARNING, \"The flux capacitor is not getting enough power!\"); sleep_ms(400); LOG_F(INFO, \"Lighting strike!\"); VLOG_F(1, \"Found 1.21 gigawatts...\"); sleep_ms(400); std::thread([](){ loguru::set_thread_name(\"complex_calculation\"); LOG_F(ERROR, \"We ended up in 1985!\"); }).join(); } #include \u003ciostream\u003e int main(int argc, char* argv[]) { loguru::init(argc, argv); loguru::add_file(\"everything.log\", loguru::Append, loguru::Verbosity_MAX); LOG_F(INFO, \"Hello from main.cpp!\"); complex_calculation(); std::string s = \"hello\"; LOG_F(INFO, \"{}\", s); // foo(); ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:11:1","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":" CMakeLists.txt project(demo) cmake_minimum_required(VERSION 3.10) set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -lpthread -ldl -lrt\") include_directories(../) link_directories(../) add_executable(demo ./main.cpp) target_link_libraries(demo loguru fmt) ","date":"2020-03-23","objectID":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/:11:2","tags":["c++","log","loguru","日志"],"title":"C++日志模块:loguru","uri":"/archives/2020-03-23-c++%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/"},{"categories":["Programming"],"content":"在为 R 安装 data.table 的时候报错：找不到 libgomp.spec。","date":"2020-03-23","objectID":"/archives/spec--no-such-file-or-directory/","tags":["gcc","libgomp"],"title":"gcc 找不到 libgomp.spec: No such file or directory","uri":"/archives/spec--no-such-file-or-directory/"},{"categories":["Programming"],"content":"error: can’t find libgomp.spec 在网上找了好久的解决方法，其实是因为最近安装了新版本的 gcc，无法与旧版本的动态库链接。这里需要拷贝一份到 LD_LIBRARY_PATH 所在的路径 sudo cp /home/william/Documents/Linux-Tools/gcc/gcc9/gcc-9.2.0/x86_64-pc-linux-gnu/libgomp/libgomp.spec /usr/lib sudo cp /home/william/Documents/Linux-Tools/gcc/gcc9/gcc-9.2.0/x86_64-pc-linux-gnu/libgomp/libgomp.spec /usr/local/lib 顺便说一下另外一个问题:解决类似 /usr/lib64/libstdc++.so.6: version GLIBCXX_3.4.21' not found 的问题 cd /usr/lib/x86_64-linux-gnu/ ll |grep libstd strings libstdc++.so.6 | grep GLIBCXX ## 有可能找不到 GLIBCXX_3.2.26 locate libstdc++.so.6 strings /usr/local/gcc/lib64/libstdc++.so.6 | grep GLIBCXX cp /usr/local/gcc/lib64/libstdc++.so.6 /usr/lib/x86_64-linux-gnu strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX ","date":"2020-03-23","objectID":"/archives/spec--no-such-file-or-directory/:0:0","tags":["gcc","libgomp"],"title":"gcc 找不到 libgomp.spec: No such file or directory","uri":"/archives/spec--no-such-file-or-directory/"},{"categories":["Tools"],"content":"从 Mac 复制文件到移动硬盘后，变成灰色，无法打开。","date":"2020-03-21","objectID":"/archives/2020-03-21-macos-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6_%E6%96%87%E4%BB%B6%E7%81%B0%E8%89%B2_%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80_/","tags":["Mac","硬盘"],"title":"MacOS 无法读取移动硬盘文件(文件灰色,无法打开)","uri":"/archives/2020-03-21-macos-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6_%E6%96%87%E4%BB%B6%E7%81%B0%E8%89%B2_%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80_/"},{"categories":["Tools"],"content":" 解决方法如下： 安装 Mounty，然后进行挂载操作 找到硬盘文件所在的路径，使用命令进行提升权限 sudo xattr -d -r com.apple.FinderInfo /Volumes/William/youtube/* ## 可以设置成段命令 alias mount.disk=\"sudo xattr -d -r com.apple.FinderInfo /Volumes/William/youtube/*\" 之后再查看，即可打开文件了 ","date":"2020-03-21","objectID":"/archives/2020-03-21-macos-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6_%E6%96%87%E4%BB%B6%E7%81%B0%E8%89%B2_%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80_/:0:0","tags":["Mac","硬盘"],"title":"MacOS 无法读取移动硬盘文件(文件灰色,无法打开)","uri":"/archives/2020-03-21-macos-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6_%E6%96%87%E4%BB%B6%E7%81%B0%E8%89%B2_%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80_/"},{"categories":["Programming"],"content":"在 Sublime 里面使用 Jupyter Notebook 功能。","date":"2020-03-13","objectID":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/","tags":["Sublime","Jupyter","python"],"title":"Sublime 使用 Jupyter Notebook","uri":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/"},{"categories":["Programming"],"content":" 安装","date":"2020-03-13","objectID":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/:0:0","tags":["Sublime","Jupyter","python"],"title":"Sublime 使用 Jupyter Notebook","uri":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/"},{"categories":["Programming"],"content":" 安装 pyzmq ## 需要安装 pyzmq pc /usr/bin/python3.6 -m pip install pyzmqc ","date":"2020-03-13","objectID":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/:1:0","tags":["Sublime","Jupyter","python"],"title":"Sublime 使用 Jupyter Notebook","uri":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/"},{"categories":["Programming"],"content":" 安装 Helium在 Sublime 中打开 Shift+Ctrl+P，然后输入 Helium 进行安装 打开 Jupyter先在命令行打开 jupyterlab 然后使用命令进行查询连接信息 ## 在 Jupyter 里面执行 magic 方法 %connect_info { \"shell_port\": 51835, \"iopub_port\": 43591, \"stdin_port\": 37817, \"control_port\": 39041, \"hb_port\": 50915, \"ip\": \"127.0.0.1\", \"key\": \"f4739d3c-a1e6462527617877ebf90e25\", \"transport\": \"tcp\", \"signature_scheme\": \"hmac-sha256\", \"kernel_name\": \"\" } Paste the above JSON into a file, and connect with: $\u003e jupyter \u003capp\u003e --existing \u003cfile\u003e or, if you are local, you can connect with just: $\u003e jupyter \u003capp\u003e --existing kernel-7826a41d-5ed1-4014-b421-a9205a712668.json or even just: $\u003e jupyter \u003capp\u003e --existing if this is the most recent Jupyter kernel you have started. 连接 Helium 在 Sublime 打开，Hermes: connect kernel，然后输入以上的连接信息 打开命令 Hermes: Execute Block 执行命令 快捷键 连接远程服务器","date":"2020-03-13","objectID":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/:2:0","tags":["Sublime","Jupyter","python"],"title":"Sublime 使用 Jupyter Notebook","uri":"/archives/2020-03-13-sublime-%E4%BD%BF%E7%94%A8-jupyter-notebook/"},{"categories":["Tools"],"content":"使用 youtube-dl 下载油管视频。","date":"2020-03-12","objectID":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/","tags":["youtube","youtube-dl","翻墙"],"title":"youtube dl 神器介绍","uri":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/"},{"categories":["Tools"],"content":" 安装 ## CentOS sudo yum install epel-release sudo rpm -v --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm sudo yum -y install ffmpeg ffmpeg-devel ## ubuntu sudo apt install ffmpeg ## 安装 youtube-dl sudo apt install python3-pip pip3 install youtube-dl #安装 pip3 install --upgrade youtube-dl #升级 ## 或者使用 apt 安装 sudo apt-get install youtube-dl 使用 设置代理 设置下载功能 alias youdl='youtube-dl --yes-playlist --playlist-start 1 --proxy \"socks5://127.0.0.1:1086\" --write-sub --sub-format \"ass/srt/best\" --convert-subs \"srt\"' youdl https://www.youtube.com/watch?v=xVT1y0xWgww ","date":"2020-03-12","objectID":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/:0:0","tags":["youtube","youtube-dl","翻墙"],"title":"youtube dl 神器介绍","uri":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/"},{"categories":["Tools"],"content":" 效果 youdl https://www.youtube.com/watch?v=xVT1y0xWgww [youtube] xVT1y0xWgww: Downloading webpage [info] Writing video subtitles to: CppCon 2017 - Nir Friedman “What C++ developers should know about globals (and the linker)”-xVT1y0xWgww.en.vtt WARNING: Requested formats are incompatible for merge and will be merged into mkv. [download] Destination: CppCon 2017 - Nir Friedman “What C++ developers should know about globals (and the linker)”-xVT1y0xWgww.f248.webm [download] 17.4% of 221.79MiB at 914.28KiB/s ETA 03:25 ","date":"2020-03-12","objectID":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/:1:0","tags":["youtube","youtube-dl","翻墙"],"title":"youtube dl 神器介绍","uri":"/archives/2020-03-12-youtube-dl-%E7%A5%9E%E5%99%A8%E4%BB%8B%E7%BB%8D/"},{"categories":["Programming"],"content":"最近准备着手开始低延时的CTP交易系统，现在先把前期的研究梳理一遍。","date":"2020-03-10","objectID":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/","tags":["CTP","低延时","交易系统","vnpy","C++","python"],"title":"CTP低延时交易系统研究笔记","uri":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 参考链接","date":"2020-03-10","objectID":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/:0:0","tags":["CTP","低延时","交易系统","vnpy","C++","python"],"title":"CTP低延时交易系统研究笔记","uri":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 知乎 高频交易实盘中，如何提高按对价(bid-ask)执行限价单(limit order)的成交率？ ","date":"2020-03-10","objectID":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/:1:0","tags":["CTP","低延时","交易系统","vnpy","C++","python"],"title":"CTP低延时交易系统研究笔记","uri":"/archives/2020-03-10-ctp%E4%BD%8E%E5%BB%B6%E6%97%B6%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 安装 v2ray 服务器 bash \u003c(curl -s -L https://git.io/v2ray.sh) 可以顺便给 vps 测速 ## superspeed bash \u003c(curl -Lso- https://git.io/superspeed) ————————————————————————SuperSpeed 全面测速版————————————————————————— 使用方法: bash \u003c(curl -Lso- https://git.io/superspeed) 查看全部节点: https://git.io/superspeedList 节点更新日期: 2019/12/23 脚本更新日期: 2020/03/09 —————————————————————————————————————————————————————————————————————— 选择测速类型: 1. 三网测速 (各取部分节点) 2. 取消本次测速 3. 电信节点测速 4. 联通节点测速 5. 移动节点测速 请输入数字选择: 1 —————————————————————————————————————————————————————————————————————— ID 测速服务器信息 上传速度 下载速度 延迟 3633 电信|上海　128.98 Mbit/s 384.05 Mbit/s 160.994 ms 24012 电信|内蒙古呼和浩特　66.38 Mbit/s 49.28 Mbit/s 198.881 ms 27377 电信|北京５Ｇ　116.61 Mbit/s 321.02 Mbit/s 161.536 ms 17145 电信|安徽安徽合肥　124.96 Mbit/s 373.35 Mbit/s 144.317 ms 27594 电信|广东广州５Ｇ　4.84 Mbit/s 23.16 Mbit/s 197.118 ms 27810 电信|广西南宁　60.62 Mbit/s 119.87 Mbit/s 172.267 ms 27575 电信|新疆乌鲁木齐　71.01 Mbit/s 147.04 Mbit/s 206.973 ms 26352 电信|江苏南京５Ｇ　141.18 Mbit/s 365.73 Mbit/s 138.398 ms 5396 电信|江苏苏州　141.03 Mbit/s 335.99 Mbit/s 138.572 ms 7509 电信|浙江杭州　112.69 Mbit/s 63.09 Mbit/s 210.463 ms 28225 电信|湖南长沙　98.16 Mbit/s 135.78 Mbit/s 188.638 ms 3973 电信|甘肃兰州　65.89 Mbit/s 30.87 Mbit/s 181.112 ms 19076 电信|重庆　55.81 Mbit/s 111.58 Mbit/s 252.101 ms 24447 联通|上海５Ｇ　117.29 Mbit/s 107.46 Mbit/s 187.886 ms 5103 联通|云南昆明　18.49 Mbit/s 7.01 Mbit/s 341.216 ms 5145 联通|北京　114.97 Mbit/s 278.81 Mbit/s 160.176 ms 9484 联通|吉林长春　111.22 Mbit/s 273.19 Mbit/s 174.654 ms 2461 联通|四川成都　78.93 Mbit/s 190.73 Mbit/s 201.194 ms 27154 联通|天津５Ｇ　129.92 Mbit/s 342.59 Mbit/s 155.246 ms —————————————————————————————————————————————————————————————————————— 测试完成, 本次测速耗时: 7 分 52 秒 当前时间: 2020-03-18 18:02:46 # 三网测速中为避免节点数不均及测试过久，每部分未使用所有节点， # 如果需要使用全部节点，可分别选择三网节点检测。 # Superspeed.sh wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh chmod +x superspeed.sh ./superspeed.sh ## SuperBench.sh ## 一键检测VPS的CPU、内存、负载、IO读写、机房带宽等脚本 wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash #或者 curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash ## Zench ## Zench可以看作是Bench.sh 和 SuperBench的结合版本，加入 Ping 以及 路由测试 功能，会生成测评报告，可以很方便地分享给其他朋友看自己的测评数据 wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh \u0026\u0026 bash ZBench-CN.sh # 项目：https://github.com/FunctionClub/ZBench -------------------------------------------------------------------------- CPU 型号 : QEMU Virtual CPU version (cpu64-rhel6) CPU 核心数 : 2 CPU 频率 : 2699.998 MHz 总硬盘大小 : 20.4 GB (2.6 GB Used) 总内存大小 : 1007 MB (240 MB Used) SWAP大小 : 259 MB (3 MB Used) 开机时长 : 0 days, 3 hour 42 min 系统负载 : 1.78, 0.57, 0.20 系统 : CentOS 7.7.1908 架构 : x86_64 (64 Bit) 内核 : 4.10.4-1.el7.elrepo.x86_64 虚拟化平台 : kvm -------------------------------------------------------------------------- 硬盘I/O (第一次测试) : 389 MB/s 硬盘I/O (第二次测试) : 622 MB/s 硬盘I/O (第三次测试) : 568 MB/s -------------------------------------------------------------------------- 节点名称 IP地址 下载速度 延迟 CacheFly 205.234.175.175 112MB/s 0.433 ms ping: speedtest.tokyo.linode.com: Name or service not known Usage: ping [-aAbBdDfhLnOqrRUvV64] [-c count] [-i interval] [-I interface] [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] [hop1 ...] destination Usage: ping -6 [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-p pattern] [-Q tclass] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline] [-W timeout] destination Linode, Tokyo, JP ms Linode, Singapore, SG 139.162.23.4 12.1MB/s 180.628 ms Linode, London, UK 176.58.107.39 17.6MB/s 135.277 ms Linode, Frankfurt, DE 139.162.130.8 15.5MB/s 144.360 ms Linode, Fremont, CA 50.116.14.9 58.2MB/s 10.185 ms Softlayer, Dallas, TX 173.192.68.18 54.2MB/s 32.237 ms Softlayer, Seattle, WA 67.228.112.250 62.5MB/s 26.613 ms Softlayer, Frankfurt, DE 159.122.69.4 4.32MB","date":"2020-03-08","objectID":"/archives/2020-03-08-v2ray-ubuntu-%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/:0:0","tags":["翻墙","v2ray","Ubuntu"],"title":"v2ray Ubuntu 配置教程","uri":"/archives/2020-03-08-v2ray-ubuntu-%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"categories":["Programming"],"content":" Sublime REPL: 配置打开 Preferences/Packages Settings/SublimeREPL/Settings - User，增加 { // 对于 Windows，需要添加路径 // 1. R: C:\\\\Program Files\\\\R\\\\R-3.6.2\\\\bin\\\\x64 // 2. cywgin: C:\\\\cygwin64\\\\bin \"default_extend_env\": { \"PATH\": \"{PATH};C:\\\\Program Files\\\\R\\\\R-3.6.2\\\\bin\\\\x64;C:\\\\cygwin64\\\\bin\" }, \"show_transferred_text\": true } 这里有一个小的提示，在 Windows 操作系统中，如果需要清屏幕，需要使用 Shift+Ctrl+c 进行操作。原来在 Linux 系统使用 Ctrl+l。这个在 SublimeREPL 的文档里面有快捷键说明。以及 StackOverFlow 的提问：how to clear SublimeREPL window in Sublime 2 sftp: 远程编辑文件sftp 提供了内置的连接远程服务器方式，并且可以直接在服务器上面进行编辑。 ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:0:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 安装 sftp","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:1:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 添加服务器： 进入 C:\\Users\\Administrator\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\sftp_servers 添加文件 fl@166.sublime-settings 设置服务器连接信息 { // The tab key will cycle through the settings when first created // Visit http://wbond.net/sublime_packages/sftp/settings for help // sftp, ftp or ftps \"type\": \"sftp\", \"sync_down_on_open\": true, \"sync_same_age\": true, \"host\": \"114.67.109.5\", \"user\": \"fl\", \"password\": \"***************\", \"port\": \"6166\", \"remote_path\": \"/home/fl\", //\"file_permissions\": \"664\", //\"dir_permissions\": \"775\", //\"extra_list_connections\": 0, \"connect_timeout\": 30, //\"keepalive\": 120, //\"ftp_passive_mode\": true, //\"ftp_obey_passive_host\": false, //\"ssh_key_file\": \"~/.ssh/id_rsa\", //\"sftp_flags\": [\"-F\", \"/path/to/ssh_config\"], //\"preserve_modification_times\": false, //\"remote_time_offset_in_hours\": 0, //\"remote_encoding\": \"utf-8\", //\"remote_locale\": \"C\", //\"allow_config_upload\": false, } ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:2:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 连接服务器使用 sftp: browse server 即可查看服务器上面的文件 R: 配置","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:3:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 快捷键F5: 本地服务器打开 Preferences/ Key Bidings，增加快捷键用于打开 R // 使用 快捷键 F5 打开 R, // 在 windows 的路径需要去查找 { \"keys\": [\"f5\"], \"caption\": \"SublimeREPL: R\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"external_id\": \"r\", \"additional_scopes\": [\"tex.latex.knitr\"], \"encoding\": { \"windows\": \"$win_cmd_encoding\", \"linux\": \"utf8\", \"osx\": \"utf8\" }, \"soft_quit\": \"\\nquit(save=\\\"no\\\")\\n\", \"cmd\": { \"linux\": [\"R\", \"--interactive\", \"--no-readline\"], \"osx\": [\"R\", \"--interactive\", \"--no-readline\"], \"windows\": [\"Rterm.exe\", \"--ess\", \"--encoding=$win_cmd_encoding\"] }, \"cwd\": \"$file_path\", \"extend_env\": { \"osx\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"linux\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, // 添加 Windows 操作系统下 的 R 路径，记得需要指定 /bin/x64/ \"windows\": {\"PATH\": \"{PATH};C:\\\\Program Files\\\\R\\\\R-3.6.2\\\\bin\\\\x64\\\\\\\\R.exe\"} }, \"cmd_postfix\": \"\\n\", \"suppress_echo\": { \"osx\": true, \"linux\": true, \"windows\": false }, \"syntax\": \"Packages/R/R Console.tmLanguage\" } }, ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:4:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 设置英文界面参考：设置R界面语言– set console / menu language of R 找到 Rconsole，可以到 C:\\Program Files\\R\\R-3.6.2\\etc 查找 打开 Rconsole，然后修改语言选项 ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:5:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" Language for messageslanguage = en 重新启动 R 就会发现现在的系统语言变成了英文 ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:6:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":" 快捷键F6: 远程连接服务器我们也可以设置快捷键 F6 进行远程连接服务器。 需要安装 cywgin，使用 ssh 进行登录 生成 ssh-keygen，文件位置在 /home/Administrator/.ssh 拷贝 id_rsa.pub 到远程服务器的 ~/.ssh/authorized_keys 接着，我们便可以设置快捷键了 // 使用 F6 连接远程服务器 { \"keys\": [\"f6\"], \"caption\": \"SublimeREPL: R\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"external_id\": \"r\", \"additional_scopes\": [\"tex.latex.knitr\"], \"encoding\": { \"windows\": \"$win_cmd_encoding\", \"linux\": \"utf8\", \"osx\": \"utf8\" }, \"soft_quit\": \"\\nquit(save=\\\"no\\\")\\n\", \"cmd\": { \"linux\": [ \"ssh\", \"-L\", \"4321:localhost:4321\", \"fl@114.67.109.5\", \"-p6166\", \"R\",\"--interactive\", \"--no-readline\" ], \"osx\": [\"R\", \"--interactive\", \"--no-readline\"], \"windows\": [ \"ssh\", \"-L\", \"4321:localhost:4321\", \"fl@114.67.109.5\", \"-p6166\", \"R\",\"--interactive\", \"--no-readline\", \"--encoding=$win_cmd_encoding\" ] }, \"cwd\": \"$file_path\", \"extend_env\": { \"osx\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"linux\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, // 需要把 cygwin 路径添加到这里 \"windows\": {\"PATH\": \"{PATH};C:\\\\cygwin64\\\\bin\"} }, \"cmd_postfix\": \"\\n\", \"suppress_echo\": { \"osx\": true, \"linux\": true, \"windows\": true }, \"syntax\": \"Packages/R/R Console.tmLanguage\" } }, Windows 无法传送命令的问题在 Windows 操作系统中，有一个问题，我现在还是没有很好的方法，只能提供一个权宜之计： 有时候，打开 SublimeREPL，却无法发送代码到解释器。 这个有可能是 Window 在处理信号的时候，找不到 Sublime。 我现在的做法是： 先使用 kill 杀死进程 然后在重新 restart 一个进程 可以设置快捷键如下 F1 -\u003e F12 // 使用 Sublime REPL F1 先杀死 python // F1:kill { \"keys\": [\"f1\"], \"caption\": \"SublimeREPL: Kill\", \"command\": \"repl_kill\", \"caption\": \"Kill\" }, // F12:restart { \"keys\": [\"f12\"], \"caption\": \"SublimeREPL: Restart\", \"command\": \"repl_restart\", \"caption\": \"Restart\" }, ","date":"2020-02-04","objectID":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/:7:0","tags":["Windowns","Sublime","R","Python"],"title":"Windows: 安装与配置 Sublime Text 3","uri":"/archives/2020-02-04-windows--%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-sublime-text-3/"},{"categories":["Programming"],"content":"命令行测试工具。","date":"2020-02-03","objectID":"/archives/2020-02-03-speedtest-cli/","tags":["speedtest","cli"],"title":"speedtest cli","uri":"/archives/2020-02-03-speedtest-cli/"},{"categories":["Programming"],"content":"speedtest-cli pip install speedtest-cli speedtest-cli pip install speedtest-cli Collecting speedtest-cli Downloading http://mirrors.aliyun.com/pypi/packages/c4/44/dfebd38c5fb35aae0a7279e2a3ffe33ca65edb449a586b93addc8d409a71/speedtest_cli-2.1.2-py2.py3-none-any.whl Installing collected packages: speedtest-cli Successfully installed speedtest-cli-2.1.2 You are using pip version 9.0.1, however version 20.0.2 is available. You should consider upgrading via the 'pip install --upgrade pip' command. speedtest-clis Retrieving speedtest.net configuration... Testing from Hangzhou Alibaba Advertising Co.,Ltd. (47.98.117.71)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Beijing Unicom (Beijing) [1.67 km]: 31.03 ms Testing download speed.............................................................................. Download: 111.79 Mbit/s Testing upload speed.............................................................................. Upload: 4.83 Mbit/ss ","date":"2020-02-03","objectID":"/archives/2020-02-03-speedtest-cli/:0:0","tags":["speedtest","cli"],"title":"speedtest cli","uri":"/archives/2020-02-03-speedtest-cli/"},{"categories":["Programming"],"content":"设置系统语言为英文。","date":"2020-01-08","objectID":"/archives/2020-01-08-linux-%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/","tags":["Linux","etc"],"title":"Linux 设置系统语言","uri":"/archives/2020-01-08-linux-%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"},{"categories":["Programming"],"content":" vim /etc/environment #LC_ALL=zh_CN.UTF_8 #LANG=zh_CN.UTF_8 LC_ALL=en_US.utf8 LANG=en_US.utf8 ","date":"2020-01-08","objectID":"/archives/2020-01-08-linux-%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/:0:0","tags":["Linux","etc"],"title":"Linux 设置系统语言","uri":"/archives/2020-01-08-linux-%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"},{"categories":["Programming"],"content":"使用 Vimium 实现在 Chrome 网页的快捷键操作。","date":"2020-01-07","objectID":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/","tags":["Chrome","Vimium"],"title":"Vimium 插件","uri":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/"},{"categories":["Programming"],"content":" 技巧","date":"2020-01-07","objectID":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/:0:0","tags":["Chrome","Vimium"],"title":"Vimium 插件","uri":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/"},{"categories":["Programming"],"content":" 从地址栏返回页面（Focus）有时会不小心点击了 Chrome 的地址栏，这时候就无法在使用 Vimium 的快捷键功能了。为了处理这个问题，网上有人给出了一个小的技巧，另外有人也介绍了其他的方法： 打开 Chrome -\u003e Setting 点击 Search Enigne, 然后添加一个 ![](/images/2020-01-07-Vimium-插件/Settings - Manage search engines - Google Chrome_018.png) 搜索引擎名称随便写一个，如 LeaveAddressBar 快捷键设置成 u 在 URL 填入 javascript:，这样就不会去执行，而是返回主页面 然后，我们在地址栏输入 u，点击回车会，就会自动返回主页面了 ","date":"2020-01-07","objectID":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/:1:0","tags":["Chrome","Vimium"],"title":"Vimium 插件","uri":"/archives/2020-01-07-vimium-%E6%8F%92%E4%BB%B6/"},{"categories":["Programming"],"content":"Sublime Text 3 最新版本 3207 的注册码。目前是2019年最新版本 SUBLIME TEXT 3 BUILD 3207 AND 3208 LICENCE KEY 执行步骤： 断开网络连接 修改 /etc/hosts Windows | \"C:\\Windows\\System32\\drivers\\etc\\hosts\" Mac | \"/Private/etc/hosts\" Linux | \"/etc/hosts\" 增加以下代码 127.0.0.1 www.sublimetext.com 127.0.0.1 sublimetext.com 127.0.0.1 sublimehq.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 然后输入注册码 ----- BEGIN LICENSE ----- Member J2TeaM Single User License EA7E-1011316 D7DA350E 1B8B0760 972F8B60 F3E64036 B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD FA0A2ABE 25F65BD8 D51458E5 3923CE80 87428428 79079A01 AA69F319 A1AF29A4 A684C2DC 0B1583D4 19CBD290 217618CD 5653E0A0 BACE3948 BB2EE45E 422D2C87 DD9AF44B 99C49590 D2DBDEE1 75860FD2 8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864 ------ END LICENSE ------​ ","date":"2019-12-30","objectID":"/archives/2019-12-30-sublime-3207%E6%B3%A8%E5%86%8C%E7%A0%81/:0:0","tags":["Sublime","注册码"],"title":"Sublime 3207注册码","uri":"/archives/2019-12-30-sublime-3207%E6%B3%A8%E5%86%8C%E7%A0%81/"},{"categories":["Personal"],"content":"今天见了几个朋友，跟他们有一次比较深入、详细的技术沟通，彻底感觉自己在技术上被完全碾压啊。留贴以示警惕，战战兢兢，如履薄冰，未来还需要在技术上更加精进。","date":"2019-12-29","objectID":"/archives/2019-12-29-%E6%84%9F%E8%A7%89%E4%BB%8A%E5%A4%A9%E8%87%AA%E5%B7%B1%E8%A2%AB%E7%A2%BE%E5%8E%8B%E4%BA%86/","tags":["宽德","技术","开发","学习"],"title":"感觉今天自己被碾压了","uri":"/archives/2019-12-29-%E6%84%9F%E8%A7%89%E4%BB%8A%E5%A4%A9%E8%87%AA%E5%B7%B1%E8%A2%AB%E7%A2%BE%E5%8E%8B%E4%BA%86/"},{"categories":["Personal"],"content":"其实已经在 shared 里面提高了这次会面的事情，不过还是单独拿出来做一遍博客，以此来警惕自己，未来还需要在技术的道路上更加努力，深入把握技术的每一个细节。 ","date":"2019-12-29","objectID":"/archives/2019-12-29-%E6%84%9F%E8%A7%89%E4%BB%8A%E5%A4%A9%E8%87%AA%E5%B7%B1%E8%A2%AB%E7%A2%BE%E5%8E%8B%E4%BA%86/:0:0","tags":["宽德","技术","开发","学习"],"title":"感觉今天自己被碾压了","uri":"/archives/2019-12-29-%E6%84%9F%E8%A7%89%E4%BB%8A%E5%A4%A9%E8%87%AA%E5%B7%B1%E8%A2%AB%E7%A2%BE%E5%8E%8B%E4%BA%86/"},{"categories":["Programming"],"content":"solarflare顶层支持 openonload 加速技术，其底层技术支持则由 efvi 提供接口调用。","date":"2019-12-25","objectID":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/","tags":["solarfalre","efvi","低延时","高频交易","网络编程"],"title":"Solarflare网卡开发：efvi 低延时应用","uri":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/"},{"categories":["Programming"],"content":" 概念 开发 Demo","date":"2019-12-25","objectID":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/:0:0","tags":["solarfalre","efvi","低延时","高频交易","网络编程"],"title":"Solarflare网卡开发：efvi 低延时应用","uri":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/"},{"categories":["Programming"],"content":" 服务端","date":"2019-12-25","objectID":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/:1:0","tags":["solarfalre","efvi","低延时","高频交易","网络编程"],"title":"Solarflare网卡开发：efvi 低延时应用","uri":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/"},{"categories":["Programming"],"content":" 客户端","date":"2019-12-25","objectID":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/:2:0","tags":["solarfalre","efvi","低延时","高频交易","网络编程"],"title":"Solarflare网卡开发：efvi 低延时应用","uri":"/archives/2019-12-25-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-efvi-%E4%BD%8E%E5%BB%B6%E6%97%B6%E5%BA%94%E7%94%A8/"},{"categories":["Programming"],"content":"总结常用的 cmake 设置与命令。","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 调试通过 CMAKE_BUILD_TYPE 可以设置条件编译，执行生成可供调试的程序，这个相当于在命令行使用 cmake .. -DCMAKE_BUILD_TYPE=Debug ## 调试状态 set(CMAKE_BUILD_TYPE Debug) ## 发布状态 set(CMAKE_BUILD_TYPE Release) 头文件包含","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:0:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" include_directories(include_path)可以使用 include_directories(include_path) set(INCLUDE_PATH ./include) include_directories(${INCLUDE_PATH}) ## 也可以包含下一层的文件 include_directories(${INCLUDE_PATH}/sub_directory) 使用 find_ find_path: 要求找到文件所在路径 find_library: 要求找到链接库 find_package: 找到安装的链接库，包含以上两个。如果依赖包是非标准安装的，则需要执行以上两个命令进行查找。 以上命令执行后，可以生成 XXX_LIBRARY: 链接库 XXX_INCLUDE_DIR: 相关的头文件 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:1:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 递归包含当然，如果头文件的依赖关系比较复杂，上述方法则显得有点迂腐。我们可以写个简单的函数，通过递归寻找目标路径下的所有 .h 头文件 #获取当前目录及子目录(递归获取),添加到头文件搜索路径 function(include_sub_directories_recursively root_dir) if (IS_DIRECTORY ${root_dir}) # 当前路径是一个目录吗，是的话就加入到包含目录 message(\"include dir: \" ${root_dir}) include_directories(${root_dir}) endif() file(GLOB ALL_SUB RELATIVE ${root_dir} ${root_dir}/*) # 获得当前目录下的所有文件，让如ALL_SUB列表中 foreach(sub ${ALL_SUB}) if (IS_DIRECTORY ${root_dir}/${sub}) include_sub_directories_recursively(${root_dir}/${sub}) # 对子目录递归调用，包含 endif() endforeach() endfunction() #项目的所有目录都为头文件搜索路径 include_sub_directories_recursively(${PROJECT_SOURCE_DIR}) 动态链接库","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:2:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" LINK_DIRECTORIES","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:3:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" TARGET_LINK_DIRECTORIES 常用变量","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:4:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 变量引用使用 ${VAR_NAME} 获取变量值，但是在　IF 的语句中，是*直接使用变量名而不用通过 ${}*来识别的，原因是这些语句要求显示得到变量。 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:5:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 宏变量 PROJECT_SOURCE_DIR：最顶层 CMakeLists.txt所在的目录 PROJECT_BINARY_DIR： PROJECT_NAME：通过 project(pro_name)定义得到的 pro_name CMAKE_SOURCE_DIR CMAKE_BINARY_DIR：执行 cmake（通常实在 build）的当前目录 CMAKE_CURRENT_SOURCE_DIR: 当前 CMakeLists.txt 所在目录 EXECUTABLE_OUTPUT_PATH：设置最终编译得到的可执行目标文件的路径 LIBRARY_OUTPUT_PATH CMAKE_C_FLAGS CMAKE_CXX_FLAGS ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:6:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 自定义变量","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:7:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 使用 set后面可以直接引用变量 set(SRCS main.cpp math.cpp) ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:7:1","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" 模糊匹配变量把当前所有文件都命名为 DIR_SRCS aux_source_directory(. DIR_SRCS) 常用命令","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:7:2","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" CMAKE_MINIMUM_REQUIRED","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:8:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" PROJECT(pro_name)","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:9:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" INCLUDE(file.cmake)包含某个 .cmake 文件。 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:10:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" INCLUDE_DIRECTORIES(path_name)指定头文件路径，可以使用递归的方法包含文件夹下所有的头文件。 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:11:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" LINK_DIRECTORIES(path_name)指定动态链接库的文件路径。 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:12:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" ADD_SUBDIRECTORY(path_name)添加某个文件夹，实际上就是要求该文件夹下面存在 CMakeLists.txt，从而在执行 cmake的时候放入执行环境。 ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:13:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" AUX_SOURCE_DIRECTORY(path_name DIR_NAME)相当于把某个文件夹下面的所有文件合并存放为变量 DIR_NAME，从而方便后面引用。这个指令临时被用来自动构建源文件列表。因为目前cmake还不能自动发现新添加的源文件。 ## 自动添加文件 AUX_SOURCE_DIRECTORY(. SRC_LIST) ## 变量引用 ADD_EXECUTABLE(main ${SRC_LIST}) ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:14:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" ADD_EXECUTABLE(hello main.cpp)","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:15:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" TARGET_LINK_LIBRARY","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:16:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" FIND 系列FIND_系列指令主要包含一下指令： FIND_FILE(\u003cVAR\u003e name1 path1 path2 ...)：VAR变量代表找到的文件全路径，包含文件名 FIND_LIBRARY(\u003cVAR\u003e name1 path1 path2 ...)：VAR变量表示找到的库全路径，包含库文件名 ## FIND_LIBRARY示例： FIND_LIBRARY(libX X11 /usr/lib) IF(NOT libX) MESSAGE(FATAL_ERROR “libX not found”) ENDIF(NOT libX) FIND_PATH(\u003cVAR\u003e name1 path1 path2 ...)：VAR变量代表包含这个文件的路径。 FIND_PROGRAM(\u003cVAR\u003e name1 path1 path2 ...)：VAR变量代表包含这个程序的全路径。 FIND_PACKAGE(\u003cname\u003e [major.minor] [QUIET] [NO_MODULE][[REQUIRED|COMPONENTS] [componets...]]) FIND_PACKAGE(HELLO) IF(HELLO_FOUND) ADD_EXECUTABLE(hello main.c) INCLUDE_DIRECTORIES(${HELLO_INCLUDE_DIR}) TARGET_LINK_LIBRARIES(hello ${HELLO_LIBRARY}) ENDIF(HELLO_FOUND) ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:17:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":" IFIF(expression_) 和 **ENDIF(expression_)**需要成对出现，而且 expression_ 内容要一样。 参考链接 modern-cmake Cmake实践 It’s Time To Do CMake Right ","date":"2019-12-17","objectID":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/:18:0","tags":["cmake","c++","c","make"],"title":"cmake 要点总结","uri":"/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"},{"categories":["Programming"],"content":"为了实现高频交易对性能的要求，我们往往会“榨干”CPU。","date":"2019-12-11","objectID":"/archives/2019-12-11-linux-%E8%B0%83%E6%95%B4-cstate-%E5%AE%9E%E7%8E%B0cpu%E8%B6%85%E9%A2%91/","tags":["Linux","cpu","cstate","超频","高频交易","HFT"],"title":"Linux 调整 cstate 实现cpu超频","uri":"/archives/2019-12-11-linux-%E8%B0%83%E6%95%B4-cstate-%E5%AE%9E%E7%8E%B0cpu%E8%B6%85%E9%A2%91/"},{"categories":["Programming"],"content":"随着技术的发展，现在主流的 Intel CPU 的主频都能达到 3GHz 以上，而且还支持超频技术。为了最大的获取 CPU 的性能，我们可以对 cstate 进行调整。 Ubuntu 设置与开机项有关的参数设置在 /etc/default/grub，可以对其进行调整 cat /etc/default/grub # If you change this file, run 'update-grub' afterwards to update # /boot/grub/grub.cfg. # For full documentation of the options in this file, see: # info -f grub -n 'Simple configuration' GRUB_DEFAULT=0 GRUB_TIMEOUT_STYLE=hidden GRUB_TIMEOUT=10 GRUB_DISTRIBUTOR=`lsb_release -i -s 2\u003e /dev/null || echo Debian` GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\" GRUB_CMDLINE_LINUX=\"\" # Uncomment to enable BadRAM filtering, modify to suit your needs # This works with Linux (no patch required) and with any kernel that obtains # the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...) #GRUB_BADRAM=\"0x01234567,0xfefefefe,0x89abcdef,0xefefefef\" # Uncomment to disable graphical terminal (grub-pc only) #GRUB_TERMINAL=console # The resolution used on graphical terminal # note that you can use only modes which your graphic card supports via VBE # you can see them in real GRUB with the command `vbeinfo' #GRUB_GFXMODE=640x480 # Uncomment if you don't want GRUB to pass \"root=UUID=xxx\" parameter to Linux #GRUB_DISABLE_LINUX_UUID=true # Uncomment to disable generation of recovery mode menu entries #GRUB_DISABLE_RECOVERY=\"true\" # Uncomment to get a beep at grub start #GRUB_INIT_TUNE=\"480 440 1\" 然后找到 GRUB_CMDLINE_LINUX_DEFAULT 所在的那行，增加配置 processor.max_cstate=0 intel_idle.max_cstate=0 sudo vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash processor.max_cstate=0 intel_idle.max_cstate=0\" 然后更新 grub sudo update-grub 另外可以设置CPU的scale-governor cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor ## 设置CPU模式, 分别根据CPU 0-n 的编号进行设置 echo performance \u003e /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor echo performance \u003e /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor echo performance \u003e /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor echo performance \u003e /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor systemctl disable ondemand /etc/rc.local cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq 重启后即可实现超频。 sudo reboot now 使用命令 cpufreq-info 查看当前 CPU 运行 cpufreq-set 也可以进行单独设置 cpufreq-aperf 用于计算一段时间内的平均频率 sudo apt install cpufrequtils ## 查看当前运行 cpufreq-info cpufrequtils 008: cpufreq-info (C) Dominik Brodowski 2004-2009 Report errors and bugs to cpufreq@vger.kernel.org, please. analyzing CPU 0: driver: intel_pstate CPUs which run at the same hardware frequency: 0 CPUs which need to have their frequency coordinated by software: 0 maximum transition latency: 4294.55 ms. hardware limits: 800 MHz - 3.60 GHz available cpufreq governors: performance, powersave current policy: frequency should be within 800 MHz and 3.60 GHz. The governor \"performance\" may decide which speed to use within this range. current CPU frequency is 1.52 GHz. analyzing CPU 1: driver: intel_pstate CPUs which run at the same hardware frequency: 1 CPUs which need to have their frequency coordinated by software: 1 maximum transition latency: 4294.55 ms. hardware limits: 800 MHz - 3.60 GHz available cpufreq governors: performance, powersave current policy: frequency should be within 800 MHz and 3.60 GHz. The governor \"performance\" may decide which speed to use within this range. current CPU frequency is 2.66 GHz. analyzing CPU 2: driver: intel_pstate CPUs which run at the same hardware frequency: 2 CPUs which need to have their frequency coordinated by software: 2 maximum transition latency: 4294.55 ms. hardware limits: 800 MHz - 3.60 GHz available cpufreq governors: performance, powersave current policy: frequency should be within 800 MHz and 3.60 GHz. The governor \"performance\" may decide which speed to use within this range. current CPU frequency is 960 MHz. analyzing CPU 3: driver: intel_pstate CPUs which run at the same hardware frequency: 3 CPUs which need to have their frequency coordinated by software: 3 maximum transition latency: 4294.55 ms. hardware limits: 800 MHz - 3.60 GHz available cpufreq ","date":"2019-12-11","objectID":"/archives/2019-12-11-linux-%E8%B0%83%E6%95%B4-cstate-%E5%AE%9E%E7%8E%B0cpu%E8%B6%85%E9%A2%91/:0:0","tags":["Linux","cpu","cstate","超频","高频交易","HFT"],"title":"Linux 调整 cstate 实现cpu超频","uri":"/archives/2019-12-11-linux-%E8%B0%83%E6%95%B4-cstate-%E5%AE%9E%E7%8E%B0cpu%E8%B6%85%E9%A2%91/"},{"categories":["Programming"],"content":"这个教程将系统介绍如何实现基于 solarflare 网卡技术进行高频交易系统开发。 OpenOnload 技术","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:0:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 固件信息可以通过命令查看当前的网卡连接情况 ip address 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp5s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 4c:ed:fb:c2:25:67 brd ff:ff:ff:ff:ff:ff inet 192.168.1.115/24 brd 192.168.1.255 scope global noprefixroute dynamic enp5s0 valid_lft 1496sec preferred_lft 1496sec inet6 fe80::6804:b02d:fb9f:19b0/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: enp1s0f0: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP\u003e mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0f:53:5d:d3:90 brd ff:ff:ff:ff:ff:ff 4: enp1s0f1: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0f:53:5d:d3:91 brd ff:ff:ff:ff:ff:ff inet 192.168.1.112/24 brd 192.168.1.255 scope global noprefixroute dynamic enp1s0f1 valid_lft 1544sec preferred_lft 1544sec inet6 fe80::20f:53ff:fe5d:d391/64 scope link valid_lft forever preferred_lft forever 5: virbr0: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP\u003e mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 52:54:00:c5:0a:77 brd ff:ff:ff:ff:ff:ff inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0 valid_lft forever preferred_lft forever 6: virbr0-nic: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000 link/ether 52:54:00:c5:0a:77 brd ff:ff:ff:ff:ff:ff 厂商的MAC地址前四位是00:0F，以此判断哪个网卡为Solarflare的网卡。因此，我们可以看出以下两个网卡为 Solarflare enp1s0f0 enp1s0f1 我们还可以通过命令查看具体的网卡信息 ## 需要先安装 openonload ethtool -i enp1s0f1 driver: sfc version: 4.15.0.1012 firmware-version: 4.7.1.1001 rx1 tx1 expansion-rom-version: bus-info: 0000:01:00.1 supports-statistics: yes supports-test: yes supports-eeprom-access: no supports-register-dump: yes supports-priv-flags: yes ##下载驱动 OpenOnload 原先是作为一个独立的开发项目存在，在官网可以获取相关的资讯，或者直接进入下载网页获取指定版本的驱动。 https://www.openonload.org/download/ Index of /download/ ../ ppc/ 15-Feb-2016 11:19 - sfnettest/ 29-Oct-2013 15:45 - sfptpd_reverse_ptp_preview/ 18-Aug-2017 10:59 - sysjitter/ 30-May-2017 17:08 - efx_ioctl_timesync.h 23-Jun-2016 16:50 10271 openonload-201502-ChangeLog.txt 01-Mar-2015 11:34 65722 openonload-201502-README.txt 01-Mar-2015 11:34 3011 openonload-201502-ReleaseNotes.txt 01-Mar-2015 11:34 11998 openonload-201502-u1-ChangeLog.txt 30-Mar-2015 16:35 67171 openonload-201502-u1-README.txt 30-Mar-2015 16:35 3030 openonload-201502-u1-ReleaseNotes.txt 30-Mar-2015 16:35 14761 openonload-201502-u1.tgz 30-Mar-2015 16:35 3061647 openonload-201502-u1.tgz.md5 30-Mar-2015 16:35 59 openonload-201502-u2-ChangeLog.txt 04-Jun-2015 16:52 70484 openonload-201502-u2-README.txt 04-Jun-2015 16:52 3161 openonload-201502-u2-ReleaseNotes.txt 04-Jun-2015 16:52 16556 openonload-201502-u2.tgz 04-Jun-2015 16:52 3081875 openonload-201502-u2.tgz.md5 04-Jun-2015 16:52 59 openonload-201502-u3-ChangeLog.txt 19-Aug-2015 15:54 70604 openonload-201502-u3-README.txt 19-Aug-2015 15:54 3161 openonload-201502-u3-ReleaseNotes.txt 19-Aug-2015 15:54 16967 openonload-201502-u3.tgz 19-Aug-2015 15:54 3276190 openonload-201502-u3.tgz.md5 19-Aug-2015 15:54 59 openonload-201502.tgz 01-Mar-2015 11:34 3056445 openonload-201502.tgz.md5 01-Mar-2015 11:34 56 openonload-201509-ChangeLog.txt 06-Oct-2015 16:26 79017 openonload-201509-README.txt 06-Oct-2015 16:26 3145 openonload-201509-ReleaseNotes.txt 06-Oct-2015 16:26 10035 openonload-201509-u1-ChangeLog.txt 01-Feb-2016 15:51 84338 openonload-201509-u1-README.txt 01-Feb-2016 15:51 3171 openonload-201509-u1-ReleaseNotes.txt 01-Feb-2016 15:51 12329 openonload-201509-u1.tgz 01-Feb-2016 15:51 3367951 openonload-201509-u1.tgz.md5 01-Feb-2016 15:51 59 openonload-201509.tgz 06-Oct-2015 16:26 3328928 openonload-201509.tgz.md5 06-Oct-2015 16:26 56 openonload-201606-ChangeLog.txt 30-Jun-2016 17:","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:1:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 安装 ## 进入相应的文件夹 cd openonload-201811/ ## 源代码存放 cd scripts/ ll total 240K drwxr-xr-x. 6 fl fl 4.0K Dec 3 2018 . drwxr-xr-x. 7 fl fl 243 Dec 9 03:39 .. -rwxr-xr-x. 1 fl fl 154 Apr 12 2018 check_binary_presence -rwxr-xr-x. 1 fl fl 329 Apr 12 2018 check_header_presence -rwxr-xr-x. 1 fl fl 358 Apr 12 2018 check_library_presence -rwxr-xr-x. 1 fl fl 573 Apr 12 2018 check_prototype -rwxr-xr-x. 1 fl fl 2.2K Nov 8 2018 libc_compat.sh -rwxr-xr-x. 1 fl fl 1.4K Apr 12 2018 mmake -rwxr-xr-x. 1 fl fl 16K Nov 8 2018 mmakebuildtree -rwxr-xr-x. 1 fl fl 15K Nov 8 2018 mmaketool -rwxr-xr-x. 1 fl fl 13K Nov 9 2018 onload drwxr-xr-x. 2 fl fl 75 Oct 26 2018 onload_apps -rwxr-xr-x. 1 fl fl 6.0K Nov 8 2018 onload_build -rwxr-xr-x. 1 fl fl 27K Dec 3 2018 onload_install -rwxr-xr-x. 1 fl fl 19K Jul 16 2018 onload_iptables -rwxr-xr-x. 1 fl fl 8.2K Nov 8 2018 onload_metrics drwxr-xr-x. 2 fl fl 4.0K Dec 3 2018 onload_misc drwxr-xr-x. 2 fl fl 4.0K Nov 9 2018 onload_profiles -rwxr-xr-x. 1 fl fl 2.2K Jul 16 2018 onload_rpmtest -rwxr-xr-x. 1 fl fl 3.3K Nov 8 2018 onload_tcpdump -rwxr-xr-x. 1 fl fl 8.0K Nov 9 2018 onload_tool -rwxr-xr-x. 1 fl fl 748 Apr 12 2018 sfcaffinity -rwxr-xr-x. 1 fl fl 30K Apr 12 2018 sfcaffinity_config -rw-r--r--. 1 fl fl 15K Apr 12 2018 sfcaffinity.py -rwxr-xr-x. 1 fl fl 6.5K Apr 12 2018 sfcirqaffinity -rw-r--r--. 1 fl fl 4.6K Apr 12 2018 sfcmask.py drwxr-xr-x. 2 fl fl 108 Dec 3 2018 sh -rwxr-xr-x. 1 fl fl 1.1K Apr 12 2018 zf_debug ## 搭建环境 locate crti.o LIBRARY_PATH=/usr/lib64:$LIBRARY_PATH export LIBRARY_PATH ./onload_build ## 执行安装 ./onload_install #加载 onload onload_tool reload ## 开启 rx1 tx1 模式 ## Ref： https://support.solarflare.com/docs/SF-103837-CD ## Adapters Software Support sfboot --adapter=enp1s0f1 firmware-variant=ultra-low-latency ## 需要重启 sudo reboot now ## 查看即可显示 ethtool -i enp1s0f1 driver: sfc version: 4.15.0.1012 firmware-version: 6.2.7.1001 rx1 tx1 expansion-rom-version: bus-info: 0000:01:00.1 supports-statistics: yes supports-test: yes supports-eeprom-access: no supports-register-dump: yes supports-priv-flags: yes ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:2:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 卸载 #unload onload onload_tool unload #remove sfc modprobe –r sfc #if found any sfc rpm, then remove them rpm -qa | grep sfc rpm -e *sfc*.rpm #unintall onload ./onload_misc/onload_uninstall ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:3:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 使用OpenOnload有两种模式。 Spinning模式（busy-wait）中，加速进程的每个线程会占用一整个CPU core，始终处于waiting状态。通过htop可以看到该CPU的使用率为100%。spinning模式速度更快，但是要注意CPU core的数量。 Interrupt模式中，线程不会占用满一个CPU core，但可以将中断Interrupt放在一个CPU core。interrupt模式也有加速效果，理论上比spinning略差一些。当服务器上总线程数大于CPU core的数量时，interrupt可能优于spinning，需要测试来论证。 ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:4:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 使用 spinning 模式加速应用查看CPU core序号（注意，一般服务器是从0开始排序，也有不正常的版本，请查证。否则OpenOnload选择的CPU core可能不存在） egrep \"(id|processo).*:|^ *$\" /proc/cpuinfo onload -p latency taskset -c 3 ./[Application] onload --profile=latency taskset -c 2 ./[Application] 其中，-c 参数选择 CPU core 的号码，也可以选择多个core：-c 2,3。选择core的数量与进程的线程数有关。 ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:4:1","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 使用 internal 模式加速应用 onload ./[Application] ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:4:2","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" demo所有运行的demo都在我们事先下载得到的压缩包里面。一般来说 files under the gnu directory are 32-bit (if these are built) files under the gnu_x86_64 directory are 64-bit. 我们进入 gnu_x86_64 的文件夹即可。 cd scripts/ ## 增加环境路径 export PATH=\"$PWD:$PATH\" ## 使用 64 位进行编译 cd ../build/gnu_x86_64/tests/ef_vi/ ## 先清理，然后安装 make clean \u0026\u0026 make pwd /root/openonload-201811/build/gnu_x86_64/tests/ef_vi ls -alh total 5304 -rw-r--r--. 1 root root 1 Nov 17 03:53 copy.depends -rw-r--r--. 1 root root 0 Nov 17 03:53 copy.done -rwxr-xr-x. 1 root root 343784 Nov 25 04:24 efforward -rw-r--r--. 1 root root 2724 Nov 25 04:24 efforward.d -rw-r--r--. 1 root root 79712 Nov 25 04:24 efforward.o -rwxr-xr-x. 1 root root 387320 Nov 25 04:24 efforward_packed -rw-r--r--. 1 root root 2745 Nov 25 04:24 efforward_packed.d -rw-r--r--. 1 root root 86952 Nov 25 04:24 efforward_packed.o -rwxr-xr-x. 1 root root 368680 Nov 25 04:24 efjumborx -rw-r--r--. 1 root root 2670 Nov 25 04:24 efjumborx.d -rw-r--r--. 1 root root 80384 Nov 25 04:24 efjumborx.o -rwxr-xr-x. 1 root root 465904 Nov 25 04:24 eflatency -rw-r--r--. 1 root root 5631 Nov 25 04:24 eflatency.d -rw-r--r--. 1 root root 121064 Nov 25 04:24 eflatency.o -rwxr-xr-x. 1 root root 326256 Nov 25 04:24 efrss -rw-r--r--. 1 root root 2658 Nov 25 04:24 efrss.d -rw-r--r--. 1 root root 67640 Nov 25 04:24 efrss.o -rwxr-xr-x. 1 root root 421928 Nov 25 04:24 efsend -rw-r--r--. 1 root root 5366 Nov 25 04:24 efsend_common.d -rw-r--r--. 1 root root 33168 Nov 25 04:24 efsend_common.o -rw-r--r--. 1 root root 5437 Nov 25 04:24 efsend.d -rw-r--r--. 1 root root 51224 Nov 25 04:24 efsend.o -rwxr-xr-x. 1 root root 427032 Nov 25 04:24 efsend_pio -rw-r--r--. 1 root root 5446 Nov 25 04:24 efsend_pio.d -rw-r--r--. 1 root root 45840 Nov 25 04:24 efsend_pio.o -rwxr-xr-x. 1 root root 435640 Nov 25 04:24 efsend_pio_warm -rw-r--r--. 1 root root 5563 Nov 25 04:24 efsend_pio_warm.d -rw-r--r--. 1 root root 63160 Nov 25 04:24 efsend_pio_warm.o -rwxr-xr-x. 1 root root 409200 Nov 25 04:24 efsend_timestamping -rw-r--r--. 1 root root 5476 Nov 25 04:24 efsend_timestamping.d -rw-r--r--. 1 root root 43816 Nov 25 04:24 efsend_timestamping.o -rwxr-xr-x. 1 root root 410640 Nov 25 04:24 efsink -rw-r--r--. 1 root root 2733 Nov 25 04:24 efsink.d -rw-r--r--. 1 root root 97664 Nov 25 04:24 efsink.o -rwxr-xr-x. 1 root root 369440 Nov 25 04:24 efsink_packed -rw-r--r--. 1 root root 2736 Nov 25 04:24 efsink_packed.d -rw-r--r--. 1 root root 65952 Nov 25 04:24 efsink_packed.o -rw-r--r--. 1 root root 150 Nov 17 03:53 GNUmakefile -rwxr-xr-x. 1 root root 5220 Nov 25 04:24 stats -rw-r--r--. 1 root root 2623 Nov 25 04:24 utils.d -rw-r--r--. 1 root root 79648 Nov 25 04:24 utils.o ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:5:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 主要应用efvi ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:6:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 测试","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:7:0","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 服务器与客户端latency ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:7:1","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 延时测试 网络架构 两台机器都配备 Solarflare 网络适配器 两台机器使用一根光纤线连接 Solarflare 接口 分别为两块卡上的 Solarflare 接口配置一个 IP 地址， 使得它们之间可以通讯，使用 ping 命令验证连接 OpenOnload 都分别安装到两台机器上 Solarflare 的 sfnettest 和 NetPerf 都分别安装到两台机器上 软件安装 安装 openonload ## 进入相应的文件夹 cd openonload-201811/ ## 源代码存放 cd scripts/ ## 搭建环境 ./onload_build ## 执行安装 ./onload_install #加载 onload onload_tool reload 安装 Netperf wget http://repo.iotti.biz/CentOS/7/x86_64/netperf-2.7.0-1.el7.lux.x86_64.rpm rpm -i netperf-2.7.0-1.el7.lux.x86_64.rpm 安装 sfnettest wget https://www.openonload.org/download/sfnettest/sfnettest-1.5.0.tgz tar xvf sfnettest-1.5.0.tgz cd sfnettest-1.5.0/src make 调优设置 ## 停止 cpuspeed 服务以避免进入省电模式，降低CPU时钟速度 systemctl stop cpuspeed ## 停止 irqbalance 服务器以防止 OS 在可用的CPU内核之间重新平衡中断 systemctl stop irqbalance ## 停止防火墙辐射器以消除简介消耗 systemctl stop firewalld ## 禁用 interrupt moderation ethtool -C enp1s0f1 rx-usecs-irq 0 adaptive-rx off ## 启动低延时配置：tuned-adm tuned-adm list tuned-adm profile network-latency ## 防止系统进入 CPU 低功耗模式　cstates ## 参考博文: https://williamlfang.github.io/post/2019-12-11-linux-调整-cstate-实现cpu超频/ sfnettest 延时测试 参数说明 --profile=latency：测试延时模式 taskset -c 1：绑定 cpu core 的号码 1 --maxms=10000 指发送的最大数据包大小 --affinity \"1;1\" 指使用 core 1 发送，使用 core 1 接收（可以选不同的core） 服务器首先，在服务器开启 onload --profile=latency taskset -c 1 ./sfnt-pingpong --maxms=10000 --affinity 1,1 运行成功后等待客户端接入 oo:sfnt-pingpong[17337]: Using OpenOnload 201811 Copyright 2006-2018 Solarflare Communications, 2002-2005 Level 5 Networks [2] sfnt-pingpong: server: waiting for client to connect... TCP 测试 onload --profile=latency taskset -c 1 ./sfnt-pingpong --maxms=10000 --affinity 1,1 tcp 127.0.0.1 运行结果如下 oo:sfnt-pingpong[17093]: Using OpenOnload 201811 Copyright 2006-2018 Solarflare Communications, 2002-2005 Level 5 Networks [4] # cmdline: ./sfnt-pingpong --maxms=10000 --affinity 1,1 tcp 127.0.0.1 # version: 1.5.0 # src: 8dc3b027d85b28bedf9fd731362e4968 # date: Wed Dec 11 02:19:49 EST 2019 # uname: Linux localhost.localdomain 3.10.0-1062.4.1.el7.x86_64 #1 SMP Fri Oct 18 17:15:30 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux # cpu: model name : Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz # lspci: 01:00.0 Ethernet controller: Solarflare Communications SFC9120 10G Ethernet Controller (rev 01) # lspci: 01:00.1 Ethernet controller: Solarflare Communications SFC9120 10G Ethernet Controller (rev 01) # lspci: 05:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 15) # enp1s0f0: driver: sfc # enp1s0f0: version: 4.15.0.1012 # enp1s0f0: bus-info: 0000:01:00.0 # enp1s0f1: driver: sfc # enp1s0f1: version: 4.15.0.1012 # enp1s0f1: bus-info: 0000:01:00.1 # enp5s0: driver: r8169 # enp5s0: version: # enp5s0: bus-info: 0000:05:00.0 # virbr0: driver: bridge # virbr0: version: 2.3 # virbr0: bus-info: N/A # virbr0-nic: driver: tun # virbr0-nic: version: 1.6 # virbr0-nic: bus-info: tap # ram: MemTotal: 7872940 kB # tsc_hz: 2999998960 # LD_PRELOAD=libonload.so # onload_version=201811 # EF_TCP_FASTSTART_INIT=0 # EF_POLL_USEC=100000 # EF_TCP_FASTSTART_IDLE=0 # server LD_PRELOAD=libonload.so # percentile=99 # # size mean min median max %ile stddev iter 1 7668 6472 7556 35283 8855 522 650000 2 7064 6133 7010 257486 8064 469 705000 4 6964 6123 6982 16029 7967 369 716000 8 6915 6093 6911 16987 7923 401 721000 16 6904 6113 6866 22018 7916 403 722000 32 6888 6118 6827 15773 7875 384 723000 64 6880 6114 6820 16818 7862 390 724000 128 6895 6172 6833 14807 7890 397 723000 256 6909 6122 6850 20069 7911 391 721000 512 6861 6118 6805 308711 7840 527 726000 1024 6869 6139 6806 27147 7875 407 725000 2048 7124 6391 7064 19685 8141 412 699000 4096 7397 6523 7357 20114 8455 437 674000 8192 7675 6839 7612 19902 8757 432 649000 16384 8481 7628 8417 17966 9577 412 588000 32768 10136 9162 10063 19106 11376 477 492000 65536 20403 18129 20392 41106 22849 1070 245000 测试结果按照发送数据包大小进行排列，输出结果为 RTT(round-trip-time)/2的平均延时时间，单位(ns)，并且列出了最小值、中位数、最大值、百分位以及标准差。比如一个 32 字节的数据包 # size mean min median max %ile stddev iter 32 6888 6118 6827 15773 ","date":"2019-12-11","objectID":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/:7:2","tags":["solarflare","openonload","网络编程"],"title":"Solarflare网卡开发：openonload 安装与调试","uri":"/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":"为了获取最新版本的 wireshark 软件，需要从源代码进行安装。","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":"wireshark 与 tcpdump 是网络抓包的两大神器。其中，前者提供了更加便捷的界面操作，后者则比较适合在命令行进行操作。 安装Ubuntu 可以直接从默认仓库安装，但是提供的是稳(too)定(old)的版本。为了使用新功能，我决定从源代码安装 wireshark。 ","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/:0:0","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":" 下载代码我们可以直接从官网下载最新版本的源代码，或者找到历史版本。最好开启 Chrome 的翻墙功能，下载速度会快一些。 wget https://1.as.dl.wireshark.org/src/wireshark-3.0.7.tar.xz ","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/:1:0","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":" 安装依赖有可能提示找不到 libgcrypt apt install qttools5-dev qttools5-dev-tools libqt5svg5-dev qtmultimedia5-dev build-essential automake autoconf libgtk2.0-dev libglib2.0-dev flex bison libpcap-dev libgcrypt20-dev cmake -y sudo apt-get install libgcrypt20-dev sudo apt-get install keepassx sudo apt-get install build-essential libgl1-mesa-dev ","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/:2:0","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":" 安装 wireshark tar -xf wireshark-3.0.7.tar.xz cd wireshark-3.0.7 mkdir build cd build cmake .. make -j make install 然后查看版本信息 wireshark -v Wireshark 3.0.7 (Git commit 9435717b91f5) Copyright 1998-2019 Gerald Combs \u003cgerald@wireshark.org\u003e and contributors. License GPLv2+: GNU GPL version 2 or later \u003chttp://www.gnu.org/licenses/old-licenses/gpl-2.0.html\u003e This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled (64-bit) with Qt 5.9.7, with libpcap, without POSIX capabilities, without libnl, with GLib 2.56.4, with zlib 1.2.11, without SMI, without c-ares, without Lua, without GnuTLS, with Gcrypt 1.8.1, without Kerberos, without MaxMind DB resolver, without nghttp2, without LZ4, without Snappy, with libxml2 2.9.4, with QtMultimedia, without SBC, without SpanDSP, without bcg729. Running on Linux 4.15.0-20-generic, with Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz (with SSE4.2), with 40091 MB of physical memory, with locale en_US.UTF-8, with libpcap version 1.8.1, with Gcrypt 1.8.1, with zlib 1.2.11, binary plugins supported (0 loaded). Built using gcc 7.4.0. 成功启动 ","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/:3:0","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":" 问题解决 出现错误：file not recognized: File truncated ui/qt/CMakeFiles/qtui.dir/widgets/clickable_label.cpp.o: file not recognized: File truncated collect2: error: ld returned 1 exit status CMakeFiles/wireshark.dir/build.make:557: recipe for target 'run/wireshark' failed make[2]: *** [run/wireshark] Error 1 CMakeFiles/Makefile2:661: recipe for target 'CMakeFiles/wireshark.dir/all' failed make[1]: *** [CMakeFiles/wireshark.dir/all] Error 2 Makefile:140: recipe for target 'all' failed make: *** [all] Error 2 没有明白具体的错误原因，不过在 SO上面找到了这个提示：File not recognized: File truncated GCC error。提供的思路是原来编译的目标文件有问题，直接删掉就好了 Just remove the object file. This error most likely appeared after the previous build was interrupted and object file was not generated completely. rm ui/qt/CMakeFiles/qtui.dir/widgets/clickable_label.cpp.o 抓包抓包现场发来图片 参考链接 Install Latest Wireshark on Ubuntu 18.04 ","date":"2019-12-10","objectID":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/:4:0","tags":["ubuntu","networking","tcp","wireshark","网络","数据"],"title":"Ubuntu 源代码安装 wireshark","uri":"/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/"},{"categories":["Programming"],"content":"最近在学习网络编程，准备仔细研究 Unix Network Programming 的源代码。","date":"2019-12-09","objectID":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/","tags":["unix","network","c","网络编程"],"title":"Unix Network Programming 代码学习","uri":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"},{"categories":["Programming"],"content":" Chap.0 安装源代码","date":"2019-12-09","objectID":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/:0:0","tags":["unix","network","c","网络编程"],"title":"Unix Network Programming 代码学习","uri":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"},{"categories":["Programming"],"content":" 安装步骤 ## git clone git@github.com:williamlfang/unix-network-programming-v3.git cd unix-network-programming-v3-master ./configure cd lib # build the basic library that all programs need make # use \"gmake\" everywhere on BSD/OS systems cd ../libfree # continue building the basic library make ","date":"2019-12-09","objectID":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/:1:0","tags":["unix","network","c","网络编程"],"title":"Unix Network Programming 代码学习","uri":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"},{"categories":["Programming"],"content":" 测试 ## 编译 cd intro make ## 启动服务器 sudo ./daytimetcpsrv ## 运行客户端 ./daytimetcpcli Mon Dec 9 11:45:25 2019 Chap.1 Intro 参考链接 A Simple Introduction To Computer Networking 理解 TCP/IP 网络栈 Linux socket 编程 Welcome to The TCP/IP Guide! Computer Science 60: lab assignments - network programming：使用 wireshark 进行网络编程与抓包分析。 计算机网络协议学习总结 计算机网络：实现一个可靠的运输协议 理解 Linux 网络栈（1）：Linux 网络协议栈简单总结 ","date":"2019-12-09","objectID":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/:2:0","tags":["unix","network","c","网络编程"],"title":"Unix Network Programming 代码学习","uri":"/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"},{"categories":["Programming"],"content":"使用 ssh 登录服务器时，要求保持账户的持续连接状态，不能终端。","date":"2019-12-05","objectID":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/","tags":["Linux","ssh","连接","网络"],"title":"ssh 保持连接不中断","uri":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/"},{"categories":["Programming"],"content":"为了在使用 ssh 登录服务器保持通信连接的持续，我们可以修改服务器端或者客户端。 修改服务器端如果想要对所有的用户都允许保持连接，可以考虑把服务器端的配置作修改，路径是 /etc/ssh/sshd_config vim /etc/ssh/sshd_config ## 增加以下设置 ## 意思是向客户端每60秒发一次保持连接的信号 ClientAliveInterval 60 ## 如果仍要设置断开时间,还有一个参数可以添加 ## 意思是如果客户端60次未响应就断开连接,依据你期望的时间来设定 # ClientAliveCountMax 60 ","date":"2019-12-05","objectID":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/:0:0","tags":["Linux","ssh","连接","网络"],"title":"ssh 保持连接不中断","uri":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/"},{"categories":["Programming"],"content":" 修改客户端如果在服务器端没有权限，我们也可以只修改本地机器的设置，路径是 /etc/ssh/ssh_config vim /etc/ssh/ssh_config ## 连续发送信号 ServerAliveInterval 60 ## 也可以设置最大保持连接次数 # ServerAliveCountMax 60 参考链接 Linux系统下的SSH 使用总结 ","date":"2019-12-05","objectID":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/:1:0","tags":["Linux","ssh","连接","网络"],"title":"ssh 保持连接不中断","uri":"/archives/2019-12-05-ssh-%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%AD%E6%96%AD/"},{"categories":["Programming"],"content":"使用 Clion 在远程服务器进行项目开发 项目配置","date":"2019-12-04","objectID":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/:0:0","tags":["c++","clion","服务器","远程","gdb"],"title":"Clion 远程调试","uri":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 同步本地代码 打开 File -\u003e Setting -\u003e Build,Execution,Deployment -\u003e Deployment 在右边点击 + 进行添加远程服务 setting 根据 Connections 添加远程服务器账户信息 切换到 Mappings 设置本地的代码根目录Local path 设置远程的代码根目录 Deployment path 同步本地代码到远程服务器。由于我们的代码是放在本地机器，而需要在远程服务器进行编译、调试，因此需要把本地代码上传到服务器。点击 Tools -\u003e Deployment 进行配置。当然，最好设置成自动同步，这样一旦本地代码发生变动，就会自动同步到服务器。 由于自动同步只能根据单文件，因此我们需要事先把这个文件夹上传到服务器，然后才能实现自动同步功能。 auto-update ","date":"2019-12-04","objectID":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/:1:0","tags":["c++","clion","服务器","远程","gdb"],"title":"Clion 远程调试","uri":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":" 远程调试 现在已经把本地代码同步到服务器了，我们就可以在服务器进行编译。记得 cmake 指定需要 -DCMAKE_BUILD_TYPE=Debug来请获取调试 ## 服务器端 cd cmake-build-debug cmake .. -DCMAKE_BUILD_TYPE=Debug make build 启动 gdbserver ## 服务器端 ## 指定监听端口 1234 gdbserver :1234 hello gdb 在 Clion 进行调试 添加 gdbserver 调试器 启动对服务器指定端口的调试 debug 参考链接 使用Clion优雅的完全远程自动同步和远程调试c++ CLion 实现远程调试 ","date":"2019-12-04","objectID":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/:2:0","tags":["c++","clion","服务器","远程","gdb"],"title":"Clion 远程调试","uri":"/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"},{"categories":["Programming"],"content":"编程是一门手艺活，仅仅是凭借思而不动、想而不做，是无法完成工作的。我常常把编程比喻成一门手艺活，既需要我们懂得如何设计框架、如何布局，又需要结合实际的材料、配置手中的资源，然后使用娴熟的手艺一点点的认真打磨，最后得到一件称心如意的产品。现在人们喜欢讨论工匠精神，其实是推崇对手艺的尊重，对于一件事情持之以恒的追求。 编程如手艺编程是一门手艺活，仅仅是凭借思而不动、想而不做，是无法完成工作的。我常常把编程比喻成一门手艺活，既需要我们懂得如何设计框架、如何布局，又需要结合实际的材料、配置手中的资源，然后使用娴熟的手艺一点点的认真打磨，最后得到一件称心如意的产品。现在人们喜欢讨论工匠精神，其实是推崇对手艺的尊重，对于一件事情持之以恒的追求。 当然，巧妇难为无米之炊，为了更好的完成工作，我们也需要配合一套得心应手的工具，这些工具犹如我们的左右手，拓展了我们可以活动的想象空间。具体的，在编程领域，我们同样需要一套优良的的开发工具，从而可以极大的提升工作效率。 tmux","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:0:0","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 安装 # Install tmux 2.8 on Centos # install deps yum install -y gcc kernel-devel make ncurses-devel yum install -y automake.noarch # DOWNLOAD SOURCES FOR LIBEVENT AND MAKE AND INSTALL cd /tmp curl -LOk https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz tar -xf libevent-2.1.8-stable.tar.gz cd libevent-2.1.8-stable ./configure --prefix=/usr/local make -j \u0026 make install # DOWNLOAD SOURCES FOR TMUX AND MAKE AND INSTALL cd /tmp curl -LOk https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz tar -xf tmux-2.8.tar.gz cd tmux-2.8 LDFLAGS=\"-L/usr/local/lib -Wl,-rpath=/usr/local/lib\" ./configure --prefix=/usr/local make -j \u0026\u0026 make install pkill tmux # 编译出来的程序在 tmux 目录内，这里假设你还没离开 tmux 目录 cp tmux /usr/bin/tmux -f cp tmux /usr/local/bin/tmux -f # close your terminal window (flushes cached tmux executable) # open new shell and check tmux version tmux -V ## 如果出现乱码 export LANG=en_US.UTF-8 export LC_CTYPE=en_US.UTF-8 tmux -u ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:1:0","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 配置可以通过修改 ~/.tmux.conf 进行设置 # # author : Xu Xiaodong \u003cxxdlhy@gmail.com\u003e # modified : 2017 Apr 29 # #-- base settings --# ## set -g default-terminal \"screen-256color\" set -g default-terminal 'linux' set -ga terminal-overrides \",rxvt-unicode-256color:Tc\" set -sg escape-time 0 set -g display-time 3000 set -g history-limit 65535 set -g base-index 1 set -g pane-base-index 1 set -g renumber-windows on #-- bindkeys --# # prefix key (Ctrl+k) set -g prefix ^k unbind ^b bind k send-prefix # split window unbind '\"' bind - splitw -v # vertical split (prefix -) unbind % #bind | splitw -h # horizontal split (prefix |) bind \\ splitw -h # horizontal split (prefix \\) # select pane bind k selectp -U # above (prefix k) bind j selectp -D # below (prefix j) bind h selectp -L # left (prefix h) bind l selectp -R # right (prefix l) # resize pane bind -r ^k resizep -U 5 # upward (prefix Ctrl+k) bind -r ^j resizep -D 5 # downward (prefix Ctrl+j) bind -r ^h resizep -L 5 # to the left (prefix Ctrl+h) bind -r ^l resizep -R 5 # to the right (prefix Ctrl+l) # swap pane bind ^u swapp -U # swap with the previous pane (prefix Ctrl+u) bind ^d swapp -D # swap with the next pane (prefix Ctrl+d) # select layout bind , select-layout even-vertical bind . select-layout even-horizontal # misc bind e lastp # select the last pane (prefix e) bind ^e last # select the last window (prefix Ctrl+e) bind q killp # kill pane (prefix q) bind ^q killw # kill window (prefix Ctrl+q) # copy mode bind Escape copy-mode # enter copy mode (prefix Escape) bind ^p pasteb # paste buffer (prefix Ctrl+p) unbind -T copy-mode-vi Space bind -T copy-mode-vi v send -X begin-selection # select (v) bind -T copy-mode-vi y send -X copy-pipe \"xclip\" # copy (y) # app bind ! splitw htop # htop (prefix !) bind m command-prompt \"splitw 'exec man %%'\" # man (prefix m) bind % command-prompt \"splitw 'exec perldoc -t %%'\" # perl doc (prefix %) bind / command-prompt \"splitw 'exec ri %%'\" # ruby doc (prefix /) # reload config (prefix r) bind r source ~/.tmux.conf \\; display \"Configuration reloaded!\" #-- statusbar --# set -g status-interval 1 set -g status-keys vi setw -g mode-keys vi setw -g automatic-rename off #-- colorscheme --# # statusbar set -g status-justify right # set -g status-left \"\" # set -g status-right \"\" #左下角 set -g status-left \"#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]\" set -g status-left-length 20 set -g automatic-rename on set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]' set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]' #右下角 set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d %H:%M:%S#[fg=green]]' # -- display ------------------------------------------------------------------- set -g base-index 1 # start windows numbering at 1 setw -g pane-base-index 1 # make pane numbering consistent with windows setw -g automatic-rename on # rename window to reflect current program set -g renumber-windows on # renumber windows when a window is closed set -g set-titles on # set terminal title set -g display-panes-time 800 # slightly longer pane indicators display time set -g display-time 1000 # slightly longer status messages display time set -g status-interval 1 # redraw status line every 10 seconds set -g status-style \"fg=#504945,bg=#282828\" setw -g window-status-current-fg white setw -g window-status-current-bg red setw -g window-status-current-attr bright setw -g window-status-fg cyan setw -g window-status-bg default setw -g window-status-attr dim # window setw -g window-status-separator \" \" setw -g window-status-format \"-\" setw -g window-status-current-format \"+\" setw -g window-status-current-style \"fg=#d79921,bg=#282828\" # pane set -g pane-border-style \"fg=#ebdbb2\" set -g pane-active-border-style \"fg=#d79921\" #开启window事件提示 setw -g monitor-activity on #set -g visual-activity on ## 鼠标设置，不要打开，不然用鼠标选择不了内容 set-option -g mouse on tmux 接着，我们需要安装底部状态栏支持插件 tmux-powerline mkidr -p $HOME/opt cd $HOME/opt mkdir -p .tmux cd .tmux","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:0","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 设置窗口显示 #-- base settings --# ## set -g default-terminal \"screen-256color\" set -g default-terminal 'linux' set -ga terminal-overrides \",rxvt-unicode-256color:Tc\" set -sg escape-time 0 set -g display-time 3000 set -g history-limit 65535 set -g base-index 1 set -g pane-base-index 1 set -g renumber-windows on ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:1","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 修改绑定键原来的绑定是 ctrl+b，总感觉这个有点逆人性，每次按下这两个键的时候整个手掌都是弯曲的，后来就干脆分开使用两只手分别按住一个键，这样就避免了使用单手产生的扭曲感 ##-- bindkeys --# ## prefix key (Ctrl+k) set -g prefix ^k unbind ^b bind k send-prefix ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:2","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 分屏这个是 tmux 的看家本领，允许我们通过快捷键进行屏幕的任意切分，相比于 terminator 的方式要灵活很多。这里我使用了 bind-key（也就是我修改后的 ctrl+k），然后按下 | 进行横向切分 bind-key，然后按下 - 进行纵向切分 bind-key，然后按下 j：跳转下面屏幕 k：跳转上面屏幕 h：跳转左边屏幕 l：跳转右边屏幕 其实这个方向跟 vim 的操作是一样的想法，避免了记忆压力。 同时，我还可以使用快捷键进行屏幕大小调整。 先按下 bind-key （也就是我修改后的 ctrl+k） 然后松开 k，但是不要松开 ctrl 键（如果松开，就变成了上面的屏幕跳转了） 接着使用 h、j、k、l 进行屏幕大小调整 # split window unbind '\"' bind - splitw -v # vertical split (prefix -) unbind % #bind | splitw -h # horizontal split (prefix |) bind \\ splitw -h # horizontal split (prefix \\) # select pane bind k selectp -U # above (prefix k) bind j selectp -D # below (prefix j) bind h selectp -L # left (prefix h) bind l selectp -R # right (prefix l) # resize pane bind -r ^k resizep -U 5 # upward (prefix Ctrl+k) bind -r ^j resizep -D 5 # downward (prefix Ctrl+j) bind -r ^h resizep -L 5 # to the left (prefix Ctrl+h) bind -r ^l resizep -R 5 # to the right (prefix Ctrl+l) # swap pane bind ^u swapp -U # swap with the previous pane (prefix Ctrl+u) bind ^d swapp -D # swap with the next pane (prefix Ctrl+d) # select layout bind , select-layout even-vertical bind . select-layout even-horizontal # misc bind e lastp # select the last pane (prefix e) bind ^e last # select the last window (prefix Ctrl+e) bind q killp # kill pane (prefix q) bind ^q killw # kill window (prefix Ctrl+q) ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:3","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 状态栏显示作为程序员，我们每天都在与终端打交道，几乎所有的视线就是整个屏幕范围。因此，我当然希望所有的监控状态也同样可以在视野所及范围内都一一收下。tmux 也同样允许我们通过修改配置进行调整 #-- colorscheme --# # statusbar set -g status-justify right # set -g status-left \"\" # set -g status-right \"\" #左下角 set -g status-left \"#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]\" set -g status-left-length 20 set -g automatic-rename on set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]' set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]' #右下角 set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d %H:%M:%S#[fg=green]]' # -- display ------------------------------------------------------------------- set -g base-index 1 # start windows numbering at 1 setw -g pane-base-index 1 # make pane numbering consistent with windows setw -g automatic-rename on # rename window to reflect current program set -g renumber-windows on # renumber windows when a window is closed set -g set-titles on # set terminal title set -g display-panes-time 800 # slightly longer pane indicators display time set -g display-time 1000 # slightly longer status messages display time set -g status-interval 1 # redraw status line every 10 seconds set -g status-style \"fg=#504945,bg=#282828\" setw -g window-status-current-fg white setw -g window-status-current-bg red setw -g window-status-current-attr bright setw -g window-status-fg cyan setw -g window-status-bg default setw -g window-status-attr dim # window setw -g window-status-separator \" \" setw -g window-status-format \"-\" setw -g window-status-current-format \"+\" setw -g window-status-current-style \"fg=#d79921,bg=#282828\" # pane set -g pane-border-style \"fg=#ebdbb2\" set -g pane-active-border-style \"fg=#d79921\" #开启window事件提示 setw -g monitor-activity on #set -g visual-activity on ## 鼠标设置，不要打开，不然用鼠标选择不了内容 set-option -g mouse on ## ============================================================================= ## https://github.com/erikw/tmux-powerline set-option -g status on set-option -g status-interval 2 set-option -g status-justify \"centre\" set-option -g status-left-length 150 set-option -g status-right-length 120 set-option -g status-left \"#(~/opt/.tmux/tmux-powerline/powerline.sh left)\" set-option -g status-right \"#(~/opt/.tmux/tmux-powerline/powerline.sh right)\" set-window-option -g window-status-current-format \"#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀\" setw -g window-status-style 'fg=colour9 bg=colour18' setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F ' setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold' # messages set -g message-style 'fg=colour1 bg=colour16 bold' ## ============================================================================= ## ============================================================================= ## 使用 bin++z 实现最大-最小屏 # unbind m # bind m run \". ~/tmux-zoom \" bind -r a select-pane -t .+1 \\; resize-pane -Z # bind -n C-Space resize-pane -Z # Ref https://superuser.com/questions/238702/maximizing-a-pane-in-tmux # #!/bin/bash -f # currentwindow=`tmux list-window | tr '\\t' ' ' | sed -n -e '/(active)/s/^[^:]*: *\\([^ ]*\\) .*/\\1/gp'`; # currentpane=`tmux list-panes | sed -n -e '/(active)/s/^\\([^:]*\\):.*/\\1/gp'`; # panecount=`tmux list-panes | wc | sed -e 's/^ *//g' -e 's/ .*$//g'`; # inzoom=`echo $currentwindow | sed -n -e '/^zoom/p'`; # if [ $panecount -ne 1 ]; then # inzoom=\"\"; # fi # if [ $inzoom ]; then # lastpane=`echo $currentwindow | rev | cut -f 1 -d '@' | rev`; # lastwindow=`echo $currentwindow | cut -f 2- -d '@' | rev | cut -f 2- -d '@' | rev`; # tmux select-window -t $lastwindow; # tmux select-pane -t $lastpane; # tmux swap-pane -s $currentwindow; # tmux kill-window -t $currentwindow; # else # newwindowname=zoom@$currentwindow@$currentpane; # tmux new-window -d -n $newwindowname; # tmux swap-pane -s $newwindowname; # tmux select-window -t $newwindowname; # fi ## -------------------------------------------------- # ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:4","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 设置活跃窗口 ## ----------------------------------------------------- ## 设置活跃窗口的背景颜色 set-option -ga terminal-overrides \",xterm-256color:Tc\" # setw -g window-style 'bg=#504945' # setw -g window-active-style 'bg=#282828' set -g \"window-style\" \"fg=#aab2bf,bg=default\" # set -g \"window-active-style\" \"bg=default\" # setw -g window-style 'bg=#504945' setw -g window-active-style 'bg=#282828,bold' ## ----------------------------------------------------- set-window-option -g clock-mode-colour colour40 #green set-option -g pane-border-fg colour10 set-option -g pane-active-border-fg colour4 # toggle pane synchronization bind s setw synchronize-panes ## ============================================================================= ## 安装 tmux plugin ## 在 Tmux 里面使用 prefix + I 安装插件 # prefix + Ctrl-s - save # prefix + Ctrl-r - restore set -g @plugin 'tmux-plugins/tmux-resurrect' ## 或者手动安装 ## cd ~/Documents ## git clone https://github.com/tmux-plugins/tmux-resurrect run-shell ~/Documents/tmux-resurrect/resurrect.tmux ## ============================================================================= set -g pane-border-status bottom set -g pane-border-format \"#P #T #{pane_current_command}\" ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:5","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":" 屏幕右边显示命令执行时间这个主要为了提醒我们在什么时候执行了操作。其实是通过修改 ~/.oh-my-zsh/themes/agnoster.zsh-theme。不过我把这条放在一起 ## 显示命令执行时间 strlen () { FOO=$1 local zero='%([BSUbfksu]|([FB]|){*})' LEN=${#${(S%%)FOO//$~zero/}} echo $LEN } # show right prompt with date ONLY when command is executed preexec () { DATE=$( date +\"[%H:%M:%S]\" ) local len_right=$( strlen \"$DATE\" ) len_right=$(( $len_right+1 )) local right_start=$(($COLUMNS - $len_right)) local len_cmd=$( strlen \"$@\" ) local len_prompt=$(strlen \"$PROMPT\" ) local len_left=$(($len_cmd+$len_prompt)) RDATE=\"\\033[${right_start}C ${DATE}\" if [ $len_left -lt $right_start ]; then # command does not overwrite right prompt # ok to move up one line #echo -e \"\\033[1A${RDATE}\" # Black='\\033[30m' # Black # Red='\\033[31m' # Red # Green='\\033[32m' # Green # Yellow='\\033[33m' # Yellow # Blue='\\033[34m' # Blue # Purple='\\033[35m' # Purple # Cyan='\\033[36m' # Cyan # White='\\033[37m' # White echo -e \"\\033[1A\\033[36m${RDATE}\\033[36m\" else echo -e \"${RDATE}\" fi } ","date":"2019-12-04","objectID":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/:2:6","tags":["tmux","terminal","zsh","vim"],"title":"tmux:终端神器","uri":"/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/"},{"categories":["Programming"],"content":"samba 提供了从 Windows 操作系统访问 Linux 文件的服务。","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":"注意，samba 在不同的操作系统下的服务名称是不一样的： Ubuntu: smbd CentOS: smb 安装","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:0:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 安装软件 ## Ubuntu sudo apt update sudo apt-get install samba ## CentOS yum install samba ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:1:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 查看状态","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:2:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" Ubuntu apt show samba Package: samba Version: 2:4.7.6+dfsg~ubuntu-0ubuntu2.14 Priority: optional Section: net Origin: Ubuntu Maintainer: Ubuntu Developers \u003cubuntu-devel-discuss@lists.ubuntu.com\u003e Original-Maintainer: Debian Samba Maintainers \u003cpkg-samba-maint@lists.alioth.debian.org\u003e Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 11.3 MB Pre-Depends: dpkg (\u003e= 1.15.6~) Depends: adduser, libpam-modules, libpam-runtime (\u003e= 1.0.1-11), lsb-base (\u003e= 4.1+Debian), procps, python (\u003c\u003c 2.8), python-dnspython, python-samba, samba-common (= 2:4.7.6+dfsg~ubuntu-0ubuntu2.14), samba-common-bin (= 2:4.7.6+dfsg~ubuntu-0ubuntu2.14), tdb-tools, python (\u003e= 2.7~), python2.7:any, python:any (\u003c\u003c 2.8), python:any (\u003e= 2.7~), libattr1 (\u003e= 1:2.4.46-8), libbsd0 (\u003e= 0.0), libc6 (\u003e= 2.14), libldb1 (\u003e= 0.9.21), libpopt0 (\u003e= 1.14), libpython2.7 (\u003e= 2.7), libtalloc2 (\u003e= 2.0.4~git20101213), libtdb1 (\u003e= 1.2.7+git20101214), libtevent0 (\u003e= 0.9.16), samba-libs (= 2:4.7.6+dfsg~ubuntu-0ubuntu2.14) Recommends: attr, logrotate, samba-dsdb-modules, samba-vfs-modules Suggests: bind9 (\u003e= 1:9.5.1), bind9utils, ctdb, ldb-tools, ntp | chrony (\u003e= 3.0-1), smbldap-tools, ufw, winbind Enhances: bind9, ntp Homepage: http://www.samba.org Task: samba-server, ubuntu-budgie-desktop Supported: 5y Download-Size: 854 kB APT-Manual-Installed: yes APT-Sources: http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages Description: SMB/CIFS file, print, and login server for Unix Samba is an implementation of the SMB/CIFS protocol for Unix systems, providing support for cross-platform file and printer sharing with Microsoft Windows, OS X, and other Unix systems. Samba can also function as an NT4-style domain controller, and can integrate with both NT4 domains and Active Directory realms as a member server. . This package provides the components necessary to use Samba as a stand-alone file and print server or as an NT4 or Active Directory domain controller. For use in an NT4 domain or Active Directory realm, you will also need the winbind package. . This package is not required for connecting to existing SMB/CIFS servers (see smbclient) or for mounting remote filesystems (see cifs-utils). N: There is 1 additional record. Please use the '-a' switch to see it ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:2:1","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" Centos rpm -qa |grep samba samba-client-libs-4.8.3-4.el7.x86_64 samba-4.8.3-4.el7.x86_64 samba-common-libs-4.8.3-4.el7.x86_64 samba-common-tools-4.8.3-4.el7.x86_64 samba-common-4.8.3-4.el7.noarch samba-libs-4.8.3-4.el7.x86_64 ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:2:2","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 启动服务","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:3:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" Ubuntu sudo systemctl start smbd sudo systemctl status smbd ## 允许防火墙通过 sudo ufw allow 'Samba' ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:3:1","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" CentOS ## start/ stop/ restart systemctl start smb ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:3:2","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 查看服务进程","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:4:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" Ubuntu sudo systemctl status smbd ● smbd.service - Samba SMB Daemon Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2019-12-14 15:19:43 CST; 6min ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Main PID: 4232 (smbd) Status: \"smbd: ready to serve connections...\" Tasks: 4 (limit: 4915) CGroup: /system.slice/smbd.service ├─4232 /usr/sbin/smbd --foreground --no-process-group ├─4236 /usr/sbin/smbd --foreground --no-process-group ├─4237 /usr/sbin/smbd --foreground --no-process-group └─4238 /usr/sbin/smbd --foreground --no-process-group Dec 14 15:19:43 william-pc systemd[1]: Starting Samba SMB Daemon... Dec 14 15:19:43 william-pc systemd[1]: Started Samba SMB Daemon. ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:4:1","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" CentOS service smb status Redirecting to /bin/systemctl status smb.service ● smb.service - Samba SMB Daemon Loaded: loaded (/usr/lib/systemd/system/smb.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2019-12-03 10:34:47 CST; 17min ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Main PID: 36896 (smbd) Status: \"smbd: ready to serve connections...\" Tasks: 5 CGroup: /system.slice/smb.service ├─36896 /usr/sbin/smbd --foreground --no-process-group ├─36901 /usr/sbin/smbd --foreground --no-process-group ├─36902 /usr/sbin/smbd --foreground --no-process-group ├─36903 /usr/sbin/smbd --foreground --no-process-group └─37042 /usr/sbin/smbd --foreground --no-process-group Dec 03 10:34:47 hicloud systemd[1]: Starting Samba SMB Daemon... Dec 03 10:34:47 hicloud smbd[36896]: [2019/12/03 10:34:47.207282, 0] ../lib/util/become_daemon.c:1...ady) Dec 03 10:34:47 hicloud smbd[36896]: daemon_ready: STATUS=daemon 'smbd' finished starting up and ...ions Dec 03 10:34:47 hicloud systemd[1]: Started Samba SMB Daemon. Hint: Some lines were ellipsized, use -l to show in full. ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:4:2","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 设置开机启动 systemctl enable smb ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:5:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 临时关闭 SeLinux需要关闭 SeLinux 才可以让 Windows 用户访问 samba setenforce 0 查看 SeLinux 状态 sestatus SELinux status: enabled SELinuxfs mount: /sys/fs/selinux SELinux root directory: /etc/selinux Loaded policy name: targeted Current mode: permissive Mode from config file: enforcing Policy MLS status: enabled Policy deny_unknown status: allowed Max kernel policy version: 31 ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:6:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 永久关闭 SeLinux修改配置文件/etc/selinux/config，将SELINU置为disabled cat /etc/selinux/config # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. ## SELINUX=enforcing SELINUX=disabled # SELINUXTYPE= can take one of three values: # targeted - Targeted processes are protected, # minimum - Modification of targeted policy. Only selected processes are protected. # mls - Multi Level Security protection. SELINUXTYPE=targeted 重启后可以查看SeLinux状态 sestatus SELinux status: disabled 用户设置","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:7:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 添加用户 useradd fl ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:8:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 设置密码 smbpasswd -a fl 然后重启 samba systemctl restart samba 设置访问有关访问权限配置参数在 vim /etc/samba/smb.conf # See smb.conf.example for a more detailed config file or # read the smb.conf manpage. # Run 'testparm' to verify the config is correct after # you modified it. [global] workgroup = SAMBA security = user passdb backend = tdbsam printing = cups printcap name = cups load printers = yes cups options = raw [homes] comment = Home Directories valid users = %S, %D%w%S browseable = No read only = No inherit acls = Yes [printers] comment = All Printers path = /var/tmp printable = Yes create mask = 0600 browseable = No [fl] comment= fl files path = /home/fl/ browseable = yes writable = yes available = yes valid users = fl,root [pc] comment= pc files path = /home/pc/ browseable = yes writable = yes available = yes valid users = pc,root [shared] comment = share files path = /shared/ browseable = yes writable = yes available = yes valid users = root,fl,pc 一般而言，我们对某个用户进行设置 [fl] comment= fl files path = /home/fl/ browseable = yes writable = yes available = yes valid users = fl,root Windows 连接[X] 1. 网络连接 （window：程序-\u003e程序和功能-\u003e启动或者关闭Windows功能-\u003eSamba，打勾）直接在文件栏填写：\\\\192.168.1.199\\fl 填写 \\\\192.168.1.199\\fl （对应于以上的用户，直接访问 /home/fl），注意 Windows 使用 \\\\ 然后使用账户、密码即可登录 Windows 没有权限访问的解决方法有可能是 Centos 打开了 selinux， 需要关闭即可 setenforce 0 ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:9:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 目录自动更新执行下列步骤： 在注册表中找到并单击以下注册表项： HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Policies/Explorer（如果没有，直接新增即可） 在“编辑”菜单上，指向“新建”，然后单击“DWORD 值”。 键入 NoSimpleNetIDList，然后按 Enter。 在“编辑”菜单上，单击“修改”。 键入 1，然后单击“确定”。 ","date":"2019-12-03","objectID":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/:10:0","tags":["centos7","samba","windows","权限","selinux"],"title":"samba文件配置与访问权限","uri":"/archives/2019-12-03-samba%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" 安装 cd ~/Downloads ## 官网下载 https://portal.influxdata.com/downloads/ wget https://dl.influxdata.com/influxdb/releases/influxdb_1.7.9_amd64.deb ## 开始安装 sudo dpkg -i influxdb_1.7.9_amd64.deb ## 启动服务 /bin/systemctl start influxdb.service ## 打开服务 influx Connected to http://localhost:8086 version 1.7.9 InfluxDB shell version: 1.7.9 \u003e \u003e help Usage: connect \u003chost:port\u003e connects to another node specified by host:port auth prompts for username and password pretty toggles pretty print for the json format chunked turns on chunked responses from server chunk size \u003csize\u003e sets the size of the chunked responses. Set to 0 to reset to the default chunked size use \u003cdb_name\u003e sets current database format \u003cformat\u003e specifies the format of the server responses: json, csv, or column precision \u003cformat\u003e specifies the format of the timestamp: rfc3339, h, m, s, ms, u or ns consistency \u003clevel\u003e sets write consistency level: any, one, quorum, or all history displays command history settings outputs the current settings for the shell clear clears settings such as database or retention policy. run 'clear' for help exit/quit/ctrl+d quits the influx shell show databases show database names show series show series information show measurements show measurement information show tag keys show tag key information show field keys show field key information A full list of influxql commands can be found at: https://docs.influxdata.com/influxdb/latest/query_language/spec/ ","date":"2019-12-02","objectID":"/archives/2019-12-02-influxdb-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8C%97/:0:0","tags":["influxDB","时间序列","高频交易","数据库"],"title":"influxDB 入坑指北","uri":"/archives/2019-12-02-influxdb-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8C%97/"},{"categories":["Programming"],"content":"先启动远程服务器的 jupyter notebook 服务，然后在本地进行端口转发，通过打开本地浏览器即可访问。","date":"2019-12-02","objectID":"/archives/2019-12-02-jupyter%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["jupyter","python","远程","服务器"],"title":"Jupyter端口转发运行远程服务器","uri":"/archives/2019-12-02-jupyter%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 登录服务器打开终端执行命令 lhg@lhg-Ubuntu:~$ rss@my Last login: Mon Dec 2 10:18:29 2019 from 192.168.10.111 [rss@rss ~]$ cd python_hg/ [rss@rss python_hg]$ ll total 24K drwxrwxr-x. 3 rss rss 4.0K Nov 29 20:33 . drwx------. 46 rss 1000 4.0K Dec 2 10:04 .. drwxrwxr-x. 2 rss rss 4.0K Nov 29 20:05 .ipynb_checkpoints -rw-rw-r--. 1 rss rss 4.5K Nov 29 20:33 Untitled1.ipynb -rw-rw-r--. 1 rss rss 555 Nov 4 10:56 Untitled.ipynb [rss@rss python_hg]$ bash ~/activate_conda.sh 启动服务器的 Jupyter Notebook 进程 cd ~/python_hg/ jupyter notebook --generate-config [rss@rss python_hg]$ nohup jupyter notebook --no-browser \u0026 [rss@rss python_hg]$ jupyter-notebook password ## 输入密码 [rss@rss python_hg]$ jupyter notebook list 本地端口转发在本地机器上执行 ## 如果已经占用端口，执行命令 sudo fuser -k 8890/tcp ## 启动后台服务 nohup ssh -N -L 8890:localhost:8890 rss@121.46.13.125 -p 49170\u0026 打开浏览器即可访问 http://localhost:8890。 ","date":"2019-12-02","objectID":"/archives/2019-12-02-jupyter%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["jupyter","python","远程","服务器"],"title":"Jupyter端口转发运行远程服务器","uri":"/archives/2019-12-02-jupyter%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":"完全删除用户。","date":"2019-12-02","objectID":"/archives/2019-12-02-linux-%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/","tags":["Linux","userdel","groupdel"],"title":"Linux 完全删除用户","uri":"/archives/2019-12-02-linux-%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"},{"categories":["Programming"],"content":" userdel git ## 提示错误 ## userdel: group git not removed because it is not the primary group of user git. usermod -g git git groupdel git ","date":"2019-12-02","objectID":"/archives/2019-12-02-linux-%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/:0:0","tags":["Linux","userdel","groupdel"],"title":"Linux 完全删除用户","uri":"/archives/2019-12-02-linux-%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"},{"categories":["Programming"],"content":"为了保证安装，我们通常使用公钥登录的方式，可以避免输入密码。但是如果权限管理不正确，即使上传了本地公钥后，ssh 登录连接仍然提示需要输入密码。","date":"2019-12-02","objectID":"/archives/2019-12-02-%E8%A7%A3%E5%86%B3ssh%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8D%E9%9C%80%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["ssh","密码","git"],"title":"解决ssh上传公钥到服务器仍需输入密码的问题","uri":"/archives/2019-12-02-%E8%A7%A3%E5%86%B3ssh%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8D%E9%9C%80%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["Programming"],"content":"为了保证安装，我们通常使用公钥登录的方式，可以避免输入密码。但是如果权限管理不正确，即使上传了本地公钥后，ssh 登录连接仍然提示需要输入密码。 这主要是因为权限设置的问题。参考链接：SSH 上传公钥到服务器后还需要密码。 貌似是.ssh目录和authorized的权限不对，ssh -vvT git@serverip时出现了：ignored authorized_keys bad ownership or modes for directory。然后google搜答案.将.ssh的权限改为700,authorized_keys权限改为600即可。 cd ~/ mkdir .ssh chmod 700 .ssh ## touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys ## touch .ssh/config chmod 600 .ssh/config Host lyb HostName 127.0.0.1 Port 10135 User admin ","date":"2019-12-02","objectID":"/archives/2019-12-02-%E8%A7%A3%E5%86%B3ssh%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8D%E9%9C%80%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["ssh","密码","git"],"title":"解决ssh上传公钥到服务器仍需输入密码的问题","uri":"/archives/2019-12-02-%E8%A7%A3%E5%86%B3ssh%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8D%E9%9C%80%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["Programming"],"content":"今天在网上看到一个 `R` 编程语言的扩展包，解决了长期以来困扰我的一个难题：如果在本地终端编辑运行位于远程服务器上的 `R` 命令脚本，并在需要的时候，能够把远程的画图同步输出到本地，使得在本地也可以浏览画图效果。","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" 痛点今天在网上看到一个 R 编程语言的扩展包，解决了长期以来困扰我的一个难题：如果在本地终端编辑运行位于远程服务器上的 R 命令脚本，并在需要的时候，能够把远程的画图同步输出到本地，使得在本地也可以浏览画图效果。针对这个问题，其实我们可以有以下至少三种解决方案： Install RStudio Server on the remote server and use that from a web browser on your local machine. Graphics output is shown in the IDE. Use X11 forwarding (ssh -X|Y). Graphics output is sent back to your machine. Use VNC with a linux desktop environment like KDE or GNOME. 当然，第一种使用 Rstudio 其实是非常好的方案，运行在网页打开，整个界面其实就是本地化的 IDE，这也是我们团队目前使用的方案。但是，对于我这样使用惯了终端命令行的开发人员，更倾向于在 Sublime 编辑脚本，然后通过 SublimeREPL 把命令发送到远程服务器的解释器进行运行。长期以来，我一直在苦苦寻找这样的方案。 今天隆重介绍这个优秀的扩展包：rmote 解决","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:0:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" ssh 登录服务器rmote 默认开启 4321 的服务端口，可以通过 rmote::start_rmote() 进行设置。这个命令是把远程消息同步映射到本地浏览器端 ssh -L 4321:localhost:4321 fl@192.168.1.166 ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:1:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" 启动 R 服务通过以上命令我们就登录了远程服务器，接下来是启动 R 进程开始运行 R [14:44:16] R version 3.5.1 (2018-07-02) -- \"Feather Spray\" Copyright (C) 2018 The R Foundation for Statistical Computing Platform: x86_64-redhat-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications. Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R. Attaching package: ‘emayili’ The following object is masked from ‘package:base’: body \u003e ## 可以设置不同的端口 rmote::start_rmote() ?start_rmote start_rmote package:rmote R Documentation Initialize a remote servr Description: Initialize a remote servr Usage: start_rmote(server_dir = file.path(tempdir(), \"rmote_server\"), port = 4321, daemon = TRUE, help = TRUE, graphics = TRUE, basegraphics = TRUE, htmlwidgets = TRUE, hostname = TRUE, history = TRUE) Arguments: server_dir: directory to launch servr from port: port to run servr on daemon: logical - should the server be started as a daemon? help: (logical) send results of `?` to servr graphics: (logical) send traditional lattice / ggplot2 plots to servr basegraphics: (logical) send base graphics to servr htmlwidgets: (logical) send htmlwidgets to servr hostname: (logical) try to get hostname and use it in viewer page title history: (logical) should history thumbnails be created and shown in the viewer? ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:2:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" 运行命令输入命令运行 ?plot library(ggplot2) qplot(mpg, wt, data=mtcars, colour=cyl) ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:3:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" 本地浏览器查看这样，我们可以在浏览器打开 http://localhost:4321 即可查看图片。 Sublime 集成快捷键 // 使用 Rmote 功能，实现远程服务器图片在本地浏览 { \"keys\": [\"f8\"], \"caption\": \"SublimeREPL: Rmote166\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"external_id\": \"r\", \"additional_scopes\": [\"tex.latex.knitr\"], \"encoding\": { \"windows\": \"$win_cmd_encoding\", \"linux\": \"utf8\", \"osx\": \"utf8\" }, \"soft_quit\": \"\\nquit(save=\\\"no\\\")\\n\", \"cmd\": {\"linux\": [ \"ssh\", \"-L\", \"4321:localhost:4321\", \"fl@192.168.1.166\", \"-p22\", \"R\",\"--interactive\", \"--no-readline\" ] }, \"cwd\": \"$file_path\", \"extend_env\": { \"osx\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"linux\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"windows\": {} }, \"cmd_postfix\": \"\\n\", \"suppress_echo\": { \"osx\": true, \"linux\": true, \"windows\": false }, \"syntax\": \"Packages/R/R Console.tmLanguage\" } }, 问题","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:4:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":" 提示: - not sending to rmote because another graphics device has been opened... - sending to the open graphics device instead... - to send to rmote, close all active graphics devices using graphics.off() 说明已经有图片打开，需要关闭后即可 graphics.off() ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/:5:0","tags":["R","rmote","Rstudio","Sublime","服务器","画图"],"title":"本地终端运行远程R命令，并输出图像","uri":"/archives/2019-11-29-%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8Br%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BE%93%E5%87%BA%E5%9B%BE%E5%83%8F/"},{"categories":["Programming"],"content":"通过在私有服务器搭建 git 服务，实现团队之间的代码贡献与版本控制。","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 搭建 Git 服务器第一步，安装git： $ sudo apt-get install git 第二步，创建一个git用户，用来运行git服务： $ sudo adduser git 第三步，创建证书登录： 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。 cat ~/.ssh/id_rsa.pub ## 复制公钥到 /home/git/.ssh/authorized_keys 第四步，初始化Git仓库： 先选定一个目录作为Git仓库，假定是/srv/test.git，在/srv目录下输入命令： sudo git init --bare test.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git： sudo chown -R git:git test.git 第五步，禁用shell登录： 出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行： git:x:1001:1001:,,,:/home/git:/bin/bash 改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。 第六步，克隆远程仓库： 现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行： $ git clone git@server:/srv/sample.git Cloning into 'sample'... warning: You appear to have cloned an empty repository. 剩下的推送就简单了。 版本控制 ## 如果没有使用 gitosis ## git clone git@47.98.117.71:/home/git/codebase/test.git ## 如果使用 gitosis, 默认存放在 /home/git/repositories git clone git@47.98.117.71:test.git git checkout master git pull git branch dev git checkout dev git add ./* git commit -m \"modify dev\" git push origin dev git checkout master git merge dev git add ./* git commit -m \"modify master\" git push origin master ## 本地获取其他分支 ## 将远程git仓库里的指定分支拉取到本地（本地不存在的分支） git checkout -b 本地分支名 origin/远程分支名 ## 如果出现提示： ## fatal: Cannot update paths and switch to branch 'dev2' at the same time. ## Did you intend to checkout 'origin/dev2' which can not be resolved as commit? ## 表示拉取不成功。需要先执行 git fetch ## 然后再执行 git checkout -b 本地分支名 origin/远程分支名 团队管理","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 使用 gitosis 管理权限 gitosis 现已经被改写升级成 gitolite, 更好得支持在 branch 级别的权限控制 把团队成员的公钥保存到 /home/git/.ssh/authorized_keys 文件的做法，对于小规模的队伍是可行的。但是，这样的弊端也是十分明显： 随着团队规模的扩大、成员的离开，需要重复的增加/删除成员的公钥，这样比较繁琐，而且存在安全隐患 git默认的权限是对于所有成员开放的，即所有成员都拥有对项目的读写权限，如果是非管理员用户，不小心在分支修改了代码，但是提交到了master上面，有可能导致整个项目崩盘 此外，我们还希望给部分成员拥有管理权限，部分成员拥有可读可写权限，而剩下的[实习]成员则只有可读权限，这个需要通过项目的权限管理机制实现。 ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:0","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 安装 gitosisgitosis 是 python 项目，需要安装 python-setuptools 模块 apt-get install python-setuptools 然后安装 gitosis cd ~ git clone https://github.com/tv42/gitosis.git cd gitosis sudo python setup.py install 默认情况下，gitosis 会把项目放在 /home/git/repositories total 16 drwxr-x--- 8 git git 4096 Nov 30 13:22 gitosis-admin.git drwxr-x--- 7 git git 4096 Nov 30 13:05 solarflare.git drwxr-x--- 7 git git 4096 Nov 30 13:22 test2.git drwxr-x--- 7 git git 4096 Nov 30 13:06 test.git 如果原来代码已经放在别的文件夹，可以使用 ln ln -s /opt/git /home/git/repositories Gitosis 将会帮我们管理用户公钥，所以先把当前控制文件改名备份，以便稍后重新添加，准备好让 Gitosis 自动管理 authorized_keys 文件： mv /home/git/.ssh/authorized_keys /home/git/.ssh/authorized_keys_bk 接下来，修改 git 通过 shell 登录 vim /etc/passwd ## 修改成如下 git:x:1000:1000::/home/git:/bin/sh ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:1","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 增加管理员gitosis 默认会搭建一个 gitosis-admin.git 的仓库用来管理所有的用户权限。因此，我们需要增加一个代码管理员来管理这个repo，即只有这个用户才有权限修改项目的权限归属。 比如，我(william)的本地机器作为 gitosis-admin.git 的所有者，需要把本地的 id_rsa.pub 加入到 gitosis-admin.git，然后开始初始化仓库 scp ~/.ssh/id_rsa.pub root@47.98.117.71:/tmp sudo -H -u git gitosis-init \u003c /tmp/id_rsa.pub 这样，我(william)的本地机器变成了 gitosis-admin.git 的所有者，管理所有仓库的权限。 接下来，需要手工对该仓库中的 post-update 脚本加上可执行权限： sudo chmod 755 /home/git/gitosis-admin.git/hooks/post-update 试着登录服务器的git ssh git@47.98.117.71 PTY allocation request failed on channel 0 ERROR:gitosis.serve.main:Need SSH_ORIGINAL_COMMAND in environment. Connection to 47.98.117.71 closed. 说明 Gitosis 认出了该用户的身份，但由于没有运行任何 Git 命令，所以它切断了连接。那么，现在运行一个实际的 Git 命令 — 克隆 Gitosis 的控制仓库 cd ~/Documents git clone git@47.98.117.71:gitosis-admin.git cd gitosis-admin gitosis.conf keydir On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean total 20K drwxrwxr-x 4 william william 4.0K Nov 30 13:22 ./ drwxr-xr-x 50 william william 4.0K Nov 30 12:57 ../ drwxrwxr-x 8 william william 4.0K Nov 30 15:29 .git/ -rw-rw-r-- 1 william william 399 Nov 30 13:22 gitosis.conf drwxrwxr-x 2 william william 4.0K Nov 30 13:10 keydir/ 其中 gitosis.conf是配置文件 keydir存放公钥.pub cat gitosis.conf [gitosis] [group gitosis-admin] members = william.lian.fang@gmail.com writable = gitosis-admin [group hicloud-hft] members = william.lian.fang@gmail.com writable = solarflare [group hicloud-hft] members = william.lian.fang@gmail.com fl166 writable = test [group hicloud-test] members = william.lian.fang@gmail.com writable = test2 [group hicloud-test-readonly] members = fl166 readonly = test2 cd keydir ll total 16K drwxrwxr-x 2 william william 4.0K Nov 30 13:10 ./ drwxrwxr-x 4 william william 4.0K Nov 30 13:22 ../ -rw-rw-r-- 1 william william 1.2K Nov 30 13:10 fl166.pub -rw-rw-r-- 1 william william 409 Nov 30 12:42 'william.lian.fang@gmail.com.pub' 看到上面的文件，如 fl166.pub，存放的便是公钥，这个文件名需要对应以上的 members 才能够被识别。 我们可以看出 对于 test.git, william.lian.fang@gmail.com和fl166 拥有 writable 的可读可写权限。 而对于 test2.git, william.lian.fang@gmail.com 拥有 writable 的可读可写权限, 而 fl166 只有读的权限，即不可参与项目代码修改，如果推送修改会报错 ERROR:gitosis.serve.main:Repository write access denied fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:2","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 使用 gitolite 管理权限","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:0","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 安装 gitolite由于 gitolite 使用 Perl 编写，因此我们需要先安装 sudo yum install perl 同样，我们需要修改 vim /etc/passwd ## 修改成如下 git:x :1000:1000::/home/git:/bin/sh 然后切换到用户 git 安装 su git cd /home/git git clone git://github.com/sitaramc/gitolite ## 安装到 /home/git/bin 目录下 mkdir -p /home/git/bin ./gitolite/install -to /home/git/bin/ ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:1","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 添加管理员可以有两种方式添加管理员 服务器作为管理员 第三方用户作为管理员 我更倾向第二种方法，因为这样可以避免频繁的登录服务器操作。 ## !!! 在本地机器操作 scp ~/.ssh/id_rsa.pub root@47.98.117.71:/home/git/.ssh/william.pub Gitolite 将会帮我们管理用户公钥，所以先把当前控制文件改名备份，以便稍后重新添加，准备好让 Gitosis 自动管理 authorized_keys 文件： cd ~/ chmod 700 -R .ssh chmod 600 authorized_keys mv /home/git/.ssh/authorized_keys /home/git/.ssh/authorized_keys_bk 然后在服务器终端操作 /home/git/bin/gitolite setup -pk /home/git/.ssh/william.pub Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/ Initialized empty Git repository in /home/git/repositories/testing.git/ 出现以上消息说明操作成功，我们可以看到在 /home/git/repositories 初始化了两个repo ll total 8 drwx------ 8 git git 4096 Dec 1 15:15 gitolite-admin.git drwx------ 7 git git 4096 Dec 1 15:15 testing.git 如此一来，我们便可以在 william 的这台电脑上设置用户权限了。 ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:2","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 设置用户权限我们在本地机器（william）终端操作 ## 本地机器 william cd ~/Documents git clone git@47.98.117.71:gitolite-admin.git cd gitolite-admin ll total 20K drwxrwxr-x 5 william william 4.0K Dec 1 14:24 ./ drwxr-xr-x 52 william william 4.0K Dec 1 14:34 ../ drwxrwxr-x 2 william william 4.0K Dec 1 15:07 conf/ drwxrwxr-x 8 william william 4.0K Dec 1 15:43 .git/ drwxrwxr-x 2 william william 4.0K Dec 1 15:15 keydir/ 其中： keydir 用来存放用户的 id_rsa.pub 公钥，文件名字对应用户名称，如 fl166.pub 则对应 fl166 这个用户，需要在 gitolite.conf 配置文件使用到。 cd keydir ll total 16K drwxrwxr-x 2 william william 4.0K Dec 1 15:15 ./ drwxrwxr-x 5 william william 4.0K Dec 1 14:24 ../ -rw-rw-r-- 1 william william 409 Dec 1 14:28 fl166.pub -rw-rw-r-- 1 william william 409 Dec 1 14:24 git_admin_william.pub conf 是配置文件，修改用户所属项目的读写权限 cd conf ll total 12K drwxrwxr-x 2 william william 4.0K Dec 1 15:07 ./ drwxrwxr-x 5 william william 4.0K Dec 1 14:24 ../ -rw-rw-r-- 1 william william 210 Dec 1 15:15 gitolite.conf cat gitolite.conf repo gitolite-admin RW+ = git_admin_william repo testing RW+ = @all repo test1 RW+ = @all repo test2 RW+ = git_admin_william R master = fl166 RW+ from166 = fl166 这里，以 test2 为例，说明各个用户的权限 git_admin_william 拥有顶级的可读（R）、可写（W）、以及强制更新（+）权限 fl166 只拥有对 master 分支的读取权限，没有其他（写）权限 fl166 还拥有对的分支 from166 的可读（R）、可写（W）、以及强制更新（+）权限 ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:3","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":" 开发项目结构 参考链接 gitosis 安装使用及错误整理：步骤讲解比较详细 git 团队协作：快速入门必备 ","date":"2019-11-29","objectID":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/:3:0","tags":["Git","Ali","Cloud","Server","version","Coding"],"title":"搭建阿里云Git服务器","uri":"/archives/2019-11-29-%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91git%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Programming"],"content":"当前激活码可以使用至2089年7月。","date":"2019-11-27","objectID":"/archives/2019-11-27-clion-%E6%BF%80%E6%B4%BB%E7%A0%81/","tags":["Clion","JetBrains","PyCharm"],"title":"Clion 激活码","uri":"/archives/2019-11-27-clion-%E6%BF%80%E6%B4%BB%E7%A0%81/"},{"categories":["Programming"],"content":" 更新 ✅Jetbrains系列产品2019.3.1最新激活方法[持续更新] 旧时代 ❌2019 Clion PyCharm 激活码 在/etc/hosts文件末尾添加两行 0.0.0.0 account.jetbrains.com 0.0.0.0 www.jetbrains.com 打开 clion/pycharm，选择 Activate code，输入 812LFWMRSH-eyJsaWNlbnNlSWQiOiI4MTJMRldNUlNIIiwibGljZW5zZWVOYW1lIjoi5q2j54mIIOaOiOadgyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNC0yMSIsInBhaWRVcFRvIjoiMjAyMC0wNC0yMCJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNC0yMSIsInBhaWRVcFRvIjoiMjAyMC0wNC0yMCJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDQtMjEiLCJwYWlkVXBUbyI6IjIwMjAtMDQtMjAifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDQtMjEiLCJwYWlkVXBUbyI6IjIwMjAtMDQtMjAifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDQtMjEiLCJwYWlkVXBUbyI6IjIwMjAtMDQtMjAifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDQtMjEiLCJwYWlkVXBUbyI6IjIwMjAtMDQtMjAifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDQtMjEiLCJwYWlkVXBUbyI6IjIwMjAtMDQtMjAifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA0LTIxIiwicGFpZFVwVG8iOiIyMDIwLTA0LTIwIn0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNC0yMSIsInBhaWRVcFRvIjoiMjAyMC0wNC0yMCJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-ti4tUsQISyJF/zfWxSHCr+IcYrX2w24JO5bUZCPIGKSi+IrgQ0RT2uum9n96o+Eob9Z1iQ9nUZ6FJdpEW5g0Exe6sw8fLrWMoLFhtCIvVgQxEEt+M7Z2xD0esmjP1kPKXZyc/i+NCxA2EO2Sec9uifqklBGP1L3xoENAw2QsIWBfttIe6EPWhbS8TIMMr2vF/S3HrN8To5Hj5lwD/t1GHgFK1uWrhsuifAiKcVzqogybzGiR1h2+yNYTMbKxP7uPCcdYMsIyrBNVRGA3IuEJgyGQTQlFbnVQoVUTGPW2tQxprmC464wMjKi40JHh27WzjOHPwgzxDaigwn4Z0EbSpA==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow== ","date":"2019-11-27","objectID":"/archives/2019-11-27-clion-%E6%BF%80%E6%B4%BB%E7%A0%81/:0:0","tags":["Clion","JetBrains","PyCharm"],"title":"Clion 激活码","uri":"/archives/2019-11-27-clion-%E6%BF%80%E6%B4%BB%E7%A0%81/"},{"categories":["Programming"],"content":"在Ubuntu操作系统下，如果使用unzip解压zip压缩包文件会出现中文乱码的问题。解决方法是使用unar使得其能够根据系统的编码自动转换。 unzip 出现中文乱码 unzip doc.zip [14:45:55] Archive: doc.zip creating: doc/ inflating: doc/CATS╧╡═│┐═╗з╢╦▓▀┬╘╗╪▓т║═╜╗╥╫╣ж─▄╩╣╙├╦╡├ў.pdf inflating: doc/CATS╧╡═│┐ь╜▌╜╗╥╫.doc extracting: doc/CSV╬─╝■╔и╡е.csv inflating: doc/CSV╬─╝■╔и╡е╜╗╥╫╩╣╙├╦╡├ў.docx inflating: doc/CSV╬─╝■╔и╡е╕ё╩╜╦╡├ў.xls inflating: doc/s000001_S0_╒╦╗з╜и▓╓╖╢└¤.csv inflating: doc/╗∙╙┌java╡─CATS╧╡═│┐═╗з╢╦▓▀┬╘┐Є╝▄╩╣╙├╦╡├ў.pdf inflating: doc/╗∙╙┌python╡─CATS╧╡═│┐═╗з▓▀┬╘┐Є╝▄╩╣╙├╦╡├ў.pdf inflating: doc/╢р╞╖╓╓╠╫└√╧┬╡е╣д╛▀.pdf inflating: doc/╢р▓▀┬╘╫щ║╧╖╢└¤.csv extracting: doc/╢р▓▀┬╘╫╘╢п╘╦╨╨.csv inflating: doc/╔и╡е╜╗╥╫╩╣╙├╦╡├ў.docx inflating: doc/╓╣╙п╓╣╦Ё▓╬╩¤╖╢└¤.csv inflating: doc/╓╣╙п╓╣╦Ё▓╬╩¤╦╡├ў.xls inflating: doc/╒╟═г░х╕·┬Є╓╕┴ю╖╢└¤.csv inflating: doc/▓▀┬╘═и╙├╓╕┴ю╖╢└¤.csv inflating: doc/▓▀┬╘═и╙├╕ё╩╜╦╡├ў.xls inflating: doc/╦у╖и╜╗╥╫╡╝╚ы╬─╝■┼·┴┐┤┤╜и╩╡└¤╩╣╙├╦╡├ў.docx inflating: doc/╦у╖и╓╕┴ю.csv inflating: doc/║ь╥╞╫щ║╧╧┬╡е╡╝╚ы╬─╝■╦╡├ў.xls inflating: doc/╫щ║╧╧┬╡е╖╢└¤.csv inflating: doc/═°╕ё╜╗╥╫╓╕┴ю╖╢└¤.csv inflating: doc/═°╕ё╜╗╥╫╬─╝■╕ё╩╜╦╡├ў.xls inflating: doc/╒╦╗з╜и▓╓╕ё╩╜╦╡├ў.xls inflating: doc/═и╙├╓╕┴ю.csv inflating: doc/═и╙├▓▀┬╘╡╝╚ы╬─╝■┼·┴┐┤┤╜и╩╡└¤╩╣╙├╦╡├ў.docx 使用 unar 解决乱码问题 sudo apt install unar unar doc.zip -e GBK [14:46:02] doc.zip: Zip doc/ (dir)... OK. doc/CATS系统客户端策略回测和交易功能使用说明.pdf (3570468 B)... OK. doc/CATS系统快捷交易.doc (401920 B)... OK. doc/CSV文件扫单.csv (39 B)... OK. doc/CSV文件扫单交易使用说明.docx (42152 B)... OK. doc/CSV文件扫单格式说明.xls (32768 B)... OK. doc/s000001_S0_账户建仓范例.csv (342 B)... OK. doc/基于java的CATS系统客户端策略框架使用说明.pdf (3490925 B)... OK. doc/基于python的CATS系统客户策略框架使用说明.pdf (3765833 B)... OK. doc/多品种套利下单工具.pdf (1362558 B)... OK. doc/多策略组合范例.csv (262 B)... OK. doc/多策略自动运行.csv (50 B)... OK. doc/扫单交易使用说明.docx (44154 B)... OK. doc/止盈止损参数范例.csv (498 B)... OK. doc/止盈止损参数说明.xls (27136 B)... OK. doc/涨停板跟买指令范例.csv (182 B)... OK. doc/策略通用指令范例.csv (778 B)... OK. doc/策略通用格式说明.xls (33280 B)... OK. doc/算法交易导入文件批量创建实例使用说明.docx (18837 B)... OK. doc/算法指令.csv (238 B)... OK. doc/红移组合下单导入文件说明.xls (32768 B)... OK. doc/组合下单范例.csv (396 B)... OK. doc/网格交易指令范例.csv (74 B)... OK. doc/网格交易文件格式说明.xls (33792 B)... OK. doc/账户建仓格式说明.xls (25600 B)... OK. doc/通用指令.csv (236 B)... OK. doc/通用策略导入文件批量创建实例使用说明.docx (31795 B)... OK. Successfully extracted to \"./doc\". 其中，命令-e指定源文件编码格式，其中目标编码格式会根据系统的locale自动获取。 alias unarzh='unar -e GBK' ","date":"2019-11-25","objectID":"/archives/2019-11-25-ubuntu%E8%A7%A3%E5%8E%8Bzip%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/:0:0","tags":["Linux","zip","中文","乱码"],"title":"Ubuntu解压zip中文乱码","uri":"/archives/2019-11-25-ubuntu%E8%A7%A3%E5%8E%8Bzip%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"categories":["Programming"],"content":"在没有网络连接与管理员权限的情况下，通过编译源代码进行升级 gcc。","date":"2019-11-12","objectID":"/archives/centos7gcc7.3%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%87%E7%BA%A7/","tags":["Linux","CentOS7","gcc","升级","编译器","源代码"],"title":"CentOS7:gcc7.3源代码编译升级","uri":"/archives/centos7gcc7.3%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%87%E7%BA%A7/"},{"categories":["Programming"],"content":" 准备把需要下载和解压的文件都放在一个目录 mkdir -p ~/gcc7 cd gcc7 ## 下载 gcc7.3 wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz ## 下载依赖包 wget ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 wget https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz wget https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz 安装 tar -xvf gcc-7.3.0.tar.gz ## 依赖包都放进去 cp gmp-6.1.0.tar.bz2 ./gcc-7.3.0 cp mpc-1.0.3.tar.gz ./gcc-7.3.0 cp mpfr-3.1.4.tar.bz2 ./gcc-7.3.0 ## 进入 gcc编译目录，把需要的依赖包解压到这一层次 tar jxvf gmp-6.1.0.tar.bz2 tar zxvf mpc-1.0.3.tar.gz tar jxvf mpfr-3.1.4.tar.bz2 ## 建立链接 ln -s gmp-6.1.0 gmp ln -s mpfr-3.1.4 mpfr ln -s mpc-1.0.3 mpc ## 开始编译，由于不是 root, 需要通过 --prefix 指定路径 ./configure --disable-multilib --prefix=/home/trader/opt ## 开始安装，不要用 -j，可能会导致错误 make make install 添加环境变量 export PATH=/home/trader/opt/bin:$PATH export LD_LIBRARY_PATH=/home/trader/opt/lib:/usr/lib:$LD_LIBRARY_PATH ","date":"2019-11-12","objectID":"/archives/centos7gcc7.3%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%87%E7%BA%A7/:0:0","tags":["Linux","CentOS7","gcc","升级","编译器","源代码"],"title":"CentOS7:gcc7.3源代码编译升级","uri":"/archives/centos7gcc7.3%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%87%E7%BA%A7/"},{"categories":["Programming"],"content":"gitbook 是一个用于生成现代电子书的工具，进过处理后可以得到`mobi`、`pdf`、静态网页等多种类型的书籍形式。","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":"gitbook 是一个用于生成现代电子书的工具，进过处理后可以得到mobi、pdf、静态网页等多种类型的书籍形式。对于生成后得到的静态网页，我们可以将其托管在 github 上面，使用 gh-pages 发布到网上，从而实现制作文档、发布知识分享。 本篇博客总结了如何配置 gitbook、如何制作静态网页、如何使用 github 托管等方面的技巧。 ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:0:0","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 安装软件","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:1:0","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 安装 gitbook需要使用 npm 执行命令 npm install gitbook -g 安装完成后，可以使用命令查找具体的可执行文件所在目录 whereis gitbook 查看具体的版本号 /opt/node-v12.10.0-linux-x64/bin/gitbook -V ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:1:1","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 基本命令 初始化，会自动生成 README.md 以及 SUMMARY.md gitbook init 生成静态网页，会得到 _book 的目录 gitbook build 本地预览 gitbook serve ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:1:2","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 安装插件由于使用的插件需要嵌入到静态网站，通常的做法是直接配置一个 book.json 的文件，里面会填入托管网站相关的信息，以及需要使用的配置参数。比如 { \"author\": \"方莲\", \"description\": \"To be betteR.\", \"title\": \"betteR\", \"variables\": {}, \"extension\": null, \"generator\": \"site\", \"isbn\": \"\", \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": { \"William's Blog\": \"https://williamlfang.github.io/\" } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [\"chapter-fold\", \"expandable-chapters-small\", \"expandable-chapters\", \"advanced-emoji\", \"github\", \"splitter\", \"-sharing\", \"sharing-plus\", \"simple-page-toc\", \"copy-code-button\", \"page-toc-button\", \"klipse\", \"pageview-count\", \"popup\", \"tbfed-pagefooter\", \"todo\", \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"github\": {\"url\": \"https://github.com/williamlfang\"}, \"sharing\": { \"douban\": true, \"google\": true, \"twitter\": true, \"weibo\": true, \"all\": [ \"google\", \"twitter\", \"weibo\" ] }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"page-toc-button\": { \"maxTocDepth\": 3, \"minTocSize\": 3 }, \"tbfed-pagefooter\": { \"copyright\":\"\", \"modify_label\": \"该文件最后修改时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"prism\": { \"css\": [ \"prismjs/themes/prism-dracula.css\" ] } } } 在这个配置文件，我使用了一些外部插件。对于这些插件，我们可以在项目的根目录下执行命令进行安装 gitbook install ./ ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:1:3","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 搭建 github 网页github 提供 gh-pages 功能，可以生成静态网站托管。 在github创建新仓库，默认为 master 主干枝 在本地拷贝远程仓库 git clone git@github.com:williamlfang/ProjectName.git 在本地仓库搭建 gitbook cd ProjectName ## 开始搭建静态网页 gitbook build 建立分支 gh-pages 用于显示静态网页 git checkout -b gh-pages 同步拷贝 master 目录得到的 _book 到 gh-pages git checkout master -- _book cp -r _book/* ./ 提交更新 git add ./* git commit -m 'update gh-pages' git push origin gh-pages 这样，我们便在 gh-pages 存放了生成的静态网页，通过浏览器访问可查看具体的项目网页 ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:2:0","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":" 一键脚本我写了一个简单的脚本 deploy.sh，实现一键执行相关的操作 #!/usr/bin/env bash # Set the English locale for the `date` command. export LC_TIME=en_US.UTF-8 # GitHub username. USERNAME=williamlfang # Name of the branch containing the Hugo source files. SOURCE=betteR # The commit message. MESSAGE=\"Gitbook rebuild $(date)\" ## ------------------------------------------- msg() { printf \"\\033[1;32m :: %s\\n\\033[0m\" \"$1\" } ## ------------------------------------------- ## ------------------------------------------- ## 切换到 master git checkout master msg \"Pulling down from ${SOURCE}\u003cmaster\u003e\" #从github更新原文件并生成静态页面 # git pull ## 使用 R 制作 md Rscript -e 'blogdown::build_dir(dir = \".\", force = FALSE, ignore = \"[.]Rproj$\")' 2\u003e\u00261 \u003e/dev/null msg \"Rebuild gitbook\" ## 安装插件 # /opt/node-v12.10.0-linux-x64/bin/gitbook install ./ ## 建立静态网页 /opt/node-v12.10.0-linux-x64/bin/gitbook build git add -A git commit -m \"update master\" git push origin master ## ------------------------------------------- ## ------------------------------------------- msg \"Pushing new info to gh-pages\" ## 创建分支 # git checkout -b gh-pages git checkout gh-pages ## 同步 master 的 _book 到 gh-pages git checkout master -- _book cp -r _book/* . echo \"node_modules _book\"\u003e.gitignore git add -A git commit -m \"update gh-pages\" git push origin gh-pages git checkout master msg \"We've happily done.\" ","date":"2019-10-29","objectID":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/:3:0","tags":["github","gitbook","blog","知识共享"],"title":"使用 github 发布 gitbook 电子书","uri":"/archives/2019-10-29-%E4%BD%BF%E7%94%A8-github-%E5%8F%91%E5%B8%83-gitbook-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"categories":["Programming"],"content":"利用 yum 升级（目前能升级到7.3）","date":"2019-10-22","objectID":"/archives/2019-10-22-centos7-%E5%8D%87%E7%BA%A7-gcc/","tags":["CentOS7","gcc","g++","升级","编译器"],"title":"CentOS7 升级 gcc","uri":"/archives/2019-10-22-centos7-%E5%8D%87%E7%BA%A7-gcc/"},{"categories":["Programming"],"content":" yum install centos-release-scl -y yum install devtoolset-7 -y scl enable devtoolset-7 bash gcc --version ## 注释： 在centos的devtoolset库中 最新的为 devtoolset-7，所以我们以后可以自己改数字安装最新的版本 ## scl enable devtoolset-7 bash 如果使用的是zsh则使用 ## scl enable devtoolset-7 zsh ## 如果不知道什么是zsh那么默认的就好了 重新做软链接 ln -sf /opt/rh/devtoolset-7/root/usr/bin/gcc /usr/bin/gcc ln -sf /opt/rh/devtoolset-7/root/usr/bin/g++ /usr/bin/g++ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/opt/rh/devtoolset-7/root/usr/libexec/gcc/x86_64-redhat-linux/7/lto-wrapper Target: x86_64-redhat-linux Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,lto --prefix=/opt/rh/devtoolset-7/root/usr --mandir=/opt/rh/devtoolset-7/root/usr/share/man --infodir=/opt/rh/devtoolset-7/root/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --enable-plugin --with-linker-hash-style=gnu --enable-initfini-array --with-default-libstdcxx-abi=gcc4-compatible --with-isl=/builddir/build/BUILD/gcc-7.3.1-20180303/obj-x86_64-redhat-linux/isl-install --enable-libmpx --enable-gnu-indirect-function --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux Thread model: posix gcc version 7.3.1 20180303 (Red Hat 7.3.1-5) (GCC) ","date":"2019-10-22","objectID":"/archives/2019-10-22-centos7-%E5%8D%87%E7%BA%A7-gcc/:0:0","tags":["CentOS7","gcc","g++","升级","编译器"],"title":"CentOS7 升级 gcc","uri":"/archives/2019-10-22-centos7-%E5%8D%87%E7%BA%A7-gcc/"},{"categories":["Programming"],"content":"建立 frp 机制，实现了内网穿透功能，即可以从外网访问一台没有公网IP地址的内网机器。","date":"2019-10-08","objectID":"/archives/2019-10-08-%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","tags":["内网穿透","frp","ssh","tcp"],"title":"利用frp实现内网穿透","uri":"/archives/2019-10-08-%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Programming"],"content":"无论是在服务器端还是在客户机端，均需要安装 frp、并启动相关的服务。其中： frps.init 是服务器配置文件 frpc.init 是客户端配置文件 服务器配置 下载 frp cd ~ wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz 解压 tar -xzvf frp_0.21.0_linux_amd64.tar.gz cd frp_0.21.0_linux_amd64/ 配置服务器，使用 7000 作为监听端口 vim frps.ini [common] #bind_addr = 127.0.0.1 bind_port = 7000 token = ********* 增加允许访问的端口。这个是需要通过 7000 的端口转发去访问的客户机端口，可以配置多个。比如我们在客户机的 frpc.init 增加了3个可以访问的端口，那么我们就需要告诉服务器，需要开放 6011、6035、6066 这3个端口的远程访问权限： [common] server_addr = 114.67.109.5 server_port = 7000 token = ********* [sshlocal] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6011 [ssh135] type = tcp local_ip = 192.168.1.135 local_port = 22 remote_port = 6035 [ssh166] type = tcp local_ip = 192.168.1.166 local_port = 22 remote_port = 6066 开放端口使用命令 FirewallD： ## 增加远程访问 端口 # 1.FirewallD防火墙开放8787端口 firewall-cmd --zone=public --add-port=6011/tcp --permanent firewall-cmd --zone=public --add-port=6035/tcp --permanent firewall-cmd --zone=public --add-port=6066/tcp --permanent firewall-cmd --zone=public --add-port=6088/tcp --permanent firewall-cmd --zone=public --add-port=6099/tcp --permanent firewall-cmd --zone=public --add-port=7066/tcp --permanent firewall-cmd --zone=public --add-port=7099/tcp --permanent # 2.重启防火墙 systemctl restart firewalld.service ## CentOS6 使用以下命令 ## 开放 8899 端口 /sbin/iptables -I INPUT -p tcp --dport 8899 -j ACCEPT ## 然后保存 /etc/rc.d/init.d/iptables save ## 查看打开的端口 /etc/init.d/iptables status 开启后台服务，通过 nohup 实现不间断的运行服务，记得在服务器是启动 frps 服务： nohup ./frps -c frps.ini \u0026 客户端配置 下载、解压“： cd ~ wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz tar -xzvf frp_0.21.0_linux_amd64.tar.gz cd frp_0.21.0_linux_amd64/ 配置客户机，客户端的配置文件在 frpc.init： [common] server_addr = xxx.xxx.xxx.xxx ## 这里是填写服务器的固定 IP server_port = 7000 ## 这里需要跟服务器端监听的端口一致，默认 7000 [sshlocal] type = tcp local_ip = 127.0.0.1 ## 本机 local_port = 22 remote_port = 6011 [ssh135] type = tcp local_ip = 192.168.1.135 ## 配置的本地内网服务器 local_port = 22 remote_port = 6035 [ssh166] type = tcp local_ip = 192.168.1.166 local_port = 22 remote_port = 6066 [ssh188] type = tcp local_ip = 192.168.1.188 local_port = 22 remote_port = 6088 [ssh199] type = tcp local_ip = 192.168.1.199 local_port = 22 remote_port = 6099 [ssh166_rstudio] ## 配置的本地内网服务器, Rstudio type = tcp local_ip = 192.168.1.166 local_port = 8787 remote_port = 7066 [ssh199_rstudio] type = tcp local_ip = 192.168.1.199 local_port = 8787 remote_port = 7099 客户机开启后台服务命令，配置文件是 frpc.init nohup ./frpc -c frpc.ini \u0026 提示连接成功： 2019/10/08 20:11:19 [I] [proxy_manager.go:300] proxy removed: [] 2019/10/08 20:11:19 [I] [proxy_manager.go:310] proxy added: [ssh199 ssh166_rstudio ssh199_rstudio sshlocal ssh135 ssh166 ssh188] 2019/10/08 20:11:19 [I] [proxy_manager.go:333] visitor removed: [] 2019/10/08 20:11:19 [I] [proxy_manager.go:342] visitor added: [] 2019/10/08 20:11:19 [I] [control.go:246] [60429e396343771b] login to server success, get run id [60429e396343771b], server udp port [0] 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh135] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh166] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh188] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh199] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh166_rstudio] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [ssh199_rstudio] start proxy success 2019/10/08 20:11:19 [I] [control.go:169] [60429e396343771b] [sshlocal] start proxy success 并且我们可以在服务器端看到端口已经开启转发功能： [root@JD ~]# netstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 24860/mysqld tcp 0 0 127.0.0.1:1234 0.0.0.0:* LISTEN 2817/ifrit-agent tcp 0 0 0.0.0.0:8787 0.0.0.0:* LISTEN 25292/rserver tcp 0 0 0.0.0.0:22 0.0.0.0","date":"2019-10-08","objectID":"/archives/2019-10-08-%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:0:0","tags":["内网穿透","frp","ssh","tcp"],"title":"利用frp实现内网穿透","uri":"/archives/2019-10-08-%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Programming"],"content":"使用 R-slidify 制作讲演课件 安装","date":"2019-09-10","objectID":"/archives/2019-09-10-r-slidify/:0:0","tags":["R","slidify","revealjs"],"title":"R slidify","uri":"/archives/2019-09-10-r-slidify/"},{"categories":["Programming"],"content":" 安装 slidify软件包 library(devtools) install_github('ramnathv/slidify') install_github('ramnathv/slidifyLibraries') Demo","date":"2019-09-10","objectID":"/archives/2019-09-10-r-slidify/:1:0","tags":["R","slidify","revealjs"],"title":"R slidify","uri":"/archives/2019-09-10-r-slidify/"},{"categories":["Programming"],"content":" 初始化 library(slidify) author('mydeck') slidify(\"index.Rmd\") ","date":"2019-09-10","objectID":"/archives/2019-09-10-r-slidify/:2:0","tags":["R","slidify","revealjs"],"title":"R slidify","uri":"/archives/2019-09-10-r-slidify/"},{"categories":["Programming"],"content":" 格式 上传到 Github # publish to github # create an empty repo on github. replace USER and REPO with your repo details publish(user = 'williamlfang', repo = 'myslidify') # publish to rpubs publish(title = 'My Deck', 'index.html', host = 'rpubs') ","date":"2019-09-10","objectID":"/archives/2019-09-10-r-slidify/:3:0","tags":["R","slidify","revealjs"],"title":"R slidify","uri":"/archives/2019-09-10-r-slidify/"},{"categories":["Programming"],"content":" demo可以参考我的小例。 ","date":"2019-09-10","objectID":"/archives/2019-09-10-r-slidify/:4:0","tags":["R","slidify","revealjs"],"title":"R slidify","uri":"/archives/2019-09-10-r-slidify/"},{"categories":["Programming"],"content":"使用 Rcpp 软件包增强 R 的运算性能.","date":"2019-08-28","objectID":"/archives/2019-08-28-rcpp-basics/","tags":["R","C++","Rcpp","performance"],"title":"Rcpp Basics","uri":"/archives/2019-08-28-rcpp-basics/"},{"categories":["Programming"],"content":"R 是一款面向统计与数据分析的编程语言． ","date":"2019-08-28","objectID":"/archives/2019-08-28-rcpp-basics/:0:0","tags":["R","C++","Rcpp","performance"],"title":"Rcpp Basics","uri":"/archives/2019-08-28-rcpp-basics/"},{"categories":["Programming"],"content":"sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt、reboot、su等等。 我们可以把某个账户设置成为一个默认拥有「sudo」权限，同时不需要输入密码，这对于需要使用特殊权限才能执行的命令而言，是十分有必要的。 sudo usermod -aG wheel trader vim /etc/sudoers ## Allow root to run any commands anywhere root ALL=(ALL) ALL trader ALL=(ALL) NOPASSWD: ALL ## Allows people in group wheel to run all commands %wheel ALL=(ALL) NOPASSWD: ALL :wq! 如果你想设置只有某些命令可以sudo的话， your_user_name ALL= (root) NOPASSWD: /bin/rm, (root) NOPASSWD: /usr/bin/make, (root) NOPASSWD: /bin/ln, (root) NOPASSWD: /bin/sh, (root) NOPASSWD: /bin/mv, (root) NOPASSWD: /bin/chown ","date":"2019-06-11","objectID":"/archives/2019-06-11-%E5%88%86%E9%85%8Dsudo%E8%B4%A6%E6%88%B7/:0:0","tags":["Linux","sudo"],"title":"分配sudo账户","uri":"/archives/2019-06-11-%E5%88%86%E9%85%8Dsudo%E8%B4%A6%E6%88%B7/"},{"categories":["Programming"],"content":"在 ~/.oh-my-zsh/themes/agnoster.themes 增加 strlen () { FOO=$1 local zero='%([BSUbfksu]|([FB]|){*})' LEN=${#${(S%%)FOO//$~zero/}} echo $LEN } # show right prompt with date ONLY when command is executed preexec () { DATE=$( date +\"[%H:%M:%S]\" ) local len_right=$( strlen \"$DATE\" ) len_right=$(( $len_right+1 )) local right_start=$(($COLUMNS - $len_right)) local len_cmd=$( strlen \"$@\" ) local len_prompt=$(strlen \"$PROMPT\" ) local len_left=$(($len_cmd+$len_prompt)) RDATE=\"\\033[${right_start}C ${DATE}\" if [ $len_left -lt $right_start ]; then # command does not overwrite right prompt # ok to move up one line #echo -e \"\\033[1A${RDATE}\" # Black='\\033[30m' # Black # Red='\\033[31m' # Red # Green='\\033[32m' # Green # Yellow='\\033[33m' # Yellow # Blue='\\033[34m' # Blue # Purple='\\033[35m' # Purple # Cyan='\\033[36m' # Cyan # White='\\033[37m' # White echo -e \"\\033[1A\\033[36m${RDATE}\\033[36m\" else echo -e \"${RDATE}\" fi } ","date":"2019-05-13","objectID":"/archives/2019-05-13-terminal-%E5%8F%B3%E8%BE%B9%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/:0:0","tags":["Linux","terminal","zsh"],"title":"terminal 右边显示时间","uri":"/archives/2019-05-13-terminal-%E5%8F%B3%E8%BE%B9%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/"},{"categories":["Personal"],"content":"我一直都是一个容易紧张、并由此导致过度焦虑的人。 一方面，我手头上有很多的事情同时并行运作，我希望自己可以把每个事情都做的非常完美，但现实往往是，时间与精力都是有限的，一个人真的无法达成三头六臂的神奇功能，所以往往导致我在每个任务环境切换的间隙，我会容易形成一种过于紧张的焦虑； 另一方面，我常常不善于去表达自己的意见与想法，最先想着是凭借自己的加班与加点来完成更多的工作，但是到后期发现工作量大到无法完成时，我只能借助一些非常幼稚的方式来表达这种不满的情绪，从而活生生把自己逼成一个容易暴躁的人，结果总是费力不讨好。 反省这次的焦虑症，源于最近需要上线一个C++的测试项目。这个项目本身不会特别重要，但是非常紧急，需要在制定日期前完成一些测试指标。一开始接到这个任务的时候，我想凭借自己的技术来解决。但这一开始就犯了一个致命的错误：对于任务的难度过于低估，从而导致后期的工作量超过自己的预期。毕竟从事C++的大型开发项目，我的经验还是不足以独立完成的。 同时，更加致命的是，我在手负责的还有另外一个也是十分紧急的项目，需要在同一个月底前完成第一个版本的实盘上线运行。当然，这期间我还叠加着其他几个小任务，又加之在期间公司办公室搬迁，我也是全程参与，既当苦力又当劳力，身体上有点疲倦，精神上有点晃悠。 晚上几个朋友一起吃饭喝了点小酒，思绪良多。想到这段时间一直紧张压抑的状态，突然感到整个人临近崩溃。我向来是一个偏自责的人，往往很多事情尽量往自己身上扛着，而联想到目前还有很多的工作没有完成，很多事情需要迫切的解决，这就容易引起紧张与焦虑。我是一个特别惦记事情的人，一旦有事情还未完成，往往是要强迫自己一直沉浸在这个任务的待机模式中。多线程的工作压力一直持续在压抑着我，有时候晚上睡不着，也不知道该想些什么东西，就那样虚无缥缈的醒着，脑子一片空白，却又无比清新。 我常常很是佩服那些能够运筹帷幄、掌控自如的人，他们往往能够自由的在多任务环境中无缝衔接，做到事事摆平、样样妥当。我也想把这些任务分配给其他的同事，但是环顾四周，却更加的发现自己是那么的无助。我知道这个公司不是自己的，我也知道这个地球也不会因我停止。当我想把事情交给其他人处理的时候，却发现需要花费更多的时间与精力在工作对接与细节沟通上，而这已经花费了我更多的精力去做另外一件事情，这又进一步导致我的紧张与焦虑。我一遍遍的发现自己一直都在这个循环着的痛苦里，丝毫没变任何缓解的余地。 有人或许会说，大不了放着不做，反正也做不完。 Sorry，我真的不是『我』；如果你认识我的话。 所以，到了现在，我重新去回想这次的焦虑症，我本是想着去安慰自己，却发现这又花费了一段的时间，而我又要去挤出双倍的时间才能把落下的任务做完。这有点像一个死循环，一不小心掉入进去，便已经没有退出的余地。我不知道下次又遇到今天的这种焦虑状态，我是否能够学的聪明一点，变得成熟一点，抑或放过自己一把，变得圆通一些。很可惜的是，至少从我现在的状态上看，我依然会无法原谅自己变成自己不认识的自己，所以现在，我依然确信我会一直这样的紧张着、焦虑着，然后把自己逼上一条绝路，唯有成功才能征服自己的焦虑。 临到最后，我依然是我，我还是仰天长叹一声 Keep Calm and Code On. 明天继续暗无天日的写代码。 ","date":"2019-04-23","objectID":"/archives/2019-04-23-keep-calm-and-code-on/:0:0","tags":["工作","焦虑症"],"title":"keep calm and code on","uri":"/archives/2019-04-23-keep-calm-and-code-on/"},{"categories":["Programming"],"content":"今天在使用 ssh 连接服务器的时候出现一个错误，这里记录一下解决方法： ssh-copy-id ${USER}@${HOST} /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 6 key(s) remain to be installed -- if you are prompted now it is to install the new keys Received disconnect from 192.168.1.199 port 22:2: Too many authentication failures Disconnected from 192.168.1.199 port 22 修改 /etc/ssh/sshd_config Last login: Thu Apr 18 15:26:32 2019 from 192.168.1.199 [root@localhost ~]# cd /etc/ssh/ [root@localhost ssh]# vim sshd_config 把允许试错的限制修改一下 # MaxAuthTries 6 MaxAuthTries 10 然后重启 ssh systemctl restart sshd.service 重新连接 ssh-copy-id ${USER}@${HOST} /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 6 key(s) remain to be installed -- if you are prompted now it is to install the new keys trader@192.168.1.199's password: Number of key(s) added: 6 Now try logging into the machine, with: \"ssh 'trader@192.168.1.199'\" and check to make sure that only the key(s) you wanted were added. ","date":"2019-04-18","objectID":"/archives/2019-04-18-ssh-too-many-authentication-failures/:0:0","tags":["ssh","linux"],"title":"SSH Too Many Authentication Failures","uri":"/archives/2019-04-18-ssh-too-many-authentication-failures/"},{"categories":["Programming"],"content":"我们知道，在操作系统层面，性能与存储空间（价格）之间存在着负相关性，即越靠近 CPU 的硬件具有更加快速的 I/O 性能，但相对空间较小，价格也比较贵；而那些远离 CPU 的设备则可以以相对低廉的价格获得足够大的存储空间，但是性能相对较弱。这就是著名的 操作系统层次图： ## 建立 ramdisk sudo mkdir /tmp/ramdisk sudo chmod 777 /tmp/ramdisk free -h # 创建的RAM DISK大小为10G，文件格式tmpfs，挂载目录/tmp/ramdisk sudo mount -t tmpfs -o size=1024M tmpfs /tmp/ramdisk df # 测速 dd if=/dev/zero of=/tmp/ramdisk/test bs=1024k count=512 conv=fdatasync # 删除 test rm -rf /tmp/ramdisk/test # 卸载 sudo umount -l /tmp/ramdisk ","date":"2019-04-16","objectID":"/archives/2019-04-16-linux-%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E7%A1%AC%E7%9B%98/:0:0","tags":["Linux","内存","硬盘","性能","IO"],"title":"Linux 创建内存硬盘","uri":"/archives/2019-04-16-linux-%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E7%A1%AC%E7%9B%98/"},{"categories":["Programming"],"content":"ACL(Access Control List) 权限控制主要目的是提供传统的 owner、group、other 的 read、wirte、execute 权限之外的具体权限设置，可以针对单一用户或组来设置特定的权限。 我们可以通过命令来设置单个用户対文件（或文件夹）的读取权限。 安装 acl使用命令 ## Ubuntu sudo apt install acl ## CentOS sudo yum install acl 主要功能","date":"2019-04-11","objectID":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:0:0","tags":["acl","文件权限","Linux"],"title":"使用 acl 控制文件权限","uri":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" getfacl: 查看权限 getfacl -h getfacl 2.2.52 -- get file access control lists Usage: getfacl [-aceEsRLPtpndvh] file ... -a, --access display the file access control list only -d, --default display the default access control list only -c, --omit-header do not display the comment header -e, --all-effective print all effective rights -E, --no-effective print no effective rights -s, --skip-base skip files that only have the base entries -R, --recursive recurse into subdirectories -L, --logical logical walk, follow symbolic links -P, --physical physical walk, do not follow symbolic links -t, --tabular use tabular output format -n, --numeric print numeric user/group identifiers -p, --absolute-names don't strip leading '/' in pathnames -v, --version print version and exit -h, --help this help tex cd ~/Documents getfacl Documents # file: Documents # owner: william # group: william user::rwx group::r-x other::r-x ","date":"2019-04-11","objectID":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:1:0","tags":["acl","文件权限","Linux"],"title":"使用 acl 控制文件权限","uri":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":" setfacl: 设置权限 setfacl -h setfacl 2.2.52 -- set file access control lists Usage: setfacl [-bkndRLP] { -m|-M|-x|-X ... } file ... -m, --modify=acl modify the current ACL(s) of file(s) -M, --modify-file=file read ACL entries to modify from file -x, --remove=acl remove entries from the ACL(s) of file(s) -X, --remove-file=file read ACL entries to remove from file -b, --remove-all remove all extended ACL entries -k, --remove-default remove the default ACL --set=acl set the ACL of file(s), replacing the current ACL --set-file=file read ACL entries to set from file --mask do recalculate the effective rights mask -n, --no-mask don't recalculate the effective rights mask -d, --default operations apply to the default ACL -R, --recursive recurse into subdirectories -L, --logical logical walk, follow symbolic links -P, --physical physical walk, do not follow symbolic links --restore=file restore ACLs (inverse of `getfacl -R') --test test mode (ACLs are not modified) -v, --version print version and exit -h, --help this help text 对于某个特定的用户，我们想要分配文件读取权限，可以执行 setfacl -R -m u:trader:rwx /data/ChinaStocks -R：対目录下所有文件递归执行修改 -m：执行修改权限的命令(modify) u:trader:rwx：针对用户(u:trader)执行权限设置(:rwx) ","date":"2019-04-11","objectID":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/:2:0","tags":["acl","文件权限","Linux"],"title":"使用 acl 控制文件权限","uri":"/archives/2019-04-11-%E4%BD%BF%E7%94%A8-acl-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"},{"categories":["Programming"],"content":"talib 是一款高性能技术指标的数值运算模块，为金融建模与量化交易提供一套丰富的接口函数。由于使用了 c++ 进行编译，talib 能够实现快速处理机能，尤其在量化实盘中有重要的作用。 而在 python3 中，并不提供内置的 talib 模块，需要我们单独进行安装。问题是，使用常规的 pip 无法直接安装这个软件包。因此，本文将介绍如何通过源文件进行安装模块。 下载源文件我们可以通过查找 SourceForge TA-Lib 项目网站来查看多个版本文件，目前最新版本是截至到 2007-09-20，目前已不在处于维护状态了。 cd ~/Downloads axel http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz tar -xvf ta-lib-0.4.0-src.tar.gz cd ta-lib/ 配置与编译通过相关的配置，把 talib 安装到 /usr 目录下 ./configure --prefix=/usr sudo make \u0026\u0026 make install sudo apt update 安装 talib这样，我们便可以通过 pip 通道来安装 talib pip install ta-lib ## 或者 pip install TA-lib 然后启动 python3 查看是否安装成功 Python 3.7.0 (default, Jun 28 2018, 13:15:42) [GCC 7.2.0] :: Anaconda, Inc. on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. \u003e\u003e\u003e import talib \u003e\u003e\u003e talib.__file__ '/home/william/anaconda3/lib/python3.7/site-packages/talib/__init__.py' \u003e\u003e\u003e ","date":"2019-03-29","objectID":"/archives/2019-03-29-python3-%E5%AE%89%E8%A3%85-talib/:0:0","tags":["python3","pip","talib","Linux"],"title":"python3 安装 talib","uri":"/archives/2019-03-29-python3-%E5%AE%89%E8%A3%85-talib/"},{"categories":["Programming"],"content":"gdb 是一款通用的程序调试器，可以用于测试 c、c++、java、python 等多种程序语言。借用官方的解释，gdb 可以为我们提供至少以下强大的功能： Start your program, specifying anything that might affect its behavior. Make your program stop on specified conditions. Examine what has happened, when your program has stopped. Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another. 但是，如果其他的 GNU 项目，gdb 本身也是一款终端命令工具(CLI)，只能通过命令交互的方式进行代码调试。如果我们想要实时的看到断点(break point) 运行到何处，则需要配合使用 tui(text user interface) 功能。目前， gdb8.1 及以上版本，均已实现了该功能。 接下来，我将介绍如何在 CentOS 操作系统下升级 gdb8.1。 获取源文件可以从官网获取最新的版本信息，Download GDB。 cd ~/Downloads wget ftp://sourceware.org/pub/gdb/releases/gdb-8.1.tar.xz tar -xvf gdb-8.1.tar.xz cd gdb-8.1 编译与安装使用命令直接编译 ./configure --prefix=/usr --with-system-readline sudo make \u0026\u0026 make install ## 查看版本 gdb -v 调试使用命令 gdb 进行调试，输入命令 tui enable 打开可视化界面。 ","date":"2019-03-28","objectID":"/archives/2019-03-28-centos-%E5%8D%87%E7%BA%A7-gdb8.1/:0:0","tags":["gnu","gdb","debug","CentOS"],"title":"centos 升级 gdb8.1","uri":"/archives/2019-03-28-centos-%E5%8D%87%E7%BA%A7-gdb8.1/"},{"categories":["Programming"],"content":"makefile 是一款功能强大的工程项目管理套件，可以根据各个文件之间的依赖关系，自动生成事物处理的完整流程。我们现在有一个要求：使用 make 来一次性的把目录下的所有源文件编译成单独可运行的程序。 搜索目录总的所有源文件使用通配符(wildcard)来获取当前目录总的所有 .cpp 文件 SRCS = $(wildcard *.cpp) 指定编译成相应名称的独立程序 PROGS = $(patsubst %.cpp, %, $(SRCS)) 执行相应的功能 # 自动完成编译过程 CC = g++ CFLAGS = -ggdb3 -std=c++11 -Wall SRCS = $(wildcard *.cpp) PROGS = $(patsubst %.cpp, %, $(SRCS)) .PHONY: all info clean all: $(PROGS) %: %.cpp $(CC) $(CFLAGS) -o $@ $\u003c info: @echo \"all source files...\" @echo $(SRCS) @echo \"all target programms...\" @echo $(PROGS) clean: rm -f $(PROGS) ","date":"2019-03-24","objectID":"/archives/2019-03-24-makefile-%E5%B0%86%E6%89%80%E6%9C%89%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E6%88%90%E7%8B%AC%E7%AB%8B%E7%A8%8B%E5%BA%8F/:0:0","tags":["make","makefile","c","c++","gcc","编译"],"title":"makefile 将所有目录中的源文件编译成独立程序","uri":"/archives/2019-03-24-makefile-%E5%B0%86%E6%89%80%E6%9C%89%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E6%88%90%E7%8B%AC%E7%AB%8B%E7%A8%8B%E5%BA%8F/"},{"categories":["Programming"],"content":"SSH是一个非常伟大的工具，如果你要在互联网上远程连接到服务器，那么SSH无疑是最佳的候选。SSH是加密的，OpenSSH加密所有通信（包括密码），有效消除了窃听，连接劫持和其它攻击。本文将为大家介绍25个最佳的SSH命令，希望您在阅读之后能获得一些启发。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:0:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 1、复制SSH密钥到目标主机，开启无密码SSH登录 ssh-copy-id user@host 如果还没有密钥，请使用ssh-keygen命令生成。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:1:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 2、从某主机的80端口开启到本地主机2001端口的隧道 ssh -N -L2001:localhost:80 somemachine 现在你可以直接在浏览器中输入http://localhost:2001访问这个网站。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:2:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 3、将你的麦克风输出到远程计算机的扬声器 dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp 这样来自你麦克风端口的声音将在SSH目标计算机的扬声器端口输出，但遗憾的是，声音质量很差，你会听到很多嘶嘶声。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:3:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 4、比较远程和本地文件 ssh user@host cat /path/to/remotefile | diff /path/to/localfile – 在比较本地文件和远程文件是否有差异时这个命令很管用。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:4:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 5、通过SSH挂载目录/文件系统 sshfs name@server:/path/to/folder /path/to/mount/point 从http://fuse.sourceforge.net/sshfs.html下载sshfs，它允许你跨网络安全挂载一个目录。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:5:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 6、通过中间主机建立SSH连接 ssh -t reachable_host ssh unreachable_host Unreachable_host表示从本地网络无法直接访问的主机，但可以从reachable_host所在网络访问，这个命令通过到reachable_host的“隐藏”连接，创建起到unreachable_host的连接。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:6:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 7、将你的SSH公钥复制到远程主机，开启无密码登录 – 简单的方法 ssh-copy-id username@hostname ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:7:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 8、直接连接到只能通过主机B连接的主机A ssh -t hostA ssh hostB 当然，你要能访问主机A才行。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:8:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 9、创建到目标主机的持久化连接 ssh -MNf \u003cuser\u003e@\u003chost\u003e 在后台创建到目标主机的持久化连接，将这个命令和你~/.ssh/config中的配置结合使用： Host host ControlPath ~/.ssh/master-%r@%h:%p ControlMaster no 所有到目标主机的SSH连接都将使用持久化SSH套接字，如果你使用SSH定期同步文件（使用rsync/sftp/cvs/svn），这个命令将非常有用，因为每次打开一个SSH连接时不会创建新的套接字。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:9:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 10、通过SSH连接屏幕 ssh -t remote_host screen –r 直接连接到远程屏幕会话（节省了无用的父bash进程）。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:10:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 11、端口检测（敲门） knock \u003chost\u003e 3000 4000 5000 \u0026\u0026 ssh -p \u003cport\u003e user@host \u0026\u0026 knock \u003chost\u003e 5000 4000 3000 在一个端口上敲一下打开某个服务的端口（如SSH），再敲一下关闭该端口，需要先安装knockd，下面是一个配置文件示例。 [options] logfile = /var/log/knockd.log [openSSH] sequence = 3000,4000,5000 seq_timeout = 5 command = /sbin/iptables -A INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT tcpflags = syn [closeSSH] sequence = 5000,4000,3000 seq_timeout = 5 command = /sbin/iptables -D INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT tcpflags = syn ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:11:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 12、删除文本文件中的一行内容，有用的修复 ssh-keygen -R \u003cthe_offending_host\u003e 在这种情况下，最好使用专业的工具。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:12:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 13、通过SSH运行复杂的远程shell命令 ssh host -l user $(\u003ccmd.txt) 更具移植性的版本： ssh host -l user “`cat cmd.txt`” ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:13:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 14、通过SSH将MySQL数据库复制到新服务器 mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost “mysql -uUSER -pPASS NEW_DB_NAME” 通过压缩的SSH隧道Dump一个MySQL数据库，将其作为输入传递给mysql命令，我认为这是迁移数据库到新服务器最快最好的方法。 15、删除文本文件中的一行，修复“SSH主机密钥更改”的警告 sed -i 8d ~/.ssh/known_hosts ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:14:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 16、从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器 cat ~/.ssh/id_rsa.pub | ssh user@machine “mkdir ~/.ssh; cat \u003e\u003e ~/.ssh/authorized_keys” 如果你使用Mac OS X或其它没有ssh-copy-id命令的*nix变种，这个命令可以将你的公钥复制到远程主机，因此你照样可以实现无密码SSH登录。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:15:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 17、实时SSH网络吞吐量测试 yes | pv | ssh $host “cat \u003e /dev/null” 通过SSH连接到主机，显示实时的传输速度，将所有传输数据指向/dev/null，需要先安装pv。 如果是Debian： apt-get install pv 如果是Fedora： yum install pv （可能需要启用额外的软件仓库）。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:16:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 18、如果建立一个可以重新连接的远程GNU screen ssh -t user@some.domain.com /usr/bin/screen –xRR 人们总是喜欢在一个文本终端中打开许多shell，如果会话突然中断，或你按下了“Ctrl-a d”，远程主机上的shell不会受到丝毫影响，你可以重新连接，其它有用的screen命令有“Ctrl-a c”（打开新的shell）和“Ctrl-a a”（在shell之间来回切换），请访问http://aperiodic.net/screen/quick_reference阅读更多关于screen命令的快速参考。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:17:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 19、继续SCP大文件 rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file 它可以恢复失败的rsync命令，当你通过VPN传输大文件，如备份的数据库时这个命令非常有用，需要在两边的主机上安装rsync。 rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file local -\u003e remote 或 rsync –partial –progress –rsh=ssh $user@$host:$remote_file $destination_file remote -\u003e local ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:18:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 20、通过SSH W/ WIRESHARK分析流量 ssh root@server.com 'tshark -f “port !22″ -w -' | wireshark -k -i – 使用tshark捕捉远程主机上的网络通信，通过SSH连接发送原始pcap数据，并在wireshark中显示，按下Ctrl+C将停止捕捉，但也会关闭wireshark窗口，可以传递一个“-c #”参数给tshark，让它只捕捉“#”指定的数据包类型，或通过命名管道重定向数据，而不是直接通过SSH传输给wireshark，我建议你过滤数据包，以节约带宽，tshark可以使用tcpdump替代： ssh root@example.com tcpdump -w – 'port !22' | wireshark -k -i – ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:19:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 21、保持SSH会话永久打开 autossh -M50000 -t server.example.com 'screen -raAd mysession' 打开一个SSH会话后，让其保持永久打开，对于使用笔记本电脑的用户，如果需要在Wi-Fi热点之间切换，可以保证切换后不会丢失连接。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:20:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 22、更稳定，更快，更强的SSH客户端 ssh -4 -C -c blowfish-cbc 强制使用IPv4，压缩数据流，使用Blowfish加密。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:21:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 23、使用cstream控制带宽 tar -cj /backup | cstream -t 777k | ssh host 'tar -xj -C /backup' 使用bzip压缩文件夹，然后以777k bit/s速率向远程主机传输。Cstream还有更多的功能，请访问http://www.cons.org/cracauer/cstream.html#usage了解详情，例如： echo w00t, i’m 733+ | cstream -b1 -t2 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:22:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 24、一步将SSH公钥传输到另一台机器 ssh-keygen; ssh-copy-id user@host; ssh user@host 这个命令组合允许你无密码SSH登录，注意，如果在本地机器的~/.ssh目录下已经有一个SSH密钥对，ssh-keygen命令生成的新密钥可能会覆盖它们，ssh-copy-id将密钥复制到远程主机，并追加到远程账号的~/.ssh/authorized_keys文件中，使用SSH连接时，如果你没有使用密钥口令，调用ssh user@host后不久就会显示远程shell。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:23:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":" 25、将标准输入（stdin）复制到你的X11缓冲区 ssh user@host cat /path/to/some/file | xclip 你是否使用scp将文件复制到工作用电脑上，以便复制其内容到电子邮件中？xclip可以帮到你，它可以将标准输入复制到X11缓冲区，你需要做的就是点击鼠标中键粘贴缓冲区中的内容。 ","date":"2019-03-19","objectID":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/:24:0","tags":["ssh"],"title":"25个必须记住的SSH命令","uri":"/archives/2019-03-19-25%E4%B8%AA%E5%BF%85%E9%A1%BB%E8%AE%B0%E4%BD%8F%E7%9A%84ssh%E5%91%BD%E4%BB%A4/"},{"categories":["Programming"],"content":"使用 sshfs 将远程服务器的目录文件挂载到本地机器。","date":"2019-03-19","objectID":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/","tags":["ssh","sshfs","远程挂载"],"title":"使用 sshfs 挂载远程文件到本地机器","uri":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/"},{"categories":["Programming"],"content":"我们在与远程服务器进行交互的过程中，常用的是通过终端以 ssh 的形式连接到服务器，然后再以命令行（CLI）进行操作。但是，如果是想把远程服务器的目录文件直接挂载到本地机器上面，然后像浏览和操作本地文件一样方便，其实也是可行的。这就需要使用到今天介绍的 sshfs，一款基于 ssh 的远程文件挂载工具。 安装使用命令行安装即可 sudo apt install sshfs sudo apt install fuse 命令","date":"2019-03-19","objectID":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/:0:0","tags":["ssh","sshfs","远程挂载"],"title":"使用 sshfs 挂载远程文件到本地机器","uri":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/"},{"categories":["Programming"],"content":" 挂载挂载的一般格式为： sudo sshfs {{user id}}@{{server hostname}}:{{desiredremote share}} {{desired local mount point}} -o idmap=user -o allow_other -ouid={{local user id}} -o gid={{local group id}} 其中： -o transform_symlinks 表示转换绝对链接符号为相对链接符号 -o follow_symlinks 沿用服务器上的链接符号 -C 压缩，或者-o compression=yes -o reconnect 自动重连：避免掉线 -o cache=yes -o allow_other 一般常用的命令是 cd mkdir trader188 sshfs trader@192.168.1.188:/home/trader ~/trader188 -o port=22,compression=yes,reconnect,idmap=user cd trader188 \u0026\u0026 ll total 972K drwx------ 1 william william 4.0K Mar 10 19:20 ./ drwxr-xr-x 80 william william 4.0K Mar 19 09:26 ../ drwxrwxr-x 1 william william 4.0K Feb 13 16:28 anaconda2/ drwxrwxrwx 1 william william 97 Jan 25 13:54 .anydesk/ drwx------ 1 william william 6 Jan 25 13:54 AnyDesk/ -rw------- 1 william william 21K Mar 19 00:44 .bash_history -rw-r--r-- 1 william william 18 Apr 11 2018 .bash_logout -rw-r--r-- 1 william william 193 Apr 11 2018 .bash_profile -rw-r--r-- 1 william william 1.4K Feb 21 15:31 .bashrc -rw-r--r-- 1 william william 231 Jul 17 2018 .bashrc-anaconda2.bak drwx------ 1 william william 4.0K Jan 29 09:13 .cache/ -rwxrwxr-x 1 william william 1.5K Feb 25 17:13 centos_info.sh* -rw-r--r-- 1 william william 84K Feb 25 17:07 centos.txt drwxrwxr-x 1 william william 70 Jul 18 2018 .codeintel/ drwxrwxr-x 1 william william 18 Jul 17 2018 .conda/ -rw-rw-r-- 1 william william 108 Nov 29 17:01 .condarc drwxr-xr-x 1 william william 4.0K Sep 27 16:59 .config/ drwx------ 1 william william 25 Jul 17 2018 .dbus/ drwxr-xr-x 1 william william 24 Oct 20 14:51 Desktop/ drwxr-xr-x 1 william william 217 Sep 27 16:56 Documents/ drwxr-xr-x 1 william william 173 Jan 25 13:47 Downloads/ drwx------ 1 william william 28 Mar 10 19:20 .emacs.d/ -rw------- 1 william william 16 Jul 17 2018 .esd_auth -rwxrwxr-x 1 william william 390K Mar 4 15:47 hicloud.so* -rw------- 1 william william 5.5K Feb 25 17:26 .ICEauthority -rw------- 1 william william 35 Mar 10 19:19 .lesshst drwx------ 1 william william 19 Jul 17 2018 .local/ drwxr-xr-x 1 william william 81 Jul 17 2018 .mozilla/ -rw-rw-r-- 1 william william 8.7K Mar 6 11:24 .mycli-history -rw-rw-r-- 1 william william 15K Mar 5 20:39 .mycli.log -rw-rw-r-- 1 william william 4.1K Sep 27 15:37 .myclirc drwxrwxr-x 1 william william 8.0K Mar 19 08:40 myLog/ drwxrwxr-x 1 william william 35 Dec 3 10:55 myShell/ -rw------- 1 william william 5.8K Jan 29 15:58 .mysql_history -rw------- 1 william william 245K Jul 18 2018 myTask_20171105-20171111-momentum-trading.pdf drwxrwxr-x 1 william william 166 Mar 5 15:14 myVnpy/ drwxrwxr-x 1 william william 155 Mar 15 19:54 .navicat64/ drwxrw---- 1 william william 19 Jul 18 2018 .pki/ drwxrwxr-x 1 27 sudo 6 Feb 28 15:10 public/ drwxrwxr-x 1 william william 45 Jul 18 2018 R/ drwx------ 1 william william 17 Jul 17 2018 .redhat/ drwxr-xr-x 1 william william 4.0K Jul 18 2018 .rstudio/ drwx------ 1 william william 48 Feb 26 08:57 .ssh/ drwxr-xr-x 1 william william 65 Jul 18 2018 .subversion/ drwxrwxr-x 1 william william 59 Jan 24 21:31 temp/ -rw-rw-r-- 1 william william 4.6K Jan 23 20:33 .tmux.conf -rw------- 1 william william 4.4K Mar 6 11:34 .viminfo drwxrwxr-x 1 william william 260 Sep 27 08:31 .vnc/ -rw------- 1 william william 198 Sep 27 08:31 .Xauthority ","date":"2019-03-19","objectID":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/:1:0","tags":["ssh","sshfs","远程挂载"],"title":"使用 sshfs 挂载远程文件到本地机器","uri":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/"},{"categories":["Programming"],"content":" 卸载使用命令 fusermount 来卸载 fusermount -u ~/trader188 cd ~/trader188 \u0026\u0026 ls ","date":"2019-03-19","objectID":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/:2:0","tags":["ssh","sshfs","远程挂载"],"title":"使用 sshfs 挂载远程文件到本地机器","uri":"/archives/2019-03-19-%E4%BD%BF%E7%94%A8-sshfs-%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8/"},{"categories":["Programming"],"content":"由于我们做程序化交易需要调用 CTP 的接口，需要把本地机器的 IP 报备给经纪商（期货公司、证券公司）。但其实我们使用的是公网 IP 而非固定 IP，因此这个也不一定在每次联网后都一样。 尽管如此，我还是把相关的命令做一下备忘。 安装 curl ## 如果没有安装 curl ## Ubuntu sudo apt install curl ## CentOS sudo yum install curl 命令","date":"2019-02-25","objectID":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/:0:0","tags":["Linux","ip","centos7"],"title":"Linux 查看公网IP","uri":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/"},{"categories":["Programming"],"content":" cip.cc curl cip.cc IP : 116.24.99.235 地址 : 中国 广东 深圳 运营商 : 电信 数据二 : 广东省深圳市 | 电信 数据三 : 中国广东省深圳市 | 电信 URL : http://www.cip.cc/116.24.99.235 ","date":"2019-02-25","objectID":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/:1:0","tags":["Linux","ip","centos7"],"title":"Linux 查看公网IP","uri":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/"},{"categories":["Programming"],"content":" ipinfo.io可以使用 ipinfo.io 网站进行查询 curl ipinfo.io | more % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 159 100 159 0 0 748 0 --:--:-- --:--:-- --:--:-- 764 { \"ip\": \"116.24.99.235\", \"city\": \"Yuanlong\", \"region\": \"Guangdong\", \"country\": \"CN\", \"loc\": \"22.7699,112.9350\", \"org\": \"AS4134 CHINANET-BACKBONE\" } ","date":"2019-02-25","objectID":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/:2:0","tags":["Linux","ip","centos7"],"title":"Linux 查看公网IP","uri":"/archives/2019-02-25-linux-%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91ip/"},{"categories":["Programming"],"content":"“The C Programming Language” 是计算机编程的经典之作，别名 K\u0026R。 这是一本简短精悍的书籍，介绍了 C 语言的编程核心、ANSI 规范、编译原理等诸多方面的内容。现在很难想象这本不足 200 页的小书^[可以参考这个链接看看现在有哪些优秀的 C 编程数据：The Definitive C Book Guide and List - Stack Overflow]尽然能够放得下这么多的内容，可以说是提纲挈领、言简意垓。尤其是附录A部分，只是简要介绍了 C 的编译原理，区区几页纸张就足以为后人编写各式不同的编译器提供指引^[关于 C 的历史，这里有一篇 Dennis Ritchie 写的文章可供参考：The Development of the C Language]。 概览K\u0026R: 经典之作 根据我対本书的理解，把整本书籍分成四部分 第一部分：简单介绍 C，重点在于说明为何要把 C 设计成如此简要。一方面，是受到当时程序运行的硬件条件限制，最早 K.Tompson 和 D.Ritchie 是在 PDP-7、PDP-11 上面实现了 Unix 操作系统，然后才决定设计一款与这个 Unix 操作系统配套的编程语言，这必然要求新语言一定要足够精简以适应操作系统対性能的极致考验；另一方面，「小而美」是当时学术领域的一个普遍认可的观念，即根据「奥卡姆」定律：如无必要，请勿增添。因此，我们现在看到，C 语言最核心的内容其实很少，关键词不到 30 个，基本上达到了高级编程语言能够触摸的「底层地板」，但通过一定的设计之后，由这些命令组成的程序却又有着强大的能够，既能够实现対底层硬件（指针是 C 语言的核心，即变量在内存的地址）的直接操控，又能提供简洁明确的逻辑范式。 Chapter 0: Introduction C is a general-purpose programming language。 C 是一个通用的编程语言，既能够用于编写操作系统这类高难度的「程序」，也提供了一套开发高级程序的工具。 [page.3] we believe strongly that the way to learn a new language is to write programs in it. 其实编程就像一门传统的手艺活，需要不停的练习才能达到掌握，即 “learning by doing”。多敲键盘，多写代码，这是唯一无二的学习方法。 Chapter 1: A Tutorial Introduction 第二部分：介绍 C 编程语言的核心。 Chapter 2: Type, Operators, and Expression Chapter 3: Control Flow Chapter 4: Functions and Program Structure Chapter 5: Pointers and Arrays Chapter 6 Structures 第三部分：介绍标准库 Chapter 7: Input and Output Chapter 8: The Unix System Interface 第四部分：附录：编译器 Appendix A: Reference Manual Appendix B: Standard Library PART I：入门准备","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:0:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 1: Hello, world!","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 经典例子经典的 Hello, world 就是从这里诞生的。 // hello.c // 经典 Hello, World #include \u003cstdio.h\u003e int main() { printf(\"Hello, world.\"); return 0; } Hello, world. 这个例子虽然看起来十分的简单，却涉及到相当多的关于该程序的知识点，因而也往往成了一门编程语言入门的「见面礼」，正如书上说的： [page.5] This is the big hurdle; to leap over it, you have to be able to create the program text somewhere compile it successfully load it run it and find out where you output went Hello, world. ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:1","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 温度转换 // f-c.c // 摄氏温度、华氏温度之间的转换 #include \u003cstdio.h\u003e #define BEGIN 0 #define END 300 #define STEP 20 int main() { for (int i = BEGIN; i \u003c= END; i += STEP) printf(\"%3d\\t%5.1f\\n\", i, (i-32)*5.0/9); return 0; } f-c 温度转换 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:2","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 格式化输入、输出这里补充一下关于 printf 与 scanf 格式化的知识点： 我们知道，C 被设计的非常的简洁，核心代码量极小，甚至都不提供输入、输出这样常用的函数，因为有时候程序确实不需要这些函数也能运行，从而可以省下不必要的函数载入消耗。 ANSI C 提供了输入输出的标准库，在 stdio.h 中定义了函数原形，我们可以把这个标准库载入后，调用输入输出函数。 关于 printf 的说明 要求参数是一个 字符串，而不能是单个的字符。前者使用双引号 “”，后者使用单引号 ‘’，而且前者的后面是 \\0 做为字符串结束标识。 可以定义输出格式 %d：简单的私进制整型 %6d：宽度为 6 位 %06d：宽度为 6 位，且不足 6 位时以 0 代替 %06.1f：浮点数，最大宽度为 6，小数点保留 1 位，且补足 6 位时以 0 代替 %c：单个字符串 %p：指针 %o：八进制 %x：十六进制 关于 scanf 的说明 接受输入，可以接受连续输入，中间以空格键区分，使用 ctrl+d 标示结束输入 把输入值的指针赋值给指定的变量，因此需要放入变量的指针，而不是变量本身，这一点往往容易出错 // printf-scanf.c // 格式化输入、输出 #include \u003cstdio.h\u003e int main() { int a = 14; float b = 23.55656; printf(\"%d\\n\", a); printf(\"%12d\\n\",a); printf(\"%5.2f\\n\", b); printf(\"%o\\n\", a); printf(\"%x\\n\", a); printf(\"%p\\n\", \u0026a); printf(\"Enter two number\\n\"); scanf(\"%d%f\", \u0026a, \u0026b); printf(\"%d\\n\", a); printf(\"%f\\n\", b); return 0; } printf-scanf 格式化输入、输出 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:3","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 关于 for 与 while书中其实是分别用了 for 和 while 两种逻辑结构来対温度进制进行转换。这两类逻辑都是属于循环结构，一般来说， 对于有确定循环次数的逻辑，我们使用 for 而对于未知循环次数的逻辑，则使用 while [page.14] The choice between while and for is arbitrary, based on which seems clearer. The for is usually appropriate for loops in which the initialization and increment are single statements and logically related, since it is more compact than while and it keeps the loop control statements together in one place. ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:4","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 关于预处理macro 也称作预处理指令，是预处理器在编译前，执行的特殊命令，可以是插入头文件、定义全局常量、执行逻辑分支等。需要注意的是，预处理指令实际上不是一个 C 语句，因此不能在预处理命令后面添加分号 ;。 #include \u003cstdio.h\u003e：就是把头文件插入到源文件，从而保证编译器能够找到声明 #ifndef、#endif：预处理器执行分支逻辑 #define：可以理解成定义了一个全局变量，实际上不是这样的，而是把源文件中出现的所有字符都替换为我们预定义的变量字面值，从而达到固定程序有关变量数值的目的，因此是不可改变的 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:5","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" getchar // 获取单个字符，然后计算一共输入多少字符 #include \u003cstdio.h\u003e int main() { int len = 0; while (getchar() != EOF) len += 1; printf(\"\\nTotal char: %d\\n\", len); return 0; } gechar 获取单个字符 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:6","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 函数封装 [page.24] With properly designed functions, it is possible to ignore how a job is done; knowing what is done is sufficient. // 计算 power 函数 #include \u003cstdio.h\u003e #include \u003cstring.h\u003e int power(int base, int n); void myprintf(char msg[]); int main() { int a = 2, b = 5; int pow; // 可以保存结果 pow = power(a, b); printf(\"%d^%d \\t= %d\\n\", a, b, pow); // 可以直接调用 printf(\"%d^%d \\t= %d\\n\", 2, 10, power(2,10)); char msg[100]; strcpy(msg, \"hello, world\"); myprintf(msg); strcpy(msg, \"This is function.\"); myprintf(msg); return 0; } int power(int base, int n) { int res = 1; for (int i = 0; i \u003c n; ++i) res *= base; return res; } void myprintf(char msg[]) { printf(\"\\n// -----------------------\\n\"); printf(msg); printf(\"\\n// -----------------------\\n\"); } 函数封装 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:7","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 作用域(scope)C 使用一対大括号{}来聚合多个命令语句块，并形成一个变量的作用域(scope)。这类变量我们称之为 automatic。作用域遵从「可高不可低」的原则，即 一个作用域内部的变量只在本作用域内有效（包含子域） 更高层次的作用域无法调用子域变量 [page.31] Because automatic variables come and go with function invocation, they do not retain their values from one call to the next, and must be explicitly get upon each entry. If they are not set, they will contain garbage. 比如 // 作用域 #include \u003cstdio.h\u003e // 全局变量 int g = 10; int main() { printf(\"g = %d\\n\", g); --g; int a = 5; printf(\"a = %d\\n\", a); --a; printf(\"## 进入低级作用域 -------------------------\\n\"); { // 可以调用更高的作用域 printf(\"a = %d\\n\", a); // 全局变量始终有效 printf(\"g = %d\\n\", g); --g; int a = 100; printf(\"a = %d\\n\", a); --a; // 只在这个层次的 {} 之内修改才有效 printf(\"a = %d\\n\", a); } printf(\"## 返回高级作用域 -------------------------\\n\"); // 不可以调用 {} 内更低的作用域 printf(\"a = %d\\n\", a); // 全局变量始终有效 printf(\"g = %d\\n\", g); return 0; } Build As Project 从函数调用的角度看这个问题，每次调用一个函数，C 是默认使用 pass-by-value 把常量复制后再传入到函数主体，因此，在函数里面対参数的修改，实际上不会影响原来传递的参数值。如果想要对其进行修改，则需要 pass-by-reference 或则 pass-by-pointer。^[从内存地址的角度看，二者是同一个东西，都是变量的一种「映射」，只不过 reference 是别名，而 pointer 是内存实实在在的地址。] ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:8","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" C编程工程项目对于一个小型的工程项目，比如上面这个函数封装的例子，我们只需要把所有的函数原型和函数定义写在 main 同在的源文件，然后直接编译就可以运行了。但是对于一个大型的 C 程序开发项目，往往会涉及到非常多的文件关联，主函数起到的只是一个做为程序入口用于调用其他的功能模块，而这些功能模块，又都是根据各自的特征分布的各个源文件中。这在编译的时候，就需要告诉编译器各个模块之间的关联关系。这就是头文件的作用。 把所有的函数原型放在一个头文件 myfunctions.h 里面，指明函数的基本结构，但没有函数体 由于头文件可能会在多个功能模块中被重复载入，因此需要使用预处理命令 #ifndef __MYFUNCTIONS__H__ #define __MYFUNCTIONS__H__ // ------------------------------ 函数原型声明 // ------------------------------ #endif 在 myfunctions.c 编写函数主体，主要需要把头文件载入，#include “myfunctions.h” 在 main 函数源文件中，由于需要调用函数主体，因此也需要把头文件载入，向编译器表明函数原型 之后便可以直接调用函数 编译的时候，可以使用命令，或者在 Sublime 里面设置 \"cmd\": [\"gcc -std=c11 -Wall ${file_path}/*.c -o ${file_base_name}\"] 即把所有的文件都进行编译，然后自动进行链接 Build As Project PART II：C 语言核心概念","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:9","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 2: Types, Operators, and Expression","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 变量名 There are two hard things in computer science: cache invalidation and naming things. – Phil Karlton 以上这句经典台词常常被用来形容给变量取一个合适的名称是多么的困难，既要简短以减少输入时间，又要直观以方便阅读。 一般来说，以下几点是在 c 编程中需要注意的： c 是対大小写敏感的编程语言，也就意味着 x 与 X 代表两个不同的变量。其实还可以进一步引申出来，绝大部分的 c-family，也都遵从大小写敏感的原则，如 R、python。当然，还是有很多的编程语言是不限制大小写的，比如数据库操作语言 SQL 。 c 要求变量名以英文字母、下划线开头、并可以在非开头部分使用阿拉伯数字。注意，这个往往是初学者容易犯错的地方：变量名不能以数字开头。 以下划线开头的变量往往有特殊的意义，一般是标准开预先定义的变量名，或则是一类全局变量名。 变量名应以字见意，能够从字面意思推断出该变量代表的具体含义。虽然类似 a、aa、b 这些名称也是合法的，但无法看出来他们各自代表什么意思，因此不利于代码阅读。另外，现在很多的 IDE 都有提供变量的模糊匹配功能，比如 Sublime 中使用 ctrl+d 或则 alt+f3 是可以直接找到与该名称匹配的所有变量，而如果使用 a 、aa 这类名称，则会困难很多。 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:1","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 基本数据类型一般来说，基本数据类型的具体位长，与本地机器有关。 char： ANSI 支持的单个字母，并以整数表示。如 A 是对应 65。char 一共有 256 个，一般是以整数的形式表示。需要注意的是，char 和我们在标准库使用的 string 是不一样的， char 使用整数表示，只占用一个字节(byte，一共有 $2^8$)；而 string 是字符串，本质上是一个 char array[]，并且以 \\0 标示结尾（虽然打印的时候看不到，这个是系统自动加上的）。因此，A 与 “A” 是两个不一样的变量，前者是一个字符，只有一个字节，而后者多了一个结尾符号 \\0，因此占用了两个字符。 // char 与 string 区别 #include \u003cstdio.h\u003e int main() { char c = 'A'; printf(\"%d\\n\", c); printf(\"sizeof \\'A\\': %ld\\n\", sizeof c); char s[] = \"A\"; printf(\"%s\\n\", s); printf(\"sizeof \\\"A\\\": %ld\\n\", sizeof s); return 0; } char 与 string short、int、long、long long：整型。 float、double、long double：浮点型。尽量使用 double 类型，一方面是因为精度更高；另一方面，传统上认为 float 可以节省内存空间，但是现在对于大内存时代，已经不是问题，而且很多的内存机制会自动进行 double 的补齐，所以直接使用 double 性能是会更佳。 我们可以查看一下系统的基本数据类型长度 // 查看 sizeof() #include \u003cstdio.h\u003e int main () { printf(\"sizeof(char) \\t= %ld\\n\", sizeof(char)); printf(\"sizeof(short) \\t= %ld\\n\", sizeof(short)); printf(\"sizeof(int) \\t= %ld\\n\", sizeof(int)); printf(\"sizeof(long) \\t= %ld\\n\", sizeof(long)); printf(\"sizeof(float) \\t= %ld\\n\", sizeof(float)); printf(\"sizeof(double) \\t= %ld\\n\", sizeof(double)); printf(\"sizeof(long double) \\t= %ld\\n\", sizeof(long double)); return 0; } sizeof ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:2","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 拓展数据类型 enum：整型，并以 1 递增。如果没有指定初始，则以 0 开始计数。 structure：结构体。 pointer：指针，即变量在内存的地址。 array #include \u003cstdio.h\u003e #include \u003cstring.h\u003e typedef enum Market { sse = 0, szse, unknown } Market; typedef struct Book { char title[50]; char author[50]; } Book; int main () { // enum Market mkt = szse; printf(\"market code: %d\\n\", mkt); // structure Book mybook = {\"C Programing Learning Note\", \"william\"}; printf(\"%s: \\\"%s\\\"\\n\", mybook.author, mybook.title); // pointer to structure Book *pbook = \u0026mybook; strcpy(pbook-\u003etitle, \"A personal remark\"); printf(\"%s: \\\"%s\\\"\\n\", pbook-\u003eauthor, pbook-\u003etitle); // array int l[10] = {1,2,3}; printf(\"l[0]: %d\\n\", l[0]); char s[] = \"This is a really long string\"; printf(\"%s\\n\", s); return 0; } 扩展数据类型 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:3","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 常量常量，顾名思义，就是不可以更改的变量，本质上还是一个变量，只不过不能对其进行修改值，但可以在命令语句中调用。 字面常量（literal constant）：字符常量 a、A，字符串常量 “a long string”。 常量表达式（constant expression）：即在编译的时候就可以确定的表达式 constant int i = 10; // 编译的时候已经确定了 j 的值 int j = (i+100)*i; ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:4","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 类型转换类型转换有两种实现方式： 显示转换，即明确写明需要转换的目标类型 隐式转换，系统根据一定的转换规则把原来的数据转换为目标数据，注意原来的数据类型是不变的，改变的是取值后的数据： 一般是采用低阶到高阶的顺序，即占用字节少的数据类型补齐成占用字节多的数据类型，以补齐所需的内存空间 char -\u003e int -\u003e float -\u003e double short -\u003e long 对于溢出数据所标示数值范围的，则会根据数据类型所占用的范围进行循环，比如 short si = 32768 + 1; printf(\"si = %d\\n\", si); // 得到 si = -32767 #include \u003cstdio.h\u003e int main () { int i = 65; double f; // 整数截断 f = i / 2; printf(\"f = %d/2: %.2f\\n\", i, f); // explicit converse f = (double) i / 2; printf(\"f = (double) %d / 2 = %.2f\\n\", i, f); // implicit converse int ii = f; printf(\"ii = %f: %d\\n\", f, ii); // implicit converse char c = i; printf(\"i = %d --\u003e c = %c\\n\", i, c); short si = 32768 + 1; printf(\"si = %d\\n\", si); return 0; } 类型转换 page.44 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:5","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" 运算 函数运算优先级最高 变量自增、自减 算数运算 逻辑运算 复合运算符 op=，根据上面的运算优先级，op= 是先计算等式左边，得到值后再进行复合运算，即 x *= y + z; // x = x*(y+z); page.53 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:6","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 3: Control Flow","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:3:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" if-else if (expression) statement; else if (expression) statement; else statement; expression 为逻辑判断，结果如果是非零（0），则表示逻辑为真；如果是零（0），则代表逻辑为假 注意语句后面使用分号 ; 代表该语句结束 if-else 遵从 就近原则，即会寻找最近的 else 进行配对 if (expression) if (expression) statement; else statement; 虽然看起来，我们使用了缩进试图表示 else 是与第一个 if 配对，当时要记住，c 其实不不像 python 是严格使用缩进来表示代码运行逻辑的。因此，此处的运行到第二个 if 后，会直接与 else 配对，即 if (expression){ if (expression) { statement; } else { statement; } } 当然，如果需要表达另外一个意思，需要使用 {} 来划分代码块 if (expression) { if (expression) statement; } else { statement; } ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:3:1","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" switchswitch 使用整型变量来判断需要执行哪个命令语句。 switch (expressoin) { case constant-expression: case constant-expression: do-something statement; break; default: break; } ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:3:2","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" for 与 while其实两者是可以互相转换的 page.60 while 是先执行判断条件，如果没有符合的，则一步都不会执行下面的语句 为了至少执行一次，我们可以使用 do-while。 #include \u003cstdio.h\u003e int main() { int END; int i = 0; printf(\"## while ------------\\n\"); printf(\"Enter a number: \"); scanf(\"%d\", \u0026END); // 如果 i \u003c END 不成立，则一次都不执行 while (i \u003c END) { printf(\"%d\\n\", ++i); } printf(\"\\n## do while ---------\\n\"); i = 0; printf(\"Enter a number: \"); scanf(\"%d\", \u0026END); // 无论 i \u003c END 是否成立，都至少执行一次 do { printf(\"%d\\n\", ++i); } while (i \u003c END); return 0; } do-while ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:3:3","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" break与continue可以控制循环逻辑的执行： break 提前退出整个循环 continue 不执行本次循环，但需要继续执行省下的循环^[R 使用 next， python 使用 continue] ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:3:4","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 4: Functions and Program Structure 本章的内容非常的翔实，不仅介绍了函数封装的基本知识，更是重点分析如何构建一个完整的 c 项目程序，从使用头文件、声明外部变量、到分离编译、函数调用等高级功能。 ","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:4:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 5: Pointers and Arrays","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:5:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":" Chap. 6: Structures PART III：使用标准库 PART IV：编译原理","date":"2019-02-24","objectID":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:6:0","tags":["K\u0026R","D.Ritchie","c","unix"],"title":"K\u0026R 读书笔记","uri":"/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":["Programming"],"content":"SublimeGDB 是一款可以在 Sublime 编辑器内运行的代码调试器，即调用系统的 GNU Debugger 套件。通过一定的设置，我们便可以把 Sublime 改造成一款轻量级的 IDE，从而可以直接在编辑器对源文件^[source code]进行调试，并且提供了了多个代码调试状态，比直接在终端进行调试要强大的多，也十分方便。 安装直接使用 shif+ctrl+p 调用 install packages 来查找 SublimeGDB。安装完成后，我们还需要根据个人的使用习惯，进行定制改造。 配置","date":"2019-02-20","objectID":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/:0:0","tags":["Sublime","GNU","GDB","Debugger","gcc","c","c++","调试器"],"title":"SublimeGDB: 更好用的轻量级 Debugger","uri":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/"},{"categories":["Programming"],"content":" 布局Preferences -\u003e Package Settings -\u003e SublimeGDB -\u003e Settings-User { \"workingdir\":\"${folder:${file}}\", \"commandline\":\"gcc -ggdb3 -std=c11 ${file} -o ${file_base_name} \u0026\u0026 gdb --interpreter=mi --args ./${file_base_name}\", // 可以直接调试 cmake 下的 bin/run 可执行文件 //\"commandline\":\"gdb --interpreter=mi --args ../bin/run\", \"env\": {\"DISPLAY\": \":100\"}, \"close_views\": true, // Define debugging window layout (window split) // first define column/row separators, then refer to them to define cells \"layout\": { \"cols\": [0.0, 0.5, 1.0], \"rows\": [0.0, 0.65, 1.0], \"cells\": [ // c1 r1 c2 r2 [0, 0, 1, 1], // -\u003e (0.0, 0.0), (0.5, 0.65) [1, 0, 2, 1], // -\u003e (0.5, 0.0), (0.65, 1.0) [0, 1, 1, 2], // -\u003e (0.0, 0.65), (1.0, 0.5) [1, 1, 2, 2] // -\u003e (0.5, 0.65), (1.0, 1.0) ] // 布局结构 // // | c0:0 | c1:0.5 | c2:1.0 // r0:0.0 | ------------- | ------------- | // ------- | c0:r0 c1:r0 // ------- | =0# =1# // ------- | c1:r1 c2:r1 // r1:0.65 | ------------- | ------------- | // ------ | c0:r1 c1:r1 // ------ | =2# =3# // ------- | c1:r2 c2:r2 // r2:1.0 | ------------- | ------------- | }, // The group used for opening files \"file_group\": 0, \"console_group\": 1, \"console_open\": true, \"session_group\": 2, \"session_open\": true, \"variables_group\": 2, \"variables_open\": true, \"callstack_group\": 3, \"callstack_open\": true, \"registers_group\": 3, \"registers_open\": false, \"disassembly_group\": 3, \"disassembly_open\": true, // Set to \"intel\" for intel disassembly flavor. All other // values default to using \"att\" flavor. \"disassembly_flavor\": \"intel\", \"threads_group\": 3, \"threads_open\": true, \"breakpoints_group\": 3, \"breakpoints_open\": true, } 说明： \"workingdir\":\"${folder:${file}}\"：设置为在当前源文件进行调试 \"commandline\":\"gcc -ggdb3 -std=c11 ${file} -o ${file_base_name} \u0026\u0026 gdb --interpreter=mi --args ./${file_base_name}\"：需要使用的调试器参数，比例我这里使用 gcc 进行编译，并以 -std=c11 的标准。需要注意的是，由于我们编译完源文件后进行调试，因此需要添加参数 -g 表示生成可调式执行文件。 \"env\": {\"DISPLAY\": \":100\"}：全屏显示 \"close_views\": true：当退出调试模式后，把相关的窗口都关闭掉。 \"layout\"：用来控制页面格式，可以根据使用习惯进行定制。使用 cells 来标记窗口号，然后将不同的窗口放置在标记的布局里。 ","date":"2019-02-20","objectID":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/:1:0","tags":["Sublime","GNU","GDB","Debugger","gcc","c","c++","调试器"],"title":"SublimeGDB: 更好用的轻量级 Debugger","uri":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/"},{"categories":["Programming"],"content":" 快捷键Preferences -\u003e Package Settings -\u003e SublimeGDB -\u003e Key Bindings-User // SublimeGDB ============================================================== { \"keys\": [\"ctrl+p\"], \"command\": \"gdb_toggle_breakpoint\" }, { \"keys\": [\"ctrl+g\"], \"command\": \"gdb_launch\", \"context\": [{\"key\": \"gdb_running\", \"operator\": \"equal\", \"operand\": false}] }, { \"keys\": [\"ctrl+g\"], \"command\": \"gdb_exit\", \"context\": [{\"key\": \"gdb_running\", \"operator\": \"equal\", \"operand\": true}] }, { \"keys\": [\"ctrl+enter\"], \"command\": \"gdb_continue\", \"context\": [{\"key\": \"gdb_running\", \"operator\": \"equal\", \"operand\": true}] }, { \"command\": \"gdb_step_over\", \"context\": [ {\"key\": \"gdb_running\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"gdb_disassembly_view\", \"operand\": false} ], \"keys\": [\"ctrl+n\"] }, { \"command\": \"gdb_next_instruction\", \"context\": [ {\"key\": \"gdb_running\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"gdb_disassembly_view\", \"operand\": true} ], \"keys\": [\"ctrl+n\"] }, // SublimeGDB ============================================================== 快捷键使用指南： ctrl+n：触发断点 ctrl+g：载入 GDB 调试模式，其中 context 表示在何种情况下运行这个命令。 使用 ","date":"2019-02-20","objectID":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/:2:0","tags":["Sublime","GNU","GDB","Debugger","gcc","c","c++","调试器"],"title":"SublimeGDB: 更好用的轻量级 Debugger","uri":"/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/"},{"categories":["Programming"],"content":"Sublime 是一款提供了可自定义的强大编辑器。我们可以根据个人的使用习惯，通过修改相应的参数配置，就可以搭建一个得心应手的编程环境。 对于现代（c以后）的解释型编程语言，基本上都是支持 REPL 的，即 read-evalue-print-loop^[wiki:read-evalue-print-loop，这些语言包括：APL、BASIC、Clojure、F#、Haskell、J、Julia、Perl、PHP、Prolog、Python、R、Ruby、Scala、Smalltalk、Standard ML、Swift、Tcl、Javascript、Java这样的编程语言所拥有的类似的编程环境。]，简单来说，就是可以在源文件与解释器之间进行实时的交互。这一点尤其是对于数据分析工作意义重大。一般而言，我们使用 R 或则 python 対数据进行探索性分析时，往往需要在程序与结果之间进行多次的交互分析，通过程序来查看结果，同时又通过结果来修改程序。很难想象如果没有 REPL 的支持，仅凭借编译语言，每次修改程序后都需要重新编译、执行，工作量是多么的巨大。 而做为一款现代的、优秀的编辑器，Sublime Text 当然夜提供了支持 REPL 的功能了。通过安装相关的插件，并设置一定的参数，我们便可以把 sublime 改造成为一个称心如意的数据分析套件了。 安装插件可以通过调用 shift+ctrl+p 来安装需要的插件： SublimeREPl：支持 REPL 交互 SendCode：发送代码到 SublimeREPL 安装完成后，我们可以在 sublime 的菜单中，打开 Preferences -\u003e Browse Packages 查看已安装的插件，这也是后面改造插件的配置文件所在。 改造下面，我们一步步地完成対 SublimeREPL 进行改造。 ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:0:0","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":" 执行终端显示代码可以在执行的终端显示已发送的代码。打开 Preference -\u003e Package Setting，然后找到 SublimeREPL，打开 Settigns-User： { \"show_transferred_text\": true, } 这样，我们便可以在终端看到已经执行了哪些代码。 ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:1:0","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":" 修改快捷键可以配置快捷键，用于打开特定的编程环境，如 R、python。同时，我们还可以通过 ssh 直接连接到远程服务器，实现在本地编辑器修改源文件、在远程服务器执行代码。 打开 Preference -\u003e Key Bindings ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:2:0","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":" R 编程 local machine // 使用 F5 打开 本地R { \"keys\": [\"f5\"], \"caption\": \"SublimeREPL: R\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"external_id\": \"r\", \"additional_scopes\": [\"tex.latex.knitr\"], \"encoding\": { \"windows\": \"$win_cmd_encoding\", \"linux\": \"utf8\", \"osx\": \"utf8\" }, \"soft_quit\": \"\\nquit(save=\\\"no\\\")\\n\", \"cmd\": { \"linux\": [\"R\", \"--interactive\", \"--no-readline\"], \"osx\": [\"R\", \"--interactive\", \"--no-readline\"], \"windows\": [\"Rterm.exe\", \"--ess\", \"--encoding=$win_cmd_encoding\"] }, \"cwd\": \"$file_path\", \"extend_env\": {\"osx\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"linux\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"windows\": {}}, \"cmd_postfix\": \"\\n\", \"suppress_echo\": {\"osx\": true, \"linux\": true, \"windows\": false}, \"syntax\": \"Packages/R/R Console.tmLanguage\" } }, remote server // 使用 F6 打开 远程R { \"keys\": [\"f6\"], \"caption\": \"SublimeREPL: Rssh135\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"external_id\": \"r\", \"additional_scopes\": [\"tex.latex.knitr\"], \"encoding\": { \"windows\": \"$win_cmd_encoding\", \"linux\": \"utf8\", \"osx\": \"utf8\" }, \"soft_quit\": \"\\nquit(save=\\\"no\\\")\\n\", \"cmd\": { \"linux\": [\"ssh\",\"fl@192.168.1.135\",\"-p22\",\"R\",\"--interactive\", \"--no-readline\"], \"osx\": [\"ssh\",\"fl@gczhang.imwork.net\", \"-p58873\",\"R\",\"--interactive\", \"--no-readline\"] }, \"cwd\": \"$file_path\", \"extend_env\": {\"osx\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"linux\": {\"PATH\": \"{PATH}:/usr/local/bin\"}, \"windows\": {}}, \"cmd_postfix\": \"\\n\", \"suppress_echo\": {\"osx\": true, \"linux\": true, \"windows\": false}, \"syntax\": \"Packages/R/R Console.tmLanguage\" } }, ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:2:1","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":" python 编程 python2 // 使用 F2 打开 本地python2 { \"keys\": [\"f2\"], \"caption\": \"SublimeREPL: Python2\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"encoding\": \"utf8\", //\"cmd\": [\"python\", \"-i\", \"-u\"], \"cmd\": [\"/home/william/anaconda2/bin/python\", \"-i\", \"-u\"], \"cwd\": \"$file_path\", \"syntax\": \"Packages/Python/Python.tmLanguage\", \"external_id\": \"python\", \"extend_env\": {\"PYTHONIOENCODING\": \"utf-8\"} } }, python3 // 使用 F3 打开 本地python3 { \"keys\": [\"f3\"], \"caption\": \"SublimeREPL: Python3\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"encoding\": \"utf8\", //\"cmd\": [\"python\", \"-i\", \"-u\"], \"cmd\": [\"/home/william/anaconda3/bin/python\", \"-i\", \"-u\"], \"cwd\": \"$file_path\", \"syntax\": \"Packages/Python/Python.tmLanguage\", \"external_id\": \"python\", \"extend_env\": {\"PYTHONIOENCODING\": \"utf-8\"} } }, 远程 python // 使用 F4 打开 远程python2 { \"keys\": [\"f4\"], \"caption\": \"SublimeREPL: PySSH166\", \"command\":\"repl_open\",\"args\": { \"type\": \"subprocess\", \"encoding\": \"utf8\", \"cmd\": {\"linux\": [\"ssh\",\"fl@192.168.1.166\",\"-p22\",\"python2\", \"-i\", \"-u\"]}, \"cwd\": \"$file_path\", \"syntax\": \"Packages/Python/Python.tmLanguage\", \"suppress_echo\": false, \"external_id\": \"python\", \"extend_env\": {\"PYTHONIOENCODING\": \"utf-8\"}, \"cmd_postfix\": \"\\n\", \"suppress_echo\": {\"osx\": true, \"linux\": true, \"windows\": false} } }, ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:2:2","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":" repl-restart对于一个完整的分析项目，我们有时候想重启终端，以便查看修改后的程序是否依然能完整的运行。这个可以通过调用 shift-ctrl-p 来实现 当然，这个略显笨拙，尤其是对于一个需要多次重启的过程，十分的耗费时间与精力。做为一个「懒惰」的程序员，当然需要一键搞定全过程了。 我们可以找到 ~/.config/sublime-text-3/Packages/SublimeREPL，查看 repl:restart 是由 Context.sublime-menu 控制 vim ~/.config/sublime-text-3/Packages/SublimeREPL/Context.sublime-menu [ {\"caption\": \"-\"}, {\"command\": \"repl_kill\", \"caption\": \"Kill\"}, {\"command\": \"repl_restart\", \"caption\": \"Restart\"}, {\"command\": \"subprocess_repl_send_signal\", \"caption\": \"Send other SIGNAL\"} ] 既然这样，我们就可以设置一个快捷键来映射这个命令 // 使用 F12 实现 repl:restart 功能 { \"keys\": [\"f12\"], \"caption\": \"SublimeREPL: Restart\", \"command\": \"repl_restart\", \"caption\": \"Restart\" }, 同时，我们还观察到每次重启终端后，都会有窗口询问是否确定需要关闭。这个其实也是冗余的操作，同样可以去掉。找到 ~/.config/sublime-text-3/Packages/SublimeREPL/sublimerepl.py，这是控制整个插件的核心功能模块。找到 def restart(self, view, edit): repl_restart_args = view.settings().get(\"repl_restart_args\") if not repl_restart_args: sublime.message_dialog(\"No restart parameters found\") return False ## --------------------------------------------------------------------- rv = self.repl_view(view) if rv: if rv.repl and rv.repl.is_alive() and not sublime.ok_cancel_dialog(\"Still running. Really restart?\"): return False rv.on_close() # yes on_close, delete rv from ## --------------------------------------------------------------------- view.insert(edit, view.size(), RESTART_MSG) repl_restart_args[\"view_id\"] = view.id() self.open(view.window(), **repl_restart_args) return True 可以看到，其实询问的窗口是一个 rv = self.repl_view(view) 的对象。我们直接把这个注释掉，以后每次重启终端就不会再有提示了。 def restart(self, view, edit): repl_restart_args = view.settings().get(\"repl_restart_args\") if not repl_restart_args: sublime.message_dialog(\"No restart parameters found\") return False ## --------------------------------------------------------------------- # rv = self.repl_view(view) # if rv: # if rv.repl and rv.repl.is_alive() and not sublime.ok_cancel_dialog(\"Still running. Really restart?\"): # return False # rv.on_close() # yes on_close, delete rv from ## --------------------------------------------------------------------- view.insert(edit, view.size(), RESTART_MSG) repl_restart_args[\"view_id\"] = view.id() self.open(view.window(), **repl_restart_args) return True 再次运行 F12，确实是没有提示了，直接重启终端。 ","date":"2019-02-18","objectID":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/:2:3","tags":["sublime","REPL","IDE","python","R","改造","编辑器"],"title":"SublimeREPL: 定制与改造","uri":"/archives/2019-02-18-sublimerepl--%E5%AE%9A%E5%88%B6%E4%B8%8E%E6%94%B9%E9%80%A0/"},{"categories":["Programming"],"content":"介绍如何使用 gitbook 编写技术手册，并配置 github 实现对内容的版本控制。 gitbook 是在线文本的展示与管理网站，提供了独立主页、项目结构、文本形式等规范化的项目格式，从而使得我们只需要专注于内容的生产，无需处理格式化的问题，从而实现了快速发布文档。 安装 gitbook ## 如果提示没有 npm，则需要安装 node ## ------------------------------- ## Ubuntu 使用 apt 安装 sudo apt install npm ## Mac 使用 brew 安装 node ## 会附带 npm 工具 sudo brew install node ## ------------------------------- ## 使用 root 权限 sudo npm install gitbook -g sudo npm install gitbook-cli -g GitBook 搭建主页","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:0:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 注册账户首先，我们需要通过 gitbook 官网注册一个账户，用于管理文档。 ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:1:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 登录账户注册完成后，便可以登录账户了。 ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:2:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 建立项目 管理内容","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:3:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 关联github仓库","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:4:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 同步更新 写作指引","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:5:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 初始化书籍 ## 初始化，根据 SUMMARY.md 生成对应的目录 gitbook init 得到 info: create math/readme.md info: create stat/prob.md info: create stat/eda.md info: create programming/linux/cli.md info: create programming/linux/ubuntu.md info: create programming/linux/centos.md info: create programming/c/why-c.md info: create programming/c/pointer.md info: create programming/c++/why-c++.md info: create programming/c++/class.md info: create programming/python/why-python.md info: create programming/python/numpy.md info: create programming/python/pandas.md info: create programming/r/why-r.md info: create programming/r/data.table.md info: create SUMMARY.md info: initialization is finished 可以看到，gitbook 自动根据 SUMMARY.md 的大纲，为我们生成了目录 tree . ├── math │ └── readme.md ├── programming │ ├── c │ │ ├── pointer.md │ │ └── why-c.md │ ├── c++ │ │ ├── class.md │ │ └── why-c++.md │ ├── linux │ │ ├── centos.md │ │ ├── cli.md │ │ └── ubuntu.md │ ├── python │ │ ├── numpy.md │ │ ├── pandas.md │ │ └── why-python.md │ └── r │ ├── data.table.md │ └── why-r.md ├── README.md ├── stat │ ├── eda.md │ └── prob.md └── SUMMARY.md 8 directories, 17 files ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:6:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 配置book.jsongitbook 在编译书籍的时候会读取书籍源码顶层目录 repo/ 中的 book.json，支持如下配置： 由于我们在 book.json 使用了插件，因此需要让 gitbook 安装： gitbook install . info: installing 16 plugins using npm@3.9.2 info: ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:7:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 本地预览当我们编辑完成相关的文档后，可以在本地先対书籍进行预览 gitbook serve . Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 16 pages info: found 0 asset files info: \u003e\u003e generation finished with success in 2.2s ! Starting server ... Serving book on http://localhost:4000 在浏览器打开 http://localhost:4000 就能看到书籍完成后的模样了． 如果有提示报错，则需要把已经占用的端口线程杀掉，再重新开始预览 ... Uhoh. Got error listen EADDRINUSE :::35729 ... Error: listen EADDRINUSE :::35729 at Object._errnoException (util.js:1022:11) at _exceptionWithHostPort (util.js:1044:20) at Server.setupListenHandle [as _listen2] (net.js:1367:14) at listenInCluster (net.js:1408:12) at Server.listen (net.js:1492:7) at Server.listen (/home/william/.gitbook/versions/3.2.3/node_modules/tiny-lr/lib/server.js:164:15) at Promise.apply (/home/william/.gitbook/versions/3.2.3/node_modules/q/q.js:1165:26) at Promise.promise.promiseDispatch (/home/william/.gitbook/versions/3.2.3/node_modules/q/q.js:788:41) at /home/william/.gitbook/versions/3.2.3/node_modules/q/q.js:1391:14 at runSingle (/home/william/.gitbook/versions/3.2.3/node_modules/q/q.js:137:13) You already have a server listening on 35729 You should stop it and try again. 使用命令 fuser -k 35729/tcp 35729/tcp: 18217 ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:8:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":" 发布由于我们使用了 gitbook 与 github 同步关联功能，因此，只需要把改动后的文档同步到 github 项目，就可以自动完成対 gitbook 的改动，从而实现书籍自动发布的目的。 ## 重新编译，准备发布 gitbook build ","date":"2019-02-17","objectID":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/:9:0","tags":["gitbook","github","博客"],"title":"gitbook 写作指南","uri":"/archives/2019-02-17-gitbook-%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"categories":["Programming"],"content":"jupyterlab 是対 ipython notebook 的全新改良版，提供了一个基于网页的功能套件，集成了多种数据分析工具，如 python、R、Julia 的内核。","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":"jupyterlab 是対 ipython notebook 的全新改良版，提供了一个基于网页的功能套件，集成了多种数据分析工具，如 python、R、Julia 的内核。 安装","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:0:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" conda 安装JupyterLab 的 Github 网页提供了相关的安装指引，只需根据操作系统的具体情况选择可行的安装方案即可。一般推荐使用 conda 的安装方式： conda install -c conda-forge jupyterlab 这会自动安装依赖的软件包。安装完成后，可以查看当前的版本号 python -c \"import jupyterlab; print(jupyterlab.__version__)\" ","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:1:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" 启动可以使用 jupyter lab 来启动程序。注意中间是有空格的，一般我会用短命令 jupyterlab 来覆盖，操作起来更符合直觉 jupyterlab='jupyter lab' ","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:2:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" 更新版本我们可以更新到最新版本，或则指定安装特定版本的 notebok conda search notebook Loading channels: done # Name Version Build Channel notebook 4.0.1 py27_0 pkgs/free notebook 4.0.1 py27_0 anaconda/pkgs/free ........ notebook 5.7.4 py27_0 pkgs/main notebook 5.7.4 py36_0 pkgs/main notebook 5.7.4 py37_0 pkgs/main conda instal notebook=5.7.4 conda install notebook=5.7.4 Collecting package metadata: done Solving environment: done ## Package Plan ## environment location: /home/william/anaconda2 added / updated specs: - notebook=5.7.4 The following packages will be downloaded: package | build ---------------------------|----------------- notebook-5.7.4 | py27_0 7.2 MB ------------------------------------------------------------ Total: 7.2 MB The following packages will be UPDATED: notebook 5.7.0-py27_0 --\u003e 5.7.4-py27_0 Proceed ([y]/n)? y Downloading and Extracting Packages notebook-5.7.4 | 7.2 MB | ######################### | 100% Preparing transaction: done Verifying transaction: done Executing transaction: done ","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:3:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" Jupyter notebook 命令JupyterLab 使用的是 Jupyter Notebook 的内核。因此，我们需要使用 Jupyter Notebook 命令来操作 # 查看版本 jupyter notebook --version 5.7.4 # 显示当前运行的端口 jupyter notebook list Currently running servers: http://localhost:8888/?token=73a7e8191164930a966136da7aee9db9eab3d918392117e9 :: /home/william/ # 停止指定端口 jupyter notebook stop 8888 Shutting down server on port 8888 ... # 如果无法关闭 # 夜可以使用系统的命令来强制关闭 fuser -k 8888/tcp 配置","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:4:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" 主题设置","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:5:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":" 快捷键设置 示例","date":"2019-02-14","objectID":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/:6:0","tags":["python","IDE","jupyterlab","数据分析","data science"],"title":"jupyterlab: 新一代的数据分析套件","uri":"/archives/2019-02-14-jupyterlab--%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A5%97%E4%BB%B6/"},{"categories":["Programming"],"content":"mycli 是一个用于编写 mysql 语法的 Python 程序，提供了语法高亮、自动补全、美化输出等功能，这对于需要常年敲码的农民工是一款十分得力的工具。","date":"2019-02-11","objectID":"/archives/2019-02-11-mycli-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","tags":["mysql","mycli","配置","自动补全"],"title":"mycli 配置文件","uri":"/archives/2019-02-11-mycli-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":" 安装因为是一个 Python 扩展，因此我们可以直接使用 pip 来安装 pip install mycli 安装完成后，即可享受轻松写 mysql 代码了。 用法可以直接在终端使用该程序 mycli -h 192.168.1.188 -P 3306 -u trader -p ****** 其中： -h 是需要运行 mysql 命令的服务器 IP 地址。很显然，mycli 不仅允许我们连接本地数据库，还可以让我们通过本地终端，轻松连接到远程服务器，进行数据库的「增删改查」操作。 -P 注意是大写的，即 mysql 数据库的端口，一般默认是 3306。 -u 用户名 -p 注意是小写的，也可以不用在这一步明文输入，而是以交互的形式来操作，保证账户安全。 当然，我们也可以使用短命令的启动，以后就可以直接在终端使用 mysql@188 来调用 mycli 用以连接数据库了 alias mysql@188='mycli -h 192.168.1.188 -P 3306 -u trader -p ******' 配置当然，我们今天的主题是如何配置 mycli 以符合我们的使用习惯。 mycli 配置文件在 ~/.myclirc ，可以根据需要进行相应的修改与设置，比如字体颜色、自动补全、键盘使用习惯(Emacs vs Vi/Vim)。 # vi: ft=dosini [main] # Enables context sensitive auto-completion. If this is disabled the all # possible completions will be listed. smart_completion = True # Multi-line mode allows breaking up the sql statements into multiple lines. If # this is set to True, then the end of the statements must have a semi-colon. # If this is set to False then sql statements can't be split into multiple # lines. End of line (return) is considered as the end of the statement. multi_line = False # Destructive warning mode will alert you before executing a sql statement # that may cause harm to the database such as \"drop table\", \"drop database\" # or \"shutdown\". destructive_warning = True # log_file location. log_file = ~/.mycli.log # Default log level. Possible values: \"CRITICAL\", \"ERROR\", \"WARNING\", \"INFO\" # and \"DEBUG\". \"NONE\" disables logging. log_level = INFO # Log every query and its results to a file. Enable this by uncommenting the # line below. # audit_log = ~/.mycli-audit.log # Timing of sql statments and table rendering. timing = True # Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe, # orgtbl, rst, mediawiki, html, latex, latex_booktabs, tsv. # Recommended: psql, fancy_grid and grid. table_format = fancy_grid # Syntax coloring style. Possible values (many support the \"-dark\" suffix): # manni, igor, xcode, vim, autumn, vs, rrt, native, perldoc, borland, tango, emacs, # friendly, monokai, paraiso, colorful, murphy, bw, pastie, paraiso, trac, default, # fruity. # Screenshots at http://mycli.net/syntax # syntax_style = default syntax_style = monokai # Keybindings: Possible values: emacs, vi. # Emacs mode: Ctrl-A is home, Ctrl-E is end. All emacs keybindings are available in the REPL. # When Vi mode is enabled you can use modal editing features offered by Vi in the REPL. key_bindings = emacs # Enabling this option will show the suggestions in a wider menu. Thus more items are suggested. wider_completion_menu = False # MySQL prompt # \\t - Product type (Percona, MySQL, Mariadb) # \\u - Username # \\h - Hostname of the server # \\d - Database name # \\n - Newline prompt = '\\t \\u@\\h:\\d\u003e ' prompt_continuation = '-\u003e ' # Skip intro info on startup and outro info on exit # less_chatty = False less_chatty = True # Use alias from --login-path instead of host name in prompt login_path_as_host = False # Custom colors for the completion menu, toolbar, etc. [colors] # Completion menus. ## 选中的颜色 # Token.Menu.Completions.Completion.Current = 'bg:#00aaaa #000000' Token.Menu.Completions.Completion.Current = 'bg:#6A5ACD #aaffff' ## 备选的颜色 Token.Menu.Completions.Completion = 'bg:#ebdbb2 #000000' # Token.Menu.Completions.MultiColumnMeta = 'bg:#aaffff #000000' Token.Menu.Completions.MultiColumnMeta = 'bg:#d79921 #000000' Token.Menu.Completions.ProgressButton = 'bg:#003333' Token.Menu.Completions.ProgressBar = 'bg:#00aaaa' # Selected text. Token.SelectedText = '#ffffff bg:#6666aa' # Search matches. (reverse-i-search) Token.SearchMatch = '#ffffff bg:#4444aa' Token.SearchMatch.Current = '#ffffff bg:#44aa44' # The bottom toolbar. Token.Toolbar = 'bg:#222222 #aaaaaa' Token.Toolbar.Off = 'bg:#222222 #888888' Token.Toolbar.On = 'bg:#222222 #ffffff' # Search/arg/system toolbars. Token.Toolbar.Search = 'noinherit bold' Token.Toolbar.Search.Text = 'nobold' Token.Toolbar.System = 'noinherit bold' Token.Toolbar.Arg = 'noinherit bold' Token.Toolbar.Arg.Text = 'nobold' # Favorite queries. [","date":"2019-02-11","objectID":"/archives/2019-02-11-mycli-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/:0:0","tags":["mysql","mycli","配置","自动补全"],"title":"mycli 配置文件","uri":"/archives/2019-02-11-mycli-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"categories":["Programming"],"content":"peek 是一款小巧而好用的屏幕截图工具，可以输出 GIF 动态图片。","date":"2019-01-22","objectID":"/archives/2019-01-22-peek--%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84gif%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/","tags":["peek","截图","GIF"],"title":"peek: 简单好用的Gif屏幕截图","uri":"/archives/2019-01-22-peek--%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84gif%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/"},{"categories":["Programming"],"content":"peek 是一款小巧而好用的屏幕截图工具，可以输出 GIF 动态图片。这个项目在 github 上面的 star 高达 4k，可见程序员朋友对这款工具的喜好。 Peek: Simple animated GIF screen recorder with an easy to use interface sudo add-apt-repository ppa:peek-developers/stable sudo apt update sudo apt install peek 直接打开 peek 就可以使用截图功能了，完成后保存到本地文件夹。 ","date":"2019-01-22","objectID":"/archives/2019-01-22-peek--%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84gif%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/:0:0","tags":["peek","截图","GIF"],"title":"peek: 简单好用的Gif屏幕截图","uri":"/archives/2019-01-22-peek--%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84gif%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/"},{"categories":["Programming"],"content":"配置 terminator 主题颜色，以插件的形式提供了灵活的配置方式。The biggest collection of Terminator themes。 获取配置这个一定要在系统自带的 terminal 里安装，否则会无法载入。Can’t find the plugin in the preferences \u003e Plugins Had the same problem, make sure to close any open instance of terminator b4 trying, solved it for me 需要关闭所有的 terminator, 然后在系统自带的 terminal 下面安装。 sudo apt install python-requests mkdir -p $HOME/.config/terminator/plugins ## For terminator \u003e= 1.9 wget https://git.io/v5Zww -O $HOME\"/.config/terminator/plugins/terminator-themes.py\" ## For terminator \u003c 1.9 wget https://git.io/v5Zwz -O $HOME\"/.config/terminator/plugins/terminator-themes.py\" 安装插件现在，打开 terminator，鼠标右键点击选择 Preference -\u003e Plugins，然后选中 TerminatorThemes 按钮。 安装主题内置了非常丰富的主题配色，可以在 terminator 操作界面，使用鼠标右键选择 themes 来安装和选择喜欢的配色。 设置默认可以在启动 terminator 的时候，启用默认的配色方案。 打开 ~/.config/terminator/config，把 [plugins] -\u003e [profiles] -\u003e [[default]] 的设置替换为默认启动的方案即可。 ## 这个是原来的一个默认配置 [plugins] [profiles] [[default]] background_color = \"#002b36\" background_darkness = 0.92 background_type = transparent copy_on_selection = True cursor_color = \"#aaaaaa\" foreground_color = \"#839496\" palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\" show_titlebar = False use_theme_colors = True 比如，我用 Zenburn 配置 [plugins] [profiles] [[default]] background_color = \"#3f3f3f\" background_darkness = 0.92 background_type = transparent copy_on_selection = True cursor_color = \"#dcdcdc\" foreground_color = \"#dcdcdc\" palette = \"#3f3f3f:#cc9393:#7f9f7f:#e3ceab:#dfaf8f:#cc9393:#8cd0d3:#dcdccc:#3f3f3f:#cc9393:#7f9f7f:#e3ceab:#dfaf8f:#cc9393:#8cd0d3:#dcdccc\" show_titlebar = False [[Zenburn]] background_color = \"#3f3f3f\" background_type = transparent copy_on_selection = True cursor_color = \"#73635a\" foreground_color = \"#dcdccc\" palette = \"#4d4d4d:#705050:#60b48a:#f0dfaf:#506070:#dc8cc3:#8cd0d3:#dcdccc:#709080:#dca3a3:#c3bf9f:#e0cf9f:#94bff3:#ec93d3:#93e0e3:#ffffff\" show_titlebar = False ","date":"2019-01-22","objectID":"/archives/2019-01-22-terminator-themes/:0:0","tags":["terminator","theme","zenburn"],"title":"terminator themes","uri":"/archives/2019-01-22-terminator-themes/"},{"categories":["Programming"],"content":"Emacs 速来有「神的编辑器」之美誉，同另一款「编辑器之神」Vi/Vim，都是程序员编辑源文件、编写文档的重要法宝。用一种在江湖上流传许久的说法，Emacs其实不是编辑器，而是披着编辑器外衣的操作系统，具有高强度的可拓展性，堪比一款操作系统般强大。 安装","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:0:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" Linux","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:1:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" Ubuntu 源码编译安装(最新版)系统更新资源： sudo apt-get update \u0026\u0026 apt-get upgrade 安装源码编译需要的包： sudo apt-get install build-essential libncurses-dev 可以到 EMACS官方下载页面 或 直接使用下面的链接: $ cd /tmp $ wget http://mirrors.ustc.edu.cn/gnu/emacs/emacs-26.1.tar.xz ## 解压 xz 文件包 $ tar -xJvf emacs-26.1.tar.xz $ cd emacs-26.1 可以通过 configure 进行配置安装： 纯命令行：仅用于控制台环境，如果需要GUI界面还要安装其它开发包, --without-x，以及 --with-gnutls=no 交互界面：默认是会配置所有的交互界面，但需要额外安装相关的软件包。 ## 默认安装 GUI $ ./configure 对于在本地操作，一般我选择配置 GUI。如果有报错需要安装包，可以使用 apt search xxx 来搜索名称，然后安装好就可以了。我安装了几个常用的包： $ sudo apt-get install gnutls-dev libxpm-dev libgif-dev libtiff-dev 如果继续报错 ... ... checking for libXaw... configure: error: No X toolkit could be found. ... ... 则需要通过安装 gtk 来实现带界面运行 apt search gtk | grep libgtk libgtk2.0-dev - development files for the GTK+ library 安装这个 gtk 包 $ sudo apt-get install libgtk2.0-dev 剩下的就是编译安装了 $ sudo make \u0026\u0026 make install 查看版本号 $ emacs --version GNU Emacs 26.1 Copyright (C) 2018 Free Software Foundation, Inc. GNU Emacs comes with ABSOLUTELY NO WARRANTY. You may redistribute copies of GNU Emacs under the terms of the GNU General Public License. For more information about these matters, see the file named COPYING. 当然，也可以在终端启动无界面的操作： $ emacs -nw emacs -nw 一键安装(稳定版)这种方式比较适合安装在 ppa 里面的稳定版本，通常是较当前版本号降低一个系列： $ sudo apt install emacs emacs 启动初始界面 配置","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:1:1","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 配置文件从本质上说，Emacs 其实只是一款 Lisp 的编译引擎，可以用来执行任何符合语法的 Lisp 脚本。由此推导出来，我们可以通过编写自定义的配置文件来设置 Emacs 启动后执行的程序命令。通过查看 GNU Emacs 的官方说明，在 Init File 这部分内容里，我们知道，Emacs 会自动去搜索以下路径的配置文件 ～/.emacs：这种方式是把所有的配置信息都写在一个文件里，设置相对简单，但不利于进行模块化管理，一旦设置文件增多，会导致混乱，一般不推荐这种配置方式。 ~/.emacs.el ~/.emacs.d/init.el：这种方式更加现代，可以把所有的配置文件都统一放在一个文件夹下面，因此更有力于管理插件与配置。Emacs 在启动后会先读入 init.el 文件设置，虽然只是一个单文件，但是可以利用 feature 机制，把具体的模块分类写在这里面。 . ├── elpa ├── init.el ├── lisp └── themes 3 directories, files 在配置文件 init.el 中，通过 add-to-list 将相关的配置文件路径添加到初始化读取路径中。 如果是在 ~/.eamcs.d 目录下面，可以使用 (add-to-list 'load-path \"~/.emacs.d/plugins\") 如果还有一层子目录，需要指定 (add-to-list 'load-path (expand-file-name \"子目录/子目录\" \"~/.emacs.d\"))。其实，上一条也可以写成 (add-to-list 'load-path (expand-file-name \"~/.emacs.d\"))，相当于 子目录 写成空目录。 一般来说，将配置文件名与其提供的 feature 函数命名相同。 比如，我的配置文件 init.el: ;; This is the main Emacs initialization file – .emacs. (add-to-list 'load-path (expand-file-name \"lisp\" \"~/.emacs.d\")) (require 'feature_1) (require 'feature_2) (require 'feature_3) 然后在 \"lisp\" 目录下面放入 feature_1、feature_2、feature_3。 比如：feature_1 这个配置文件，它提供feature_1特性，即是 ～/.emacs.d/init.el 中使用 require 命令要求的 feature_1 特性，那么要在feature_1.el 中加入 provide，则 feature_1.el 内容如下： ;; This is my Emacs customization file feature_1.el providing feature_1 (provide ‘feature_1) ;; 为 init.el 提供 require 'feature_1 ;; customization code … ","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:2:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 中文输入问题参考: Ubuntu18.04中解决emacs无法输入中文的问题 Ubuntu Emacs下无法使用fcitx输入中文的简单workaround ","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:3:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 插件","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:4:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" ESS","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:4:1","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" IPython","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:4:2","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 主题设置","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:5:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" color-theme可以下载一个主题集成包，color-theme，里面自带了多款颜色主题。 cd ~/Downloads ## 下载 color-theme wget http://download.savannah.gnu.org/releases/color-theme/color-theme-6.6.0.tar.gz tar xfv color-theme-6.6.0.tar.gz cd color-theme-6.6.0 ## 复制到 ~/.emacs.d/plugins 目录 cp -r themes color-theme.el ~/.emacs.d/plugins 打开Emacs后可以 M+X color-theme-select 选择你喜欢的主题，使用回车键 Enter 来预览效果，然后将相应的名称写入 ～/.emacs.d/init.el 中。 ;; 需要指定加载的路径 (add-to-list 'load-path \"~/.emacs.d/plugins\") (require 'color-theme) (color-theme-initialize) ;; 这个是你选择的主题，后面的 subtle-hacker 就是它的名字，注意使用 小写 。 (color-theme-subtle-hacker) color-theme ","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:5:1","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" one-dark-theme当然，我比较喜欢 Atom-One-Dark-Theme。这个比较适合在黑色背景下进行写代码。 已经有牛人把这个颜色主题改成了 Emacs 下的配置方案，比如 Introducing Atom One Dark Theme for Emacs。 先把这个配置下载到本地目录 ~/.emacs.d/themes cd ~/.emacs.d/themes git clone https://github.com/jonathanchu/atom-one-dark-theme.git 然后在配置文件 ~/emacs.d/init.el 增加 ;; ----------------------------------------------------------------------------------- (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/atom-one-dark-theme\") (load-theme 'atom-one-dark t) ;; ----------------------------------------------------------------------------------- 重启 Emacs 即可看到效果了。 one-dark-theme ","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:5:2","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" zenburnzenburn 原来是 Vim 下面的一款低对比度颜色配置方案，后来又移植到 Emacs，The Zenburn colour theme ported to Emacs。同样，我们也可以十分方便的安装： cd ~/.emacs.d/themes git clone git@github.com:bbatsov/zenburn-emacs.git 然后在配置文件 ~/emacs.d/init.el 增加 (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/zenburn-emacs\") (load-theme 'zenburn t) zenburn ","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:5:3","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 快捷设置","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:6:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Programming"],"content":" 模式设置 Lisp介绍 使用体会与个人总结","date":"2019-01-17","objectID":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/:7:0","tags":["Emacs","vim","IDE","Lisp","GNU","Stallman","Editor","编辑器"],"title":"Emacs: 神的编辑器","uri":"/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Personal"],"content":"先在这里写一个总结大纲，后面的ppt照着这个大纲来制作。 开场前面两位老板讲的都非常好，从宏观经济到公司运营，场面壮大、视野开广。我呢，作为汉云的小小技术工，就讲不出这种味道来，也上不了那么高的层面。那就讲讲具体的、微小的事情。 Talk is cheap, show me the code. 从事软件开发（似乎被老板带偏了，不要用这么高达上的词汇），俗称「码农」，其实是非常容易检查他的能力，尤其在今天这种大场面的工作汇报，直接把过去一年内写过的代码往台上放，大家来一起「review」就可以了。 「是驴是马，拉出来溜溜」。代码质量其实反映了程序员思考问题、解决问题的技能，既要求能把遇到的问题解决好，又能够注重效率，对关键函数能够做性能提升与优化。 过去一年的时间，我的工作主要是集中在以下两个方面。 Write bugs. And fix code. 呃，让我静静，好像这句话哪里有不对的，似乎暴露了什么（？）。呃。。。 Write code. Then fix bugs. 呃，code 和 bugs 果然天生好基友。 原谅我这一生放浪爱 。。。基友。。。 Githubgithub 对比家乐园，就是那个「汉云深圳·定点食堂」，其实我还是非常不够努力，看人家天天有 commit。对于码农而言，真的没有休息的片刻，因为你永远不知道下一个 bugs 会从那里冒出来。所以，每天的开盘和收盘时间，其实我的内心是非常紧张的。 每月天总有那么兩三天次，心情特别紧张。哈哈 当然，看到这么多辛苦攒下来的星星，全都是「满眼的泪」。我的内心既是满足，又是羞愧。 欣喜的，是过去一年的努力，从零开始，为汉云搭建了一套自动化与程序化的交易系统，目前没有因为系统问题影响重大交易，建立了一套高可用的程序化交易框架，支持 10 亿级别资金规模的交易，全程做到自动化、智能化、无人化、流程化。实现了一个小小的量化目标。 羞愧的是，聚少离多，陪伴家人的时间少之又少，万分惭愧。 咪豆：妈妈，那个有时候周末回来，在我们家睡了两天，然后又离开的「叔叔」是谁呀？ 老婆：孩子，那是你爸！ 周末偶尔回来，一般是凌晨到达厦门，加上平时工作累，所以一回来就到头睡了。我女儿早上六点半起床起点去市队练游泳，周末又要上一天的兴趣班，所以一般都是到第二天我要走了，她才知道我回来了。 汉云交易系统 2.0","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:0:0","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 交易系统在去年年会的，曾经给自己挖了一个坑，我说要在今年年会的时候，把汉云的量化系统升级到 2.0。这不仅仅是版本号的增加，而是一次全方面的改进，包括功能上的增加、性能上的改进、以及 我们准备开发一套股票的程序化交易软件。 当然，这个系统会更加复杂，更加抽象，会有大量的工作需要去完成。目前，我在这里「官宣」一下 汉云交易系统2.0已经实现了模拟账户的接口调用与下单交易功能。 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:1:0","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 交易系统2.0介绍hiquant2.0 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:2:0","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 数据库 期货数据库：已经实现了自动化运行，在远程阿里云和本地服务器，接收市场深度行情数据 股票数据库：获取多份市场 Tick 数据、分钟数据，整理复权因子，基本可满足研究使用 扩展行情数据库：使用 Go 破解通达信二进制数据文件，实现盘后数据更新 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:2:1","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 交易系统 CTP: 自动运行 盘中实时检测 基金风控 盘后净值播报 XTP: 调用券商接口 对接现有顶层函数 针对性开发算法模块 突破： 使用 c 重新改写核心代码，实现性能的显著提升(X3-50) 搭建可拓展的交易架构，实现顶层函数与底层引擎分离 系统小结 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:2:2","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 部门支持 各类账户开户测试 新开多种合作模式的研究与实现 净值核算与风控 2019年计划 技术债。 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:2:3","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 开发","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:0","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 股票程序化交易系统 XTP 中泰证券交易接口 其他券商交易接口开发： 国信证券TradeStatioin 中信建投网页交易（基于爬虫） 中信证券 cats PB 系统 银河证券ARAMA 第三方平台： 掘金myquant 网传监管将全面放开程序化接口 更多券商选择 交易系统落地 完全契合现有框架 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:1","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" Python2 -\u003e Python3 迁移 python2 是当前服务器默认编程语言，技术成熟、运行稳定 2020年停止对python2的技术支持，全面拥抱 python3 目前所有的科学计算类项目已宣布停止在python2的更新 我们现在采用python2技术框架，未来需用技术迁移，保证软件包对接与社区支持 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:2","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" c/c++扩展用于支持高频交易 低频策略 + 高频算法：有利于较少交易滑点，提高成交率 高频交易系统的技术积累 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:3","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 汉云因子回测系统(Backtesting) 搭建基础框架，封装通用函数 提供统一的评价系统，快速识别有效因子 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:4","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 工作支持 尽量形成文档化，有利于对接开发工作 公司层面的技术支持 编写通用的软件包： R packages python module c/c++ shared object ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:3:5","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Personal"],"content":" 研究 一个被代码耽误的研究员。 年会ppt 全屏查看 ","date":"2019-01-16","objectID":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/:4:0","tags":[2018,"年会","总结"],"title":"2018年会总结大纲","uri":"/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/"},{"categories":["Programming"],"content":"使用 zsh+tmux+powerline+autojump 组合，通过合理配置，打造强大的操作终端","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Programming"],"content":"对于经常在远程服务器进行编程的程序员，终端(terminal)无疑是我们接触最多的接口了。通过终端，我们可以直接使用命令来操作服务器系统，诸如修改文件、编辑程序、执行命令、传输文件等。通过配置合理的插件，我们可以打造出一款功能强大、符合个人使用习惯的「终端机」。 这篇文件主要介绍几个强大的插件工具，并通过自定义配置文件，实现以上目标。 zsh:不仅是shell yum install zsh ## 更改默认 shell chsh -s /bin/zsh trader echo $SHELL /usr/bin/zsh tmux:终端组合 yum install tmux powerline:多点信息tmux-powerline ","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/:0:0","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Programming"],"content":" install pip install --user git+git://github.com/powerline/powerline cd ~/Documents git clone https://github.com/erikw/tmux-powerline.git ","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/:1:0","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Programming"],"content":" ~/.tmux.conf ## ============================================================================= ## https://github.com/erikw/tmux-powerline set-option -g status on set-option -g status-interval 2 set-option -g status-justify \"centre\" set-option -g status-left-length 60 set-option -g status-right-length 150 set-option -g status-left \"#(~/Documents/tmux-powerline/powerline.sh left)\" set-option -g status-right \"#(~/Documents/tmux-powerline/powerline.sh right)\" set-window-option -g window-status-current-format \"#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀\" ## ============================================================================= autojump:快速跳转","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/:2:0","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Programming"],"content":" 安装可以使用 apt 直接安装稳定发行版 # 如果提示找不到软件，需要 `update` 一下。 sudo apt update sudo apt install autojump ","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/:3:0","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Programming"],"content":" 配置安装成功后，可以找到说明文档进行配置 vim /usr/share/doc/autojump/README.Debian Autojump for Debian ------------------- To use autojump, you need to configure you shell to source /usr/share/autojump/autojump.sh on startup. If you use Bash, add the following line to your ~/.bashrc (for non-login interactive shells) and your ~/.bash_profile (for login shells): . /usr/share/autojump/autojump.sh If you use Zsh, add the following line to your ~/.zshrc (for all interactive shells): . /usr/share/autojump/autojump.sh -- Tanguy Ortolo \u003ctanguy+debian@ortolo.eu\u003e Tue, 10 Aug 2010 07:55:16 +0200 由于我使用 zsh，因此需要把 . /usr/share/autojump/autojump.sh 放到 ~/.zshrc 文件 echo \". /usr/share/autojump/autojump.sh\" \u003e\u003e ~/.zshrc ## ------------------------------------------------- ## 如果使用 Mac Bash，则在 ~/.bash_profile 添加 echo \"source $(brew --prefix)/etc/profile.d/autojump.sh\" \u003e\u003e ~/.bash_profile ## 如果使用 Mac Zsh， 则在 ~/.zshrc 最后添加一行 echo \"[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] \u0026\u0026 . $(brew --prefix)/etc/profile.d/autojump.sh\" \u003e\u003e ~/.zshrc ## ------------------------------------------------- ## 如果使用 CentOS, 需要 echo \"/usr/share/autojump/autojump.bash\" \u003e\u003e ~/.bashrc ## 如果有提示：/usr/share/autojump/autojump.bash: 权限不够 ## 那么需要给autojump.bash开权限 ## chmod 777 /usr/share/autojump/autojump.bash 这样，我们便可以使用命令 autojump 进行快速的文件目录跳转。当然，也可以使用短命令 j 进行操作，并配合 tab 键快速的筛选。 j bl__ │ bl__1__/home/william/Documents/blog bl__4__/home/william/Documents/blog/content/post bl__2__/home/william/Documents/blog bl__5__/home/william/Documents/blog/content │ bl__3__/home/william/Documents/blog ","date":"2019-01-16","objectID":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/:4:0","tags":["Linux","terminal","zsh","tmux","powerline","autojump"],"title":"配置强大终端: zsh+tmux+powerline+autojump","uri":"/archives/2019-01-16-%E9%85%8D%E7%BD%AE%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF--zsh+tmux+powerline+autojump/"},{"categories":["Personal"],"content":"关于未来的2019年，自己的一些想法与计划，希望未来一切顺利，等到在年尾再回顾现在，这些计划与愿望都能实现。","date":"2019-01-13","objectID":"/archives/2019-01-13-%E6%96%B0%E4%B8%80%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/","tags":[2019,"未来","计划","反省"],"title":"新一年的计划","uri":"/archives/2019-01-13-%E6%96%B0%E4%B8%80%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/"},{"categories":["Personal"],"content":" 迟到的「计划」我知道，现在才开始写新一年的计划，是有点「晚了」。但是，不是还有句英语的歇后语，叫「Later is better than never」。其实，我现在倒是觉得，能够保持在每年的伊始，写下一份自己关于未来的思考与计划，这种习惯应该得到保持。一年之计在于春，一年之计的首要原则是，得把所有的思考记录写下来。这样在日后才能有对比，也方便时刻提醒自己当初许下的承诺，为自己挖下的坑。 这份「年度计划」估计要写几天的时间，刚好留些时间用于思考。开宗明义的，先把计划目标写下来。我希望在2019年，可以实现： 个人技能的提升 c/c++ 开发能力。在过去的两年里，我更多的向着技术开发的方向转型，在这过程中，也是一边加快学习，一边快速用于实战。虽然在过去的一年，完成了一些小项目，实现了部分功能，甚至也开始给其他人开发底层的接口，但也觉察到自己能力受限，尤其在对计算机底层的理解与把握上，还是无法建立一套完整的思考模式。比如，遇到操作系统底层开发，无法迅速定义问题并形成有效的解决方案，而只能依靠自己对该问题的初步理解，借助于 Google 来搜索可能的解决方法。如果是针对大型的开发项目，或者是定制的功能，有可能是压根就找不到直接可用的解决方案，而只能通过自己对操作系统底层的理解，并配合过往的经验，才能处理这类问题。因此，为了提升个人技能，需要加强对操作底层的理解。但是我又不需要偏向学院派，因此，想了一个办法，就是以 c/c++ 编程作为突破口，以此作为契机来学习操作系统对程序的具体执行过程。 统计数据分析能力。我对自己的定义，不仅仅只是一名简单的「程序员」角色，而是应该朝着「量化投资者」的个人职业路径。为了将来能够快速的开发有效的投资策略，需要运用大量的数学、统计学等多项技能，但这只是理论层面的只是，而统计数据分析能力，则更加强调实践，是综合了统计理论与计算机编程的实战之道。联想到高驰在开发高频策略，其实也只是应用了 R 编程语言，倒是他能够把这门语言运用到极致，就能够实现快速开发有效策略的目的。我希望在未来的一年，能够开发一套完整的统计数据分析模式，并相应的开发一套专属的信号回测系统，满足对因子开发的实际需求。 团队管理能力。这个是我目前欠缺的一大块，未来需要多加强，尤其是队伍发展壮大，更加需要自己对整个团队的组织、协调能力，能够从更高层面去把握项目的整体开发。 加强锻炼。不能再死命加班了，这他妈真是一个无底洞。命是自己的，钱是老板的。干的再多再好，终究拿不到股权，终究还是一个「外部人」。 准备去办理一张健身卡，可以在下班后运动一小时。 每周二、四、六早上进行慢跑 5000 米。 每周日进行户外锻炼，骑行或者登山。 中午一定要睡午觉，12:50~13:20 至少半小时的时间，可以放松颈部肌肉。 增加阅读量。算下来，似乎今年真没有阅读几本真正的「书」。我的意思是指那些能够改变自己思考问题的书籍。当然，这一年其实我倒是阅读了大量的专业技术书籍，python 的大部分技术书，尤其是 cython 关于性能扩展方面，确实有读了不少，也加深了对性能扩展的理解。再比如，关于 c++ 的教材，虽然每次看完，还是感觉云里雾里的，但是依然感觉每次有新的收获，毕竟掌握 c++ 不是一时半伙就能够实现的，这个需要时间的积累。 一周至少看一本社会或者哲学类的书籍。目前我的兴趣在于科技生物对未来人类社会的影响，包括人工智能、新兴技术革命等，这方面最近有出版了不少书籍。 如果遇到好书，可以多写写读书笔记，并敢于把读书笔记公开到朋友圈，接受大家的公开审阅。这也算是对这本好书作者的认可与推广。 保持写博客的习惯。虽然比较早就开始的搭建个人博客网站，但是现在去看看积累的文档，真的是少之又少，而且自认为质量一般，不足以吸引阅读者。这可能跟我的主观态度有关，总觉得文字限制了思考，往往能够用文字表达出来的东西，已经不是自己脑子里想的东西。可是，换个角度看，只有用文字把「东西」写下来，才能知道是不是自己想的「东西」，这样再回去修来，一来二往，既是对思考的萃取，也是对文章的提炼。一举两得。 至少每周更新一篇文章。当然，现在还主要以技术博客为主，将来会更多的写一些想法的文章。毕竟，要写一篇完整的技术文档，确实对个人的要求非常高，既要有内容，又要有深度，花费的时间相当多。但是，如果是写一些小文章，记录自己的一些想法，这可以迅速得以文字的形式进行发表，甚至可以做到每天更新。 可以通过 github 把相关的素材先准备好，比如对相似技术的归纳与总结，对某个问题的具体解决方法与经验等。 如果条件允许，比如团队有同事配合，或者公司有宣传需要，可能开通一个微信公众号，以此作为入口，对外展示个人技能，增加曝光度，获得在微信的关注度。将来有考虑往专职写作这方面发展，也算是增加外快的一种好方式。 后续的补充(To be continued…) ","date":"2019-01-13","objectID":"/archives/2019-01-13-%E6%96%B0%E4%B8%80%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/:0:0","tags":[2019,"未来","计划","反省"],"title":"新一年的计划","uri":"/archives/2019-01-13-%E6%96%B0%E4%B8%80%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/"},{"categories":["Programming"],"content":"在 Sublime Text 3 编辑器里实现对 C/C++ 文件的编译与运行。 干中学最近在学习一个 C++ 项目，需要重新把以前的课本拿起来。学习的最好方法，尤其是编程技能的学习，就是对照着教材，边学边练，即 「Learning by doing」。这是我多年以来领悟到的最好经验。 对于 c/C++ 这类编译语言，需要在编写完源文件(source file)后，使用编译器进行编译，生成相应的可执行文件(executable file)。因此，一个既能提供高效文本编辑环境、同时又能提供快速编译功能的「软件」，对于实现项目开发是极为关键的。 Sublime编辑神器基于使用习惯，我一般都是在 Sublime 进行文本的编辑，然后通过使用支持相关语言处理的配套插件，进行程序开发。这么多年来，Sublime 已经发展成了我得心应手的编辑器与开发环境。我之前有介绍过如何配置，今天这篇文章则介绍如何配置 C/C++ 开发环境。 ","date":"2019-01-05","objectID":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/:0:0","tags":["Sublime","C++","编译"],"title":"Sublime 编译 运行 c/c++ 文件","uri":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/"},{"categories":["Programming"],"content":" 新建配置文件在 “Tools -\u003e Build System”，点击 “New Build System”，会自动弹出一个文件，我们在这里写入相应的配置方案： { \"cmd\": [\"g++ -ggdb3 -std=c++11 -Wall ${file} -o ${file_base_name}\"], \"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\", \"working_dir\": \"${file_path}\", \"selector\": \"source.c, source.c++\", \"shell\": true, \"variants\": [ { \"name\": \"Run\", \"cmd\": [\"${file_path}/${file_base_name}\"] }, // , // { // \"name\": \"RunInShell\", // \"cmd\": [\"gnome-terminal -x bash -c '${file_path}/${file_base_name};read' \"] // } { \"name\": \"Build_Project\", \"cmd\": [\"g++ -ggdb3 -std=c++11 -Wall ${file_path}/*.cpp -o ${file_base_name}\"] } ] } 命令后保存到默认的文件夹^[一般在~/.config/sublime-text-3/Packages/User]。在这里： 在 cmd 命令里设置 gcc/g++ 需要指定的参数，如 -ggdb3、-std=c++11、-Wall 等，可以方便的我们需要的配置集合到一个命令里 指定运行 shell 同时，我们还指定其他的可选 variants，即这里使用到的 Run 模式，可以在源文件编译结束后，执行程序，并把结果直接输出到 Sublime 的 console 界面。 当然，如何需要调试带有**输入(cin)**的程序，我们也可以再添加 RunInShell 模式。 同样，我们也可以相应的配置 c11 运行环境 { \"cmd\": [\"gcc -ggdb3 -std=c11 -Wall ${file} -o ${file_base_name}\"], // 如果是工程项目 // \"cmd\": [\"gcc -ggdb3 -std=c11 -Wall ${file_path}/*.c -o ${file_base_name}\"], \"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\", \"working_dir\": \"${file_path}\", \"selector\": \"source.c\", \"shell\": true, \"variants\": [ { \"name\": \"Run\", \"cmd\": [\"${file_path}/${file_base_name}\"] }, // , // { // \"name\": \"RunInShell\", // \"cmd\": [\"gnome-terminal -x bash -c '${file_path}/${file_base_name};read' \"] // }， { \"name\": \"Build_Project\", \"cmd\": [\"gcc -ggdb3 -std=c11 -Wall ${file_path}/*.c -o ${file_base_name}\"] } ] } ","date":"2019-01-05","objectID":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/:1:0","tags":["Sublime","C++","编译"],"title":"Sublime 编译 运行 c/c++ 文件","uri":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/"},{"categories":["Programming"],"content":" 调试我们可以在编辑一个 C/C++ 文件后，直接调用 Ctrl+B 来编译文件，使用 Ctrl+Shift+B 选择指定的运行方式。 build system ","date":"2019-01-05","objectID":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/:2:0","tags":["Sublime","C++","编译"],"title":"Sublime 编译 运行 c/c++ 文件","uri":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/"},{"categories":["Programming"],"content":" 设置快捷键在 Sublime 里，我们可以十分方便的根据个人偏好，设置我们常用的一些快捷键。比如，运行一个已经编译好的 C/C++ 可执行文件，我们就可以使用 F1 实现直接运行该文件。 {\"keys\": [\"f1\"], \"command\": \"build\", \"args\": {\"variant\": \"Run\"}} 其中，参数 Run 就是我们在 Build System 里面设置的 ‘variant’。 终结一下，我现在处理 C/C++ 项目的基本流程： 编辑一个源文件.cpp 使用 Ctrl+B 编译该文件 使用 F1 运行文件，直接把相应的结果显示出来。 ","date":"2019-01-05","objectID":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/:3:0","tags":["Sublime","C++","编译"],"title":"Sublime 编译 运行 c/c++ 文件","uri":"/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/"},{"categories":["Programming"],"content":"在 CentOS7 系统下安装 Qt5，满足 teamviewer 等软件使用。","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%AE%89%E8%A3%85-qt5/","tags":["CentOS7","Qt"],"title":"CentOS7 安装 Qt5","uri":"/archives/2018-12-11-centos7-%E5%AE%89%E8%A3%85-qt5/"},{"categories":["Programming"],"content":" 安装连接器 yum -y install mesa-libGL-devel mesa-libGLU-devel freeglut-devel 下载 Qt 软件包从网站下载得到需要的软件包，我这里选择 Qt5.10.1 https://www.electronproton.com/solved-team-viewer-installation-on-cent-os-7/ ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%AE%89%E8%A3%85-qt5/:1:0","tags":["CentOS7","Qt"],"title":"CentOS7 安装 Qt5","uri":"/archives/2018-12-11-centos7-%E5%AE%89%E8%A3%85-qt5/"},{"categories":["Programming"],"content":"通过命令行修改 CentOS 操作系统的屏幕分辨率大小。","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":"CentOS 可以通过命令行来设置（修改）屏幕分辨率大小。使用的命令是 xrandr [trader@localhost ~]$ xrandr --help usage: xrandr [options] where options are: --display \u003cdisplay\u003e or -d \u003cdisplay\u003e --help -o \u003cnormal,inverted,left,right,0,1,2,3\u003e or --orientation \u003cnormal,inverted,left,right,0,1,2,3\u003e -q or --query -s \u003csize\u003e/\u003cwidth\u003ex\u003cheight\u003e or --size \u003csize\u003e/\u003cwidth\u003ex\u003cheight\u003e -r \u003crate\u003e or --rate \u003crate\u003e or --refresh \u003crate\u003e -v or --version -x (reflect in x) -y (reflect in y) --screen \u003cscreen\u003e --verbose --current --dryrun --nograb --prop or --properties --fb \u003cwidth\u003ex\u003cheight\u003e --fbmm \u003cwidth\u003ex\u003cheight\u003e --dpi \u003cdpi\u003e/\u003coutput\u003e --output \u003coutput\u003e --auto --mode \u003cmode\u003e --preferred --pos \u003cx\u003ex\u003cy\u003e --rate \u003crate\u003e or --refresh \u003crate\u003e --reflect normal,x,y,xy --rotate normal,inverted,left,right --left-of \u003coutput\u003e --right-of \u003coutput\u003e --above \u003coutput\u003e --below \u003coutput\u003e --same-as \u003coutput\u003e --set \u003cproperty\u003e \u003cvalue\u003e --scale \u003cx\u003ex\u003cy\u003e --scale-from \u003cw\u003ex\u003ch\u003e --transform \u003ca\u003e,\u003cb\u003e,\u003cc\u003e,\u003cd\u003e,\u003ce\u003e,\u003cf\u003e,\u003cg\u003e,\u003ch\u003e,\u003ci\u003e --off --crtc \u003ccrtc\u003e --panning \u003cw\u003ex\u003ch\u003e[+\u003cx\u003e+\u003cy\u003e[/\u003ctrack:w\u003ex\u003ch\u003e+\u003cx\u003e+\u003cy\u003e[/\u003cborder:l\u003e/\u003ct\u003e/\u003cr\u003e/\u003cb\u003e]]] --gamma \u003cr\u003e:\u003cg\u003e:\u003cb\u003e --brightness \u003cvalue\u003e --primary --noprimary --newmode \u003cname\u003e \u003cclock MHz\u003e \u003chdisp\u003e \u003chsync-start\u003e \u003chsync-end\u003e \u003chtotal\u003e \u003cvdisp\u003e \u003cvsync-start\u003e \u003cvsync-end\u003e \u003cvtotal\u003e [flags...] Valid flags: +HSync -HSync +VSync -VSync +CSync -CSync CSync Interlace DoubleScan --rmmode \u003cname\u003e --addmode \u003coutput\u003e \u003cname\u003e --delmode \u003coutput\u003e \u003cname\u003e --listproviders --setprovideroutputsource \u003cprov-xid\u003e \u003csource-xid\u003e --setprovideroffloadsink \u003cprov-xid\u003e \u003csink-xid\u003e --listmonitors --listactivemonitors --setmonitor \u003cname\u003e {auto|\u003cw\u003e/\u003cmmw\u003ex\u003ch\u003e/\u003cmmh\u003e+\u003cx\u003e+\u003cy\u003e} {none|\u003coutput\u003e,\u003coutput\u003e,...} --delmonitor \u003cname\u003e ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:0:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" 显示当前桌面的分辨率直接使用命令 xrandr 来查看当前的分辨率大小： VGA-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 476mm x 267mm 1600x900 60.00 1280x1024 75.02 60.02 1152x864 75.00 1024x768 75.03 60.00 800x600 75.00 60.32 640x480 75.00 59.94 1920x1080_60.00 59.96* 其中标记 * 的就是当前的参数设置。我们可以看到当前系统可以支持多个显示设置。 ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:1:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" 选择某个设置使用选项 -s 来指定某个设置 xrandr -s 0 // 1600x900 ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:2:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" 直接设置分辨率也可以在命令行直接指定设置： xrandr -s 1920x1080_60.00 ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:3:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" errors. BadName Xrandr errors. BadName (named color or font does not exist) ```bash 出现这个问题，一般是由于之前已经有一个显示的配置了，导致重命名。 \u003e I had a similar problem, I believe it was because I had already created that setting before (then rebooted). If I skip that stage and go straight to: 可以参考 [SO: Xrandr errors. BadName (named color or font does not exist) [closed] ](https://stackoverflow.com/questions/851704/xrandr-errors-badname-named-color-or-font-does-not-exist) ## 集成脚本`display.sh` ```bash ## 首次需要建立一个 --newmode ## 以后就不需要了，可以注释掉 ## ------------------------ xrandr --newmode \"1920x1080_20.00\" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync xrandr --addmode VGA-1 \"1920x1080_20.00\" xrandr -s 1920x1080 ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:4:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" 开机自动调整分辨率把以上的 display.sh 添加到 ~/.bashrc 配置文件(run configure)。这样，每次开机后，会优先读取 .bashrc 文件，然后启动 display.sh。 echo \"bash ~/Desktop/display.sh\" \u003e\u003e ~/.bashrc ","date":"2018-12-11","objectID":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/:5:0","tags":["CentOS","xrandr","分辨率"],"title":"CentOS7 命令行设置分辨率","uri":"/archives/2018-12-11-centos7-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/"},{"categories":["Programming"],"content":" 终结痛苦通常，我们登录远程服务器使用的是 ssh 安全通道，通过终端交互的形式与服务器进行对话。但是，使用该命令要求每次都输入账号和密码。这对于一个理想主义者来说，实在是不能忍受的痛苦，而且还存在密码被暴露的风险。我更希望是，通过一定的配置，远程服务器能够「认识」我，并且十分友好的让我进入操作界面。 这个问题从另一方面来看，实际上是实现了远程登录的「静音模式」，尤其是对于日常运行的脚本，可以实现自动运行，不需要我们每次都有交互输入，比如在本地和远程服务器之间传输数据与文件的命令，rsync，就可以做到无人值守了。 ssh-key生成多个公钥、私钥使用 ssh-key 生成密匙，「通知」远程服务器「我们是自己人」。需要注意的是，如果不想要输入密码，旧直接敲击两次回车键即可。 ssh-keygen -t rsa -C \"fl@192.168.1.166\" -f ~/.ssh/id_rsa_fl166 Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/william/.ssh/id_rsa_fl166. Your public key has been saved in /home/william/.ssh/id_rsa_fl166.pub. The key fingerprint is: SHA256:Dto6JWe5yQbE+GxPG2JFiuKz5fXaNliKhi/iRxTYIwM fl@192.168.1.166 The key's randomart image is: +---[RSA 2048]----+ |E o | | + + . | | o+oo | |. o.+ . | |...+ ...S | | o oO+B+ | | Bo+@*=. | |.+ =.+O+ | |o.=..+o.. | +----[SHA256]-----+ 默认存放在 ~/.ssh/id_rsa_fl166.pub。这相当于设置了公共访问权限，允许外部访问者可以访问本机。同时，如果把这个权限放在 配置config文件~/.ssh/config文件相当于一个钥匙柜子，里面存放了本地系统运行外部访问的公钥，可以十分方便的用来管理多个账户的公钥。我们可以配置该文件如下： subl ~/.ssh/config ## ========================================== ## williamlfang: github 配置 ## 这个是在默认的 id_rsa 不用动 Host github HostName github.com User git ## IdentityFile ~/.ssh/id_rsa_github IdentityFile ~/.ssh/id_rsa ## ========================================== ## fl@192.168.1.166 配置 Host fl166 HostName 192.168.1.166 User fl IdentityFile ~/.ssh/id_rsa_fl166 将公匙拷贝至远程主机把本地的公钥拷贝到远程服务器。不过，由于我前期已经在服务器有 ~/.ssh/authorized_keys 的文件夹，这时候直接拷贝会报错：sh: .ssh/authorized_keys: Is a directory。参考了SO上面的回答，发现原来这个是一个文件夹，无法进行直接拷贝。需要先把原来的文件夹删除掉，然后再进行复制。 ## 如果有报错， ## 需要把远程服务器上面的　~/.ssh/authorized_keys 删掉 ## rm -rf ~/.ssh/authorized_keys ssh-copy-id fl@192.168.1.166 /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys fl@192.168.1.166's password: sh: .ssh/authorized_keys: Is a directory ssh-copy-id -i ~/.ssh/id_rsa_fl166.pub fl@192.168.1.166 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/william/.ssh/id_rsa_fl166.pub\" /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'fl@192.168.1.166'\" and check to make sure that only the key(s) you wanted were added. 免密码登录 ssh现在，远程服务器已经有本地的公钥，也就是可以「认识」本地机器，这意味着可以直接进行 ssh 免密码登录服务器。 ssh fl@192.168.1.166 Last login: Thu Jan 10 14:38:55 2019 from 192.168.1.115 [fl@localhost-166 ~]$ ## 没有输入密码即可登录 使用 rsync 传输文件现在，我们便可以使用 rsync 在不需要输入密码的情况下，进行本地机器与远程服务器之间同步文件了。 rsync --progress -avz -e ssh /home/william/Documents/QUANTAXIS/myTask/data/daily/* fl@192.168.1.166:/home/fl/myData/data/ChinaStocks/Bar/FromTDX sending incremental file list sh600138.csv 298,115 100% 5.06MB/s 0:00:00 (xfr#1, to-chk=2843/2844) sh600139.csv 266,422 100% 2.57MB/s 0:00:00 (xfr#2, to-chk=2842/2844) sh600141.csv 271,233 100% 1.70MB/s 0:00:00 (xfr#3, to-chk=2841/2844) sh600143.csv 199,249 100% 1.12MB/s 0:00:00 (xfr#4, to-chk=2840/2844) 这里，rsync主要参数有： --progress 显示进度条 -a 以文件形式传送 -v 显示结果 -z 压缩数据 -e 执行命令，也就是后面的 ssh 自动配置脚本编写一个简单的部署脚本: #!/usr/bin/bash ## ----------------- HOST=192.168.1.135 USER=trader ## ----------------- ## ----------------------------------------------------------------------------- ssh-keygen -t rsa -N '' -C \"${USER}@${HOST}\" -f ~/.ssh/id_rsa_${USER}${HOST} echo \"\\n## ==========================================\" \u003e\u003e ~/.ssh/config echo \"## ${USER}${HOST}\" \u003e\u003e ~/.ssh/config echo \"Host ${USER}${HOST}\" \u003e\u003e ~/.ssh/config echo \" HostName ${HOST}\" \u003e\u003e ~/.ssh/config echo \" User ${USER}\" \u003e\u003e ~/.ssh/config echo \" IdentityFile ~/.ssh/id_rsa_${USER}${HOST}\" \u003e\u003e ~/.ssh/config ssh-copy-id ${USER}@${HOST} ## ------------------------------------------------","date":"2018-12-11","objectID":"/archives/2018-12-11-%E4%BD%BF%E7%94%A8-ssh-key-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:0:0","tags":["ssh","key","服务器","rsync"],"title":"使用 ssh key 免密码登录","uri":"/archives/2018-12-11-%E4%BD%BF%E7%94%A8-ssh-key-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["Programming"],"content":"修改默认的 MySQL 数据存储路径为指定路径。","date":"2018-12-11","objectID":"/archives/2018-12-11-%E4%BF%AE%E6%94%B9mysql%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/","tags":["MySQL"],"title":"修改MySQL数据存储目录","uri":"/archives/2018-12-11-%E4%BF%AE%E6%94%B9mysql%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"},{"categories":["Programming"],"content":"MySQL默认的数据存储路径是在 /var 下面。由于该目录可能设置空间不大，后期会影响使用，我准备把数据存储在 /data/DataBase 这个目录下面，用于集中的管理，后期也可以把磁盘空间增加到足够大。 本文参考了这篇文章。 确认当前存储路径 [root@localhost ~]# mysqladmin -u root -p variables | grep datadir Enter password: | datadir | /var/lib/mysql/ 停止 MySQL 服务在 CentOS7 下，统一使用 systemctl 来管理所有的服务进程。同时，需要注意的是，从 MySQL5.5 开始，默认的存储引擎改成了 mariadb。因此，为了停止 MySQL 服务进程，我们可以使用命令： [root@localhost ~]# systemctl stop mariadb.service Warning: mariadb.service changed on disk. Run 'systemctl daemon-reload' to reload units. 把数据移动到指定目录事先在 /data/ 文件夹下面建立 /data/DataBase 用来专门存储 MySQL 所有的数据。我们需要把原来的数据库移动到该目录下： [root@localhost data]# mv /var/lib/mysql /data/DataBase/ 修改配置文件一般是在 /etc/my.cnf 这个文件： vim /etc/my.cnf [mysqld] # # Remove leading # and set to the amount of RAM for the most important data # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%. # innodb_buffer_pool_size = 128M # # Remove leading # to turn on a very important data integrity option: logging # changes to the binary log between backups. # log_bin # # Remove leading # to set options mainly useful for reporting servers. # The server defaults are faster for transactions and fast SELECTs. # Adjust sizes as needed, experiment to find the optimal values. # join_buffer_size = 128M # sort_buffer_size = 2M # read_rnd_buffer_size = 2M ## datadir=/var/lib/mysql datadir=/data/DataBase/mysql ## socket=/var/lib/mysql/mysql.sock socket=/data/DataBase/mysql/mysql.sock # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid [client] socket=/data/DataBase/mysql/mysql.sock 检查是否已经生效 [root@localhost data]# systemctl start mariadb.service [root@localhost data]# mysqladmin -u root -p variables | grep datadir Enter password: | datadir | /data/DataBase/mysql/ ","date":"2018-12-11","objectID":"/archives/2018-12-11-%E4%BF%AE%E6%94%B9mysql%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/:0:0","tags":["MySQL"],"title":"修改MySQL数据存储目录","uri":"/archives/2018-12-11-%E4%BF%AE%E6%94%B9mysql%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"},{"categories":["Programming"],"content":"CentOS 进行 LLVM 逻辑磁盘扩容操作","date":"2018-12-06","objectID":"/archives/2018-12-06-centos7-llvm-%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E7%A3%81%E7%9B%98/","tags":["CentOS","LLVM","磁盘扩容"],"title":"CentOS7 LLVM 扩展逻辑磁盘","uri":"/archives/2018-12-06-centos7-llvm-%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E7%A3%81%E7%9B%98/"},{"categories":["Programming"],"content":"CentOS 已经创建 LLVM 逻辑磁盘^[以后会重新写一篇文章讨论这个]。现在需要对 /data 下面的磁盘进行扩容。 首先，需要获取当前磁盘的物理路径： [root@localhost ~]# df Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 100G 12G 89G 12% / devtmpfs 32G 0 32G 0% /dev tmpfs 32G 0 32G 0% /dev/shm tmpfs 32G 35M 32G 1% /run tmpfs 32G 0 32G 0% /sys/fs/cgroup /dev/sda2 10G 317M 9.7G 4% /boot /dev/sda1 5.0G 12M 5.0G 1% /boot/efi /dev/mapper/centos-var 90G 1.8G 89G 2% /var /dev/mapper/centos-data 5.5T 5.0T 565G 90% /data /dev/mapper/centos-home 1.5T 758G 743G 51% /home tmpfs 6.3G 12K 6.3G 1% /run/user/42 tmpfs 6.3G 0 6.3G 0% /run/user/1002 tmpfs 6.3G 0 6.3G 0% /run/user/0 tmpfs 6.3G 0 6.3G 0% /run/user/1005 查看当前逻辑磁盘的空间大小： [root@localhost ~]# lvdisplay --- Logical volume --- LV Path /dev/centos/swap LV Name swap VG Name centos LV UUID ZnzTJq-S1Wx-1ekF-6Fed-R7Je-3USD-P1vO07 LV Write Access read/write LV Creation host, time localhost, 2017-01-23 11:22:16 +0800 LV Status available # open 2 LV Size 128.00 GiB Current LE 32768 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 --- Logical volume --- LV Path /dev/centos/var LV Name var VG Name centos LV UUID FnQrvF-vWs6-Szls-yQ0q-4yt3-MJ2r-ZB1Of9 LV Write Access read/write LV Creation host, time localhost, 2017-01-23 11:22:20 +0800 LV Status available # open 1 LV Size 90.00 GiB Current LE 23040 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:2 --- Logical volume --- LV Path /dev/centos/home LV Name home VG Name centos LV UUID joPrpf-idEH-C8ow-A0ep-5cfS-sYsX-7qldlE LV Write Access read/write LV Creation host, time localhost, 2017-01-23 11:22:41 +0800 LV Status available # open 1 LV Size 1.46 TiB Current LE 384000 Segments 4 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:3 --- Logical volume --- LV Path /dev/centos/root LV Name root VG Name centos LV UUID N9gO4N-tBbz-TJUW-sSeJ-NKER-ix2d-O3r3Rt LV Write Access read/write LV Creation host, time localhost, 2017-01-23 11:23:08 +0800 LV Status available # open 1 LV Size 100.00 GiB Current LE 25600 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/centos/data LV Name data VG Name centos LV UUID 5TEGzT-w8qs-h66v-r1ob-5Ld1-wbrq-ONWmja LV Write Access read/write LV Creation host, time localhost, 2017-01-23 11:23:45 +0800 LV Status available # open 1 LV Size \u003c5.47 TiB Current LE 1433600 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:4 查看系统可用空间大小： [root@localhost ~]# vgdisplay --- Volume group --- VG Name centos System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 18 VG Access read/write VG Status resizable MAX LV 0 Cur LV 5 Open LV 5 Max PV 0 Cur PV 2 Act PV 2 VG Size 7.26 TiB PE Size 4.00 MiB Total PE 1903358 Alloc PE / Size 1899008 / 7.24 TiB Free PE / Size 4350 / 16.99 GiB VG UUID e7VekS-Jrrx-CMvZ-dqoC-jI6z-2Gs9-gIkstg以三 以上这个信息是已经分配过的磁盘空间，当前仅剩余 4350 / 16.99 GiB。 开始进行磁盘扩展，增加 500G 到 /dev/mapper/centos-data（也就是 /data）： [root@localhost ~]# lvextend -L +500G /dev/mapper/centos-data Size of logical volume centos/data changed from 4.98 TiB (1305600 extents) to \u003c5.47 TiB (1433600 extents). Logical volume centos/data successfully resized. 最后，需要调整文件系统大小： [root@localhost ~]# xfs_growfs /dev/mapper/centos-data ## CentOS6 使用命令 resize2fs meta-data=/dev/mapper/centos-data isize=256 agcount=7, agsize=196608000 blks = sectsz=512 attr=2, projid32bit=1 = crc=0 finobt=0 spinodes=0 data = bsize=4096 blocks=1336934400, imaxpct=5 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=0 log =internal bsize=4096 blocks=384000, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 data blocks changed from 1336934400 to 1468006400 重新查看磁盘空间，已经显示增加了 500G，当前 /data/ 大小为 5.5TB: [root@localhost ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 100G 12G 89G 12% / devtmpfs 32G 0 32G 0% /dev tm","date":"2018-12-06","objectID":"/archives/2018-12-06-centos7-llvm-%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E7%A3%81%E7%9B%98/:0:0","tags":["CentOS","LLVM","磁盘扩容"],"title":"CentOS7 LLVM 扩展逻辑磁盘","uri":"/archives/2018-12-06-centos7-llvm-%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E7%A3%81%E7%9B%98/"},{"categories":["Programming"],"content":"我将根据开发经验，从安装操作系统开始，到如何配置相关文件，设定操作环境，到最后，我们将搭建一套强大的操作系统，用于开发并运行程序化交易系统。该过程将全部使用脚本进行操作，从而保证在任何一台服务器上，都达到完全一样的配置环境。","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":"在服务器操作系统领域，Linux 绝对是独领风骚的佼佼者，拥有开放兼容的社区神态、功能强大的开发环境以及持续高效的运行性能。而作为 Linux 的重要分支，CentOS 则凭借稳定的性能，占领了大部分的大型企业级别服务器操作市场。因此，目前几乎所有的企业均在服务器上部署了 CentOS 操作系统。我们公司目前所有的服务器均安装 CentOS7，这是目前最新的版本，有足够强大的社区技术支持，同时也适合采用更加强大的新技术。 接下来，我将根据开发经验，从安装操作系统开始，到如何配置相关文件，设定操作环境，到最后，我们将搭建一套强大的操作系统，用于开发并运行程序化交易系统。该过程将全部使用脚本进行操作，从而保证在任何一台服务器上，都达到完全一样的配置环境。 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:0:0","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 安装","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:1:0","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 配置最近公司以我个人的名义采购了一台阿里云服务器，具体的云服务器配置如下： 单核CPU 2Gb Memory 40Gb SSD 存储空间 1Mb 专用下载网络 这个配置其实算比较低档次的，不过用于平时接收CTP行情数据倒是也可以够用。毕竟，价格优惠明显摆在那儿：三年使用期限，总共花费 279元。算是业内的良心价格了。 下面就要开始配置服务器了。对于 CentOS7 系统，这个配置过程基本类似，所以我就把以前写的一篇博客拿过来使用了。 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:0","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 设置远程服务器 root 密码 选择管理控制台，点击 ECS 选择 实例，然后找到 更多，点击 重置密码 修改完成密码后，记得需要点击选择 重启 才能够生效。我是在这一步忘记重启，结果掉坑里了。还好后来找到出口爬了出来。 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:1","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 增加用户/组 # 增加用户 trader adduser trader # 设置密码 passwd trader ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:2","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 设置固定(静态)IP [root@localhost ~]# cd /etc/sysconfig/network-scripts/ [root@localhost network-scripts]# pwd /etc/sysconfig/network-scripts [root@localhost network-scripts]# ls -l ifcfg* -rw-------. 1 root root 363 Dec 10 21:22 ifcfg-em1 -rw-------. 1 root root 449 Dec 10 21:21 ifcfg-em1.bak -rw-r--r--. 1 root root 276 Dec 10 21:22 ifcfg-em2 -rw-r--r--. 1 root root 275 Dec 10 20:29 ifcfg-em3 -rw-r--r--. 1 root root 275 Dec 10 20:29 ifcfg-em4 -rw-r--r--. 1 root root 254 Aug 24 06:23 ifcfg-lo [root@localhost network-scripts]# vim ifcfg-em1 BOOTPROTO=static //原是dhcp，改为static ONBOOT=yes //开机自启动 IPV6_PRIVACY=no IPADDR=192.168.1.199 //设置固定IP PREFIX=24 NETMASK=255.255.255.0 GATEWAY=192.168.1.1 DNS1=202.96.134.133 DNS2=202.96.128.68 PEERDNS=no DNS3=202.96.134.33 ZONE=public NM_CONTROLLED=no // 新增 DNS88=8.8.8.8 // 新增 DNS99=8.8.4.4 // 新增 ## 重启网络 systemctl restart network ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:3","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 增加 swap 空间 参考文章:在阿里云CentOS 7创建swap分区 # 查看内存使用情况 free -h # 增加 swap 空间 # 一般为系统配置内存的同等大小 # 1. 创建分区 dd if=/dev/zero of=/home/swap bs=1024 count=1048576 # 2. 格式化 swap 分区 mkswap /home/swap # 3. 启动 swapon /home/swap # 4.swap分区自动挂载 vim /etc/fstab # 在文件末尾加上 /home/swap swap swap default 0 0 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:4","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 时间校准简单几步让CentOS系统时间同步 yum install -y ntpdate cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ntpdate us.pool.ntp.org crontab -e 0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:5","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 增加常用 yum 源 ## 配置下centos的DNS ## 一个国内,一个国外 vim /etc/resolv.conf nameserver 114.114.114.114 nameserver 8.8.8.8 # 备份 cd /etc/yum.repos.d/ mkdir repo_bk mv *.repo repo_bk/ # 添加阿里源 wget http://mirrors.aliyun.com/repo/Centos-7.repo ## 网易yum源: wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo yum clean all yum makecache ## 阿里云yum源: wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo yum clean all yum makecache ## epel源 yum -y install epel-release yum clean all yum makecache ls # 清除系统所有的yum缓存 yum clean all # 生成yum缓存 yum makecache # 安装 EPEL yum install -y epel-release # 下载阿里开源镜像的epel源文件 wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo ls # 再次清除系统yum缓存，并重新生成新的yum缓存 yum clean all \u0026\u0026 yum makecache ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:6","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 安装常用软件包 yum install -y cmake bzip2 htop yum -y install gcc gcc-c++ kernel-devel git cmake ## ----------------------------------------------- ## sudo apt-get install libboost-all-dev ## apt search boost ## sudo apt install libboost-all-dev ## ----------------------------------------------- yum -y install python-devel libxslt-devel libffi-devel openssl-devel yum -y install python-pip # 完成 CMAKE 配置 yum install gcc-c++ # 安装 mysql yum install mysql yum install mariadb-server mariadb yum install mysql-devel ## 启动 mariadb.service 引擎 systemctl start|stop|restart mariadb.service ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:2:7","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 运维","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:3:0","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" MySQL/MariaDB 数据库管理 安装 MariaDB 引擎 # 安装 mysql yum install mysql yum install mariadb-server mariadb yum install mysql-devel ## 启动 mariadb.service 引擎 systemctl start|stop|restart mariadb.service 增加远程访问端口 3306 ## 增加远程访问 MySQL 3306 端口 # 1.FirewallD防火墙开放3306端口 firewall-cmd --zone=public --add-port=3306/tcp --permanent # 2.重启防火墙 systemctl restart firewalld.service centos7 使用的是FirewallD防火墙。FirewallD 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。 --zone：作用域 --add-port=3306/tcp：添加端口，格式为：端口/通讯协议 --permanent：永久生效，没有此参数重启后失效 设置允许访问的最大连接数连接 MySQL 数据库后，会自动分配一个连接点，并在关闭该连接后进行注销。但是，如果由于用户忘记关闭，或者程序错误导致没有把之前分配的连接点注销，长期以往，则可能超过当前允许的最大连接数量，导致新开连接失败。这时候数据库会报错： \"SQL Error 1040: Too Many Connection\" 解决的思路当然是尽量调高系统运行的最大连接数。有两种方法可以完成。 临时增加最大连接数 Ref: https://stackoverflow.com/questions/14331032/mysql-error-1040-too-many-connection/34176072 这种方法只是临时改变 最大连接数, 真正重启 MySQL 后还是恢复成默认的连接数。 show variables like \"max_connections\"; set global max_connections = 2000; 永久增加最大连接数 Ref: https://www.cnblogs.com/kevingrace/p/6226324.html 这种方法通过修改操作系统的参数，达到永久改变最大连接数的目的。 ## 1. 这是由于mariadb有默认打开文件数限制。----------------------------------------- ## 可以通过配置/usr/lib/systemd/system/mariadb.service来调大打开文件数目。 vim /usr/lib/systemd/system/mariadb.service [Service] ## mysql LimitNOFILE=10000 LimitNPROC=10000 ##重新加载系统服务，并重启mariadb服务 systemctl --system daemon-reload systemctl restart mariadb.service ## 2. 配置/etc/my.cnf ---------------------------------------------------------- ## 修改 my.cnf 配置文件 vim /etc/my.cnf [mysqld] max_connections = 10000 ## 重启后生效 systemctl restart mariadb.service 再次查看一下，确认已经修改成较大的连接数了。 show variables like \"max_connections\"; show variables like '%open_files_limit%'; 修改 root 账户密码 ## 更改 root 密码 mysqladmin -u root password MyNewPassword mysql -u root UPDATE mysql.user SET Password=PASSWORD('MyNewPassHere') WHERE User='root'; FLUSH PRIVILEGES; quit; mysql -u root -pMyNewPassHere 数据库用户管理 ## 增加用户 create user 'trader'@'localhost' identified by '************'; ## 分配数据库权限 grant all/select/write on dbName.tbName to 'userID'@'%' identified by 'userPassword'; ## 收回用户权限 设置密码安全 Ref: myTask http://blog.csdn.net/kuluzs/article/details/51924374 在 MySQL 5.5 以后，强化了对账户密码安全性的检查。对于一般的弱密码，可能无法通过检验。不过，我们可以进行相关的配置。 set global validate_password_policy=0; set global validate_password_mixed_case_count=0; set global validate_password_number_count=3; set global validate_password_special_char_count=0; set global validate_password_length=3; 彻底解决mysql中文乱码 ## Ref: https://blog.csdn.net/u012410733/article/details/61619656 vim /etc/my.cnf ## 增加以下字段 [mysqld] character-set-server=utf8 [client] default-character-set=utf8 [mysql] default-character-set=utf8 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:3:1","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["Programming"],"content":" 安装 Boost 1.55Boost.Python 提供了通过 Python 调用 C/C++ 的方法，通过封装 C/C++ 给 Python 函数调用。 cd temp ## 下载文件 wget -O boost_1_55_0.tar.bz2 http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.55.0%2F\u0026ts=1385953406\u0026use_mirror=softlayer-ams ## 检查完整性 file boost_1_55_0.tar.bz2 ## 解压 tar jxvf boost_1_55_0.tar.bz2 ls ## 开始编译、并安装软件包 cd boost_1_55_0 ./bootstrap.sh ./b2 \u0026\u0026 ./b2 install 有一个很奇怪的错误，在执行 ./b2 的时候，会报错 libs/iostreams/src/bzip2.cpp:20:56: fatal error: bzlib.h: No such file or directory 这是因为没有安装 bzip2。可以使用命令来查找 [root@localhost boost_1_55_0]# yum search bzip2 Loaded plugins: fastestmirror, langpacks Repository base is listed more than once in the configuration Repository updates is listed more than once in the configuration Repository extras is listed more than once in the configuration Repository centosplus is listed more than once in the configuration Repository contrib is listed more than once in the configuration Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * epel: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com ========================================================================== N/S matched: bzip2 =========================================================================== bzip2-devel.i686 : Libraries and header files for apps which will use bzip2 bzip2-devel.x86_64 : Libraries and header files for apps which will use bzip2 bzip2-libs.i686 : Libraries for applications using bzip2 bzip2-libs.x86_64 : Libraries for applications using bzip2 lbzip2.x86_64 : Fast, multi-threaded bzip2 utility lbzip2-utils.x86_64 : Utilities for working with bzip2 compressed files mingw32-bzip2.noarch : 32 Bit version of bzip2 for Windows mingw32-bzip2-static.noarch : Static library for mingw32-bzip2 development mingw64-bzip2.noarch : 64 Bit version of bzip2 for Windows mingw64-bzip2-static.noarch : Static library for mingw64-bzip2 development pbzip2.x86_64 : Parallel implementation of bzip2 perl-Compress-Raw-Bzip2.x86_64 : Low-level interface to bzip2 compression library bzip2.x86_64 : A file compression utility python2-bz2file.noarch : Read and write bzip2-compressed files Name and summary matches only, use \"search all\" for everything. yum -y install bzip2-devel.x86_64 然后重新运行 ./b2 \u0026\u0026 ./b2 install 即可安装 boost。 ","date":"2018-10-25","objectID":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/:3:2","tags":["CentOS7","系统","脚本"],"title":"CentOS7 系统配置","uri":"/archives/2018-10-25-centos7-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"categories":["personal"],"content":" 变人心是从什么时候开始变坏的？我不知道，这也许是一个缓慢蜕变的过程，等有一天幡然醒悟，才发现原来人心已经是坏的了。只是这期间的过程，我们一直没有察觉。 当然，所有的变坏，都是从决定不再「做好」的那一刻开始。这像是一个癌变的过程，原本好好的一块组织，却有一些细胞决定不再做好的细胞，于是这个组织便开始了变坏。当然，等到我们发觉这已经是一个癌变的组织时，一切都已经为时晚矣。 人心，是最复杂的生物组织。 化还有一种解释是，当发现周边全是变化的癌细胞时，好的细胞往往为了自保，为了合群，于是决定采用坏的细胞的所有行为。乌合之众在细胞层面表现的淋漓尽致。又或是，这一切都是淋漓尽致的细胞层面演变的逐层传递，进而达到了肉眼可观、肉体感知的宏观层面。 为了解释我接下来的所有行为，我决定采用以上的一套「假说」。在科研上，「假说」可以被证实，也可能被证伪。若干年后，我希望这套理论被证伪了。 导致我所有行为的那个癌变细胞，是从什么时候开始骚动呢？ ","date":"2018-10-02","objectID":"/archives/2018-10-02-%E4%BA%BA%E7%94%9F%E5%A6%82%E8%8B%A5%E5%88%9D%E7%9B%B8%E8%A7%81/:0:0","tags":[],"title":"人生如若初相见","uri":"/archives/2018-10-02-%E4%BA%BA%E7%94%9F%E5%A6%82%E8%8B%A5%E5%88%9D%E7%9B%B8%E8%A7%81/"},{"categories":["Programming"],"content":"设置 `Github` 使用 `SSH` 免密码登录并进行版本控制。","date":"2018-09-05","objectID":"/archives/2018-09-05-github%E4%BD%BF%E7%94%A8ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/","tags":["Github","SSH","版本控制"],"title":"Github使用SSH免密码登录","uri":"/archives/2018-09-05-github%E4%BD%BF%E7%94%A8ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["Programming"],"content":"在使用 Github 进行提交修改时，默认是每次都需要输入账户与密码才能完成提交。这对于需要频繁修改的项目而言，无疑存在极大的重复性操作。因此，我想通过使用 SSH 免密码的方式，事先设置好相关的配置，一旦需要有新的 commit 就可以跳过账户与密码验证的步骤，进而极大简化工作流程。 以下是基本的操作流程。 配置 ssh-key经常使用 github,会发现每次在命令行输入账户和密码是一件多么惹人烦的事情.不过现在有一个更好的方法,是使用 ssh-key 来配对进行身份的验证. 具体的带入如下 cd ~ ssh-keygen -t rsa -C \"william.lian.fang@gmail.com\" 复制 ./ssh/id_rsa.pub 到 github/account/ssh # 添加全局设置 git config --global user.email “william.lian.fang@gmail.com” git config --global user.name “williamlfang” # 进行一次验证操作 ssh -T git@github.com 记得输入 Yes 进行确认即可. 解决 git pull/push 每次都需要输入密码问题如果我们git clone的下载代码的时候是连接的https://而不是git@git (ssh)的形式，当我们操作git pull/push到远程的时候，总是提示我们输入账号和密码才能操作成功，频繁的输入账号和密码会很麻烦。 解决办法： git bash进入你的项目目录，输入： git config --global credential.helper store 然后你会在你本地生成一个文本，上边记录你的账号和密码。当然这些你可以不用关心。 然后你使用上述的命令配置好之后，再操作一次git pull，然后它会提示你输入账号密码，这一次之后就不需要再次输入密码了。 解决提交到GitHub首页不显示的问题有时候会出现通过 ssh 提交了 commit 但是无法在首页显示出来，这个原因是因为我在不同的电脑分别复制类两个相同的项目，因此系统无法识别是哪个账户提交的修改。这个需要修改本地的邮箱地址即可。可以参考链接。具体的解决方法如下： //如果想对所有的仓库生效，避免在别的仓库继续出现这个情况，则输入： $ git config --global user.email \"william.lian.fang@gmail.com\" // 同样可以查看确认一下： $ git config --global user.email 修改完成后，再次提交 commit，就可以在 github 首页看到活动变成绿色了。开心。 ","date":"2018-09-05","objectID":"/archives/2018-09-05-github%E4%BD%BF%E7%94%A8ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:0:0","tags":["Github","SSH","版本控制"],"title":"Github使用SSH免密码登录","uri":"/archives/2018-09-05-github%E4%BD%BF%E7%94%A8ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["Personal"],"content":"最近家里遭遇一些事情，感觉有点疲惫与压力。请求**天父**怜悯我这个卑微的世人，不再遭受苦难与煎熬。","date":"2018-08-30","objectID":"/archives/2018-08-30-%E7%A5%88%E6%B1%82%E5%A4%A9%E7%88%B6%E6%80%9C%E6%82%AF%E4%B8%96%E4%BA%BA/","tags":["家人","爱","宝宝","我"],"title":"祈求天父怜悯世人","uri":"/archives/2018-08-30-%E7%A5%88%E6%B1%82%E5%A4%A9%E7%88%B6%E6%80%9C%E6%82%AF%E4%B8%96%E4%BA%BA/"},{"categories":["Personal"],"content":"最近家里遭遇的一些事情，突然让我倍感压力与疲倦。本以为自己有多坚强，可是每每看到亲爱的宝宝承受病痛的折磨，内心却难免止不住脆弱。 ","date":"2018-08-30","objectID":"/archives/2018-08-30-%E7%A5%88%E6%B1%82%E5%A4%A9%E7%88%B6%E6%80%9C%E6%82%AF%E4%B8%96%E4%BA%BA/:0:0","tags":["家人","爱","宝宝","我"],"title":"祈求天父怜悯世人","uri":"/archives/2018-08-30-%E7%A5%88%E6%B1%82%E5%A4%A9%E7%88%B6%E6%80%9C%E6%82%AF%E4%B8%96%E4%BA%BA/"},{"categories":["Personal"],"content":"最近状态不是特别好，有点小低落。","date":"2018-08-09","objectID":"/archives/2018-08-09-%E6%9C%80%E8%BF%91%E6%9C%89%E7%82%B9down/","tags":[],"title":"最近有点down","uri":"/archives/2018-08-09-%E6%9C%80%E8%BF%91%E6%9C%89%E7%82%B9down/"},{"categories":["Personal"],"content":"最近工作有点紧张，一方面需要维护原来旧的交易系统，因为合作的期货公司接口不稳定的问题，导致之前运行的程序偶尔会无法及时更新交易推送，影响后续的开平仓；另一方面，我最近在负责带领团队开发一套全新的多账户交易系统，这个比之前的单账户多策略系统来的复杂很多，有许多需要特别处理的细节，还有要在更高的层次上去考虑不同账户之间的关联。 现在每天都是6点就很紧张的睡不着，7点30分准时从住的地方出发，历经将近一个小时塞心的塞车，然后简单的吃个早饭，就开始进入工作状态：敲代码。 基本上是保持一个姿势，一直对着 one dark theme 的 sublime text 3 屏幕，进行编程、测试、改代码、测试、改代码、测试……无尽的循环中。有时甚至忙到忘记了早上有没有喝水，偶尔林老板会体贴的进来倒杯水，聊聊天。更多的时候，是一个人在房间里不停的找思路、设计程序、敲击键盘，然后调试系统的运行。就这样，时间在手下这架时光机的机械键盘间悄然流逝，不知不觉，又是一天忙到晚。一般晚上有事情的话，都是要到10点才能起身回去，然后又是在路上颠簸一路。极其疲倦的回到宿舍，已然生无可恋、死又无力。 如果这就是常态，那至少能做点有意思的事情，编程本身是一件有趣的事情。可是人生无常、世事难料、猪队友永远有，同时永远不要低估合作伙伴给你下的套。比如，这两天有一个账户因为某小型期货公司内部技术的问题，导致我们使用的接口一直无法顺利的接收推送成交数据，从而严重影响到本地交易系统的订单处理机制。悲剧的是，几乎每天的开盘时间，都成了我的噩梦的开始：总是在担心是不是又有哪里要出问题，是不是那个函数又无法正常的处理订单，一会是不是手机又会突然发邮件报错了……人对未知的恐惧，是何其甚。 压力大的时候，又无处诉说，只好自己听点音乐，写写字，原本低落的心情，也渐渐在键盘的敲打与遣字用词的思索间逐渐恢复。这或许是给自己一个诉说的空间与时间，人慢慢变老，有些事情不愿意与人诉说，只好在每次受伤的时候，像个败北的野兽悄然躲在角落，独自舔伤口，倔强的不愿落泪。 To william: keep calm and carry on. ","date":"2018-08-09","objectID":"/archives/2018-08-09-%E6%9C%80%E8%BF%91%E6%9C%89%E7%82%B9down/:0:0","tags":[],"title":"最近有点down","uri":"/archives/2018-08-09-%E6%9C%80%E8%BF%91%E6%9C%89%E7%82%B9down/"},{"categories":["Programming"],"content":"在博客文章的内容部分，针对带有数学公式的，进项公式编号的渲染效果，更好的做到文章的专业性。","date":"2018-08-04","objectID":"/archives/2018-08-04-%E5%A2%9E%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7/","tags":[],"title":"增加显示数学公式编号","uri":"/archives/2018-08-04-%E5%A2%9E%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7/"},{"categories":["Programming"],"content":" knitr::opts_chunk$set(comment = '', fig.align = 'center', eval = FALSE) 这两天在重新搭建博客网站，一切重新归零后，再次放空自己，也许会做得更好。 刚好翻阅到以前写的博客，原来发现自己竟然也会写一些跟数学或者金融搭边的内容。这兴许是之前一直想走学术的道路，所以得到事情都是比较偏学究型的。现在再回过头来看这些内容，虽然记忆有些模糊，不过还是能大体知道这些公式讲了什么内容，背后的金融逻辑是什么。看来以前受过的那些苦，至少没有白冤枉。 现在的问题是，我想把以前在博客中写到的数学公式，用 AMS 那套规则进行重新编排，也就是在引用数学公式的时候，能够自动链接到相关的式子。这个功能其实在 $\\LaTex$ 里面是非常常见的。与之相对应的，我们可以使用 MathJax 来进行相关的处理。具体的代码如下所示。 \u003cscript type=\"text/javascript\"\u003e window.MathJax = { {{ if or .Params.mathjaxEnableSingleDollar (and .Site.Params.mathjaxEnableSingleDollar (ne .Params.mathjaxEnableSingleDollar false)) -}} tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}, {{ end -}} {{ if or .Params.mathjaxEnableAutoNumber (and .Site.Params.mathjaxEnableAutoNumber (ne .Params.mathjaxEnableAutoNumber false)) -}} TeX: {equationNumbers: {autoNumber: \"AMS\"}}, {{ end -}} showProcessingMessages: false, messageStyle: 'none' }; \u003c/script\u003e \u003cscript async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'\u003e\u003c/script\u003e 其中，我在 config.toml 增加了参数设置，这样可以在博客里面指定是不是要用到 MathJax，毕竟启用这个功能还是需要进行额外的插件加载，难免会影响网页的载入速度。 通过以上的设置，文章内容便会自动进行数学公式编号的自动处理。如以下这个公式： $$ \\begin{align} d \\ln S_t = d Y_t \u0026= \\frac{ \\partial Y }{ \\partial t} dt + \\frac{ \\partial Y }{ \\partial S} dS_t + \\frac{1}{2} \\frac{ \\partial^2 Y }{ \\partial S^2} dS_t dS_t \\nonumber\\ \u0026= 0 · dt + \\frac{ 1 }{ S_t } dS_t - \\frac{1}{2} · \\frac{ 1 }{ S_t^2 } dS_t dS_t \\nonumber\\ \u0026= \\frac{ 1 }{ S_t } · S_t · (\\mu dt + \\sigma dW_t) - \\frac{1}{2} · \\frac{ 1 }{ S_t^2 } · \\sigma^2 S_t^2 dt \\nonumber\\ \u0026= (\\mu - \\frac{1}{2} \\sigma^2) dt + \\sigma dW_t. \\ \\end{align} $$ 😆，可以愉快的更新博客了。当然，现在估计已经没有能力写大段的数学推演过程了。😭 ","date":"2018-08-04","objectID":"/archives/2018-08-04-%E5%A2%9E%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7/:0:0","tags":[],"title":"增加显示数学公式编号","uri":"/archives/2018-08-04-%E5%A2%9E%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7/"},{"categories":["Personal"],"content":"原来的网站因为代码错误，导致无法更新博客。现在重新进行设计，以后要保持定期更新的良好习惯。","date":"2018-08-02","objectID":"/archives/2018-08-02-%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","tags":["博客","代码"],"title":"重新设计博客网站","uri":"/archives/2018-08-02-%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"},{"categories":["Personal"],"content":" knitr::opts_chunk$set(comment = '', fig.align = 'center', eval = FALSE) 网站代码因为一个 git 的错误，导致我对整个博客网站的版本控制有点不耐烦。原来的设计框架是把博客网站的主页与内容更新放在一个 repo，并在这基础上建立两个分支。每次更新博客都是要 checkout 不同的分支，这当然有明显的好处，只需要维护一个 repo 就可以了，但其弊端也很明显：在不同的电脑进行操作与更新，要十分注意当前修改处于哪个分支环境里。如果一部消息，就像我上一次犯的错误，很容易导致整个项目的代码出现混乱的后果。 痛定思痛，决定对整个网站进行重新设计，根据流程最优化「懒癌晚期」的原则来建立网站。这个过程有一定的曲折，等以后我有时间再单独写篇文章，介绍具体的过程。现在开发交易系统比较忙，暂时还无法抽出完整的一段时间来详细描述整个重建的过程。 写这篇博客的目的，一来庆祝一下重新恢复网站的更新功能，并且现在的流程更加合理；另一方面，也算是督促自己，不知不觉，也已经有大半年都没有更新博客。实在是惭愧，当初辛辛苦苦的搭建起个人的独立博客，还信誓旦旦的对自己许诺，要保持每周更新的节奏。如今想想，真是打脸打成胖子。 ","date":"2018-08-02","objectID":"/archives/2018-08-02-%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:0","tags":["博客","代码"],"title":"重新设计博客网站","uri":"/archives/2018-08-02-%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"},{"categories":["Personal"],"content":"有些人不是哑巴，只是不想说话。","date":"2018-07-01","objectID":"/archives/2018-07-01-%E6%97%A0%E4%BB%A5%E8%A8%80%E8%AF%B4/","tags":null,"title":"无以言说","uri":"/archives/2018-07-01-%E6%97%A0%E4%BB%A5%E8%A8%80%E8%AF%B4/"},{"categories":["Personal"],"content":"从上一篇博客算起，应该是有一段时间没有写字了，不是没有话要说，只是不想说。有时候只是想把一些事情藏在内心深处，躲在终年不见日光的角落，慢慢消散。 可是又怕日后回想这段时光，总不能凭空消失了，所以用这种无语的方式来标记一下。算是故作深沉吧。 以下是这篇博客的更新部分。 最近连续三个星期不间断的保持上班与加班的忙碌状态，每天从早上7点开始出发在路上，只能晚上10点才能回来，心里全是憋了不少话，可是每每想要找个人倾诉，或者跟老婆通话，却都说不出来。我本来就不是那种爱说话的人，总是把自己的想法隐藏在内心，现在看看，有点可笑。想要说话了，不是哑巴，却终究成了哑巴。 一方面，毕竟长时间的连续高强度工作，导致身体和心理都或多或少有点疲惫，即使有很多话要诉说，也只是因为身体的疲倦，懒得再发声了；另一方面，也是因为人到中年，现阶段会感到一些迷茫，不知道接下来该往哪个方向前进。 （本来想说说现在的工作，但是又担心说多了不好，就作罢算了，保留词条记录以作日后回想。） 特别是年龄到了现在这个阶段，感觉自己还是很幼稚，从思想到经济，都不够成熟。以前可能还会有些想法，现在也都不敢开动，只能让他们静默的躺倒在小角落里。家里现在上有老下有小，有两个宝宝需要照顾，老婆身体又不是很好，所以会时刻感到压力。前几年在职业生涯规划上面走了一些弯路，原先以为自己会一辈子与书为伴，终身只做读书人，一辈子的规划都耗在了这里。现在想想，真是幼稚，悔恨当初不给自己留条后路。后来毕业后开始步入职场，才发现自己是如此不堪一击，在工作上也毫无建树，荒度了光年，另外在经济上也无法给家人提供足够的保障。每每想到此事，难免掩面痛哭。 现在虽然有了一定的起色，但依然无法做到世俗所谓的「财务自由」。我本不是那种看重金钱与权的人，可是想想，这些才是能够为亲爱的家人提供衣食住行、保障生活品质的基石。如果没有这些经济条件做后盾，何谈爱老婆、何谈爱女儿。因此，内心总有一种紧迫感，一种压抑，一种悲愤的情绪。 也不知道要说些啥，只是偶尔打开笔记本，写写让自己舒服的话，我告诉自己，你很好。 谢谢你，内心深处不离弃的少年。 ","date":"2018-07-01","objectID":"/archives/2018-07-01-%E6%97%A0%E4%BB%A5%E8%A8%80%E8%AF%B4/:0:0","tags":null,"title":"无以言说","uri":"/archives/2018-07-01-%E6%97%A0%E4%BB%A5%E8%A8%80%E8%AF%B4/"},{"categories":["Programming"],"content":"CentOS 服务器调用系统的显示屏，实现使用 crontab 显示 vn.py 交易系统界面。","date":"2017-12-18","objectID":"/archives/2017-12-18-centos-%E8%B0%83%E7%94%A8%E6%98%BE%E7%A4%BA%E5%99%A8/","tags":["CentOS","界面化","交易系统"],"title":"CentOS 调用显示器","uri":"/archives/2017-12-18-centos-%E8%B0%83%E7%94%A8%E6%98%BE%E7%A4%BA%E5%99%A8/"},{"categories":["Programming"],"content":"参考链接：Stack OverFlow 在系统添加显示屏 export DISPLAY=:0.0 xhost +HOSTNAME xhost +local:root 在交易系统调用屏幕 import os os.putenv('DISPLAY', ':0.0') ","date":"2017-12-18","objectID":"/archives/2017-12-18-centos-%E8%B0%83%E7%94%A8%E6%98%BE%E7%A4%BA%E5%99%A8/:0:0","tags":["CentOS","界面化","交易系统"],"title":"CentOS 调用显示器","uri":"/archives/2017-12-18-centos-%E8%B0%83%E7%94%A8%E6%98%BE%E7%A4%BA%E5%99%A8/"},{"categories":["Programming"],"content":"CLion 是当前最好用的一款 c/cpp 的 IDE，真的没有之一。本文介绍如何安装并使用 CLion(2017.3)。","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Programming"],"content":"C/Cpp 编程常常使程序员感到懊恼，一方面是编程语言本身的难度较高，另一方面，我认为也是因为没有比较好用的 IDE。不像 R 或者 Python 这些解释性编程语言，不需要经过编译即可运行 REPL(read-evaluate-print-loop)，提供实时互动的编程环境；C/Cpp 是一种静态的、需要经过编译的编程语言，这增加了我们查找代码错误的难度，也就是无法提供实时的纠错功能，而只能是在整个项目运行结束后才把相关的错误提示给到程序员。因此，对一款「好用IDE」的向往应该是一家有抱负的科技企业的奋斗动力。 神奇的 JetBrain 就是这么一家牛逼的公司，最早开发了 CLion 造福广大的 C/Cpp 程序员，后来又陆陆续续的开发了 PyCharm 等多款好用又好看的 IDE，可以说功德千秋、造福万代啊。今天我们来看看怎么在操作系统安装和使用这么好用的 C/Cpp IDE。 安装所谓「工欲善其事必先利其器」，我们得先把软件安装起来了才能敲代码嘛。 ","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/:0:0","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Programming"],"content":" 下载CLion 是一款跨平台的软件，提供了 Linux、Mac 和 Windows 三种操作系统下的安装。当然，我平时基本不用 Windows，主要的开发环境都是在 Linux/Ubuntu/CentOS，或者偶尔会使用 Mac 来开发。基本的安装流程跟其他软件都差不多。 ","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/:1:0","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Programming"],"content":" Linux 下载在 Linux 操作系统下，下载源代码包 *.tar.gz，并将其解压到安装目录。 cd /home/william wget https://download.jetbrains.8686c.com/cpp/CLion-2017.3.tar.gz tar -zcvf CLion-2017.3.tar.gz cd CLion-2017.3 设置环境变量然后再配置环境变量，把软件包添加到系统 vim ~/.bashrc ## 添加到系统路径 export PATH=/home/william/clion-2017.3/bin:${PATH} 命令行启动经过把 CLion 添加到系统环境后，我们可以直接启动 clion.sh 当然，也可以通过添加桌面图标的方式来启动 CLion。 图标启动新建立一个文件 CLion.desktop, 保存到 ~/.local/share/applications，里面的内容为 [Desktop Entry] Name=CLion Exec=/home/william/clion-2017.3/bin/clion.sh Icon=/home/william/clion-2017.3/bin/clion.png Terminal=false Type=Application ","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/:1:1","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Programming"],"content":" Mac 安装在 Mac 操作系统下安装其实就是一建「傻瓜式」，直接下载 *.dmg 然后点击安装即可，默认已经帮我们把环境路径设置好了。 ","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/:1:2","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Programming"],"content":" 首次使用第一次打开 CLion 后，会出现一个界面询问是否需要导入偏好，。 不需要导入偏好设置 接下来是激活软件，这个我们在后面的激活部分再解释，这里默认已经经过激活了。 正在激活 可以选择一款钟意的主题，我一般是使用暗色的编程主题，这里提供了 Darcula。 不需要导入偏好设置 设置 C/Cpp 的默认编译器，这里一般也不需要多做设置，等需要改变的时候再进行配置即可。 设置编译器 提供了可拓展的插件，可根据需要来选择安装 选择安装插件 经过以上几个简单的配置步骤，我们便可以正式使用 CLion 了。这里提供了两种启动项目的方式 从已存在的项目导入 新建一个项目 启动项目 如果选择新建项目，我们需要做一个简单的配置 新项目配置 最好，我们终于可以愉快的写代码了。 开始欢快的敲代码 破解我们知道，CLion 并非是一个免费的软件，而是收费的，且价格不菲。之前有公司同事购买过一个注册码，大约是 $80，相比于其提供的便利性而言，还是很值得的。 不过也有大神通过搭建服务器的方式来提供许可证共享，具体的链接可以参考 JetBrains IDEA 系列产品通用xx方法。 具体的操作如下： 打开激活窗口 选择 Activate new license with License server （用license server 激活） 在 License sever address 处填入 http://xidea.online 点击 Activate 进行认证 done！ ","date":"2017-12-10","objectID":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/:2:0","tags":["Cpp","IDE"],"title":"CLion：最好用的 C-C++ IDE","uri":"/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c++-ide/"},{"categories":["Personal"],"content":" 突然发现一封停留在草稿箱的邮件，没有发送出去，时间仿佛停留在 2008 年，我与猪头相恋的时光里。 也许彼时想起给一个人写信，一时兴起，却又在转瞬间变得平淡若水。现在翻看，里面提到了车轮同学，当时给我打电话的情景，不禁觉得眼泪婆娑。故人已去，唯有此刻的怀念。 想起该给你写点什么，似乎，文字才是石头的轨迹，想像在大片大片偌大的荒园，一直追寻这些最简单的象形符号，比如孩童的时代，将它们小心翼翼的描绘在单纯的田字格里，却是组合成最复杂的天象，让人难以捉摸。很少的说话，是否有种声音，来自内心的真实。而我们，都选择了文字的表述，以为这样可以让彼此听到心的声音，呼唤，来自远方…… 一整块的冬天，已经被我藏起来，等待来年的回归，眼看阳光明媚的早晨，穿过我的天边…… 想在你身边…… 有时，总是有某些莫名的想法，让我害怕…… 生活一直乱乱的，乱舞的青春。要去面对很多事情，很多的烦恼，总是有段时间，会特别的辛苦，等经历了风雨，我想要看到你的微笑，舔舔的，阳光的夏至，有石头想要的味道。 流樱在回归线以南的南方，跟我说，夏至在地平线的额头悄悄的滑落，有最灿烂的花香，淡月一直很颓废是生活，在大学的荒漠里，继续不知所向的流浪，安说，同样叽叽咋咋的考试，虽然很喜欢糜烂的忙碌，永无消止的轮回，千慧在写小说，依然没个落寞，总在深夜至沉的时候给我发短信，很是成功的笑，车轮同学终于打电话过来，很是激情的说那个北方的城市靠着大海，而他，会把时间泡死在沙滩，然后用沙尽力的折磨，这便是kill，而宾语，是物，还是人呢，还有，印子，偶尔在线说话，整一个大忙人，以前在小镇的悠闲，似乎已经怠尽死亡，飘落天涯，峰子会给我看海边的落日，残破不堪，还外加评论，我们以前说好要一起到大海qi，现在，却各个不知鬼影到底都躲到哪里不敢见阳光了，自己会淡淡的苦笑，鬼知道我们都飘落在天涯的哪个角落了，不见了，永远跟从前说再见了，我的那些哥们…… 试着自由地…… ","date":"2017-11-11","objectID":"/archives/2017-11-11-%E5%81%9C%E7%95%99%E5%9C%A8%E8%8D%89%E7%A8%BF%E7%AE%B1%E7%9A%84%E6%80%80%E5%BF%B5/:0:0","tags":["过去","时光","猪头","车轮同学"],"title":"停留在草稿箱的怀念","uri":"/archives/2017-11-11-%E5%81%9C%E7%95%99%E5%9C%A8%E8%8D%89%E7%A8%BF%E7%AE%B1%E7%9A%84%E6%80%80%E5%BF%B5/"},{"categories":["Data"],"content":"利用 `R` 与  `selenium` 对上期所网站进行数据爬虫，获取日行情数据、成交持仓排名、仓单日报等。","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":"我们已经实现了对两个交易所的数据爬虫（中金所、郑商所）。在技术层面上，这两个交易所都采用了静态网页的格式来呈现交易数据，这种类型的数据爬虫相对比较容易，我们只需要找到对应的数据文件地址，然后利用历史的交易日期来生成所有交易日的数据链接，然后开通并行计算模式即可下载到所有的历史数据。但对于上期所和大商所，二者则使用了相对复杂一些的动态网页技术，使用 AJAX 动态加载来显示数据。对这类网站进行数据爬虫，我们需要使用更加高级的技术手段。 本篇文章介绍如何对上期所进行动态网页数据的爬虫。 上期所网站提供期货相关的数据 日行情数据我们首先打开交易数据相关的网页，可以看到上期所提供了大量的与期货交易相关的数据，其中包括日行情数据、交易排名数据等。点击选择 日交易快讯，我们便可以看到这一天的上期所期货合约日行情数据，具体的字段包括 OHLC、SettplementPrice、Volume等，不过没有 Turnover，这个算是有点遗憾，意味着我们无法使用上期所公布的当天的数据来计算 vwap。 日行情数据 ","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:0:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 动态异步加载我们试试通过左栏的日历表，选取不同交易日期的数据看看。各位注意到没有，我们点击了不同的网页链接，可以浏览器的地址栏的 paramdate= 这个字段也在随着发生改变。也就是说，我们可以使用历史所有的交易日期来生成不同的日行情网页链接，接下来只需要打开各个链接地址，就能看到具体的数据表格了。 不过与我们之前介绍的中金所或郑商所不一样，后两家交易所是针对不同的交易日期提供了单独的数据界面，即我们所说的静态网页；而上期所采用的是动态异步加载的方式，我们使用鼠标选择好交易日期后，上期所服务器才发送数据给浏览器解析并呈现出来。因此，我们无法通过直接下载数据文件的链接来获取数据。 对于这类的动态网页爬虫，我们有两种方式可以处理： 如果熟悉 JavaScript 技术：可以通过编写 JavaScript 脚本来响应上期所服务器，进而截取数据 通过模拟鼠标的方式：确定好交易日期，等待远程服务器把数据传输到本地后，我们再对网页数据进行爬虫、读取、整理 数据文件链接为动态格式 很显然，我不是 CS 科班，虽然有设计过博客，但也就是一般了解和基本使用的初级阶段，目前还无法掌握 JavaScript 的强大功能，而且也不打算为了数据爬虫专门去学习这门前段语言（一来中年危机之后的时间、精力受限，二来付出收益比不高）。因此，我使用了迂回策略，使用 Selenium 模拟鼠标来对上期所的交易数据进行爬虫。 看起来这个任务似乎挺复杂的。其实很简单（Maybe），我们只需要以下两个步骤： 定位交易日期 等服务器传送数据结束后，读取网页数据 ","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:1:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 定位交易日期即利用历史的期货交易日期，生成单独的链接地址，然后使用 Selenium 驱动浏览器来打开网页。 ## 开启 Selenium 和 firefox remDr \u003c- remoteDriver(remoteServerAddr ='localhost' ,port = 4444 ,browserName = 'firefox') remDr$getStatus() ## 生成链接地址 exchURL \u003c- \"http://www.shfe.com.cn/statements/dataview.html?paramid=kx\u0026paramdate=\" tempURL \u003c- paste0(exchURL, exchCalendar[i,days]) ## 在浏览器打开链接来获取远程服务器数据 ## =========================================================================== ## 开始准备下载数据 # 需要保持开启 # ---------------------------------------------------------------------------- remDr$open(silent = TRUE) remDr$navigate(tempURL) Sys.sleep(0.5) ","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:2:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 读取网页数据到目前为止，我们能够看到在 firefox 浏览器已经打开了当前的日行情数据网页。接下来，我们需要对网页进行数据爬虫。 找到数据所在的节点 定位数据表格：我们找到了日行情数据所在的节点为 \u003ctable id=\"addedtable\" width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"\u003e 提取网页内容：需要把整个网页加载到内存 tempTable \u003c- remDr$findElements(using = 'id', value = 'addedtable')[[1]] tempTable$getElementAttribute('outerHTML')[[1]] 读取表格数据：这个相对容易，直接使用 rvest 封装好的函数即可。 ## --------------------------------------------------------------------------- tempTitle \u003c- remDr$findElements(using = 'id', value = 'datatitle')[[1]] tempQueryDay \u003c- tempTitle$getElementAttribute('outerHTML')[[1]] %\u003e% read_html(encoding = 'GB18030') %\u003e% html_node('strong') %\u003e% html_text() %\u003e% gsub('\\\\D','',.) if (tempQueryDay != exchCalendar[i,days]) return(NULL) ## --------------------------------------------------------------------------- ## --------------------------------------------------------------------------- #-- 找到数据 tempTable \u003c- remDr$findElements(using = 'id', value = 'addedtable')[[1]] webData \u003c- tempTable$getElementAttribute('outerHTML')[[1]] %\u003e% read_html(encoding = 'GB18030') %\u003e% html_nodes('table') %\u003e% html_table(fill = TRUE, header=FALSE) %\u003e% as.data.table() %\u003e% .[-grep('注：|报价单位',X1)] print(webData) ## --------------------------------------------------------------------------- 剩下的就是把数据保存为文件了，并记得把相关的进程结束掉，否则会一直占有系统内存。 ## --------------------------------------------------------------------------- tryNo \u003c- 0 while ( (!file.exists(destFile) | file.size(destFile) \u003c 1000) \u0026 (tryNo \u003c 10) ){ openxlsx::write.xlsx(webData, file = destFile, colNames = FALSE, rowNames = FALSE) tryNo \u003c- tryNo + 1 } ## =========================================================================== ## 关闭浏览器 try({ system('pkill -f firefox') system('pkill -f geckodriver') system('rm -rf /tmp/rust_mozprofile*') }) ## =========================================================================== ","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:3:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 完整的 Demo ################################################################################ ##! shfe.R ## 这是主函数: ## 用于从 上期所 网站爬虫期货交易的日行情数据 ## daily ## ## ## 注意: ## ## Author: fl@hicloud-investment.com ## CreateDate: 2017-10-16 ################################################################################ ################################################################################ ## STEP 0: 初始化，载入包，设定初始条件 ################################################################################ rm(list = ls()) logMainScript \u003c- c(\"shfe.R\") if (class(try(setwd('/home/fl/myData/'))) == 'try-error') { setwd('/run/user/1000/gvfs/sftp:host=192.168.1.166,user=fl/home/fl/myData') } suppressMessages({ source('./R/Rconfig/myInit.R') }) library(RSelenium) ################################################################################ ## STEP 1: 获取对应的交易日期 ################################################################################ ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarMonth = substr(days,5,6), calendarDay = substr(days,7,8))] dataPath \u003c- '/home/william/Documents/Exchange/SHFE/' # dataPath \u003c- \"./data/Bar/Exchange/SHFE/\" ##------------------------------------------------------------------------------ if(Sys.info()['sysname'] == 'Windows'){ Sys.setenv(\"R_ZIPCMD\" = \"D:/Program Files/Rtools/bin/zip.exe\") ## path to zip.exe } ##------------------------------------------------------------------------------ ################################################################################ ## SHFE: 上期所 exchURL \u003c- \"http://www.shfe.com.cn/statements/dataview.html?paramid=kx\u0026paramdate=\" ################################################################################ ################################################################################ ## 后台开启一下命令 ## ## cd Desktop ## java -jar selenium-server-standalone-3.0.0.jar ## ################################################################################ remDr \u003c- remoteDriver(remoteServerAddr ='localhost' ,port = 4444 ,browserName = 'firefox') remDr$getStatus() # # ################################################################################ ## 开始下载数据 ################################################################################ shfeData \u003c- function(i) { ## =========================================================================== tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir, recursive = TRUE) ## =========================================================================== tempURL \u003c- paste0(exchURL, exchCalendar[i,days]) ## =========================================================================== ## 判断文件是不是已经下载了 ## --------------------------------------------------------------------------- destFile \u003c- paste0(tempDir, \"/\", ChinaFuturesCalendar[i,days],\".xlsx\") if (file.exists(destFile)) return(NULL) ## =========================================================================== ## =========================================================================== ## 开始准备下载数据 # 需要保持开启 # ---------------------------------------------------------------------------- remDr$open(silent = TRUE) remDr$navigate(tempURL) Sys.sleep(0.5) ## --------------------------------------------------------------------------- tempTitle \u003c- remDr$findElements(using = 'id', value = 'datatitle')[[1]] tempQueryDay \u003c- tempTitle$getElementAttribute('outerHTML')[[1]] %\u003e% read_html(encoding = 'GB18030') %\u003e% html_node('strong') %\u003e% html_text() %\u003e% gsub('\\\\D','',.) if (tempQueryDay != exchCalendar[i,days]) return(NULL) ## --------------------------------------------------------------------------- ## --------------------------------------------------------------------------- #-- 找到数据 tempTable \u003c- remDr$findElements(using = 'id","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:4:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 选择全部合约需要选择上期所全部期货合约 不过，上期所提供的默认传送数据是 铜，如果只是简单粗暴的爬虫，只能获取铜期货合约的单个数据。注意到旁边还有一个 全部 的按钮，我们点击这个按钮后服务器才会把所有合约的成交持仓排名数据传输到本地。因此，我们在爬虫之前还需要模拟鼠标点击选择全部合约的按钮。这个也是可以通过 Selenium 来实现。具体的做法是 首先，定位 全部 按钮所对应的节点 然后使用 clickElement() 函数模拟鼠标单击操作 具体的代码如下 ## 定位全部合约的按钮 temp \u003c- remDr$findElements(using = 'id', value = 'li_all')[[1]] #-- 点击选择全部合约 tempWeb \u003c- temp$clickElement() 现在，我们就能在本地获取所有合约的成交持仓排名数据了。对网页进行数据爬虫与上面的日行情数据爬虫一样，不再赘述。 ","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:5:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["Data"],"content":" 完整的 Demo成交持仓排名的网页结构 ################################################################################ ## shfe.R ## 用于下载上期所期货公司持仓排名数据 ## ## Author: William Fang ## Date : 2017-08-21 ################################################################################ ################################################################################ ## STEP 0: 初始化，载入包，设定初始条件 ################################################################################ rm(list = ls()) logMainScript \u003c- c(\"shfe.R\") if (class(try(setwd('/home/fl/myData/'))) == 'try-error') { setwd('/run/user/1000/gvfs/sftp:host=192.168.1.166,user=fl/home/fl/myData') } suppressMessages({ source('./R/Rconfig/myInit.R') }) library(RSelenium) ################################################################################ ## STEP 1: 获取对应的交易日期 ################################################################################ ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarMonth = substr(days,5,6), calendarDay = substr(days,7,8))] dataPath \u003c- '/home/william/Documents/oiRank/SHFE/' # dataPath \u003c- \"./data/Bar/oiRank/SHFE/\" ##------------------------------------------------------------------------------ if(Sys.info()['sysname'] == 'Windows'){ Sys.setenv(\"R_ZIPCMD\" = \"D:/Program Files/Rtools/bin/zip.exe\") ## path to zip.exe } ##------------------------------------------------------------------------------ ################################################################################ ## SHFE: 上期所 exchURL \u003c- \"http://www.shfe.com.cn/statements/dataview.html?paramid=pm\u0026paramdate=\" ################################################################################ ################################################################################ ## 后台开启一下命令 ## ## cd Desktop ## java -jar selenium-server-standalone-3.0.0.jar ## ################################################################################ remDr \u003c- remoteDriver(remoteServerAddr ='localhost' ,port = 4444 ,browserName = 'firefox') remDr$getStatus() # # ################################################################################ ## 开始下载数据 ## 1.持仓排名 ################################################################################ shfeData \u003c- function(i) { ## =========================================================================== tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir, recursive = TRUE) ## =========================================================================== tempURL \u003c- paste0(exchURL, exchCalendar[i,days]) ## =========================================================================== ## 判断文件是不是已经下载了 ## --------------------------------------------------------------------------- destFile \u003c- paste0(tempDir, \"/\", ChinaFuturesCalendar[i,days],\".xlsx\") if (file.exists(destFile)) return(NULL) ## =========================================================================== ## =========================================================================== ## 开始准备下载数据 # 需要保持开启 # ---------------------------------------------------------------------------- remDr$open(silent = TRUE) remDr$navigate(tempURL) Sys.sleep(1) ## --------------------------------------------------------------------------- tempTitle \u003c- remDr$findElements(using = 'id', value = 'datatitle')[[1]] tempQueryDay \u003c- tempTitle$getElementAttribute('outerHTML')[[1]] %\u003e% read_html(encoding = 'GB18030') %\u003e% html_nodes('table') %\u003e% html_table() %\u003e% .[[1]] %\u003e% .[2, 'X1'] %\u003e% gsub('-','',.) if (tempQueryDay != exchCalendar[i,days]) return(NULL) ## --------------------------------------------------------------------------- temp \u003c- remDr$findElements(using = 'id', value = 'li_all')[[1]] #-- 点击选择全部合约 tempWeb \u003c- temp$clickElement() Sys.sleep(1) #-- 找到数据 tempData \u003c- remDr","date":"2017-11-10","objectID":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/:6:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之上期所","uri":"/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/"},{"categories":["programming"],"content":"Ubuntu环境, 假设这台机器名字叫abc(机器的hostname), 每次执行sudo 就出现这个警告讯息: sudo: unable to resolve host *** 虽然sudo 还是可以正常执行, 但是警告讯息每次都出来,而这只是机器在反解上的问题, 所以就直接从/etc/hosts 设定, 让abc(hostname) 可以解回127.0.0.1 的IP 即可. /etc/hosts 原始内容 127.0.0.1 localhost # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters ff02::3 ip6-allhosts 在 127.0.0.1 localhost 后面加上主机名称(hostname) 即可, /etc/hosts 内容修改成如下: 127.0.0.1 localhost *** #要保证这个名字与 /etc/hostname 中的主机名一致才有效 # 或改成下面这两行 #127.0.0.1 localhost #127.0.0.1 *** 这样设完后, 使用sudo 就不会再有那个提示信息了。 /etc/hostname: 是当前机器的名称 /etc/host 修改主机地址 ","date":"2017-11-09","objectID":"/archives/2017-11-09-ubuntu--unable-to-resolve-host-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["Ubuntu"],"title":"Ubuntu: unable to resolve host 解决方法","uri":"/archives/2017-11-09-ubuntu--unable-to-resolve-host-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["Programming"],"content":"在 CentOS 操作系统更新 Rstudio-Server 软件，并进行相关的端口设置。 强大的 R IDERstudio 是非常强大的、专注于 R 统计语言编程环境的 IDE，基本取代了原生的操作界面而成为目前使用范围最广泛、功能最强大的编程软件。一般而言，我们在桌面 PC 操作系统，直接安装使用 Rstudio 即可实现代码编写、测试运行、画图等操作；而对于服务器，我们则需要安装 Rstudio-Server 这个版本，通过网页登录来模拟桌面的 IDE，实现完全无缝连接地使用我们最爱的 R 编辑与测试环境。 通过网页访问 Rstudio 新版的 Rstudio-Server 还为我们贴心的提供了通过网页访问服务器 Terminal 的端口，即我们现在即可以在网页访问到 R，在上面进行编程、显示画图、测试运行，又可以通过终端进行 shell 命令操作，类似于实现了访问服务器终端的功能。 新版提供了直接访问服务器终端的功能 因此，我们决定对原来的 CentOS 操作系统安装的旧版进行省级。以下简要记录升级过程。 升级过程","date":"2017-11-05","objectID":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/:0:0","tags":["CentOS","Rstudio"],"title":"升级 Rstudio Server","uri":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/"},{"categories":["Programming"],"content":" 下载新版软件首先需要到 Rstudio 的官网下载最新版本的 Rstudio-server，记得选择 CentOS/RHEL cd /tmp ## 下载最新版本号 wget https://download2.rstudio.org/rstudio-server-rhel-1.1.383-x86_64.rpm ## 使用管理员权限安装软件 sudo yum install --nogpgcheck rstudio-server-rhel-1.1.383-x86_64.rpm sudo yum install -y initscripts ","date":"2017-11-05","objectID":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/:1:0","tags":["CentOS","Rstudio"],"title":"升级 Rstudio Server","uri":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/"},{"categories":["Programming"],"content":" 测试是否安装成功安装完成后，默认的配置端口号为 8787，我们可以直接在浏览器输入：192.168.1.166:8787。 ","date":"2017-11-05","objectID":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/:2:0","tags":["CentOS","Rstudio"],"title":"升级 Rstudio Server","uri":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/"},{"categories":["Programming"],"content":" 异常排查如果没有意外的话，我们是可以直接在网页打开 Rstudio 界面的。不过，如果我们的更新的过程中，不小心把原来的程序关闭了，这时候需要重启端口 ## 尝试重启服务 sudo rstudio-server restart # initctl: Unknown instance # rsession no process restart ## 增加远程访问 Rstudio 8787 端口 # 1.FirewallD防火墙开放8787端口 firewall-cmd --zone=public --add-port=8787/tcp --permanent # 2.重启防火墙 systemctl restart firewalld.service ## 使用以下三个步骤来重新配置 8787 端口 ## 1) check the process that used 8787 sudo fuser 8787/tcp ## 2) with the -k option to kill all process sudo fuser -k 8787/tcp ## 3) start rstudio-server sudo rstudio-server start ","date":"2017-11-05","objectID":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/:3:0","tags":["CentOS","Rstudio"],"title":"升级 Rstudio Server","uri":"/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/"},{"categories":["Data"],"content":"利用 `R` 对郑州商品交易所进行网络爬虫，获取日行情数据、成交排名、仓单数据等。","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":"上回我介绍了如何对中金所进行网络爬虫，获得了股指期货相关的历史日行情数据和成交排名数据。同样的，我们也可以使用类似的爬虫技术，对郑商所进行网络爬虫。 诡异的郑商所不过与中金所网络爬虫不一样的一点是，中金所本身提供了数据文件的静态链接地址，我们只需要解析到不同交易日期所对应的链接，就能够把数据下载到本地。而郑商所虽然也同样提供了文件的静态链接，但是，我在爬虫的过程中发现了一个小小的问题：有部分的交易数据，郑商所不知道出于何种原因（有可能是原始的数据文件丢失，或者路径存储错误），竟然找不到当日对应的数据文件链接。也就是说，对于这些交易日，我们是无法直接下载文件的。因此，对于这些没有提供链接的数据，我们只能采用页面爬虫的技术，通过读取网页的数据，经过数据清理、规整等步骤，再保存到本地文件。 针对网站页面的数据进行爬虫，会涉及到 DOM 构造、HTML 元素解析、文本识别、正则表达等诸多方面的技术。在接下来的内容里，我会重点介绍如何在网页中找到我们需要的数据。 郑商所网站提供期货与期权相关的数据 工具箱对于网页内容进行爬虫、识别网页内容、获取目标数据或文本等，我们需要使用到 HTML 相关的技术手段。最原始的一种办法是通过 wget 把整个网页下载到本地，然后再进行内容解析；或者使用 libcur 来读取远程的内容并传递到系统的内存。这些技术难度较大，而且得到的数据并不是结构性的，使用正则获取目标数据比较坎坷。万幸的是，已经有人通过软件包的形式，为我们把这些基础的工作都处理完成了，我们只需要调用相关的函数，即可实现简单的网页爬虫。 以下两个 R 的扩展包就是针对网络爬虫而开发的。 ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:0:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" RSeleniumSelenium 是一款网络驱动，作为无头浏览器(headless webdriver)驱动，提供了高性能的网络测试、页面加载、网络解析等功能。基于这项技术所提供的 API 调用端口，我们可以使用不同的编程语言来调用浏览器功能，从而实现了开发-测试的无缝连接。 RSelenium 就是 Selenium 在 R 语言下的扩展包，集成了大量可供调用的函数，使得我们只需要在 R 中调用函数并传入参数，即可对网页进行解析。 ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:1:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" rvest这个是大神 Wickham Hadley 编写的一个针对网页爬虫的扩展包，封装了 Linux 下的 libcur 库，因此能够提供对网页页面的 DOM 解析。这个包返回一个结构化的对象，可以通过 R 的函数对其进行数据清理；同时它还针对不同的编码进行自动化的识别，这点对于中文网站尤其重要，否则，编码错误会导致我们爬虫的数据出现乱码的悲剧。 日行情数据","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:2:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 静态链接我们在对中金所进行爬虫的那篇博客里面，已经讲到如何通过 Chrome 的 Inspect 功能来获取网页的元素。通过查找特定位置的 HTML 标签，我们可以得到该位置所对应的具体信息。 ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:3:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 定位网页首先我们需要做的是先尝试定位某个交易日的日行情数据存放网页，通过输入交易日，然后点击查询，我们便可以看到需要查找的交易数据。 通过交易日期查找日行情数据 这个便是我们需要进行爬虫的单独网页。 承载数据的具体网页 我们来看看当天的网页地址，比如：http://www.czce.com.cn/portal/DFSStaticFiles/Future/2017/20171026/FutureDataDaily.htm。主要是由以下几个部分组成的： http://www.czce.com.cn/portal/DFSStaticFiles/Future/：这个可以当成是日行情的根目录。 2017/20171026/FutureDataDaily.htm：这个命名规则很明显，由 YYYY/YYYYmm/FutureDataDaily.htm 构成。我们可以根据交易日来提取日期组成。 ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:3:1","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 下载数据文件在数据文件对应的 excel / txt 点击右键，然后使用 Ctrl + F 查找 excel，我们便可以定位到数据文件了。 通过元素审查获取标签的具体信息 一看吓一跳，似乎这个数据文件是一个动态的脚本，好像很难识别的样子。不过，各位不要被这个「纸老虎」吓到了，我们可以手动打开一个网页试试看，有木有惊喜呢。 原来也是一个静态文件地址 具体地，我们看到这个数据文件对应的链接地址是：http://www.czce.com.cn/portal/DFSStaticFiles/Future/2017/20171026/FutureDataDaily.xls，对其进行拆解看： http://www.czce.com.cn/portal/DFSStaticFiles/Future/：数据文件所在的根目录 2017/20171026/FutureDataDaily.xls：具体的文件地址，通用格式为 YYYY/YYYYmmdd/FutureDataDaily.xls，也就是说，我们可以根据历史的交易日期来生成所以交易日的文件链接，然后呢，通过遍礼下载得到我们想要的数据即可。 不过，这里有一个小小的坑，就是郑商所在 2015-10-01 前后有变动过相对路径的根目录的名称，也就是说，这个地方需要我们用交易日期来判断。我们来看看这段代码是这样写的： ## 在 2015-10-01 之前 exchURL1 \u003c- \"http://www.czce.com.cn/portal/exchange/\" ## 在 2015-10-01 之后 exchURL2 \u003c- \"http://www.czce.com.cn/portal/DFSStaticFiles/Future/\" tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir) tempYear \u003c- exchCalendar[i,calendarYear] tempTradingDay \u003c- exchCalendar[i,days] ## 需要改变根目录地址 tempURL \u003c- ifelse(tempTradingDay \u003c '20151001', paste0(exchURL1, tempYear, '/datadaily/', tempTradingDay, '.txt'), paste0(exchURL2, tempYear, '/', tempTradingDay, '/FutureDataDaily.xls')) destFile \u003c- paste0(dataPath, '/', exchCalendar[i,calendarYear], \"/\", tempTradingDay, ifelse(tempTradingDay \u003c '20151001','.txt','.xls')) 然后便可以开启并行模式下载数据了： try(download.file(tempURL, destFile, mode = 'wb')) ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:3:2","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 网页内容爬虫如果事情都是按照我们预期，作为强迫症的我，必然要求这个世界能够按照自然界最优雅的方式来运行。可以，世界太大，坏人太多，结局很不好。 以上介绍了使用静态网页链接地址来下载文件，可惜对于部分的交易日期，郑商所似乎把原始的数据文件弄丢了。这个不得了，我们得程序现在罢工了，无法再继续下载数据了。 不过所幸的是，我们还有另外一套网页爬虫的技术。 ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:4:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 识别网页内容我们知道，任何的网页，后面其实都是一堆的 HTML 代码而已，无他。所以，即使我们无法找到（郑商所没有提供）数据文件的链接地址，我们还是可以通过爬虫抓取网页的数据。这个就需要用到 Selenium。 首先需要做的是，开启 selenium 驱动，通过命令行来模拟网页访问，读取网页内容。 java -jar selenium-server-standalone-3.5.1.jar 接下来，我们可以通过 RSelenium 提供的端口，把数据载入内容。这样，我们通过使用 Firefox 来模拟登陆网页，然后读取具体的信息，找到相应的数据节点，并正确的识别节点内容。 tempPage \u003c- paste0('http://www.czce.com.cn/portal/exchange/jyxx/hq/hq', tempTradingDay, '.html') remDr \u003c- remoteDriver(remoteServerAddr ='localhost' ,port = 4444 ,browserName = 'firefox') remDr$getStatus() remDr$open(silent = TRUE) remDr$navigate(tempPage) tempTable \u003c- remDr$findElements(using = 'tag', value = 'table')[[3]] tempHTML \u003c- tempTable$getElementAttribute('outerHTML')[[1]] 现在，我们把整个网页的内容加载到 R 的工作空间，接下来便可以使用 rvest 来解析网页内容了： webData \u003c- tempHTML %\u003e% read_html(encoding='GB18030') %\u003e% html_node('table') %\u003e% html_table(fill = TRUE, header=FALSE) %\u003e% as.data.table() %\u003e% .[-1] %\u003e% rbind(data.table(X1 = c('')), ., fill = TRUE) webData[1, X1 := paste0('郑州商品交易所每日行情表(', as.Date(as.character(tempTradingDay), format = '%Y%m%d'), ')')] 整理数据，并写入文件 cols \u003c- colnames(webData)[2:ncol(webData)] webData[, (cols) := lapply(.SD, function(x){ gsub(',','',x) }), .SDcols = cols] print(webData) fwrite(webData, destFile, col.names = FALSE) 最后是扫尾工作，记得把不用的内存空间释放出来，下面是在 Linux 操作系统的命令，Windows 的各位可以自行 Google 搜索（不要用百度！不要用百度！不要用百度！） # remDr$quit() try({ system('pkill -f firefox') system('pkill -f geckodriver') system('rm -rf /tmp/rust_mozprofile*') }) ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:4:1","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" Demo ################################################################################ ##! czce.R ## 这是主函数: ## 用于从 郑商所 网站爬虫期货交易的日行情数据 ## daily ## ## ## 注意: ## ## Author: fl@hicloud-investment.com ## CreateDate: 2017-10-16 ################################################################################ ################################################################################ ## STEP 0: 初始化，载入包，设定初始条件 ################################################################################ rm(list = ls()) logMainScript \u003c- c(\"czce.R\") if (class(try(setwd('/home/fl/myData/'))) == 'try-error') { setwd('/run/user/1000/gvfs/sftp:host=192.168.1.166,user=fl/home/fl/myData') } suppressMessages({ source('./R/Rconfig/myInit.R') }) library(RSelenium) ################################################################################ ## STEP 1: 获取对应的交易日期 ################################################################################ ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarMonth = substr(days,5,6), calendarDay = substr(days,7,8))] dataPath \u003c- '/home/william/Documents/Exchange/CZCE/' # dataPath \u003c- \"./data/Bar/Exchange/CZCE/\" ##------------------------------------------------------------------------------ if(Sys.info()['sysname'] == 'Windows'){ Sys.setenv(\"R_ZIPCMD\" = \"D:/Program Files/Rtools/bin/zip.exe\") ## path to zip.exe } ##------------------------------------------------------------------------------ ################################################################################ ## CZCE: 郑商所 ## 1.持仓排名 ## 2.仓单日报 ################################################################################ ## 在 2015-10-01 之前 exchURL1 \u003c- \"http://www.czce.com.cn/portal/exchange/\" ## 在 2015-10-01 之后 exchURL2 \u003c- \"http://www.czce.com.cn/portal/DFSStaticFiles/Future/\" ## ============================================================================= czceData \u003c- function(i) { tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir) tempYear \u003c- exchCalendar[i,calendarYear] tempTradingDay \u003c- exchCalendar[i,days] tempURL \u003c- ifelse(tempTradingDay \u003c '20151001', paste0(exchURL1, tempYear, '/datadaily/', tempTradingDay, '.txt'), paste0(exchURL2, tempYear, '/', tempTradingDay, '/FutureDataDaily.xls')) destFile \u003c- paste0(dataPath, '/', exchCalendar[i,calendarYear], \"/\", tempTradingDay, ifelse(tempTradingDay \u003c '20151001','.txt','.xls')) tryNo \u003c- 0 ## --------------------------------------------------------------------------- while( (!file.exists(destFile) | file.size(destFile) \u003c 1000) \u0026 (tryNo \u003c 20)){ if (class(try(download.file(tempURL, destFile, mode = 'wb'))) == 'try-error') { tempPage \u003c- paste0('http://www.czce.com.cn/portal/exchange/jyxx/hq/hq', tempTradingDay, '.html') remDr \u003c- remoteDriver(remoteServerAddr ='localhost' ,port = 4444 ,browserName = 'firefox') remDr$getStatus() remDr$open(silent = TRUE) remDr$navigate(tempPage) tempTable \u003c- remDr$findElements(using = 'tag', value = 'table')[[3]] tempHTML \u003c- tempTable$getElementAttribute('outerHTML')[[1]] webData \u003c- tempHTML %\u003e% read_html(encoding='GB18030') %\u003e% html_node('table') %\u003e% html_table(fill = TRUE, header=FALSE) %\u003e% as.data.table() %\u003e% .[-1] %\u003e% rbind(data.table(X1 = c('')), ., fill = TRUE) webData[1, X1 := paste0('郑州商品交易所每日行情表(', as.Date(as.character(tempTradingDay), format = '%Y%m%d'), ')')] cols \u003c- colnames(webData)[2:ncol(webData)] webData[, (cols) := lapply(.SD, function(x){ gsub(',','',x) }), .SDcols = cols] print(webData) fwrite(webData, destFile, col.names = FALSE) # remDr$quit() try({ system('pkill -f firefox') system('pkill -f geckodriver') system('rm -rf /tmp/rust_mozprofile*') }) } tryNo \u003c- tryNo + 1 } ## --------------------------------------------------------------------------- } #################","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:5:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" 持仓排名地址与日行情数据爬虫相类似，我们也一样可以对期货公司层面的成交持仓排名数据进行网络爬虫。这里需要做的，其实就是把日行情数据的网页地址换成持仓排名的网页地址，即 ## 直接下载文件的链接 tempURL \u003c- ifelse(tempTradingDay \u003c '20151001', paste0(exchURL1, tempYear, '/datatradeholding/', tempTradingDay, '.txt'), paste0(exchURL2, tempYear, '/', tempTradingDay, '/FutureDataHolding.xls')) ## 数据爬虫的网页地址 tempPage \u003c- paste0('http://www.czce.com.cn/portal/exchange/jyxx/pm/pm', tempTradingDay, '.html') ","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:6:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Data"],"content":" Demo好吧，剩下就就直接上干货喽。 ################################################################################ ## czce.R ## 用于下载郑商所期货公司持仓排名数据 ## ## Author: William Fang ## Date : 2017-08-21 ################################################################################ ################################################################################ ## STEP 0: 初始化，载入包，设定初始条件 ################################################################################ rm(list = ls()) logMainScript \u003c- c(\"czce.R\") # setwd('/home/fl/myData/') if (class(try(setwd('/home/fl/myData/'))) == 'try-error') { setwd('/run/user/1000/gvfs/sftp:host=192.168.1.166,user=fl/home/fl/myData') } suppressMessages({ source('./R/Rconfig/myInit.R') }) library(RSelenium) Sys.setlocale(\"LC_ALL\", 'en_US.UTF-8') ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarMonth = substr(days,5,6), calendarDay = substr(days,7,8))] dataPath \u003c- '/home/william/Documents/oiRank/CZCE/' # dataPath \u003c- \"./data/Bar/Exchange/CZCE/\" ##------------------------------------------------------------------------------ if(Sys.info()['sysname'] == 'Windows'){ Sys.setenv(\"R_ZIPCMD\" = \"D:/Program Files/Rtools/bin/zip.exe\") ## path to zip.exe } ##------------------------------------------------------------------------------ ################################################################################ ## CZCE: 郑商所 ## 1.持仓排名 ## 2.仓单日报 ################################################################################ ## 在 2015-10-01 之前 exchURL1 \u003c- \"http://www.czce.com.cn/portal/exchange/\" ## 在 2015-10-01 之后 exchURL2 \u003c- \"http://www.czce.com.cn/portal/DFSStaticFiles/Future/\" ## ============================================================================= czceData \u003c- function(i) { tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir, recursive = TRUE) tempYear \u003c- exchCalendar[i,calendarYear] tempTradingDay \u003c- exchCalendar[i,days] tempURL \u003c- ifelse(tempTradingDay \u003c '20151001', paste0(exchURL1, tempYear, '/datatradeholding/', tempTradingDay, '.txt'), paste0(exchURL2, tempYear, '/', tempTradingDay, '/FutureDataHolding.xls')) destFile \u003c- paste0(dataPath, '/', exchCalendar[i,calendarYear], \"/\", tempTradingDay, ifelse(tempTradingDay \u003c '20151001','.txt','.xls')) tryNo \u003c- 0 ## --------------------------------------------------------------------------- while( (!file.exists(destFile) | file.size(destFile) \u003c 1000) \u0026 (tryNo \u003c 20)){ if (class(try(download.file(tempURL, destFile, mode = 'wb'))) == 'try-error') { tempPage \u003c- paste0('http://www.czce.com.cn/portal/exchange/jyxx/pm/pm', tempTradingDay, '.html') webData \u003c- tempPage %\u003e% read_html(encoding = 'GB18030') %\u003e% html_nodes('table') %\u003e% html_table(fill=TRUE, header=FALSE) %\u003e% .[-1] %\u003e% .[[1]] %\u003e% as.data.table() %\u003e% rbind(data.table(X1 = c('','')), ., fill = TRUE) webData[1, X1 := paste0('郑州商品交易所持仓排行表(', as.Date(as.character(tempTradingDay), format = '%Y%m%d'), ')')] cols \u003c- colnames(webData)[2:ncol(webData)] webData[, (cols) := lapply(.SD, function(x){ gsub(',','',x) }), .SDcols = cols] # grep(\"名次\", tempData$X1) %\u003e% length() webTitle \u003c- tempPage %\u003e% read_html(encoding = 'GB18030') %\u003e% html_nodes('font') %\u003e% html_text() %\u003e% .[grep('品种|合约代码',.)] for (j in 1:length(webTitle)) { tempRow \u003c- grep(\"名次\", webData$X1)[j] - 1 webData[tempRow, X1 := webTitle[j]] } print(webData) fwrite(webData, destFile, col.names = FALSE) } tryNo \u003c- tryNo + 1 } ## --------------------------------------------------------------------------- } ################################################################################ ## STEP 2: 开启并行计算模式，下载数据 ################################################################################ cl \u003c- makeCluster(max(round(detectCores()*3/4),4), type='FORK') parSapply(cl, 1:nrow(Ch","date":"2017-10-28","objectID":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/:7:0","tags":["Futures","期货","数据","R"],"title":"交易所数据爬虫之郑商所","uri":"/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/"},{"categories":["Reading"],"content":"PKD 是美国当代比较另类的一位科幻作家。一方面，他基本上只写短小说，故事情节短小精悍，往往只叙述某一个关键的情节，其他的具体细节需要读者自己脑补；另一方面，他对未来的现象是阴暗、悲观的，在所有的场景设定上，天空永远是因为核战争而变得灰蒙蒙，城市街道显得破旧杂乱，人们生活在绝望与无望的底层。 然而，PKD 的小说却有一种独特的魅力：在特定的情节设定下，他在科幻小说的框架下增加了对抉择两难、道德判断、人性考验等哲学层面的讨论。 『第二代』一篇非常简短的科幻小说，讲述在未来的某一年，美苏大战爆发，双方展开殊死搏斗。因美国一方处于弱势，不得不退居月球。同时，美国为了遏制苏联的进一步军事行动，决定生产大规模的军事战斗机器人，投入到战争当中。这些机器人富有组织纪律，手段凶残，目标明确，并随着自我迭代，实现自我意识的控制，已经完全摆脱人类的设计控制，实现了自我更新的强大能力，凡是遇到人类，就以‘格杀勿论’的原则实施暴力。 在这一系列的机器人当中，目前已经知道了第一代、第三个，唯独中间有一个第二代没有被识别出来。故事的精彩之处正是由此展开。 第二代机器人富于伪装，并且具有自我存在与生存保护的意思，他们不仅欺骗了故事当中的主人公，一个作战经验丰富的军人，而且为了达到目的，甚至实行机器人之间的自相残杀，以一切手段达成目的，最终成功骗取了军官的信任，开启航天飞船前往美国最后一个人类居住地——月球基地。从此…… 这个故事其实对个人的启发还是蛮多的。 图灵测试有关人工智能的检测。其实就是这个故事里面讲述的，第二代机器人完全骗取了军官的信任，并且让他毫无戒备的将其当做机器人，这已经顺利完成了图灵测试。 我们开发机器人（人工智能）的目的在于更好地为我们处理事务，但是这个前提是，机器人必须非常明确的知道这个任务的目的何在。一旦确定了目标，机器人会非常严格而精确的完成任务，甚至是为了完成机器人之所以而存在的任务，它们能够不择手段。这个真的是细思极恐。这个也是目前社会大众对人工智能发展前景的担忧。当然，真正要实现这一类“超人工智能”，至少从目前来看，还是一件非常遥远的科幻想象。 『少数派报告』少数派报告电影海报 以前看过据此改编的同名电影『少数派报告』，但是，作为商业电影，必定需要符合一定的社会伦理和道德规范，所以在处理问题上会有所保留、有所顾忌，最终的结局只能算是皆大欢喜，普天同庆。 而作为小说本身，就像『杰出公民』里面的主人公说的，小说是作者对现实的不满而进行虚构创作，是对「不现实」的一种渴望、反省，憧憬与惶恐。这篇科幻小说假定了未来世界的某种悖论：假定未来真的可以预测，那么，如果这样的一种预测不是我们想要的结果，或者未来的事件伤及到自己或自己所处集团的利益，是不是要采取措施来改变未来；但是，如果真的开始改变未来，那这种预测系统本事是不是就失败了呢？ 所以小说设定了对未来预测的预测，这一约束，也就是少数派报告对多数派报告的否定，以及一个少数派报告对另一个少数派报告的否定，犹如黑格尔的辩证思维，否定之否定。小说情节跌宕起伏，一波三折，实际上经历了预测、反预测、确认预测、坐实预测，作者对情节的把控非常的到位。 『全面记忆』我真的是我以为的那个“我”吗？ 这里有一个视频讲述如何去理解菲利普·迪克科幻小说的视频：【国立清华大学公开课】科幻概论(25) PKD 的小说给人的印象是，黑色、压抑、绝望，无尽的坠落、看不到绿光的隧道，构成了一幅让人印象深刻的意境。也许这是跟作者的人生经历或多或少有些关联。但这也是 PKD 的科幻小说能够在同时代脱颖而出的特点，在一片只重视科技绚丽、遥远幻境的科幻小说界，他引入了哲学层面的思考，布局了逻辑推理的严谨，社会伦理的审慎，这些无疑使得 PKD 的科幻小说能够让人深入思考，去探讨在科技日益发达的同时，我们的心智是否也与之相长，我们所处的社会制度是否已经进化到足够应对各种两难的抉择。人与机器，生命与复制，心与身，灵与肉，这些关系，始终伴随着社会群体的存在而纠缠。未来在哪，未来去哪，我们去往哪个未来的方向…… ","date":"2017-10-25","objectID":"/archives/2017-10-25-pkd/:0:0","tags":["科幻","小说","Reviews"],"title":"PKD","uri":"/archives/2017-10-25-pkd/"},{"categories":["Data"],"content":"针对中金所网站进行自动化网络爬虫，下载交易相关的数据，如日行情数据、期货公司持仓排名数据、仓单数据等。 中金所网站提供股指期货相关的重要数据 从中金所网站可以得到大量股指期货、国债以及国债期货相关的重要交易数据，如日行情数据、期货公司持仓排名数据、仓单数据等。 通过网络爬虫技术，我们可以下载得到历史的所有数据，为后期的量化建模与收益率回测提供数据支持。本篇文章讨论了 如何识别中金所网址，找到对应的数据文件链接 使用并行计算模式下载所有的历史数据文件 配置文件配置文件位于 myInit.R，如果没有安装相关的软件包，我这里已经写好一个命令行，会自动启动安装程序。 ################################################################################ ## myInit.R ## 初始化设置 # __1. 账号、密码__ # 2. 文件路径 # 3. 需要的软件包 # __4. 参数设置__ ################################################################################ ## ============================================================================= pkgs \u003c- c(\"data.table\",\"parallel\",\"downloader\",\"magrittr\") ##------------------------------------------------------------------------------ if(length(pkgs[!pkgs %in% installed.packages()]) != 0){ sapply(pkgs[!pkgs %in% installed.packages()], install.packages) } ##------------------------------------------------------------------------------ sapply(pkgs, require, character.only = TRUE) 同时，我建议使用 Chrome 浏览器，并安装一款非常好用的HTML 页面解析插件 SelectGadget，可以用来探测网页元素，方便我们查找相应的路径。 日行情数据中金所网站提供了所有股指期货的历史行情数据： IC IF IH T TF ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:0:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 识别文件链接为了找到行情数据对应的文件链接，我们首先点击左栏的 行情数据/日统计，得到当日收盘后统计的理日行情数据列表。 日行情数据所在 这里，我们可以有两种方法来下载得到数据 直接读取页面数据，但只适用获得当日的收盘日行情数据，对于历史的数据，则无法读取。 查找相关的文件链接，查看交易所是否提供了直接可下载的链接。一般而言，文件命令规则会与交易日期相关，从而满足我们下载历史数据的要求。 让我们把页面往下拽一拽，会有惊喜哦。 中金所提供了附件下载 这个链接即是中金所存储日行情数据的文件所在，可以直接点击下载。 当然，如果只是手动点击下载的话（估计右手要变残废），这么简单粗暴的手段，我们就不用在花费大力气来探讨了。 怎么去查找这个文件的具体链接地址呢？我们现在只是看到一个网页页面，似乎无从下手。如果就这样轻易放弃，那也太不是我的风格了。幸好，我对网页设计也是有所了解，也独立搭建过个人博客（包括但不限于本博客网站），其实这个看似页面的“东西”，后面隐藏了许多我们看不到的“东西”。 这里我使用 Chrome，可以右击鼠标，选择 Inspect，会弹出网页的具体元素。有没有被惊喜到？原来我们看见的网站页面，竟然是有这样一对代码组合而成的。使用 Ctrl + F 查找关键字 日行情数据，我们发现，原来这个文件确实指向了一个具体的链接地址。 查看HTML元素 对于链接地址，一般有两种形式 静态链接：即链接指向一个相对路径，这个路径是显式的。比如我们在上面看到的链接，显示一个相对根目录的相对路径，href=\"./201710/17/20171017_1.csv\"，文件路径是显式、具体的。我们可以直接在浏览器打开这个文件来查看，或者使用 R 直接读取文件数据。 动态链接：即由一段 Javascript 来控制操作，只有鼠标点击才能进行下一步的操作如下载。对于这类链接的解析，我们需要使用脚本解析或者模拟鼠标操作（我会在另外一篇博客讨论如何使用 Selenium 模拟鼠标下载大商所的数据）。 如此一来，我们便知道需要下载的文件链接全称是 根目录：http://www.cffex.com.cn/sj/hqsj/rtj 相对路径：/201710/17/20171017_1.csv ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:1:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 文件命名规则文件的命令规律果然是以交易日为基础，在上面稍作变动，即 /yyyymm/dd/yyyymmdd_1.csv。对于历史的数据，我们只要使用循环来编写后面的相对文件路径，即可获取所有的历史数据文件所对应的网页链接。 这里我使用到了之前介绍的中国期货交易日历表，使用这个日历表来生成相应的文件路径。 ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:2:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 行情数据我们先来看看现实是不是真是如我们所预想的，包含所有的行情数据。首先来读取某一天的数据文件看看 Sys.setlocale(\"LC_ALL\", 'en_US.UTF-8') [1] \"LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=zh_CN.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=zh_CN.UTF-8;LC_IDENTIFICATION=C\" library(magrittr) library(readr) exchURL \u003c- 'http://www.cffex.com.cn/sj/hqsj/rtj' tempURL \u003c- '/201710/17/20171017_1.csv' dataFile \u003c- paste(exchURL, tempURL, sep = '') dt \u003c- dataFile %\u003e% read_csv(., locale = locale(encoding = \"GB18030\")) Parsed with column specification: cols( 合约代码 = col_character(), 今开盘 = col_double(), 最高价 = col_double(), 最低价 = col_double(), 成交量 = col_double(), 成交金额 = col_double(), 持仓量 = col_double(), 持仓变化 = col_double(), 今收盘 = col_double(), 今结算 = col_double(), 前结算 = col_double(), 涨跌1 = col_double(), 涨跌2 = col_double(), `隐含波动率(%)` = col_character(), Delta = col_character() ) Warning: 6 parsing failures. row col expected actual file 5 -- 15 columns 14 columns 'http://www.cffex.com.cn/sj/hqsj/rtj/201710/17/20171017_1.csv' 10 -- 15 columns 14 columns 'http://www.cffex.com.cn/sj/hqsj/rtj/201710/17/20171017_1.csv' 15 -- 15 columns 14 columns 'http://www.cffex.com.cn/sj/hqsj/rtj/201710/17/20171017_1.csv' 19 -- 15 columns 14 columns 'http://www.cffex.com.cn/sj/hqsj/rtj/201710/17/20171017_1.csv' 23 -- 15 columns 14 columns 'http://www.cffex.com.cn/sj/hqsj/rtj/201710/17/20171017_1.csv' ... ... .......... .......... .............................................................. See problems(...) for more details. print(dt) # A tibble: 24 × 15 合约代码 今开盘 最高价 最低价 成交量 成交金额 持仓量 持仓变化 今收盘 今结算 前结算 涨跌1 涨跌2 `隐含波动率(%)` Delta \u003cchr\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cdbl\u003e \u003cchr\u003e \u003cchr\u003e 1 IC1710 6600 6653. 6584. 10644 1407964. 13681 -2199 6592. 6604. 6628. -35.8 -23.4 -- -- 2 IC1711 6568. 6618 6553. 3270 430422. 6064 1692 6561. 6571. 6597. -36.6 -26 -- -- 3 IC1712 6544 6597. 6523. 1041 136429. 7769 236 6531 6542 6572. -41.2 -30.2 -- -- 4 IC1803 6489 6525. 6463. 277 35942. 2124 55 6470 6480. 6511. -40.8 -30.4 -- -- 5 小计 NA NA NA 15232 2010756. 29638 -216 NA NA NA NA NA \u003cNA\u003e \u003cNA\u003e 6 IF1710 3914 3928. 3909. 10887 1279659. 16859 -3096 3911 3917. 3924 -13 -7.4 -- -- 7 IF1711 3913 3925 3906 3723 437320. 7226 2224 3906 3913 3922. -15.6 -8.6 -- -- 8 IF1712 3911 3923. 3904 1293 151760. 12518 170 3906 3910. 3919. -13.2 -8.8 -- -- 9 IF1803 3918. 3923 3904. 298 34976. 3509 10 3907. 3911 3920. -13.2 -8.8 -- -- 10 小计 NA NA NA 16201 1903714. 40112 -692 NA NA NA NA NA \u003cNA\u003e \u003cNA\u003e # … with 14 more rows ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:3:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 并行下载哦科，到此为止，所有的材料已经准备完毕： 使用交易日历表生成相对路径，并与根目录结合，生成所有的历史日行情数据文件链接 读取的文件确认为目标数据 接下来，我们只需要打开 R 中的并行计算模式，即可开启下载中金所所有的日行情数据了。 dataPath 是下载文件的保存路径，根据需要来修改 可以根据操作系统的性能不同，设置开启的并行计算核数，使用命令 detectCores() 来获取当前操作系统的最大 CPU 核数 我使用的是 Linux 操作系统，在该操作系统下，parallel 开启 FORK 并行计算模式，能够增强性能。如果是在 Windows 操作系统，需要开启 PSOCK 模式，同时记得在工作区添加软件包与变量 download.file 有一个参数 mode，在 Linux 操作系统休不需要设置，当时在 Windows 操作系统下需要设置为 wb， 否则保存的文件是空的。我这里为了跨平台使用，统一设置为 wb 运行完成后，记得使用命令 stopCluster() 关闭并行模式，否则后续的运算会比较占用资源 ################################################################################ ## STEP 1: 获取对应的交易日期 ################################################################################ ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarDay = substr(days,7,8))] exchURL \u003c- \"http://www.cffex.com.cn/sj/hqsj/rtj/\" dataPath \u003c- '/home/william/Documents/Exchange/CFFEX/' # dataPath \u003c- \"./data/Bar/Exchange/CFFEX/\" ################################################################################ ################################################################################ ## STEP 2: 开启并行计算模式，下载数据 ################################################################################ cl \u003c- makeCluster(round(detectCores()/4), type='FORK') parSapply(cl, 1:nrow(ChinaFuturesCalendar), function(i){ tempDir \u003c- paste0(dataPath,exchCalendar[i,calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir) tempURL \u003c- paste0(exchURL, exchCalendar[i,calendarYearMonth],'/', exchCalendar[i,calendarDay],'/', exchCalendar[i,days],'_1.csv') destFile \u003c- paste0(tempDir,'/',exchCalendar[i,days],'.csv') while ( !file.exists(destFile) | file.size(destFile) \u003c 200) { try(download.file(tempURL, destFile, mode = 'wb')) } }) stopCluster(cl) 成交持仓排名利用相同的技术手段，我们也可以从中金所网站下载当日收盘后的期货公司成交持仓排名数据。这份数据包含了成交量与当日收盘后持仓排名前20的期货公司详细数据。通过分析持仓数量变动，我们可以挖掘到各个期货公司主力资金对市场走势的情绪判断，从而对未来的期货价格走势产生一定的影响。 中金所在每日收盘后公布成交排名 ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:4:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 识别文件链接我们点击某一天的交易日期，然后点击查询，即可看到当日的各股指期货品种的成交持仓排名数据。 显示排名前20的期货公司成交数据 参考日行情部分的方法，我们使用 Chrome 的 Inspect 功能来解析数据文件所对应的链接。可以看到，成交持仓排名的数据文件命名规则是 yyyymm/dd/\u003cid\u003e_1.csv，其中 id 就是合约品种代码。如此一来，我们也是可以利用中国期货交易日历来生成所有的历史文件对应的网站链接。 查看数据文件的相对链接路径 与日行情数据不同，成交持仓排名的数据是分合约品种来设定的，即每一个合约品种单独保存为一个数据文件。由于不同的股指期货品种上市日期不一样，这里我们需要单独设置。 ################################################################################ ## CFFEX: 中期所 ## ## 1. IC：中证500 --\u003e 2015-04-16 ## 2. IF：沪深300 --\u003e 2010-04-16 ## 3. IH：上证50 --\u003e 2015-04-16 ## 4. T ：10年期国债 --\u003e 2015-03-20 ## 5. TF：5年期国债 --\u003e 2013-09-06 ################################################################################ ## ----------------------------------------------------------------------------- productSet \u003c- data.table(productID = c('IC','IF','IH','T','TF'), startDate = c('20150416','20100416','20150416', '20150320','20130906')) productCalenar \u003c- lapply(productSet[,productID], function(id) { res \u003c- exchCalendar[days \u003e= productSet[productID == id, startDate]] %\u003e% .[, productID := id] }) %\u003e% rbindlist() ## ----------------------------------------------------------------------------- ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:5:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 成交持仓排名数据我们来检查一下数据是不是正确的。 exchURL \u003c- 'http://www.cffex.com.cn/sj/ccpm' tempURL \u003c- '/201710/17/IF_1.csv' dataFile \u003c- paste(exchURL, tempURL, sep = '') dt \u003c- dataFile %\u003e% read_csv(., locale = locale(encoding = \"GB18030\")) print(dt) # A tibble: 46 × 9 交易日 合约 会员类别 总成交量 比上交易日增减 总持买单量 比上交易日增减_1 总持卖单量 比上一交易日增减 \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e \u003cchr\u003e 1 20171017 IF1710 期货公司 21774 -1166 16859 -3096 16859 -3096 2 20171017 IF1710 非期货公司 0 0 0 0 0 0 3 20171017 IF1712 期货公司 2586 -530 12518 170 12518 170 4 20171017 IF1712 非期货公司 0 0 0 0 0 0 5 交易日 合约 排名 成交量排名 \u003cNA\u003e \u003cNA\u003e 持买单量排名 \u003cNA\u003e \u003cNA\u003e 6 \u003cNA\u003e \u003cNA\u003e \u003cNA\u003e 会员简称 成交量 比上一交易日增减 会员简称 持买单量 比上一交易日增减 7 20171017 IF1710 1 中信期货 2670 19 中信期货 1704 -444 8 20171017 IF1710 2 国泰君安 1269 -100 五矿经易 1595 -73 9 20171017 IF1710 3 银河期货 1163 172 国泰君安 1448 -63 10 20171017 IF1710 4 海通期货 1055 -6 申银万国 721 -197 # … with 36 more rows ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:6:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":" 并行下载具体的说明参照日行情的并行下载说明。这里直接上干货。 ################################################################################ ## cffex.R ## 用于下载中金所期货公司持仓排名数据 ## ## Author: William Fang ## Date : 2017-08-21 ################################################################################ ################################################################################ ## STEP 0: 初始化，载入包，设定初始条件 ################################################################################ rm(list = ls()) logMainScript \u003c- c(\"cffex.R\") setwd('/home/fl/myData/') suppressMessages({ source('./R/Rconfig/myInit.R') }) ################################################################################ ## STEP 1: 获取对应的交易日期 ################################################################################ ChinaFuturesCalendar \u003c- fread(\"./data/ChinaFuturesCalendar/ChinaFuturesCalendar.csv\", colClasses = list(character = c(\"nights\",\"days\"))) %\u003e% .[days \u003c format(Sys.Date(),'%Y%m%d')] exchCalendar \u003c- ChinaFuturesCalendar[,\":=\"(calendarYear = substr(days,1,4), calendarYearMonth = substr(days,1,6), calendarMonth = substr(days,5,6), calendarDay = substr(days,7,8))] exchURL \u003c- \"http://www.cffex.com.cn/fzjy/ccpm/\" dataPath \u003c- '/home/william/Documents/oiRank/CFFEX/' # dataPath \u003c- \"./data/oiRank/CFFEX/\" ################################################################################ ## CFFEX: 中期所 ## ## 1. IC：中证500 --\u003e 2015-04-16 ## 2. IF：沪深300 --\u003e 2010-04-16 ## 3. IH：上证50 --\u003e 2015-04-16 ## 4. T ：10年期国债 --\u003e 2015-03-20 ## 5. TF：5年期国债 --\u003e 2013-09-06 ################################################################################ ## ----------------------------------------------------------------------------- productSet \u003c- data.table(productID = c('IC','IF','IH','T','TF'), startDate = c('20150416','20100416','20150416', '20150320','20130906')) productCalenar \u003c- lapply(productSet[,productID], function(id) { res \u003c- exchCalendar[days \u003e= productSet[productID == id, startDate]] %\u003e% .[, productID := id] }) %\u003e% rbindlist() ## ----------------------------------------------------------------------------- ## ----------------------------------------------------------------------------- cffexData \u003c- function(calendarYear, calendarMonth, calendarDay, productID) { tempURL \u003c- paste0(exchURL, paste0(calendarYear, calendarMonth), '/', calendarDay, '/', productID,'_1.csv') destFile \u003c- paste0(dataPath, calendarYear, '/', paste0(calendarYear, calendarMonth, calendarDay), '_',productID,'.csv') ## ------------------------------------------------------------------------- while(! file.exists(destFile) | file.size(destFile) \u003c 1000){ try(download.file(tempURL, destFile, mode = 'wb')) } ## ------------------------------------------------------------------------- } ## ----------------------------------------------------------------------------- ################################################################################ ## STEP 2: 开启并行计算模式，下载数据 ################################################################################ cl \u003c- makeCluster(max(round(detectCores()*3/4),4), type='FORK') parSapply(cl, 1:nrow(productCalenar), function(i){ ## --------------------------------------------------------------------------- tempDir \u003c- paste0(dataPath, productCalenar[i, calendarYear]) if (!dir.exists(tempDir)) dir.create(tempDir, recursive = TRUE) productCalenar[i, cffexData(calendarYear, calendarMonth, calendarDay, productID)] ## --------------------------------------------------------------------------- }) stopCluster(cl) ","date":"2017-10-23","objectID":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/:7:0","tags":["R","数据","爬虫","交易所"],"title":"交易所数据爬虫之中金所","uri":"/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/"},{"categories":["Data"],"content":"对于业已清理干净的中国期货数据，需要配合数据库对其进行高性能的储存、权限设置、关键字段索引、数据提取等管理。","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":"本篇作为期货数据系列的收官，介绍如何使用当今最流行的数据库 MySQL 进行高性能的运维管理。 MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。 一个完整的期货数据库对于一个完整的期货数据库，主要包括以下部分信息： tick：存储分笔数据 minute：存储1分钟的行情数据 daily：存储日行情数据，包括夜盘、日盘与全天 info：存储期货合约信息，主要有合约对应的交易所代码、合约乘数、最小变动价格(PriceTick)、多空头保证金比例等 breakTime：储存接收得到的数据是否存在断点的情况 log：系统处理日志 代码","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:0:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" 建立数据库 ################################################################################ ## 用于建立 FromDC 的数据表。 ## 包括： ## 1. tick ## 2. minute ## 3. daily ## 4. info ## 5. breakTime ## 6. log ################################################################################ CREATE DATABASE `FromDC` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; ","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:1:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" tick CREATE TABLE china_futures_HFT.colo1_ctpmdprod1( #---------------------------------------------------- #--- DateTime Information --------------------------- #---------------------------------------------------- Timestamp CHAR(28) NOT NULL, TradingDay DATE NOT NULL, UpdateTime TIME NOT NULL, UpdateMillisec SMALLINT UNSIGNED NULL, #---------------------------------------------------- #--- #---------------------------------------------------- InstrumentID CHAR(20) NOT NULL, #---------------------------------------------------- #--- PRICE INFORMATION ------------------------------ #---------------------------------------------------- LastPrice DECIMAL(15,5) NULL, # OpenPrice DECIMAL(15,5) NULL, # HighestPrice DECIMAL(15,5) NULL, # LowestPrice DECIMAL(15,5) NULL, Volume INT UNSIGNED NULL, Turnover DECIMAL(30,5) NULL, OpenInterest INT UNSIGNED NULL, # ClosePrice DECIMAL(15,5) NULL, # SettlementPrice DECIMAL(15,5) NULL, UpperLimitPrice DECIMAL(15,5) NULL, LowerLimitPrice DECIMAL(15,5) NULL, #---------------------------------------------------- #--- BID INFORMATION -------------------------------- #---------------------------------------------------- BidPrice1 DECIMAL(15,5) NULL, BidVolume1 INT UNSIGNED NULL, BidPrice2 DECIMAL(15,5) NULL, BidVolume2 INT UNSIGNED NULL, BidPrice3 DECIMAL(15,5) NULL, BidVolume3 INT UNSIGNED NULL, BidPrice4 DECIMAL(15,5) NULL, BidVolume4 INT UNSIGNED NULL, BidPrice5 DECIMAL(15,5) NULL, BidVolume5 INT UNSIGNED NULL, #---------------------------------------------------- #--- ASK INFORMATION -------------------------------- #---------------------------------------------------- AskPrice1 DECIMAL(15,5) NULL, AskVolume1 INT UNSIGNED NULL, AskPrice2 DECIMAL(15,5) NULL, AskVolume2 INT UNSIGNED NULL, AskPrice3 DECIMAL(15,5) NULL, AskVolume3 INT UNSIGNED NULL, AskPrice4 DECIMAL(15,5) NULL, AskVolume4 INT UNSIGNED NULL, AskPrice5 DECIMAL(15,5) NULL, AskVolume5 INT UNSIGNED NULL, #---------------------------------------------------- #--- Numeric Transformation ------------------------- #---------------------------------------------------- NumericRecvTime DECIMAL(15,6) NOT NULL, NumericExchTime DECIMAL(15,5) NOT NULL, DeltaVolume INT UNSIGNED, DeltaTurnover DECIMAL(30,5), DeltaOpenInterest INT UNSIGNED NULL, #---------------------------------------------------- #--- KEY SETTING ------------------------------------ #---------------------------------------------------- PRIMARY KEY (TradingDay,NumericRecvTime,NumericExchTime,InstrumentID) )DEFAULT CHARSET=utf8; ## Partition ALTER TABLE china_futures_HFT.colo1_ctpmdprod1 PARTITION BY RANGE( TO_DAYS(TradingDay) )( #--------------------------------------------------------------------------- PARTITION p_2016_01 VALUES LESS THAN (TO_DAYS('2016-02-01')), PARTITION p_2016_02 VALUES LESS THAN (TO_DAYS('2016-03-01')), PARTITION p_2016_03 VALUES LESS THAN (TO_DAYS('2016-04-01')), PARTITION p_2016_04 VALUES LESS THAN (TO_DAYS('2016-05-01')), PARTITION p_2016_05 VALUES LESS THAN (TO_DAYS('2016-06-01')), PARTITION p_2016_06 VALUES LESS THAN (TO_DAYS('2016-07-01')), PARTITION p_2016_07 VALUES LESS THAN (TO_DAYS('2016-08-01')), PARTITION p_2016_08 VALUES LESS THAN (TO_DAYS('2016-09-01')), PARTITION p_2016_09 VALUES LESS THAN (TO_DAYS('2016-10-01')), PARTITION p_2016_10 VALUES LESS THAN (TO_DAYS('2016-11-01')), PARTITION p_2016_11 VALUES LESS THAN (TO_DAYS('2016-12-01')), PARTITION p_2016_12 VALUES LESS THAN (TO_DAYS('2017-01-01')), #--------------------------------------------------------------------------- #--------------------------------------------------------------------------- PARTITION p_2017_01 VALUES LESS THAN (TO_DAYS('2017-02-01')), PARTITION p_2017_02 VALUES LESS THAN (TO_DAYS('2017-03-01')), PARTITION p_2017_03 VALUES LESS THAN (TO_DAYS('2017-04-01')), PARTITION p_2017_04 VALUES LESS THAN (TO_DAYS('2017-05-01')), PARTITION p_2017_05 VALUES LESS THAN (TO_DAYS('2017-06-01')), PARTITION p_2017_06 VALUES LESS THAN (TO_DAYS('2017-07-01')), PARTITION p_2017_07 VALUES LESS ","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:2:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" minute ################################################################################～～～～～～～～～～～～～ ## FromDC.minute ## FromDC.minute ################################################################################～～～～～～～～～～～～～ CREATE TABLE FromDC.minute( TradingDay DATE NOT NULL, ## 交易日期 Minute TIME NOT NULL, ## 分钟，格式为==\u003e \"HH:MM:SS\", 与 Wind 数据库类似 NumericExchTime DECIMAL(15,5) NOT NULL, ## 分钟的数值格式，以 18:00::00 为正负界限， # ## 注意：取的是有 tick 的第一个，不一定是这个分钟开始的值 # ## 为了方便 order： # ## 1. 负值表示夜盘的分钟 # ## 2. 正值表示日盘的分钟 InstrumentID CHAR(30) NOT NULL, ## 合约名称 #------------------------------------------------------ OpenPrice DECIMAL(15,5) NULL, ## 开盘价 HighPrice DECIMAL(15,5) NULL, ## 最高价 LowPrice DECIMAL(15,5) NULL, ## 最低价 ClosePrice DECIMAL(15,5) NULL, ## 收盘价 #----------------------------------------------------- Volume INT UNSIGNED NULL, ## 成交量 Turnover DECIMAL(30,5) NULL, ## 成交额 #----------------------------------------------------- OpenOpenInterest INT UNSIGNED NULL, ## 分钟的开仓的开盘量 HighOpenInterest INT UNSIGNED NULL, ## 分钟的开仓的最高量 LowOpenInterest INT UNSIGNED NULL, ## 分钟的开仓的最低量 CloseOpenInterest INT UNSIGNED NULL, ## 分钟的开仓的收盘量，即 position #----------------------------------------------------- UpperLimitPrice DECIMAL(15,5) NULL, ## 当日的有效最高报价 LowerLimitPrice DECIMAL(15,5) NULL, ## 当日的有效最低报价 SettlementPrice DECIMAL(15,5) NULL, ## 当日交易所公布的结算价 #----------------------------------------------------- PRIMARY KEY (TradingDay, Minute, InstrumentID) ## 主键唯一，重复不可输入 ); ##----------- INDEX --------------------------------------------------------- ## CREATE INDEX index_minute ON FromDC.minute (TradingDay, Minute, InstrumentID); ## -------------------------------------------------------------------------- ## ##----------- PARTITIONS ---------------------------------------------------- ## ALTER TABLE FromDC.minute PARTITION BY RANGE( TO_DAYS(TradingDay) )( #--------------------------------------------------------------------------- PARTITION p_2010_01 VALUES LESS THAN (TO_DAYS('2010-02-01')), PARTITION p_2010_02 VALUES LESS THAN (TO_DAYS('2010-03-01')), PARTITION p_2010_03 VALUES LESS THAN (TO_DAYS('2010-04-01')), PARTITION p_2010_04 VALUES LESS THAN (TO_DAYS('2010-05-01')), PARTITION p_2010_05 VALUES LESS THAN (TO_DAYS('2010-06-01')), PARTITION p_2010_06 VALUES LESS THAN (TO_DAYS('2010-07-01')), PARTITION p_2010_07 VALUES LESS THAN (TO_DAYS('2010-08-01')), PARTITION p_2010_08 VALUES LESS THAN (TO_DAYS('2010-09-01')), PARTITION p_2010_09 VALUES LESS THAN (TO_DAYS('2010-10-01')), PARTITION p_2010_10 VALUES LESS THAN (TO_DAYS('2010-11-01')), PARTITION p_2010_11 VALUES LESS THAN (TO_DAYS('2010-12-01')), PARTITION p_2010_12 VALUES LESS THAN (TO_DAYS('2011-01-01')), #--------------------------------------------------------------------------- #--------------------------------------------------------------------------- PARTITION p_2011_01 VALUES LESS THAN (TO_DAYS('2011-02-01')), PARTITION p_2011_02 VALUES LESS THAN (TO_DAYS('2011-03-01')), PARTITION p_2011_03 VALUES LESS THAN (TO_DAYS('2011-04-01')), PARTITION p_2011_04 VALUES LESS THAN (TO_DAYS('2011-05-01')), PARTITION p_2011_05 VALUES LESS THAN (TO_DAYS('2011-06-01')), PARTITION p_2011_06 VALUES LESS THAN (TO_DAYS('2011-07-01')), PARTITION p_2011_07 VALUES LESS THAN (TO_DAYS('2011-08-01')), PARTITION p_2011_08 VALUES LESS THAN (TO_DAYS('2011-09-01')), PARTITION p_2011_09 VALUES LESS THAN (TO_DAYS('2011-10-01')), PARTITION p_2011_10 VALUES LESS THAN (TO_DAYS('2011-11-01')), PARTITION p_2011_11 VALUES LESS THAN (TO_DAYS('2011-12-01')), PARTITION p_2011_12 VALUES LESS THAN (TO_DAYS('2012-01-01')), #--------------------------------------------------------------------------- #--------------------------------------------------------------------------- PARTITION p_2012_01 VALUES LESS THAN (TO_DAYS('2012-02-01')), PARTITION p_2012_02 VALUES LESS THAN (TO_DAYS('2012-03-01')), PARTITION p_2012_03 VALUES LESS THAN (TO_DAYS('2012-04-01')), PARTITION p_2012_04 VALUES LESS THAN (TO_DAYS('2012-05-01')), PARTITION p_2012_05 VAL","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:3:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" daily ################################################################################～～～～～～～～～～～～ ## FromDC.daily ## FromDC.daily ################################################################################～～～～～～～～～～～～ CREATE TABLE FromDC.daily( TradingDay DATE NOT NULL, ## 交易日期 Sector CHAR(20) NOT NULL, ## 日期属性: # ## 1. 只含日盘: Sector = 'day' # ## 2. 只含夜盘: Sector = 'nights' # ## 3. 全天，包含日盘、夜盘: Sector = 'allday' InstrumentID CHAR(30) NOT NULL, ## 合约名称 #------------------------------------------------------ OpenPrice DECIMAL(15,5) NULL, ## 开盘价 HighPrice DECIMAL(15,5) NULL, ## 最高价 LowPrice DECIMAL(15,5) NULL, ## 最低价 ClosePrice DECIMAL(15,5) NULL, ## 收盘价 #----------------------------------------------------- Volume INT UNSIGNED NULL, ## 成交量 Turnover DECIMAL(30,5) NULL, ## 成交额 #----------------------------------------------------- OpenOpenInterest INT UNSIGNED NULL, ## 当日的开仓的开盘量 HighOpenInterest INT UNSIGNED NULL, ## 当日的开仓的最高量 LowOpenInterest INT UNSIGNED NULL, ## 当日的开仓的最低量 CloseOpenInterest INT UNSIGNED NULL, ## 当日的开仓的收盘量，即 position #----------------------------------------------------- UpperLimitPrice DECIMAL(15,5) NULL, ## 当日的有效最高报价 LowerLimitPrice DECIMAL(15,5) NULL, ## 当日的有效最低报价 SettlementPrice DECIMAL(15,5) NULL, ## 当日交易所公布的结算价 #----------------------------------------------------- PRIMARY KEY (TradingDay, Sector, InstrumentID) ## 主键唯一，重复不可输入 ); ##----------- INDEX --------------------------------------------------------- ## CREATE INDEX index_daily ON FromDC.daily (TradingDay, Sector, InstrumentID); ## -------------------------------------------------------------------------- ## ##----------- PARTITIONS ---------------------------------------------------- ## ALTER TABLE FromDC.daily PARTITION BY RANGE( TO_DAYS(TradingDay) )( #--------------------------------------------------------------------------- PARTITION p_2010_01 VALUES LESS THAN (TO_DAYS('2010-02-01')), PARTITION p_2010_02 VALUES LESS THAN (TO_DAYS('2010-03-01')), PARTITION p_2010_03 VALUES LESS THAN (TO_DAYS('2010-04-01')), PARTITION p_2010_04 VALUES LESS THAN (TO_DAYS('2010-05-01')), PARTITION p_2010_05 VALUES LESS THAN (TO_DAYS('2010-06-01')), PARTITION p_2010_06 VALUES LESS THAN (TO_DAYS('2010-07-01')), PARTITION p_2010_07 VALUES LESS THAN (TO_DAYS('2010-08-01')), PARTITION p_2010_08 VALUES LESS THAN (TO_DAYS('2010-09-01')), PARTITION p_2010_09 VALUES LESS THAN (TO_DAYS('2010-10-01')), PARTITION p_2010_10 VALUES LESS THAN (TO_DAYS('2010-11-01')), PARTITION p_2010_11 VALUES LESS THAN (TO_DAYS('2010-12-01')), PARTITION p_2010_12 VALUES LESS THAN (TO_DAYS('2011-01-01')), #--------------------------------------------------------------------------- #--------------------------------------------------------------------------- PARTITION p_2011_01 VALUES LESS THAN (TO_DAYS('2011-02-01')), PARTITION p_2011_02 VALUES LESS THAN (TO_DAYS('2011-03-01')), PARTITION p_2011_03 VALUES LESS THAN (TO_DAYS('2011-04-01')), PARTITION p_2011_04 VALUES LESS THAN (TO_DAYS('2011-05-01')), PARTITION p_2011_05 VALUES LESS THAN (TO_DAYS('2011-06-01')), PARTITION p_2011_06 VALUES LESS THAN (TO_DAYS('2011-07-01')), PARTITION p_2011_07 VALUES LESS THAN (TO_DAYS('2011-08-01')), PARTITION p_2011_08 VALUES LESS THAN (TO_DAYS('2011-09-01')), PARTITION p_2011_09 VALUES LESS THAN (TO_DAYS('2011-10-01')), PARTITION p_2011_10 VALUES LESS THAN (TO_DAYS('2011-11-01')), PARTITION p_2011_11 VALUES LESS THAN (TO_DAYS('2011-12-01')), PARTITION p_2011_12 VALUES LESS THAN (TO_DAYS('2012-01-01')), #--------------------------------------------------------------------------- #--------------------------------------------------------------------------- PARTITION p_2012_01 VALUES LESS THAN (TO_DAYS('2012-02-01')), PARTITION p_2012_02 VALUES LESS THAN (TO_DAYS('2012-03-01')), PARTITION p_2012_03 VALUES LESS THAN (TO_DAYS('2012-04-01')), PARTITION p_2012_04 VALUES LESS THAN (TO_DAYS('2012-05-01')), PARTITION p_2012_05 VALUES LESS THAN (TO_DAYS('2012-06-01')), PARTITION p_2012_06 VALUES LESS THAN (TO_DAYS('2012-07-","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:4:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" info ################################################################################～～～～～～～～～～～～ ## vnpy.info ## vnpy.info ################################################################################～～～～～～～～～～～～ CREATE TABLE vnpy.info_XiFu_FromAli( TradingDay DATE NOT NULL, ## 交易日期 InstrumentID CHAR(30) NOT NULL, ## 合约名称 InstrumentName CHAR(50) NULL, ## 合约名称 ProductClass ChAR(20) NULL, ## 合约类型 ExchangeID CHAR(20) NULL, ## 交易所 #----------------------------------------------------- PriceTick DECIMAL(10,5) NOT NULL, VolumeMultiple mediumint NOT NULL, ShortMarginRatio DECIMAL(5,4) NULL, LongMarginRatio DECIMAL(5,4) NULL, # ---------------------------------------------------- OptionType CHAR(20) NULL, Underlying CHAR(20) NULL, StrikePrice DECIMAL(15,5) NULL, #----------------------------------------------------- PRIMARY KEY (TradingDay, InstrumentID) ## 主键唯一，重复不可输入 )DEFAULT CHARSET=utf8; ##----------- INDEX --------------------------------------------------------- ## CREATE INDEX index_info_XiFu_FromAli ON vnpy.info_XiFu_FromAli (TradingDay, InstrumentID); ## -------------------------------------------------------------------------- ## ","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:5:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" breakTime ################################################################################～～～～～～～～～～～～ ## dev.FromDC_breakTime ## dev.FromDC_breakTime ################################################################################～～～～～～～～～～～～ CREATE TABLE FromDC.breakTime( TradingDay DATE NOT NULL, ## 交易日期 BreakBeginTime TIME NOT NULL, ## 数据中断开始的时间 BreakEndTime TIME NOT NULL, ## 数据中断结束的时间 #----------------------------------------------------- DataSource CHAR(20) NOT NULL, ## 原始数据文件的来源，为主要目录 DataFile CHAR(20) NOT NULL, ## 原始数据的文件，为 csv 文件/路径 #----------------------------------------------------- PRIMARY KEY (TradingDay, BreakBeginTime, BreakEndTime, DataSource, DataFile) ## 主键唯一，重复不可输入 ); ","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:6:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":" log ################################################################################～～～～～～～～～～～～ ## dev.FromDC_log ## dev.FromDC_log ################################################################################～～～～～～～～～～～～ CREATE TABLE FromDC.log( TradingDay DATE NOT NULL, ## 交易日期 Sector CHAR(20) NOT NULL, ## 输入的数据类型： # ## 1. 'daily':主要处理日数据 # ## 2. 'minute':分钟级别的数据 #----------------------------------------------------- User TINYTEXT NULL, ## 哪个账户在录入数据 MysqlDB TINYTEXT NULL, ## 数据输入到哪个数据库 DataSource TINYTEXT NOT NULL, ## 原始数据文件的来源，为主要目录 DataFile TEXT NOT NULL, ## 原始数据的文件，为 csv 文件/路径 #----------------------------------------------------- RscriptMain TEXT NOT NULL, ## 使用的主要 R 脚本文件，为最上层的文件，包括需要的包、相应的配置 RscriptSub TEXT NOT NULL, ## 使用的次一级 R 脚本，主要包括编写的函数即各种算法 ProgBeginTime DATETIME NOT NULL, ## 程序开始运行的时间 ProgEndTime DATETIME NOT NULL, ## 程序结束运行的时间 Results TEXT NULL, ## 对数据哭修改的内容记录 Remarks TEXT NULL, ## 备注，方便日后添加说明 #----------------------------------------------------- PRIMARY KEY (TradingDay, Sector) ## 主键唯一，重复不可输入 ); ","date":"2017-10-21","objectID":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/:7:0","tags":["Futures","期货","数据","R"],"title":"期货数据：MySQL 数据库管理","uri":"/archives/2017-10-21-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"categories":["Data"],"content":"介绍如何把 `Tick Data` 转化为 `Bar Data`。","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":"继续 期货数据 系列。上一期我们已经从数据文件读取相关的数据，今天来介绍如何把 Tick Data 转化为 Bar Data。 通过清洗数据，获得真实、可靠、符合逻辑的干净数据 通过分笔数据来计算汇总日间（daily）的OHLC、Volume、Turnover、OI、SettlementPrice 通过计算分笔数据的 Delta 来汇总分钟之内的 OHLC、Volume、Turnover 对于每一笔交易的数据，我们要去其是真实成交的记录，因此需要提取的是 \\(DeltaX \\neq 0\\) 的数据行 由于需要计算的分钟数据比较大，函数里面运用到了并行计算，默认开启 parallel: 我们采用的是 CentOS 服务器，默认开始的模式是 FORK cl \u003c- makeCluster(no.cores, type=\"FORK\") 如果在 Windows 操作系统，则需要开启 PSOCK 模式 Daily","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/:0:0","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":" 文件文件在 /Rconfig/dt2DailyBar.R ","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/:1:0","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":" 代码 ##! dt2DailyBar.R ## ## 功能： ## 用于把 tick data 的数据转化为 daily 的数据， ## 1. dt2DailyBar(dt,\"allday\")：全天的数据 ## 2. dt2DailyBar(dt,\"day\")：日盘的数据 ## 3. dt2DailyBar(dt,\"night\")：夜盘的数据 ############################################################################## ##---------------------------------------------------------------------------- ## 全天 ## dt_1d \u003c- dt2DailyBar(dt,\"allday\") ## 日盘 ## dt_day \u003c- dt2DailyBar(dt,\"day\") ## 夜盘 ## dt_night \u003c- dt2DailyBar(dt,\"night\") dt2DailyBar \u003c- function(x, daySector){ #----------------------------------------------------------------------------- if(daySector == \"allday\"){ temp \u003c- x }else{ if(daySector == \"day\"){##-------------- dn == \"night\" temp \u003c- x[UpdateTime %between% c(\"08:30:00\", \"15:30:00\")] }else{##-------------- dn == \"night\" temp \u003c- x[!(UpdateTime %between% c(\"08:30:00\", \"15:30:00\"))] } } #----------------------------------------------------------------------------- #----------------------------------------------------------------------------- tempRes \u003c- temp %\u003e% .[,.SD[,.( OpenPrice = ifelse(nrow(.SD[DeltaVolume != 0]) != 0, .SD[DeltaVolume != 0][1, ifelse(is.na(OpenPrice) | OpenPrice == 0 | daySector == 'day', LastPrice, OpenPrice)], .SD[Volume != 0][1, ifelse(is.na(OpenPrice) | OpenPrice == 0 | daySector == 'day', LastPrice, OpenPrice)]), HighPrice = ifelse(all(is.na(.SD$HighestPrice)) | sum(.SD$HighestPrice, na.rm=TRUE) == 0, max(.SD[Volume != 0]$LastPrice, na.rm=TRUE), max(.SD[Volume != 0]$HighestPrice, na.rm=TRUE)), LowPrice = ifelse(all(is.na(.SD$LowestPrice)) | sum(.SD$LowestPrice, na.rm=TRUE) == 0, min(.SD[Volume != 0][LastPrice !=0]$LastPrice, na.rm=TRUE), min(.SD[Volume != 0]$LowestPrice, na.rm=TRUE)), ## CZCE 郑商所的 ClosePrice 是有问题的，需要用到 LastPrice ClosePrice = ifelse(all(is.na(.SD$ClosePrice)) | sum(.SD$ClosePrice, na.rm=TRUE) == 0 | .SD[,nchar(unique(gsub('[a-zA-Z]','',InstrumentID))) == 3], .SD[Volume != 0][.N,LastPrice], .SD[Volume != 0][.N,ClosePrice]), #----------------------------------------------------------------------------- Volume = sum(.SD$DeltaVolume, na.rm=TRUE), Turnover = sum(.SD$DeltaTurnover, na.rm=TRUE), # ----------------------------------------------------------------------------- OpenOpenInterest = .SD[1,OpenInterest], HighOpenInterest = .SD[,max(OpenInterest, na.rm=TRUE)], LowOpenInterest = .SD[,min(OpenInterest, na.rm=TRUE)], CloseOpenInterest = .SD[.N,OpenInterest], # ----------------------------------------------------------------------------- UpperLimitPrice = unique(na.omit(.SD$UpperLimitPrice)), LowerLimitPrice = unique(na.omit(.SD$LowerLimitPrice)), SettlementPrice = .SD[.N, SettlementPrice] )], by = .(TradingDay, InstrumentID)] %\u003e% .[Volume != 0 \u0026 Turnover != 0] %\u003e% .[, Sector := daySector] #----------------------------------------------------------------------------- #\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e setcolorder(tempRes, c('TradingDay', 'Sector', colnames(tempRes)[2:(ncol(tempRes)-1)])) return(tempRes) #\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e } ############################################################################## Minute","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/:2:0","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":" 文件文件位于 /Rconfig/dt2MinuteBar.R ","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/:3:0","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":" 代码 ##! dt2MinuteBar.R ## ## 功能： ## 用于把 tick data 的数据转化为 分钟 的数据， ## 1. dt2MinuteBar(dt) ############################################################################## ##---------------------------------------------------------------------------- dt2MinuteBar \u003c- function(dt){ setkey(dt,InstrumentID) temp \u003c- lapply(unique(dt$InstrumentID), function(ii){ dt[ii] }) no.cores \u003c- max(round(detectCores()/3), 4) # no.cores \u003c- max(round(detectCores()/4), 4) cl \u003c- makeCluster(no.cores, type=\"FORK\") # clusterExport(cl, c(\"dt\",\"temp\")) # clusterEvalQ(cl,{library(data.table);library(magrittr)}) dtMinute \u003c- parLapply(cl, 1:length(temp), function(ii){ ## ------------------------------------------------------------------------- temp[[ii]] %\u003e% .[, .SD[,.( #----------------------------------------------------------------------------- NumericExchTime = .SD[1,NumericExchTime], #----------------------------------------------------------------------------- OpenPrice = .SD[DeltaVolume != 0][1,LastPrice], HighPrice = .SD[DeltaVolume != 0, max(LastPrice, na.rm=TRUE)], LowPrice = .SD[DeltaVolume != 0, min(LastPrice, na.rm=TRUE)], ClosePrice = ifelse(nrow(.SD[DeltaVolume != 0]) != 0, .SD[DeltaVolume != 0][nrow(.SD[DeltaVolume != 0]), LastPrice], .SD[.N,LastPrice]), #----------------------------------------------------------------------------- Volume = sum(.SD$DeltaVolume, na.rm=TRUE), Turnover = sum(.SD$DeltaTurnover, na.rm=TRUE), # ----------------------------------------------------------------------------- OpenOpenInterest = .SD[1,OpenInterest], HighOpenInterest =.SD[,max(OpenInterest, na.rm=TRUE)], LowOpenInterest = .SD[,min(OpenInterest, na.rm=TRUE)], CloseOpenInterest = .SD[.N,OpenInterest], # ----------------------------------------------------------------------------- UpperLimitPrice = unique(na.omit(.SD$UpperLimitPrice)), LowerLimitPrice = unique(na.omit(.SD$LowerLimitPrice)), SettlementPrice = .SD[.N, SettlementPrice] )], by = .(TradingDay, InstrumentID, Minute)] %\u003e% .[Volume != 0 \u0026 Turnover != 0] ## ------------------------------------------------------------------------- }) %\u003e% rbindlist() stopCluster(cl) return(dtMinute) } ############################################################################## ","date":"2017-10-20","objectID":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/:4:0","tags":["Futures","期货","数据","R"],"title":"期货数据：Tick 转 Bar","uri":"/archives/2017-10-20-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-tick-%E8%BD%AC-bar/"},{"categories":["Data"],"content":"介绍使用 `R` 编程语言读取期货数据文件，为后续数据清理、数据汇总做准备。","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":"在上一期的 「期货数据」 系列，我介绍了 数据清理要点。这一期，我将介绍如何使用统计编程语言 R 来读取从交易所接收下来的数据文件。 R 读取数据","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:0:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" 萝卜与青菜我在之前的一篇博客谈到了如何使用 readr 包读取包含中文字段的数据文件。同时，文件也提到，readr 对于读取大文件存在性能上的不足。因此，我日常仍然以另外一个软件包为主要工具。 这个神奇的软件包，就是大名鼎鼎的 data.table，提高了从读取数据、数据清洗、数据汇总到数据写入的全方位功能函数，而且难能可贵的是，它的处理效率惊人得强大。我估计会在以后单独写一篇博客来介绍这个扩展包。不过这里作为引子，请允许我隆重介绍今天的主角：fread。 ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:1:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" read_csv library(readr) help(read_csv) ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:2:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" fread library(data.table) help(fread) myFread.RmyFraed.R 是我编写的一个函数脚本，集成了以上两个函数的功能，并在此基础上对数据文件进行初步的判断： 如果数据文件支持使用 fread 进行读取，则优先使用这个函数，因为这个读取速度极快，对于一个 1Gb 大小的文件，大概只需要 10 ~ 15 秒` 如果对于部分数据文件，有可能由于里面包含中文字段、数据格式异常等问题，这时候就需要借助 read_csv 更加强大的底层支撑来处理，不过读取的速度稍微有所降低 ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:3:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" FromDC ## ============================================================================= ## FUN: myFreadBar ## 从　DC 那份数据文件读取数据，用于制作　Bar myFreadFromDC \u003c- function(x){ ## -- 如果使用　fread 可以正常读取数据文件 if(class(try(fread(x, showProgress = FALSE, fill = TRUE, nrows = 1000), silent = TRUE))[1] != \"try-error\"){ dt \u003c- fread(x, showProgress = TRUE, fill = TRUE, select = c('TradingDay','UpdateTime','UpdateMillisec' ,'InstrumentID','LastPrice' ,\"OpenPrice\", \"HighestPrice\", \"LowestPrice\",\"ClosePrice\" ,'Volume','Turnover','OpenInterest' ,'SettlementPrice','UpperLimitPrice','LowerLimitPrice' ,'BidPrice1','BidVolume1','BidPrice2','BidVolume2' ,'BidPrice3','BidVolume3','BidPrice4','BidVolume4' ,'BidPrice5','BidVolume5' ,'AskPrice1','AskVolume1','AskPrice2','AskVolume2' ,'AskPrice3','AskVolume3','AskPrice4','AskVolume4' ,'AskPrice5','AskVolume5','AveragePrice' ), colClasses = list(character = c(\"TradingDay\",\"InstrumentID\",\"UpdateTime\"), numeric = c(\"Volume\",\"Turnover\") )) }else{ ## -- 如果使用　fread 读取失败，则使用　read_csv dt \u003c- read_csv(x, col_types = list(TradingDay = col_character(), InstrumentID = col_character(), UpdateTime = col_character(), Volume = col_number(), Turnover = col_number()) ) %\u003e% as.data.table() %\u003e% .[,.(TradingDay, UpdateTime, UpdateMillisec ,InstrumentID,LastPrice ,OpenPrice, HighestPrice, LowestPrice,ClosePrice ,Volume,Turnover,OpenInterest ,SettlementPrice,UpperLimitPrice,LowerLimitPrice ,BidPrice1,BidVolume1,BidPrice2,BidVolume2 ,BidPrice3,BidVolume3,BidPrice4,BidVolume4 ,BidPrice5,BidVolume5 ,AskPrice1,AskVolume1,AskPrice2,AskVolume2 ,AskPrice3,AskVolume3,AskPrice4,AskVolume4 ,AskPrice5,AskVolume5,AveragePrice)] } ##---------------------------------------------------------------------------- return(dt) } ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:4:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" CTPMD ## ============================================================================= ## FUN: myFreadBarCTP ## 用于制作 bar myFreadBarCTP \u003c- function(x){ ## -- 如果使用　fread 可以正常读取数据文件 if(class(try(fread(x, showProgress = FALSE, fill = TRUE, nrows = 1000), silent = TRUE))[1] != \"try-error\"){ dt \u003c- fread(x, showProgress = TRUE, fill = TRUE, select = c('TimeStamp','TradingDay','UpdateTime','UpdateMillisec' ,'InstrumentID','LastPrice' ,\"OpenPrice\", \"HighestPrice\", \"LowestPrice\",\"ClosePrice\" ,'Volume','Turnover','OpenInterest' ,'SettlementPrice','UpperLimitPrice','LowerLimitPrice' ,'BidPrice1','BidVolume1','BidPrice2','BidVolume2' ,'BidPrice3','BidVolume3','BidPrice4','BidVolume4' ,'BidPrice5','BidVolume5' ,'AskPrice1','AskVolume1','AskPrice2','AskVolume2' ,'AskPrice3','AskVolume3','AskPrice4','AskVolume4' ,'AskPrice5','AskVolume5' ), colClasses = list(character = c(\"TradingDay\",\"InstrumentID\",\"UpdateTime\"), numeric = c(\"Volume\",\"Turnover\") )) %\u003e% .[grep(\"^[0-9]{8}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{4,6}$\", TimeStamp)] }else{ ## -- 如果使用　fread 读取失败，则使用　read_csv dt \u003c- read_csv(x, col_types = list(TradingDay = col_character(), InstrumentID = col_character(), UpdateTime = col_character(), Volume = col_number(), Turnover = col_number()) ) %\u003e% as.data.table() %\u003e% .[grep(\"^[0-9]{8}:[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{4,6}$\", TimeStamp)] %\u003e% .[,.(TimeStamp, TradingDay, UpdateTime, UpdateMillisec ,InstrumentID,LastPrice ,OpenPrice, HighestPrice, LowestPrice,ClosePrice ,Volume,Turnover,OpenInterest ,SettlementPrice,UpperLimitPrice,LowerLimitPrice ,BidPrice1,BidVolume1,BidPrice2,BidVolume2 ,BidPrice3,BidVolume3,BidPrice4,BidVolume4 ,BidPrice5,BidVolume5 ,AskPrice1,AskVolume1,AskPrice2,AskVolume2 ,AskPrice3,AskVolume3,AskPrice4,AskVolume4 ,AskPrice5,AskVolume5)] } ##---------------------------------------------------------------------------- return(dt) } ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:5:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Data"],"content":" vnpyData ## ============================================================================= ## FUN: myFreadvnpy myFreadvnpy \u003c- function(x){ ## -- 如果使用　fread 可以正常读取数据文件 if(class(try(fread(x, showProgress = FALSE, fill = TRUE, nrows = 100000), silent = TRUE))[1] != \"try-error\"){ dt \u003c- fread(x, showProgress = TRUE, fill = TRUE, select = c('timeStamp','date','time' ,'symbol','lastPrice' ,\"openPrice\", \"highestPrice\", \"lowestPrice\",\"closePrice\" ,'volume','turnover','openInterest' ,'settlementPrice','upperLimit','lowerLimit' ,'bidPrice1','bidVolume1','bidPrice2','bidVolume2' ,'bidPrice3','bidVolume3','bidPrice4','bidVolume4' ,'bidPrice5','bidVolume5' ,'askPrice1','askVolume1','askPrice2','askVolume2' ,'askPrice3','askVolume3','askPrice4','askVolume4' ,'askPrice5','askVolume5' ), colClasses = list(character = c(\"date\",\"symbol\",\"time\"), numeric = c(\"volume\",\"turnover\") )) %\u003e% .[grep(\"^[0-9]{8} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{4,6}$\", timeStamp)] ## 考虑到部分文件可能使用的　Timestamp 是乱码 }else{ ## -- 如果使用　fread 读取失败，则使用　read_csv dt \u003c- read_csv(x, col_types = list(timeStamp = col_character(), date = col_character(), symbol = col_character(), time = col_character(), volume = col_number(), turnover = col_number()) ) %\u003e% as.data.table() %\u003e% .[grep(\"^[0-9]{8} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{4,6}$\", timeStamp)] %\u003e% .[,.(timeStamp, date, time ,symbol,lastPrice ,openPrice,highestPrice,lowestPrice,closePrice ,volume,turnover,openInterest ,settlementPrice,upperLimit,lowerLimit ,bidPrice1,bidVolume1,bidPrice2,bidVolume2 ,bidPrice3,bidVolume3,bidPrice4,bidVolume4 ,bidPrice5,bidVolume5 ,askPrice1,askVolume1,askPrice2,askVolume2 ,askPrice3,askVolume3,askPrice4,askVolume4 ,askPrice5,askVolume5)] } ##---------------------------------------------------------------------------- return(dt) } ","date":"2017-10-19","objectID":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/:6:0","tags":["Futures","期货","数据","R"],"title":"期货数据：R读取数据文件","uri":"/archives/2017-10-19-%E6%9C%9F%E8%B4%A7%E6%95%B0%E6%8D%AE-r%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/"},{"categories":["Reading"],"content":"这是一本关于切尔诺贝利核爆炸灾难的访谈录，以受灾民众、参与现场清理工作的战士、相关科研人士的亲身经历作为叙事题材，为我们提供了第一视角去看待这次人类历史上最惨痛的科学失败与政治欺骗。 我不知道该说什么，关于死亡还是爱情 在阅读的过程中，我不仅仅是沉痛这次核爆炸给附近的民众造成无论身体还是心理上的创伤——他们痛失爱人、亲人、朋友、故国家园、世代赖以延续的土地、粮食、生命的尊严、甚至自己民族的文化；我更讶于的，是当权者处于某种政治目的、集团以及个人利益——竟然采用隐瞒、欺骗、剥夺、销毁等手段，极力地避免让此次事件造成的影响公之于众，反而是采用愚昧的政治宣传、利益诱惑的手段去欺骗年轻的士兵、热血的民众以类似自杀的方式去清理核爆炸现场，而正是如此，才导致民众在关键的前期来不及撤离，导致更多的民众无辜的接收核辐射的危害。 这不仅仅是一场科学的灾难，更是一场政治的戕害！无数的人因此终身忍受着核辐射的后遗症，年轻人无法坦诚的恋爱，年轻的女子无法安心的生成，儿童因为先天性的疾病饱受病痛折磨，再也没有童真，那些业已经历二战摧残的老人，如今又要再次面对流离所失、痛失家人的双重创痛。 “我不知道该说什么，关于死亡还是爱情？也许两者都是一样的，我该讲哪一种？” ","date":"2017-10-17","objectID":"/archives/2017-10-17-sa%E9%98%BF%E5%88%97%E5%85%8B%E8%B0%A2%E8%80%B6%E7%BB%B4%E5%A5%87/:0:0","tags":["切尔诺贝利","爱","Reviews"],"title":"S·A·阿列克谢耶维奇","uri":"/archives/2017-10-17-sa%E9%98%BF%E5%88%97%E5%85%8B%E8%B0%A2%E8%80%B6%E7%BB%B4%E5%A5%87/"},{"categories":["Quant"],"content":"Ernest Chan 在今年新出版的新书，『Machine Trading』。书中介绍了最新的量化交易/程序化交易的技术细节与建模技巧。通读吃书，可以增进对量化交易领域的最新发展的进一步理解。结合目前我正在开发的 CTP 交易系统以及中国期货数据数据库的整理工作，我对量化交易有了更深刻的认识。 Ernest Chan 是一位量化交易员，主要交易的品种包括股票、期货、外汇等。根据亲身交易的实战经验，他已经编写了三本量化金融相关的书籍 Quantitative Trading：2009年出版，介绍量化交易的基本概念与技术，比较初级。 Algorithmic Trading：2013年出版，介绍算法交易的有关技术与建模 Machine Trading：2017年出版，即我这次制作读书笔记的版本，介绍了程序化交易的技术知识与金融建模技巧 程序化交易系统总体架构 Chap.01: Algorithmic Trading 一个完整的量化交易框架 全屏查看 Chap.02: Factor Models","date":"2017-10-15","objectID":"/archives/2017-10-15-chan2017-machine-trading/:0:0","tags":["Quant","Trading","Books","Reviews"],"title":"chan2017: Machine Trading","uri":"/archives/2017-10-15-chan2017-machine-trading/"},{"categories":["Programming"],"content":"通过使用多种编程脚本语言，实现 Linux 平台自动化执行任务","date":"2017-10-13","objectID":"/archives/2017-10-13-linux-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/","tags":["Linux","Bash","R","Python"],"title":"Linux 自动化执行任务","uri":"/archives/2017-10-13-linux-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"},{"categories":["Programming"],"content":"基于 Linux 开发平台，我们往往需要让系统定时执行自动化的任务，比如获取数据、执行数据处理流程、清理文件、备份数据库、清理系统运行垃圾等。下面介绍我经常使用的一套工作流程。 R：数据分析 Python：胶水语言 Shell：组建瑞士军刀 crontab：完成定时任务","date":"2017-10-13","objectID":"/archives/2017-10-13-linux-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/:0:0","tags":["Linux","Bash","R","Python"],"title":"Linux 自动化执行任务","uri":"/archives/2017-10-13-linux-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"},{"categories":["Programming"],"content":"分享我的`Sublime Text 3 `基本设置、快捷键以及远程连接服务器操作。","date":"2017-10-13","objectID":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/","tags":["IDE","SublimeText","设置"],"title":"我的 Sublime Text 设置","uri":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/"},{"categories":["Programming"],"content":" 一款神奇的IDESublime Text 3 原本是一款编辑器，可以用来编辑绝大多数的文件格式。后来，随着相关插件的增加与增强，它也逐渐演变成为一种轻便式的 IDE，能够用于处理 REPL（read-evaluate-print-loop）制式的编程语言，如 R、Python等，亦可结合操作系统的终端，实现对 C/C++ 程序的编译。 目前我主要使用的脚本语言，R、Python，网页开发语言 html、JavaScript 、css，以及系统开发语言 C++，均可一站式地在 Sublime Text 中进行编辑、编译、执行操作等。因此，我对 Sublime的使用粘度较高。与此同时，Sublime 让我最为满意的一点，是允许用户通过偏好设置来实现个人定制化的快捷键操作。通过适当的配置个人偏好，可以极大的提升我的编程效率。 这里，我通过分享个人常用的一些插件、系统偏好设置、快捷键设置，与诸位看客一同来见证 Sublime 的神奇。 常用软件包以下是我常用的一些增强软件包： R-Box R-snippets R_comments sendCode：通过 Sublime 向系统的终端发送命令 Sublime REPL：执行操作，实现 REPL。 如果需要再 REPL 屏幕显示命令， 可以这样设置: preference -\u003e Package Settings -\u003e SublimeREPL -\u003e Setting User -\u003e 添加 { \"show_transferred_text\": true } SFTP：连接远程服务器，实现在本地 IDE 编辑服务器上面的文件 Material Theme：一款漂亮的主题 Material Theme AppBar SideBarEnhancements：增强版的边栏，实现显示项目文件、文件类型图标、文件基本操作等 MarkdownLivePreview: alt+m Markdown Extended 解决中文乱码：GBK Support, ConvertToUTF8, Codecs33 AutoPEP8：python 规范化 SublimeCodeIntel：实现语法自动高亮 Python BreakPoint Markdown 预览： markmon Git + Github：Git, GithubTools， 实现在 Sublime 显示修改痕迹、直接上传修改等功能 Jedi python autocomplete：非常好用的自动补全代码 StatusBarTime: 在状态栏显示系统时间 GitGutter Auto-save: 通过设置 keybinds:{ “keys”: [“ctrl+shift+s”], “command”: “auto_save” } C++ Completes DocBlockr_Python：Python 格式的注释 DocBlockr_with_update_capability PlainTasks：搭建任务列表，异常的温馨好用 Plain Notes Alignment: ctrl+altt+a 实现对齐: 在 setting-user 里面添加 Terminal: 在文件路径 ctrl + shift + T 打开终端 输入法：https://github.com/lyfeyaj/sublime-text-imfix 偏好设置修改路径为 Preferences/setting { \"always_show_minimap_viewport\": true, \"auto_complete_commit_on_tab\": true, \"auto_find_in_selection\": true, \"bold_folder_labels\": true, \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\", \"default_encoding\": \"UTF-8\", \"draw_minimap_border\": false, \"ensure_newline_at_eof_on_save\": true, \"fade_fold_buttons\": false, \"fold_buttons\": true, \"font_options\": [ \"gray_antialias\", \"subpixel_antialias\" ], \"font_size\": 9, \"format_on_save\": true, \"highlight_line\": true, \"highlight_modified_tabs\": true, \"ignored_packages\": [ \"Auto Fold\", \"Vintage\" ], \"indent_guide_options\": [ \"draw_normal\", \"draw_active\" ], \"line_numbers\": true, \"line_padding_bottom\": 3, \"line_padding_top\": 3, \"match_selection\": true, \"mdpopups.sublime_user_lang_map\": null, \"mdpopups.use_sublime_highlighter\": null, \"overlay_scroll_bars\": \"enabled\", \"reveal_in_side_bar\": true, \"rulers\": [ 80, 100 ], \"save_on_focus_lost\": true, \"show_encoding\": true, \"show_sidebar_on_activated\": true, \"spell_check\": false, \"tab_size\": 4, \"theme\": \"Material-Theme.sublime-theme\", \"translate_tabs_to_spaces\": true, \"trim_trailing_white_space_on_save\": false, \"update_check\": false, \"word_separators\": \"./\\\\()\\\"':,.;\u003c\u003e~!@#$%^\u0026*|+=[]{}`~?\", \"word_wrap\": true } 快捷键设置[ { \"keys\": [\"enter\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\": [ // { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^[)\\\\]\\\\\u003e\\\\'\\\\\\\"]\", \"match_all\": true }, // { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^[)\\\\\u003e\\\\'\\\\\\\"]\", \"match_all\": true }, { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^[\\\\\u003e\\\\']\", \"match_all\": true }, ] }, { \"keys\": [\"control+m\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" %\u003e% \\n\"} }, // { \"keys\": [\"alt+m\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" %\u003e% \"} // }, { \"keys\": [\"control+,\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" := \"} }, { \"keys\": [\"alt+-\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" \u003c- \"} }, { \"keys\": [\"control+.\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" \u003c- \"} }, {\"keys\":[\"alt+b\"], \"caption\": \"SublimeREPL: Python - PDB current file\", \"command\": \"run_existing_window_command\", \"args\": { \"id\": \"repl_python_pdb\", \"file\": \"config/Python/Main.sublime-menu\" }}, {\"keys\":[\"alt+p\"], \"caption\": \"SublimeREPL: Python - RUN current file\", \"command\": \"run_existing_window_command\", \"args\": { \"id\": \"repl_python_run\", \"file\": \"config/Python/Main.sublime-menu\" }}, { \"keys\": [\"ctrl+shift+r\"], \"command\": \"reveal_in_side_bar\"}","date":"2017-10-13","objectID":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/:0:0","tags":["IDE","SublimeText","设置"],"title":"我的 Sublime Text 设置","uri":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/"},{"categories":["Programming"],"content":" 网站由于 Sublime Text 3 并非是一款免费的编辑器，目前的收费标准是 $80。与此同时，也并非强制用户必须购买才能使用，而是以试用的形式，经过一段时间后，会时不时的弹出提醒购买的消息框。对此，这里提供了一个注册码网站，可以使用其提供的注册码来获取使用权限。具体网址为 Sublime Text 3 3143 注册码 ","date":"2017-10-13","objectID":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/:1:0","tags":["IDE","SublimeText","设置"],"title":"我的 Sublime Text 设置","uri":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/"},{"categories":["Programming"],"content":" 源码有部分童鞋反馈说上面的网站无法打开，似乎需要爬楼梯才能出去。这里我就勉为其难地做一回纯粹的代码搬运工，把源码放在这里了。各位请自取。 —– BEGIN LICENSE —– TwitterInc 200 User License EA7E-890007 1D77F72E 390CDD93 4DCBA022 FAF60790 61AA12C0 A37081C5 D0316412 4584D136 94D7F7D4 95BC8C1C 527DA828 560BB037 D1EDDD8C AE7B379F 50C9D69D B35179EF 2FE898C4 8E4277A8 555CE714 E1FB0E43 D5D52613 C3D12E98 BC49967F 7652EED2 9D2D2E61 67610860 6D338B72 5CF95C69 E36B85CC 84991F19 7575D828 470A92AB —— END LICENSE —— ","date":"2017-10-13","objectID":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/:2:0","tags":["IDE","SublimeText","设置"],"title":"我的 Sublime Text 设置","uri":"/archives/2017-10-13-%E6%88%91%E7%9A%84-sublime-text-%E8%AE%BE%E7%BD%AE/"},{"categories":["Programming"],"content":"xz 是一款高性能、高压缩比的打包工具，相比于 gzip、bzip2 等具有更高的压缩比率。对于大容量的数据文件，可以使用 xz 进行压缩打包。","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":"xz 是一款高性能、高压缩比的打包工具，相比于 gzip、bzip2 等具有更高的压缩比率。对于大容量的数据文件，可以使用 xz 进行压缩打包。 目前我们拥有中国期货市场从2010年至今的所有合约分笔数据（Tick Data），因其文件较大，占用空间，对于这部分的数据原始文件，我们已经清洗干净并已录入 MySQL 数据库。因此，对于原始的数据，我们希望将其压缩后，打包存放，以减少占用的磁盘空间。 安装","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:0:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" CentOS sudo yum -y install xz xz-devel ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:1:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" Ubuntu sudo apt-get install xz-utils 基本操作","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:2:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 压缩文件xz 默认的会在压缩完成后，删除原始的文件。这一点需要特别注意，对于一些不愿意删除的文件，我们可以使用参数 -k 来保留。 ## 单文件，压缩存入 file.txt.xz, 并删除原始文件 file.txt xz file.txt ## 多文件，分别存入 file1.txt.xz, file2.txt.xz, 并删除文件 file1.txt, file2.txt xz file1.txt file2.txt ## 不删除文件，使用 -k 来限制 xz -k file.txt ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:3:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 解压文件同样的，xz在解压文件的时候，默认的会删除压缩包。所以我们需要增加参数 -k 来现在不删除原始的压缩包。 ## 解压文件，并删除 file.txt.xz unxz file.txt.xz ## 解压文件，但不删除原始压缩包文件，file.txt.xz unxz -k file.txt.xz ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:4:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 显示压缩包信息 xz -l file.txt.xz ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:5:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 调整压缩率可以使用 0-9 来表明想要得到的压缩率，分别从低压缩比率到高压缩比率。压缩比越高，则压缩后得到的文件占用空间越小，但同时也意味着系统需要使用更多的时间来处理压缩。 xz -0kv file.txt xz -9kv file.txt ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:6:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 启动极限模式通过使用极限模式，xz 将尽可能的最大化利用当前系统空余的CPU资源，这将提高程序的处理能力。 ## 最高压缩比，启动极限模式，保留原始文件，显示具体处理过程 xz -9ekv file.txt ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:7:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 多线程一般来说，现在的电脑都是多核多线程的操作系统，尤其是对于我们目前在使用的服务器系统CentOS，最大配置了32核的CPU。xz 默认使用单核单线程，如果需要提升运算性能，我们可以设置多线程来增加压缩处理的能力。这个参数就是 --threads=n。n 为设置的数字；如果为0，则会使用系统所有的线程资源。 ## 启用 8 线程 xz -9ekv --threads=8 file.txt ## 启用所有的线程资源 xz -9ekv --threads=0 file.txt ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:8:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Programming"],"content":" 文件夹压缩打包最后，来介绍一下对整个文件夹的压缩及打包。这里有两种方法可以选择 现在打包文件夹，然后再进行压缩处理。 [推荐]直接使用集成的命令来完成打包与压缩。 我这里使用集成命令： ## J 代表使用 xz 来压缩文件夹 tar -Jcvf file.tar.xz directory/ 但是，我们上面提到 xz 还提供了多种参数，如果在使用集成命令 tar 的时候，我们也系统能够传入参数，则可以使用命令 ## 传入参数设置 XZ_OPT='-9ek --threads=12' tar -Jcvf $i.tar.xz $i/ 打包期货数据以下是我写的一个 shell 脚本，用于打包中国期货分笔数据的原始csv文件。事实证明，xz 确实能够极大的较少文件占用的磁盘空间。 #!/bin/bash # 打包 FromDC 的数据文件 # LOG_FILE=tar_FromDC.txt exec 3\u003e\u00261 1\u003e\u003e /home/fl/myLog/${LOG_FILE} 2\u003e\u00261 echo -e \"\\n===============================================================================\" echo -e \"\u003e\u003e $(date +'%Y-%m-%d %H:%M:%S') \u003c\u003c tar_FromDC.sh\" echo -e \"================================================================================\" cd /data/ChinaFuturesTickData/TickData for i in {2010..2016} do echo -e \"--------------------------------------------------------------------------------\" echo `date` echo $i echo \"\u003e\u003e\" XZ_OPT='-9ekv --threads=12' tar -Jcvf $i.tar.xz $i/ echo -e \"--------------------------------------------------------------------------------\" done ","date":"2017-10-11","objectID":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/:9:0","tags":["Linux","xz","数据存储"],"title":"xz: 高压缩打包工具","uri":"/archives/2017-10-11-xz%E9%AB%98%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"},{"categories":["Data"],"content":"使用`R`的软件包`readr`中的函数`read_csv`读取包含中文字段的数据文件。","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Data"],"content":" readr 软件包","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/:0:0","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Data"],"content":" 读取数据readr 是大神Hadley Wickham开发的用于读取数据文件的软件包，可以读取多个格式的文件，如 .csv, .txt 等，而且其提供了丰富的调用函数。 对于一般的数据文件，我通常是使用另外一个包data.table里面的fread，这是因为该函数读取大容量的数据文件速度较快，而且直接生成data.table格式，方便之后的数据清理。但是，该函数由于接口限制，暂时还无法处理其他格式的文件，而且对多语言的支持也比较弱，目前还无法用来读取包含中文字段的文件。因此，我只能使用read_csv来读取在2010年的期货交易数据，因为这份数据的表头字段是中文。 ","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/:1:0","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Data"],"content":" 功能介绍目前我主要还是使用readr当中的函数，read_csv。具体的函数说明，可以通过帮助来获得。 Sys.setlocale(\"LC_ALL\", 'en_US.UTF-8') [1] \"LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=zh_CN.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=zh_CN.UTF-8;LC_IDENTIFICATION=C\" library(readr) library(magrittr) ?read_csv read_csv(file, col_names = TRUE, col_types = NULL,locale = default_locale(), na = c(\"\", “NA”), quoted_na = TRUE, quote = “\"”, comment = “”, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = show_progress()) 这里有几个参数需要设置： 首先设置系统的默认编码格式，Sys.setlocale(\"LC_ALL\", 'en_US.UTF-8') 使用 guess_encodng(file) 来获取文件的编码格式 利用 locale=locale(encoding = 'GB18030')) 来解码中文字段 同时，我们还可以使用 iconv(x, from, to) 来转码 代码演示 dataFile \u003c- \"https://raw.githubusercontent.com/williamlfang/williamlfang.github.io/sources/content/files/a1005.csv\" ","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/:2:0","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Data"],"content":" 错误姿势 没有设置编码格式 dt \u003c- dataFile %\u003e% read_csv() ","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/:3:0","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Data"],"content":" 正确姿势 dt \u003c- dataFile %\u003e% read_csv(., locale = locale(encoding = \"GB18030\")) knitr::kable(dt) ","date":"2017-10-10","objectID":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/:4:0","tags":["R","数据处理","中文"],"title":"R读取中文字段的正确姿势","uri":"/archives/2017-10-10-r%E8%AF%BB%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E6%AE%B5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"categories":["Trading"],"content":"利用`R`编制中国期货市场交易日历表。","date":"2017-10-10","objectID":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/","tags":["Futures","Calendar","R"],"title":"中国期货交易日历","uri":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/"},{"categories":["Trading"],"content":" 期货交易日利用R语言对日期的处理功能，我们可以借此来编制中国期货市场的交易日历表，用于策略回测（Backtesting）、自动化执行行情订阅（mdApi）、进行程序化交易（tdAip）等。 ","date":"2017-10-10","objectID":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/:0:0","tags":["Futures","Calendar","R"],"title":"中国期货交易日历","uri":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/"},{"categories":["Trading"],"content":" 要点在处理中国期货市场交易日期时，主要有以下几个要点需要特别注意： 在当年年末，期货交易所会（提前）公布来年的所有节假日安排，这个可以通过查询上期所公告网站 因为我们的历史数据最早可以追踪到2010年，所以这里的第一个起始年度为2010。更加具体地，第一个真正开始接收数据的日期是 2010-04-16 如果未来第二日开始放假，则当天的夜盘不交易。这个通过判断days与nights日期相差的时间超过3天来处理，因为正常的周五至下周一的相差刚好是3天，而节假日则破坏了这个规律 2015年的中秋节放假比较特别，只有放假两天，当时交易所规定了2015-09-25当天的夜盘不交易，所以这个需要在nights里面排除。请注意，这是一个大坑。 ","date":"2017-10-10","objectID":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/:1:0","tags":["Futures","Calendar","R"],"title":"中国期货交易日历","uri":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/"},{"categories":["Trading"],"content":" 代码 ## ============================================================================= ## myChinaFuturesCalendar.R ## ## 生成中国期货交易日 ## 1. days :日盘时间 ## 2. nights:夜盘时间 ## ## ============================================================================= rm(list = ls()) setwd('/home/fl/myData') ## ============================================================================= ## 需要安装的 package: bizdays pkgs \u003c- c(\"data.table\",'magrittr') if (length(pkgs[!pkgs %in% installed.packages()]) != 0) { sapply(pkgs[!pkgs %in% installed.packages()], install.packages) } sapply(pkgs, require, character.only = TRUE) ## ----------------------------------------------------------------------------- ## 这里需要做选择 ## 对于周末的时间，日盘和夜盘的间隔不应该超过 3 天 ## 但是，如果是节假日，有可能超过 3 天，那么夜盘就是 NA 了。 ## 这个应该很好理解。 setNights \u003c- function(x) { for (i in 1:nrow(x)) { if (is.na(x$nights[i])) next if( (x$days[i] - x$nights[i]) \u003e 3){ #-- 如果有休假，则日盘与夜盘差超过 3 天 x$nights[i] \u003c- NA } } x[, \":=\"( nights = gsub('-','', nights), days = gsub('-','', days))] return(x) } ## ============================================================================= ## ============================================================================= ## 查询交易所对节假日的安排 ## http://www.shfe.com.cn/news/ ## ============================================================================= ## ============================================================================= ## http://www.shfe.com.cn/news/notice/911232224.html yearID \u003c- 2010 daysInYear \u003c- as.numeric(as.Date(paste0(yearID, '-12-31')) - as.Date(paste0(yearID, '-01-01'))) days \u003c- as.Date(0:daysInYear, origin = paste0(yearID, '-01-01')) %\u003e% .[-which(weekdays(.) %in% c(\"Saturday\", \"Sunday\"))] %\u003e% .[-c(which(. \u003e= \"2010-01-01\" \u0026 . \u003c= \"2010-01-03\"), which(. \u003e= \"2010-02-13\" \u0026 . \u003c= \"2010-02-19\"), which(. \u003e= \"2010-04-03\" \u0026 . \u003c= \"2010-04-05\"), which(. \u003e= \"2010-05-01\" \u0026 . \u003c= \"2010-05-03\"), which(. \u003e= \"2010-06-14\" \u0026 . \u003c= \"2010-06-16\"), which(. \u003e= \"2010-09-22\" \u0026 . \u003c= \"2010-09-24\"), which(. \u003e= \"2010-10-01\" \u0026 . \u003c= \"2010-10-07\") )] %\u003e% .[which(. \u003e= '2010-04-16')] nights \u003c- NA calendar2010 \u003c- data.table(nights, days) %\u003e% setNights() ## ============================================================================= ## ============================================================================= ## http://www.shfe.com.cn/news/notice/11272678.html yearID \u003c- 2011 daysInYear \u003c- as.numeric(as.Date(paste0(yearID, '-12-31')) - as.Date(paste0(yearID, '-01-01'))) days \u003c- as.Date(0:daysInYear, origin = paste0(yearID, '-01-01')) %\u003e% .[-which(weekdays(.) %in% c(\"Saturday\", \"Sunday\"))] %\u003e% .[-c(which(. \u003e= \"2011-01-01\" \u0026 . \u003c= \"2011-01-03\"), which(. \u003e= \"2011-02-02\" \u0026 . \u003c= \"2011-02-08\"), which(. \u003e= \"2011-04-03\" \u0026 . \u003c= \"2011-04-05\"), which(. \u003e= \"2011-04-30\" \u0026 . \u003c= \"2011-05-02\"), which(. \u003e= \"2011-06-04\" \u0026 . \u003c= \"2011-06-06\"), which(. \u003e= \"2011-09-10\" \u0026 . \u003c= \"2011-09-12\"), which(. \u003e= \"2011-10-01\" \u0026 . \u003c= \"2011-10-07\") )] nights \u003c- NA calendar2011 \u003c- data.table(nights, days) %\u003e% setNights() ## ============================================================================= ## ============================================================================= ## http://www.shfe.com.cn/news/notice/111211125.html yearID \u003c- 2012 daysInYear \u003c- as.numeric(as.Date(paste0(yearID, '-12-31')) - as.Date(paste0(yearID, '-01-01'))) days \u003c- as.Date(0:daysInYear, origin = paste0(yearID, '-01-01')) %\u003e% .[-which(weekdays(.) %in% c(\"Saturday\", \"Sunday\"))] %\u003e% .[-c(which(. \u003e= \"2012-01-01\" \u0026 . \u003c= \"2012-01-03\"), which(. \u003e= \"2012-01-22\" \u0026 . \u003c= \"2012-01-28\"), which(. \u003e= \"2012-04-02\" \u0026 . \u003c= \"2012-04-04\"), which(. \u003e= \"2012-04-29\" \u0026 . \u003c= \"2012-05-01\"), which(. \u003e= \"2012-06-22\" \u0026 . \u003c= \"2012-06-24\"), which(. \u003e= \"2012-09-30\" \u0026 . \u003c= \"2012-10-07\") )] nights \u003c- NA calendar2012 \u003c- data.table(nights, days) %\u003e% setNights() ## ============================================================================= ## ============================================================================= ## http://www.shfe.com.cn/news/notice/211216642.html yearID \u003c- 2013 daysInYear \u003c-","date":"2017-10-10","objectID":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/:2:0","tags":["Futures","Calendar","R"],"title":"中国期货交易日历","uri":"/archives/2017-10-10-%E4%B8%AD%E5%9B%BD%E6%9C%9F%E8%B4%A7%E4%BA%A4%E6%98%93%E6%97%A5%E5%8E%86/"},{"categories":["Reading"],"content":"两个在性格、喜好、想法等诸多方面有类似的女子，一个因为吸食麻醉而成为植物人，却阴差阳错的「灵魂出鞘」，思想跑去找另外一个女子，二者彼此知悉。作为导演的女孩，正好出于编写新剧本的瓶颈期，恰好在则期间认识的植物人女孩的所有故事。导演女子犹如观影般认识了富家子弟的百无聊赖、穷酸教书匠的为爱执着、父亲对子女的冷漠无情等。 亦舒的文字向来以简洁明了为著，这本小说也是在奇幻情节的基础上，增加了作者关于现代女性独立、追求事业的看法。故事简短，情节也相对比较简单。 ","date":"2017-10-09","objectID":"/archives/2017-10-09-%E4%BA%A6%E8%88%92-%E8%BF%B7%E8%BF%AD%E9%A6%99/:0:0","tags":["亦舒","小说","Reviews"],"title":"亦舒：迷迭香","uri":"/archives/2017-10-09-%E4%BA%A6%E8%88%92-%E8%BF%B7%E8%BF%AD%E9%A6%99/"},{"categories":["Programming"],"content":"以 `Unix` 操作系统运营为出点发，介绍相关的命令行及 `shell` 脚本编程。","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":"Unix/Linux 编程实践，主要为实际生产过程中经常使用的命令行以及简单的执行任务的程序脚本。 ![Unix](/images/UNIX HD Wallpaper.png) Unix 常用命令行 ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:0:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 用户管理","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:1:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 用户权限 root：超级权限，是系统的管理员 sudo su：允许当前用户使用系统管理员权限，主要是修改系统相关配置、安装软件包等 增加用户：sudo adduser ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:1:1","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 修改文件权限 chmod +x file.sh：给予文件可执行权限 ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:1:2","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 文件操作","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" cd指向文件路径 cd ~ / cd ：这指向当前用户的主目录 /home/you cd ..：返回上一级父目录 ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:1","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" pwd打印/显示当前绝对路径 ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:2","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" ls显示当前目录下的文件 -a：等同于 ll，显示所有的文件，包含隐藏的文件 -h：显示文件大小 Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print octal escapes for nongraphic characters --block-size=SIZE use SIZE-byte blocks. See SIZE format below -B, --ignore-backups do not list implied entries ending with ~ -c with -lt: sort by, and show, ctime (time of last modification of file status information) with -l: show ctime and sort by name otherwise: sort by ctime -C list entries by columns --color[=WHEN] colorize the output. WHEN defaults to `always' or can be `never' or `auto'. More info below -d, --directory list directory entries instead of contents, and do not dereference symbolic links -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -ls --color -F, --classify append indicator (one of */=\u003e@|) to entries --file-type likewise, except do not append `*' --format=WORD across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C --full-time like -l --time-style=full-iso -g like -l, but do not list owner --group-directories-first group directories before files. augment with a --sort option, but any use of --sort=none (-U) disables grouping -G, --no-group in a long listing, don't print group names -h, --human-readable with -l, print sizes in human readable format (e.g., 1K 234M 2G) --si likewise, but use powers of 1000 not 1024 -H, --dereference-command-line follow symbolic links listed on the command line --dereference-command-line-symlink-to-dir follow each command line symbolic link that points to a directory --hide=PATTERN do not list implied entries matching shell PATTERN (overridden by -a or -A) --indicator-style=WORD append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type), classify (-F) -i, --inode print the index number of each file -I, --ignore=PATTERN do not list implied entries matching shell PATTERN -k like --block-size=1K -l use a long listing format -L, --dereference when showing file information for a symbolic link, show information for the file the link references rather than for the link itself -m fill width with a comma separated list of entries -n, --numeric-uid-gid like -l, but list numeric user and group IDs -N, --literal print raw entry names (don't treat e.g. control characters specially) -o like -l, but do not list group information -p, --indicator-style=slash append / indicator to directories -q, --hide-control-chars print ? instead of non graphic characters --show-control-chars show non graphic characters as-is (default unless program is `ls' and output is a terminal) -Q, --quote-name enclose entry names in double quotes --quoting-style=WORD use quoting style WORD for entry names: literal, locale, shell, shell-always, c, escape -r, --reverse reverse order while sorting -R, --recursive list subdirectories recursively -s, --size print the allocated size of each file, in blocks -S sort by file size --sort=WORD sort by WORD instead of name: none -U, extension -X, size -S, time -t, version -v --time=WORD with -l, show time as WORD instead of modification time: atime -u, access -u, use -u, ctime -c, or status -c; use specified time as sort key if --sort=time --time-style=STYLE with -l, show times using style STYLE: full-iso, long-iso, iso, locale, +FORMAT. FORMAT is interpreted like `date'; if FORMAT is FORMAT1\u003cnewline\u003eFORMAT2, FORMAT1 applies to non-recent files and FORMAT2 to recent files; if STYLE is prefixed with `posix-', STYLE takes effect only outside the POSIX locale -t sort by modification time -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u with -lt: sort by, and show, access","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:3","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" du显示文件夹小小： -h --max-depth=1:显示当前文件夹占用的磁盘空间 du -h ./file_path/ --max-depth=0：显示当前文件夹的占用磁盘空间大小 Usage: du [OPTION]... [FILE]... or: du [OPTION]... --files0-from=F Summarize disk usage of each FILE, recursively for directories. Mandatory arguments to long options are mandatory for short options too. -a, --all write counts for all files, not just directories --apparent-size print apparent sizes, rather than disk usage; although the apparent size is usually smaller, it may be larger due to holes in (`sparse') files, internal fragmentation, indirect blocks, and the like -B, --block-size=SIZE use SIZE-byte blocks -b, --bytes equivalent to `--apparent-size --block-size=1' -c, --total produce a grand total -D, --dereference-args dereference only symlinks that are listed on the command line --files0-from=F summarize disk usage of the NUL-terminated file names specified in file F; If F is - then read names from standard input -H equivalent to --dereference-args (-D) -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G) --si like -h, but use powers of 1000 not 1024 -k like --block-size=1K -l, --count-links count sizes many times if hard linked -m like --block-size=1M -L, --dereference dereference all symbolic links -P, --no-dereference don't follow any symbolic links (this is the default) -0, --null end each output line with 0 byte rather than newline -S, --separate-dirs do not include size of subdirectories -s, --summarize display only a total for each argument -x, --one-file-system skip directories on different file systems -X, --exclude-from=FILE exclude files that match any pattern in FILE --exclude=PATTERN exclude files that match PATTERN --max-depth=N print the total for a directory (or file, with --all) only if it is N or fewer levels below the command line argument; --max-depth=0 is the same as --summarize --time show time of the last modification of any file in the directory, or any of its subdirectories --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status --time-style=STYLE show times using style STYLE: full-iso, long-iso, iso, +FORMAT FORMAT is interpreted like `date' --help display this help and exit --version output version information and exit Display values are in units of the first available SIZE from --block-size, and the DU_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables. Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set). ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:4","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" tree以树形显示当前目录下的文件结构 -L 0-9：需要显示的级别数量 ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:5","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" rm删除文件 -r：以递归形式删除指定目录下的所有文件 -f：系统不会发出询问，直接删除，谨慎使用 shell 编程","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:2:6","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 文件表头最好在文件表头添加： #!/bin/bash ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:3:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 执行文件需要通过 增加执行权限： chmod +x file.sh ./file.sh ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:4:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 获取变量变量赋值使用 = 时，不能有空格！！！ v=$(date +\"%Y-%m-%d %M:%H:%S\") echo $v ## 也可以使用 `{}` 把变量包围起来 echo ${v} ## 使用 `-e` 增加 `echo` 转义字符 echo -e \"\\n Hello, world! \\n\" ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:5:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" 日期格式命名的文件 使用 + 来拼接 使用 -d \"1 days\" 来增加或者 -d \"-1 days\"减少日期 dataFile=$(date -d \"-$i days\" +\"%Y%m%d\") echo $dataFile ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:6:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Programming"],"content":" for 循环 for colo in XiFu YY1; do for info in ContractInfo TickData; do for i in {1..0} do dataFile=$(date -d \"-$i days\" +\"%Y%m%d.csv\") echo -e \"\\n$colo :==\u003e $info :==\u003e $dataFile\" done done done ","date":"2017-09-29","objectID":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/:7:0","tags":["Unix","Shell","Programming"],"title":"Unix编程","uri":"/archives/2017-09-29-unix%E7%BC%96%E7%A8%8B/"},{"categories":["Reading"],"content":"Emanuel Derman: My Life as a Quant 就是那个提出利率期限结构模型 Black-Derman-Toy Model (BDT) 之一的 Derman，以亲身经历，讲述了他从物理学研究出发，学习数学工具、从事理论研究、转化做量化分析、深谙金融市场的精彩过程。期间，他讨论了一开始是如何的雄心壮志、傲气冲天，一心想要在理论物理界做出丰功伟绩，甚至觉得可以赶超爱因斯坦、媲美当年的大神费曼，可是后来慢慢发现，自己也终究是在物理这座宏伟大厦的基脚下，无望而重复的从事清洁工的枯燥工作。于是决定放弃学术界，转投工业。 但不幸的是，在工业界从事了许多年的工作，他依然无法放弃“干一番大事业”的理想，同时对在贝尔实验室复杂的人事关系厌烦到顶，决定转行去做量化金童，因为，在 Derman看来，二者没有实质的差别，都是处理一大堆的数据，使用一大串的公式，只是结果稍微不一样：在贝尔生产的结果是一篇篇无法签署自己名字的报告，而在金融界，结果就是实打实的金钱。此为前半部分内容。 书中后半部分主要讲述了他在所罗门公司以及高盛公司从事量化金融研究与交易，他以自己的视角审视了所罗门企业文化、公司制度等，从语气上看，似乎对所罗门不是很有认同感。倒是他在高盛公司，与金融天才Black一起从事研究，开发了著名的利率模型，BDT。这段与Black一起度过的珍贵岁月，给作者留下了美好的印象，他描述了 Black 对直觉的重视、对金融逻辑的强调胜过数学公式，但是，一旦把直觉背后的逻辑关系梳理清晰，则会使用简明的数学语言来描述其间的严谨关系，这使得所建立的模型既贴近现实、符合客观数据，又具备了良好的拓展性与数学上的优雅简洁。 因为我硕士论文主要部分还是在处理利率期限结构，所以看到这一部分的时候，还是感到非常的亲切，就像是从小一直摩拜的偶像，多年来心里一直念叨，可是突然间，在某个街角偶遇，那是何等的幸福。 这本书我读了两遍，被作者在书中描述的世界所吸引，也被作者对细节之处的思考所感动。从一个 Quant 的角度看这个世界，眼光是朴实的、单纯的，但体验是细微的、温暖的。 ","date":"2017-08-12","objectID":"/archives/2017-08-12-%E5%AE%BD%E5%AE%A2%E4%BA%BA%E7%94%9F/:0:0","tags":["Derman","Quant","Reviews"],"title":"宽客人生","uri":"/archives/2017-08-12-%E5%AE%BD%E5%AE%A2%E4%BA%BA%E7%94%9F/"},{"categories":["Programming"],"content":"我们在处理 LaTeX 多文档的时候，常常会遇到这样的情况 有一个主文件，包含需要的 preamble 内容，同时还有其他子文件，各自都有自己的 preamble。现在的问题是，我们想要在主文件里，把其他的子文件都包含进去。这样的意思是，一方面，每个单独的子文件是可以独立 compile 的，同时，又可以把这些子文件统一合并到主文件当中。 LaTeX 有 input 和 include 来包含子文件，但这两个命令都要求不包含 preamble。因此，对于原先存在有 preamble 的独立子文件，我们需要这样的命令 能够自动识别并判断 preamble，然后自动跳过，只是抽取文档的正文进行编译。 解决这个问题有多种方式，不过我尝试后，方向使用 docmute 包是最好用的。其用法为 在主文件的 preamble 插入 \\usepackage{docmute} 对于需要引入的子文件，直接使用 \\input{subfile.tex}，它会自动识别，并只把正文部分插入进来 ","date":"2016-02-19","objectID":"/archives/2016-02-19-latex-%E5%90%88%E5%B9%B6%E7%8B%AC%E7%AB%8B%E5%AD%90%E6%96%87%E4%BB%B6/:0:0","tags":["LaTex"],"title":"LaTeX 合并独立子文件","uri":"/archives/2016-02-19-latex-%E5%90%88%E5%B9%B6%E7%8B%AC%E7%AB%8B%E5%AD%90%E6%96%87%E4%BB%B6/"},{"categories":["Personal"],"content":"在外面出差了两天的时间，感觉状态不是特别的好，刚好又遇到降温，脚底冷的跟踩了冰块似的。心更是冷透，回想这一年临近结束，竟然什么也没干成。 年初的时候，还兴致勃勃的要准备大干一番，无论是当时从学校里出来所带的冲动与韧颈，还是自己对自己的要求，一个完美主义者总会在生活中找到太多的不完美与残缺。一年又结束，一年的不完美，大抵也算了在这纠结与苦闷当中算了有了一次了结。过去的都已经过去，未来的，还会再来。不知道来年之后，是否依然能够保持当初的那样干劲。 一直以来，没想到自己会过如此的生活，当年的书呆子，都不曾把这样的「rare event」放入未来的样本空间吧。谁知道呢，往往是有意想不到的黑天鹅事件，改变了我们，也改变了世界。又或许是，我们当初就不应该忽视黑天鹅可能的机率。 哦可，说到最近的状态，四个字大抵可以形容最为恰当：累觉不爱。 工作上的事。我承认，我是一个工作狂，任何多忙的活儿，总能找到其中的乐趣，总能发现其中的美好。哦可，我承认，刚才写下的那段文字，会是我以前的想法。不，现在的我，会感到累，不是身体累了，好歹没那么脆弱。而是心累了。所有的付出，却在这最后结束的时候，通通没有任何的结局，没有任何的交代。也就这样，来的恢宏，走的灰暗。我不喜欢这样的工作状态。 生活上的事。最近跟猪头的关系不是太好，简直是糟糕。谁知道，我们两个人，究竟是为什么，会闹到现在的状况。目前的情况是，这是一团毛线杂乱的局势，谁去解，谁来接。两个人，也就在这彼此拉锯时，悄然远离。也是纠缠的爱情，也是纠结的命运。 还有其他的事。到底是什么事情呢？我竟也是说不出个所以然，或许是太多的事情纠葛在一起，像李后主的苦恼，剪不断，理还乱。嗨，碎碎念，我也只能碎碎念，念的是什么呢…… ","date":"2015-12-29","objectID":"/archives/2015-12-29-%E7%A2%8E%E7%A2%8E%E5%BF%B5/:0:0","tags":["年终","感想"],"title":"碎碎念","uri":"/archives/2015-12-29-%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"categories":["Resource"],"content":"一些优秀的 R 学习的书籍推荐。 by Joseph Rickert What are you reading? – and what are you recommending to friends, colleagues, and students who want to learn something about R programming? A quick search of Amazon will show that there are several new R books proposed for 2016; but of course, new doesn't necessarily mean better. I fully expect that many new books in all areas of statistics, data science and many other scientific disciplines using R to provide a computational aspect for their exposition will continue to be written for years to come. All of these books will provide windows into learning R for people excited about the particular subject matter. However, so many excellent R based texts have already been published that it will be difficult for these new works to achieve \"must buy\" status for the R content alone.  Below are my recommendations for good R reads. Some of these books go back a few years, but they continue to hold their value. With the possible exception of books that were based primarily on the S language, good R books don't become obsolete. Unlike some other computer languages, R evolves mostly through new capabilities added by contributed packages, not through changes to the R core. The fact that the dplyr family of packages may make data wrangling more convenient in many circumstances doesn't make a book that teaches data manipulation through base R functions any less relevant. In fact, some might argue that new students should be taught the basic functionally first. I am not a militant traditionalist, but it does seem to me that familiarity with the bare bones basics of the language will help newcomers to gain intuition about how R works. There are three lists below. The first lists my picks for teaching R programming. (Top row in the graphic) The second list provides my recommendations for people interested in learning R for data science. (Second row in the graphic). The third list is of books on my shelf that I continue to value. For every entry in all three lists I provide a mini or micro review. In a few cases, I point to a more extensive review that I have previously published in this blog. My lists are in no way intended to be complete. But, I apologize right now if I have omitted some really good books. Please let me know about what I have missed by commenting to this post with a mini review of your own. Learning R Advanced R by Hadley Wickham – Anyone who wants to gain a deep understanding of the R language will certainly benefit from this book. More than a reference: the author seeks to provide a conceptual framework for understanding R’s structure and guide readers through R’s idiosyncratic mechanisms pointing out traps, illuminating difficult concepts and providing expert commentary. The Art of R Programming: A Tour of Statistical Software Design by Norman Matloff – This is still my pick for the best book for people with some programming experience who want to make a serious effort at learning R. Professor Matloff’s interest in teaching the mechanics of programming infused with his deep understanding of both the underlying computer science and statistical theory put this book on top. Hands on Programming with R by Garrett Grolemund – If you are not only new to R but new to programming as well this is the book for you. I have review it more extensively here. R For Dummies by Andrie de Vries and Joris Meys – A current, concise and insightful reference to core concepts in the R language. A really nice feature of the book is its emphasis on presenting the R ecosystem along with core R concepts. When learning anything new, it is always helpful to understand the big picture. Keep this book by your computer, when you stop referring to it you will be a pretty good R programmer. Data Science with R Applied Predictive Modeling by Max-Kuhn and Kjell Johnson – This book is the master text for predictive analytics, carefully walking through several modeling examples and making expert use of the extensive machine lea","date":"2015-11-21","objectID":"/archives/2015-11-21-r-%E8%AF%AD%E8%A8%80%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%9B%AE/:0:0","tags":["R","Books"],"title":"R 语言推荐书目","uri":"/archives/2015-11-21-r-%E8%AF%AD%E8%A8%80%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%9B%AE/"},{"categories":["Lectures"],"content":"我在国信厦门部工作了整一年时间，期间主要任职于金融顾问中心，担任投资顾问助理。在这段时间里，我从一个学究气息浓厚的学生，逐步成长为务实、接地气的行业研究与股票分析员。在此时间段内，我也经历了 A 股从多年的熊市走出，开始这一波贯绝中外的疯牛行情。有过憧憬，也有过迷惘。无论如何，我将结束在这里的工作，开启新的职业生涯。 致谢 这里我要感谢厦门部的各位领导对我的栽培，特别是感谢金顾中心的张博士，引领我踏进股市的大千世界。 课件汇总 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:0:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 港股通业务沪港通业务于 11 月 17 日正式开通，之前整个资本市场一直都在憧憬外资通过沪股通的渠道投资 A 股市场，这也是此次牛市发韧。厦门营业部很快意识到港股通业务将呈现爆发性的提升，因此，领导希望金顾能够提供相应的服务产品。 当时由博士推荐我来负责本次港股通业务的产品设计。以下是我竞聘时制作的课件。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:1:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 结构性牛市下的投资策略2015年1月9日， 大盘经历了宽幅震荡，并形成一个局部的圆弧顶。当时整个市场都在怀疑牛市或许将面临回调。在周五的夕会上，我回顾了一周的行情，并根据本次牛市的逻辑基础，提示本次牛市远未到顶，但基本的行情将面临分化。即，当时由券商、银行、保险共同组成的「金三胖」或将不再延续大涨行情，市场即将转入结构性的行情特征。以下是我在夕会做的课件。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:2:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" A 股市场大势研判今年春节火了一把「微信·红包」，群里纷纷慷慨解囊。同时，A股也经历了一大波的红包行情。在此背景下，我继续看好A股上涨的基本逻辑不变。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:3:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 三维丝：东山之志始末不渝三维丝是厦门本地的一家上市环保公司。厦门营业部想针对厦门本地上市公司提供一些特色的服务产品，张博士指派我去研究三维丝。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:4:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 铁汉生态：英雄柔情铁汉生态主要从事生态修复与园林绿化工程建设。公司所处环保行业未来受益于国家对环保产业的政策性扶持与产业内生增长。公司的主要投资看点有： 同时掌握生态修复技术和具备园林绿化施工资质的企业 凭借在生态修复和园林绿化两个领域丰富的项目经验和较强的竞争优势 未来将收获更多市场订单 公司现金流充裕、多渠道融资途径畅通 将结合PPP模式与政府部门开展一系列合作 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:5:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 银江股份：智慧城市，引领未来银江股份是智慧城市的优秀标的，公司主要面向智慧城市的各个设计、开发、承包、集成等全产业链服务。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:6:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 北化股份北化股份主要从事硝化棉的生产与销售，公司实际控制人为中国兵器工业集团（「兵工」）。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:7:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 国睿科技国睿科技是我进入金顾中心研究的第一支股票标的。公司主要涉及军工概念的炒作。 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:8:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 大象「如何」起舞这是一次关于如何看待时下行情的讲座。当时正值「两会」召开前夕，我推荐从其中挖掘题材股。 两会期间被轮番爆炒，热词抢占A股前沿 环保是一个「大产业」： 支柱产业定位，环保行业政策 国资改革：全面推进 互联网+：不仅是改造传统产业，而是「重造」整个生态 工业4.0：中国制造2025 政策为经济兜底：基建、地产、有色、金属 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:9:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" 孔雀東南飛沪港通自从正式开通后，由于国内A股市场已经风生水起、红红火火的经历了一大波超级疯牛行情，因此，国内资金较少发生外流。从沪港通双向的资金流向来看，我发现，海外资金通过沪股通渠道大量的流入国内，而资金走港股通外流的体量则非常少。可以说，整个港股通似乎被市场遗忘了。 然而，这种情况却随着证监会宣布险资可以购买香港市场的创业板股票、公募资金有望南下流向香港市场，以及后续的两地基金互认等，如此多的政策红利集中在今年的4月初爆发。在短短的几个交易日里，香港市场走出了多连阳，许多股票甚至都翻番，乃至多倍。 在这个时间点，我与厦门营业部的同事交流了香港市场的投资机会，并在夕会上做了分享。 直接受益于资本市场制度红利的券商行业 AH 股折价率:两地估值溢价。主要是 TMT 类小市值个股 稀缺性:市值结构。对于港股来说，优质的 TMT 类公司具备一定的稀缺性 股息分红:两地风格偏好。外部投资者偏好于高分红低估值且业绩相对稳定的资产 产业竞争力:全球视角 一言以蔽之：真正的价值投资！！！ 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:10:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Lectures"],"content":" A股保卫战6月至7月期间，大盘经历了惨烈的下跌，指数回调40%以上，对应到个股，可以用「一波三折」来形容：估价下跌了60%以上，基本上可以说，许多股票相对于前期高点已经出现了「三折」的回调。一方面，本次的股灾有市场自发性，即对前期疯牛行情的调整，另一方面，监管层有应当承担一定的责任。自从牛市开始启动，监管层名义上打着金融创新的旗号，大肆的纵容杠杆资金涌入股市，导致这次牛市演变为疯牛模式，而在后期监管层意识到事态的严重时，并没有采取疏导的方式，反而采取了极端的一刀切，导致场外资金恐慌性抛售。我们知道，本次的牛市具有「快、急、狠」的特征，这与大量的杠杆资金具有密切的关系。而当这一批杠杆资金疯狂的逃顶时，往往造成股市的「挤兑」惨剧。这类似于在金融危机时期，银行会发生挤兑一样。当恐慌酿造成流动性缺失的悲剧时，A股市场便开始大面积的发生踩踏。 针对此次A股的保卫战，我应邀给厦门营业部的客户进行一次深入的讲座。我的基本观点是，本次的牛市为国家意志，牛市的逻辑依然存在；同时，市场过于疯狂，往往发生非理性繁荣的假象，需要我们甄别真伪，找寻那些真正符合国家产业升级大方向的股票。 同时，我也给出了未来三季度的一些资产配置建议。 “跟随龙头策略”：，在“泡沫”阶段往往是龙头的轮涨，一个龙头倒下了，新的龙头又会起来 去年12月主升浪：航空、券商、一带一路、南北车龙头切换 年初至今：传媒、医疗、新能源汽车、军工、软件、乐视网等龙头的切换 二季度大蓝筹+低价小市值同时看好 大：建议关注那些估值还未充分修复的行业（银行、金融、有色） 小：关注那些需求和供给同时扩张、最符合产业转型方向的行业（医疗服务、互联网传媒、软件、电子、环保）。 当下半年大盘股估值修复结束后，小盘股可能出现“最后的疯狂” 全屏查看 ","date":"2015-07-28","objectID":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/:11:0","tags":["国信","证券","讲座","课件"],"title":"我在国信证券做讲座","uri":"/archives/2015-07-28-%E6%88%91%E5%9C%A8%E5%9B%BD%E4%BF%A1%E8%AF%81%E5%88%B8%E5%81%9A%E8%AE%B2%E5%BA%A7/"},{"categories":["Quant"],"content":"推导远期利率与互换利率。","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":"下面我们来推导远期利率与互换利率。这两个利率变量常常在金融建模中有重要的作用。 ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:0:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 远期利率互换(FRA)远期利率互换（Forward Rate Agreement）指的是这样一种金融合约，$FRA(t; T, S)$: 在 $(t)$ 时期确定的； 到 $(T)$ 以事先约定的支付金额 $(K)$; 交割到期日为 $(S)$ 的债券。 其合约价值为 $$ \\begin{align} V_{FRA} \u0026= N P(t, S) \\tau(T, S) \\big[ K- L(T, S) \\big], \\label{value-fra} \\end{align} $$ 其中，$\\tau(T,S)$ 表示在两个时期的时间差，通常按照年为单位计算。$L(T,S)$ 是简单复合利率，通常指的是LIBOR。下面我们来求得远期即期利率$F(t;T,S)$。 由式子$\\eqref{value-fra}$展开 $$ \\begin{align} V_{FRA} \u0026= N \\Big[ P(t, S) \\tau(T, S) K - P(t, S) \\tau(T, S) L(T, S) \\Big]. \\end{align} $$ 根据无套利条件，我们有以下关系成立(详细推导见：Filipovic: Term Structure Model: A Graduate Course) $$ \\begin{align} P(t,S) \u0026= P(t,T) P(T,S) \\end{align} $$ 同时,我们有 $$ \\begin{align} L(T,S) :=\u0026 \\frac{1}{\\tau(T,S)}\\Big( \\frac{1}{P(T,S)} - 1 \\Big) \\ \\tau(T,S)L(T,S) =\u0026 \\frac{1}{P(T,S)} - 1 \\ \\end{align} $$ 因此， $$ \\begin{align} V_{FRA} \u0026= N \\Big[ P(t, S) \\tau(T, S) K - P(t, S) \\tau(T, S) L(T, S) \\Big] \\\\ \u0026= N \\Big[ P(t, S) \\tau(T, S) K - P(t, S) \\big(\\frac{1}{P(T,S)} - 1 \\big) \\Big] \\\\ \u0026= N \\Big[ P(t, S) \\tau(T, S) K - \\big(\\frac{P(t, S)}{P(T,S)} - P(t, S) \\big) \\Big] \\\\ \u0026= N \\Big[ P(t, S) \\tau(T, S) K - P(t,T) + P(t, S) \\Big] \\end{align} $$ ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:1:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 远期即期利率在无套利的要求下，远期即期利率（Future spot rate）必需满足一个「公平价格」的原则，即使得远期利率协议的价值为零的利率水平，则 $$ \\begin{align} V_{FRA} \u0026= 0 = N \\Big[ P(t, S) \\tau(T, S) F(t;T,S) - P(t,T) + P(t, S) \\Big] \\\\ \\Rightarrow F(t;T,S) \u0026= \\frac{1}{\\tau(T,S)} \\bigg[ \\frac{P(t,T)}{P(t,S)} - 1 \\bigg]. \\end{align} $$ ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:2:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 利率互换（IRS）下面我们来介绍另外一种利率产品：利率互换（Interest Rate Swap,IRS): 固定支付：约定在未来的一个时间段内按照合同约定的比例支付，假定该水平值为 $(K)$ 浮动利率：合同的另一方则需要根据合同拟采用的浮动利率水平来做对冲支付，一般而言，该浮动利率为短期简单复利的LIBOR, $(L(T_{i-1}, T_{i}))$。 我们记该时间段为 $(\\mathcal{T} = { T_{\\alpha}, T_{\\alpha+1},\\cdots,T_{\\beta - 1}, T_{\\beta}})$，$\\tau_{i} = \\tau(T_{i-1}, T_{i}),$ 且有 $(\\mathcal{\\tau} = { \\tau_{\\alpha + 1}, \\tau_{\\alpha+2},\\cdots,\\tau_{\\beta - 1}, \\tau_{\\beta}})$。 则我们可以得到 IRS 的合约价值为 $$ \\begin{align} V_{IRS} \u0026= \\sum_{i=\\alpha+1}^{\\beta} D(t,T_i) N \\tau_i \\bigg[ K - L(T_{i-1}, T_{i}) \\bigg] \\label{value-irs} \\end{align} $$ 对比 $(\\eqref{value-fra})$ 和 $(\\eqref{value-irs})$，我们不难发现，利率互换可以看作来一系列的远期利率协议的总和，即 $$ \\begin{align} V_{IRS} \u0026= \\sum_{i=\\alpha+1}^{\\beta} V_{FRA} \\\\ \u0026= \\sum_{i=\\alpha+1}^{\\beta} N P(t, T_i) \\tau_i \\big[ K- F(t;T_{i-1},T_{i}) \\big] \\\\ \u0026= N \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i K - N \\boxed{ \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i F(t;T_{i-1},T_{i}) }. \\end{align} $$ 对于方框内的式子，我们可以做如下运算 $$ \\begin{align*} \u0026 \\boxed{ \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i F(t;T_{i-1},T_{i}) } \\\\ =\u0026 \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau(T_{i-1},T_{i}) \\cdot \\frac{1}{\\tau(T_{i-1},T_{i})} \\bigg[ \\frac{P(t,T_{i-1})}{P(t,T_{i})} - 1 \\bigg] \\\\ =\u0026 \\sum_{i=\\alpha+1}^{\\beta} \\bigg[ P(t,T_{i-1}) - P(t,T_{i}) \\bigg] \\\\ =\u0026 P(t,T_{\\alpha}) - P(t,T_{\\beta}) \\end{align*} $$ 从而， $$ \\begin{align} V_{IRS} \u0026= N \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i K - N \\bigg( P(t,T_{\\alpha}) - P(t,T_{\\beta}) \\bigg) \\end{align} $$ ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:3:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 互换利率（Swap Rate）同理，为来得到无套利条件，我们要求互换利率使得该利率互换的价值为零，即 $$ \\begin{align} V_{IRS} \u0026= 0 = N \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i S_{\\alpha, \\beta} (t) - N \\bigg( P(t,T_{\\alpha}) - P(t,T_{\\beta}) \\bigg) \\\\ \\Rightarrow S_{\\alpha, \\beta} (t) \u0026= \\frac{ P(t,T_{\\alpha}) - P(t,T_{\\beta}) }{ \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i } \\end{align} $$ 对此，我们可以这样理解： 首先，投资者为了对冲未来利率不确定所带来的影响，要求在未来的某个时间段内以固定的收益 $(P(t,T_{\\alpha}))$ 提前买入债券，而将在更远的未来 $(T_{\\beta})$ 抛售手里的债券，价值为 $(P(t,T_{\\beta}))$，其总和的盈余收益为 $(P(t,T_{\\alpha}) - P(t,T_{\\beta}))$。 在合约期间，投资者放弃的机会成本总共为 $(\\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i)$。 因此，在满足市场无套利的条件下，互换利率因该使得该投资策略的超额收益率是零，即该投掷策略的收益与互换利率持平，是故 $$ \\begin{align} S_{\\alpha, \\beta} (t) \u0026= \\frac{ P(t,T_{\\alpha}) - P(t,T_{\\beta}) }{ \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i } \\end{align} $$ ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:4:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 远期即期利率与远期互换利率的关系我们知道任一两个债券价格可以通过远期即期利率产生联系，例如 $$ \\begin{align} \\frac{P(t,T_{k})}{P(t,T_{\\alpha})} \u0026= \\frac{P(t,T_{\\alpha + 1})}{P(t,T_{\\alpha})} \\cdot \\frac{P(t,T_{\\alpha + 2})}{P(t,T_{\\alpha + 1})} \\cdots \\frac{P(t,T_{\\beta})}{P(t,T_{\\beta - 1})} \\\\ \u0026= \\prod_{j=\\alpha+1}^{k} \\frac{1}{1 + \\tau_j F(t;T_{j-1}, T_j)} \\end{align} $$ 从而，我们也可以利用这个关系来推导得到远期即期利率与远期互换利率的关系 $$ \\begin{align} S_{\\alpha, \\beta} (t) \u0026= \\frac{ P(t,T_{\\alpha}) - P(t,T_{\\beta}) }{ \\sum_{i=\\alpha+1}^{\\beta} P(t, T_i) \\tau_i K } \\\\ \u0026= \\frac{ 1 - \\frac{P(t,T_{\\beta})}{P(t,T_{\\alpha})} }{ \\sum_{i=\\alpha+1}^{\\beta} \\tau_i \\frac{P(t, T_i) }{ P(t,T_{\\alpha}) } } \\\\ \u0026= \\frac{ 1 - \\prod_{j=\\alpha+1}^{\\beta} \\frac{1}{1 + \\tau_j F(t;T_{j-1}, T_j)} }{ \\sum_{i=\\alpha+1}^{\\beta} \\tau_i \\prod_{j=\\alpha+1}^{i} \\frac{1}{1 + \\tau_j F(t;T_{j-1}, T_j)} } \\end{align} $$ ","date":"2014-03-26","objectID":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/:5:0","tags":["math","finance"],"title":"远期利率互换","uri":"/archives/2014-03-26-%E8%BF%9C%E6%9C%9F%E5%88%A9%E7%8E%87%E4%BA%92%E6%8D%A2/"},{"categories":["Quant"],"content":" 股票价格建模假设股票价格的变化服从以下运动方程（随机微分方程，SDE）： $$ \\begin{align} d S_t = \\mu S_t dt + \\sigma S_t dW_t, \\end{align} $$ 其中 \\(dW_t\\) 是一个（连续的）Brownian motion，$W_t \\sim \\mathcal{N} (0, t)$。等价的，我们可以得到股票价格变化率： $$ \\begin{align} d \\ln S_t = \\frac{ d S_t }{ S_t } = \\mu dt + \\sigma dW_t. \\end{align} $$ 下面我们来推导股票价格 \\(S_t\\) 的动态方程，这主要是使用著名的 Ito 公式。过于理论的东西我在这里不推导了，主要是利用一个简单的例子来说明如何使用 Ito 公式 解 SDE 类问题。 ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:1:0","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" Ito 公式求解首先，令 \\(Y_t = ln S_t\\)，由简单的偏微分求导得到 $$ \\begin{align} \\frac{ \\partial Y }{ \\partial t} \u0026= 0 \\ \\frac{ \\partial Y }{ \\partial S} \u0026= \\frac{ 1 }{ S } \\ \\frac{ \\partial^2 Y }{ \\partial S^2} \u0026= - \\frac{ 1 }{ S^2 } \\ \\end{align} $$ 则根据 Ito 公式，我们可以推出以下方程 $$ \\begin{align} d \\ln S_t = d Y_t \u0026= \\frac{ \\partial Y }{ \\partial t} dt + \\frac{ \\partial Y }{ \\partial S} dS_t + \\frac{1}{2} \\frac{ \\partial^2 Y }{ \\partial S^2} dS_t dS_t \\nonumber\\ \u0026= 0 · dt + \\frac{ 1 }{ S_t } dS_t - \\frac{1}{2} · \\frac{ 1 }{ S_t^2 } dS_t dS_t \\nonumber\\ \u0026= \\frac{ 1 }{ S_t } · S_t · (\\mu dt + \\sigma dW_t) - \\frac{1}{2} · \\frac{ 1 }{ S_t^2 } · \\sigma^2 S_t^2 dt \\nonumber\\ \u0026= (\\mu - \\frac{1}{2} \\sigma^2) dt + \\sigma dW_t. \\ \\end{align} $$ 两边求积分，得到如下式子 $$ \\begin{align} \\int_{0}^{t} d \\ln S_u = \\int_{0}^{t} d Y_u \u0026= \\int_{0}^{t} (\\mu - \\frac{1}{2} \\sigma^2) du + \\int_{0}^{t} \\sigma dW_u \\ \\Rightarrow \\ln S_t - \\ln S_0 = Y_t - Y_0 \u0026= (\\mu - \\frac{1}{2} \\sigma^2) t + \\int_{0}^{t} \\sigma dW_u. \\end{align} $$ 我们知道，Brownian Motion 表示在一定时间段内随机游走走过的路径，并且如果我们假定在初始阶段为 \\(W(0)=0\\)，那么，上面等式的最后一项是 $$ \\begin{align} \\int_{0}^{t} \\sigma dW_u \u0026= \\sigma (W_t - W_0 ) = \\sigma W_t. \\end{align} $$ 因此，我们有 $$ \\begin{align} \\ln S_t - \\ln S_0 = Y_t - Y_0 \u0026= (\\mu - \\frac{1}{2} \\sigma^2) t + \\sigma W_t \\nonumber\\ \\Rightarrow Y_t \u0026= Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t + \\sigma W_t \\nonumber\\ \\Rightarrow S_t \u0026= S_0 · \\exp{ (\\mu - \\frac{1}{2} \\sigma^2) t + \\sigma W_t }. \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:2:0","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" 几何布朗运动我们知道，对于任何一个正态分布做线性转换后依然服从正态分布。由于布朗运动 \\(W_t \\sim \\mathcal{N} (0, t)\\)，则 $$ \\begin{align} Y_t \u0026= Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t + \\sigma W_t \\nonumber\\ \\Rightarrow E[Y_t|Y_0] \u0026= E[ Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t + \\sigma W_t] \\nonumber\\ \u0026= Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t + \\underbrace{E[\\sigma W_t]}_{0} = Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t \\ \\Rightarrow Var[Y_t|Y_0] \u0026= Var [\\sigma W_t] = \\sigma^2 Var(Wt) = \\sigma^2 ·t \\nonumber\\ \\Rightarrow Y_t \u0026\\sim \\mathcal{N}( Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t, \\sigma^2 t ) \\label{gbm_norm} \\end{align} $$ 那么，$\\ln S_t = Y_t$ 则服从 正态分布，则 \\(S_t = e^{Y_t}\\)服从 log-normal disctribution，即 \\(\\ln S_t \\sim \\mathcal{N} (E[S_t], Var[S_t])\\). 下面我们来推导 \\(S_t\\) 的分布特征。 ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:3:0","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" Moment Generation Function我们知道，对于对任何一个随机变量建模，往往需要假设该变量服从某一类随机过程，而这个随机过程由分布函数（distribution function）给定。可是，有些时候，我们并不一定需要知道整个分布函数的具体形式，而只是关注该随机变量的几个「统计特征」，如一阶矩、二阶矩等。下面要介绍的「矩条件生成函数」就针对这种情况提出的。随机变量的矩条件可以在 Moment Generation Function (MGF) 十分方便的推导出来。比如，对于正态分布，我们只需要知道一阶矩和二阶矩条件就可以对变量做统计推断（method of moment, MM，还有更一般的 GMM）。 对于一个可测空间 \\((\\Omega, \\mathcal{F}, P)\\)，随机变量 \\(X \\in \\sigma(\\mathcal{F})\\) 的 MGF 定义为 $$ \\begin{align} M_{X}(\\tau) \u0026= E[ e^{x\\tau}] = \\int_{\\Omega} e^{x(\\omega)\\tau} dP(\\omega) \\end{align} $$ 其任一 \\(m-\\) 阶的矩公式可以对 \\(\\tau\\) 在 \\(\\tau = 0\\) 处求 \\(m\\) 次导数得到 $$ \\begin{align} \\frac{\\partial M_{X}(\\tau)}{\\partial \\tau}|{\\tau = 0} \u0026= \\frac{\\partial}{\\partial \\tau} E[ e^{x\\tau}] |{\\tau = 0} = E[ x · e^{x\\tau}] |{\\tau = 0} \\nonumber\\ \u0026= E[x] \\ \\frac{\\partial ^2 M{X}(\\tau)}{\\partial \\tau ^2 }|{\\tau = 0} \u0026= E[x^2] \\ \\frac{\\partial ^m M{X}(\\tau)}{\\partial \\tau ^m }|{\\tau = 0} \u0026= E[x^m] \\end{align} $$ 特别的，对于一个正态分布，$X \\sim \\mathcal{N}(\\mu, \\sigma^2)$，有 $$ \\begin{align} M{X}(\\tau) \u0026= E[ e^{x\\tau}] = \\exp{ \\mu \\tau + \\frac{1}{2} \\sigma^2 \\tau^2 } \\end{align} \\ $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:3:1","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" 期望与方差这个特征对于求一个「对数正态分布」十分有用。由$\\eqref{gbm_norm}$ $$ \\begin{align} Y_t \u0026\\sim \\mathcal{N}( Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t, \\sigma^2 t ) \\end{align} $$ 则其 MGF 为 $$ \\begin{align} M_{Y}(\\tau) \u0026= E[e^{y\\tau}] = \\exp{ \\tilde{\\mu} \\tau + \\frac{1}{2} \\tilde{\\sigma}^2 \\tau^2 }, \\end{align} $$ 其中，$\\tilde{\\mu} = Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t$，$\\tilde{\\sigma}^2= \\sigma ^2 t$ . 因此，我们可以得到如下公式 $$ \\begin{align} E[S^{\\tau}] \u0026= E[e^{y\\tau}] = \\exp{ \\tilde{\\mu} \\tau + \\frac{1}{2} \\tilde{\\sigma}^2 \\tau^2 } \\end{align} $$ 即，期望可以表示为 $$ \\begin{align} E[S_t] \u0026= E[e^{y\\tau}]|_{\\tau = 1} = \\exp{ \\tilde{\\mu} + \\frac{1}{2} \\tilde{\\sigma}^2 } \\nonumber\\ \u0026= \\exp{ Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t + \\frac{1}{2} \\sigma^2 t } \\nonumber\\ \u0026= S_0 · e^{\\mu t } \\ \\end{align} $$ $$ \\begin{align} E[S^2] \u0026= E[e^{y\\tau}]|_{\\tau = 2} = \\exp{ 2 \\tilde{\\mu} + 2 \\tilde{\\sigma}^2 } \\nonumber\\ \u0026= \\exp{ 2 [Y_0 + (\\mu - \\frac{1}{2} \\sigma^2) t ] + 2 \\sigma^2 t } \\nonumber\\ \u0026= S_0^2 · \\exp{ 2 \\mu t + \\sigma^2 t} \\end{align} $$ 因此，$S_t$ 的方差可以表示为 $$ \\begin{align} Var[S_t] \u0026= E[S^2] - ( E[S] )^2 \\nonumber\\ \u0026= S_0^2 · \\exp{ 2 \\mu t + \\sigma^2 t} - S_0^2 · \\exp{ 2 \\mu t } \\nonumber\\ \u0026= S_0^2 · e^{ 2 \\mu t } · (e^{ \\sigma^2 t - 1 }) \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:3:2","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" O-U Process其实，我们同样可是使用这种方法来解一类更加广义的随机过程——O-U过程。这个过程为 $$ \\begin{align} d X(t) \u0026= - \\kappa (X(t) - \\theta) d t + \\sigma dW(t). \\label{ou} \\end{align} $$ 在式子$\\eqref{ou}$中，我们注意到参数 \\((\\kappa, \\theta, \\sigma)\\) 决定了整个随机过程的特征： \\(\\kappa\\)：是随机过程的「变化率」，即控制了整个随机过程向长期均值回归的快慢程度; \\(\\theta\\)：代表了随机过程的「长期均值水平」，O-U 过程最显著的特征是其具有了「均值回复」，即在变化率 \\(\\kappa\\) 的控制下变量趋于稳定的状态。这个在利率期限结构建模中经常使用，如最早的 Vasicek 利率模型就是一个典型的 O-U 过程。 \\(\\sigma\\)：表示随机过程的「瞬时方差」。 下面我们来求解显示解。 首先对方程$\\eqref{ou}$在区域 \\([0, t]\\) 进行积分得到 $$ \\begin{align} \\int_{0}^{t} d X(u) \u0026= -\\int_{0}^{t} \\kappa X(u) du + \\int_{0}^{t} \\kappa \\theta du + \\int_{0}^{t} \\sigma dW(u), \\end{align} $$ 然后两边同时乘以 \\(e^{\\kappa u}\\) 得到 $$ \\begin{align} \\int_{0}^{t} e^{\\kappa u} d X(u) \u0026= -\\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du + \\int_{0}^{t} \\kappa \\theta e^{\\kappa u} du + \\int_{0}^{t} \\sigma e^{\\kappa u} dW(u). \\label{ou-int} \\end{align} $$ 我们分开求解等式两边。 先是对左边进行分步积分得到 $$ \\begin{align} LHS \u0026= e^{\\kappa u} X(u) |{u=0}^{t} - \\int{0}^{t} \\kappa X(u) e^{\\kappa u} du \\nonumber \\ \u0026= e^{\\kappa t } X(t) - X(0) - \\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du . \\label{lhs} \\end{align} $$ 同样的，我们也可以求出右边式子 $$ \\begin{align} RHS \u0026= - \\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du + \\int_{0}^{t} \\theta de^{\\kappa u} + \\int_{0}^{t} \\sigma e^{\\kappa u} dW(u) \\nonumber\\ \u0026= - \\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du + \\theta (e^{\\kappa t} - 1) + \\int_{0}^{t} \\sigma e^{\\kappa u} dW(u) \\label{rhs} \\end{align} $$ 对比$\\eqref{lhs}$与$\\eqref{rhs}$， $$ \\begin{align} e^{\\kappa t } X(t) - X(0) - \\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du \u0026= -\\int_{0}^{t} \\kappa X(u) e^{\\kappa u} du + \\theta (e^{\\kappa t} - 1) + \\int_{0}^{t} \\sigma e^{\\kappa u} dW(u) \\nonumber \\ e^{\\kappa t } X(t) - X(0) \u0026= \\theta (e^{\\kappa t} - 1) + \\int_{0}^{t} \\sigma e^{\\kappa u} dW(u) \\nonumber \\ \\Rightarrow X(t) \u0026= e^{-\\kappa t} (X(0)-\\theta) + \\theta + \\int_{0}^{t} \\sigma e^{-\\kappa (t-u)} dW(u) \\label{oup} \\ \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:4:0","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" 期望由$\\eqref{oup}$得到 $$ \\begin{align} X(t) \u0026= e^{-\\kappa t} (X(0)-\\theta) + \\theta + \\int_{0}^{t} \\sigma e^{-\\kappa (t-u)} dW(u) . \\nonumber \\end{align} $$ 则其期望可以表示为 $$ \\begin{align} E[X(t)|X(0)] \u0026= E[ e^{-\\kappa t} (X(0)-\\theta) + \\theta + \\int_{0}^{t} \\sigma e^{-\\kappa (t-u)} dW(u) ] \\nonumber \\ \u0026= e^{-\\kappa t} (X(0)-\\theta) + \\theta. \\label{exp} \\end{align} $$ 最后一项由 \\(W_t \\sim \\mathcal{N} (0, t)\\) 得到。 利用$\\eqref{exp}$，我们可以求出 O-U 过程在长期的一个均值回复项，即 $$ \\begin{align} \\lim_{t \\rightarrow + \\infty } e^{-\\kappa t} (X(0)-\\theta) + \\theta = \\theta. \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:4:1","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" 协方差任一区间内 \\([s,t]\\) 协方差可以由以下求出。 $$ \\begin{align} cov(X_s, X_t) \u0026= E[ (X_s-E[X_s])·(X_t-E[X_t])] \\nonumber\\ \u0026= \\sigma^2 E\\bigg[ \\int_{0}^{s} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \\label{cov} \\end{align} $$ 这里我们需要使用到两个基本的概念 布朗运动的「独立增量」(indepdent increasement)，即任何一个布朗运动在不同期间内的增量是相互独立的，即对于区间 \\([0,t], 0 \\leq t_0 \\leq t_1 \\leq \\cdots \\leq t_n \\leq t\\), \\(W(t_1)-W(t_0)\\), \\(W(t_2)-W(t_1)\\),$\\cdots$, \\(W(t_n)-W(t_{n-1})\\) 是相互独立的增量过程。 Ito Isometry 性质：即对于一个布朗运动的独立增量，$dW_t$，有关其多项式有如下性质 $$ \\begin{align} E\\bigg[ \\bigg( \\int_{0}^{t} F(u) dW(u) \\bigg)^2\\bigg] \u0026= \\int_{0}^{t} E \\big[ F^2(u) \\big] du \\end{align} $$ 利用这两个性质，对于$\\eqref{cov}$，如果 \\(s \\geq t\\) (反之，$s \\leq t$，则令二者调换，即 \\(t=\\min\\{s,t\\}\\))，我们有 $$ \\begin{align} cov(X_s, X_t) \u0026= \\sigma^2 E\\bigg[ \\bigg( \\int_{0}^{t} e^{-\\kappa (s-u)} dW(u) + \\int_{t}^{s} e^{-\\kappa (s-u)} dW(u) \\bigg) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \\ \u0026= \\sigma^2 E\\bigg[ \\int_{0}^{t} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\nonumber \\ \u0026 \\qquad + \\int_{t}^{s} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \\ \u0026= \\sigma^2 \\Bigg{ E\\bigg[ \\int_{0}^{t} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \\nonumber \\ \u0026 \\qquad + E\\bigg[ \\int_{t}^{s} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \\Bigg}， \\label{cov1} \\ \\end{align} $$ 对于第一项我们需要使用 Ito Isometry 性质, $$ \\begin{align} E\\bigg[ \\int_{0}^{t} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \u0026= E\\bigg[ \\int_{0}^{t} e^{-\\kappa (s-u)} · e^{-\\kappa (t-u)} du \\bigg] \\ \\end{align} $$ 而第二向可以由布朗运动的独立增量性质消除， $$ \\begin{align} \u0026 E\\bigg[ \\int_{t}^{s} e^{-\\kappa (s-u)} dW(u) · \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] \u0026 \\nonumber \\ =\u0026 E\\bigg[ \\int_{t}^{s} e^{-\\kappa (s-u)} dW(u) \\bigg] · E\\bigg[ \\int_{0}^{t} e^{-\\kappa (t-v)} dW(v) \\bigg] = 0 \\end{align} $$ 因此，方程$\\eqref{cov1}$变为 $$ \\begin{align} cov(X_s, X_t) \u0026= \\sigma^2 \\Bigg{ E\\bigg[ \\int_{0}^{t} e^{-\\kappa (s-u)} · e^{-\\kappa (t-u)} du \\bigg] \\Bigg} \\label{cov2} \\ \u0026= \\sigma^2 \\Bigg{ e^{-\\kappa (s+t)} E\\bigg[ \\int_{0}^{t} e^{2\\kappa u} du \\bigg] \\Bigg} = \\sigma^2 · e^{-\\kappa (s+t)} · \\frac{1}{2\\kappa} · e^{2\\kappa u}\\bigg|_{u=0}^{t} \\ \u0026= \\frac{\\sigma^2}{2\\kappa} e^{-\\kappa (s+t)} · \\Bigg( e^{2\\kappa t} -1 \\Bigg). \\end{align} $$ 也就是说，对于任何一个协方差，我们都有 $$ \\begin{align} cov(X_s, X_t) \u0026= \\frac{\\sigma^2}{2\\kappa} e^{-\\kappa (s+t)} · \\Bigg( e^{2\\kappa · \\min{s,t} } -1 \\Bigg). \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:4:2","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" 方差方差也就是0阶协方差， $$ \\begin{align} Var(X_t) \u0026= cov(X_t, X_t) = \\frac{\\sigma^2}{2\\kappa} e^{-\\kappa (t+t)} · \\Bigg( e^{2\\kappa · \\min{t,t} } -1 \\Bigg) \\nonumber\\ \u0026= \\frac{\\sigma^2}{2\\kappa} \\Bigg( 1 - e^{ -2\\kappa t } \\Bigg) \\end{align} $$ ","date":"2014-03-16","objectID":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/:4:3","tags":["Stochastic","Ito","SDE"],"title":"庖丁解牛之 Ito 公式","uri":"/archives/2014-03-16-%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B%E4%B9%8B-ito-%E5%85%AC%E5%BC%8F/"},{"categories":["Quant"],"content":" fed下午在浏览『华尔街见闻』的时候正好看到了这样一篇有意思的文章，大致介绍了美联储是如何从一个由实干家（如银行家与金融巨头）组成的俱乐部升级成由一帮经济学博士引领的「学院派」。文章写的条理比较清楚的了，从成员的学位背景出发梳理了美联储的发展历程。诸位如果感兴趣可以前去看看。我这里主要是提供一个个人的随想而已。 首先来一个「全家福」吧。 文章谈到了对美联储决策有重要影响的几位「高官」的学历背景。目前新晋美联储主席的耶伦（Yellen）拥有 Yale 经济学博士学历，其在学术界有颇有建树。而那些身处高职的几位委员会成员（FOMC）均配有经济学博士学位，如 Stanley Fischer 就是前 IMF 的首席经济学家 [^1] 。而如果从历史的纵向来看，这个趋势就更加明显了：沃尔克当时还只是经济学硕士，到了格林斯潘后来获得博士学位，而前任伯南克就已经是一名正式的大学（宏观）经济学教授了。Blinder 是原 FOMC 委员，他对 Fed 的历史颇有研究，宣称： 我相信，当时在美联储80年的历史中，我是第四个或第五个学院派委员。不久后耶伦也来了，然后学院派就开始蜂拥而入。如今，这是一个很正常的现象，而且学院派教授更受欢迎。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/:1:0","tags":["fed"],"title":"美联储的博士系","uri":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/"},{"categories":["Quant"],"content":" PhD中国有古语说『物以类聚，人以群分』，这个自然界的普遍真理同样适用于经济学界。我们经常看到持有不同观点的学派之间是如何明争暗斗的，比如早些年的世纪大战——凯恩斯与哈耶克的论战，到后来由弗里德曼扛旗的货币主义学派反攻凯恩斯主义阵营。有些时候我真就觉得经济学这个大火锅里搅拌的是娱乐圈的废料，「你方唱罢我来和」，不无热闹，却全无一点增进人民福祉的实景。 当初成立美联储的初衷是为了结束美国国内混乱的金融秩序，统一由一个中央决策机构来制定、执行货币政策。因此，当初在位掌权的一般都是一些银行家与金融巨头，大家都比较注重实干，以直觉和经验取胜，很少能寻觅到经济学院派的作风。 物是人非，斗转星移，我们现在看到美联储的境况，清一色的由理论界与学院派占山为王，并且在将来的很长一段时间内，这样的趋势会进一步明显。这些成员一般都具有良好的经济学训练，取得正规的博士学位，而且绝大部分还有过学术研究的经历，在各自的领域都有不小的影响力。如前任伯南克，在研究经济萧条理论、商业周期、宏观经济与失业率等诸多方面颇有成就。下面这幅图揭示了在美联储长达一个世纪的演变过程中，成员学术能力的提升。 就美联储成员在学位背景上不断更新的情况来分析，文章是这样认为的： 美联储拥有越来越多的博士可能是件好事。一个只有经济学博士担任高级职位的美联储将有很多局限。多元化会带来各种正面效应，单一文化则会脆弱和不健康。 我的想法是，今后金融实务界能够更好的预测到美联储的决策机制了。在以前，美联储在公开市场的决策与操作动机基本是一个黑盒子，外界无从知晓。到了上世纪70年代，美联储才开始注重与大众的沟通，定期的发布公告向金融市场传送消息，并且在独立性方面获得了巨大的改善。可是外界在对美联储的决策进行拿捏把握上依然小心谨慎，如履薄冰。这归根到底还是因为美联储的决策机制不够开放，无法面向外界提供所有的内部信息。而正是这种信息上的不对称，导致每次在美联储闭门研讨经济决策的前后时期均可看到明显的市场波动，伤害经济的稳健。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/:2:0","tags":["fed"],"title":"美联储的博士系","uri":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/"},{"categories":["Quant"],"content":" Finance而现在，我们可以从美联储成员的组成结构上获得一定的「启发」。不同的经济学理论在针对同样一个经济问题时提供的解决方案千差万别，有时甚至是南辕北辙，背道而驰。因此，我们可以借助对美联储组成成员的经济理论主张上分析其未来的决策风格与指导理论，从而在一定程度上透析美联储这个神秘的机构。我的建议时，当前的市场参与者还是需要对新一届的美联储决策机构多做一些「功课」，以便深入了解其决策特征，从而更好的预测与把握美联储在今后制定的各项经济政策。 当然，我们也可以从另外一个方面看问题。就是如果美联储的成员构成正的过于学院派，那么其在应对更加具体的金融事件上，可能不会从金融实务界的形势出发，或者干脆就忽视了那些真正需要解决问题的方案的银行家的呼声。这对美联储今后的决策有效性不得不大打折扣，甚至在某些时候反而会伤害实际经济的健康发展。纯粹由经济理论模型提出的药方往往不能够良好的「接地气」，反而挫伤实体经济的积极性。 [^1] Fischer 也是学术界的大牛，和 Blanchard 共同著有“Lectures on Macroeconomcis”，红极一时，可谓那个时代的标准 textbook。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/:3:0","tags":["fed"],"title":"美联储的博士系","uri":"/archives/2014-02-12-%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8D%9A%E5%A3%AB%E7%B3%BB/"},{"categories":["Personal"],"content":"想着有一段时间没有码字了，指尖竟然有些生疏。其实每次打开笔记本，总是想着要有千言万语诉说，那种浓厚的情绪像是一次乘坐列车的远行去拜见一位老友，漫长的路途上早就打好了腹稿构造了完整的画面，可是真正见面了，我们却什么也不说，只是静静的凝望彼此，一言不发。我是有着千般感情万种思绪，却像是失去了老友多年消息总是联系不上了，我愈要赴会，却不知该买到何站的列车。 此情可待成追忆，只是当时已惘然。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/:0:0","tags":[],"title":"诸多事情","uri":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/"},{"categories":["Personal"],"content":" 一场团圆的春节这个春节过得平淡，安静的出奇。本来嘛，厦门就是一个旅游的城市，人来人往，车水马龙，热闹喧嚣，浮华尘世，这个本该就是这座城市的标志。可是真正到了春节，却也少了人，不见了往日的喧嚣。这座城市一下子变得可爱，如含蓄的姑娘，像待放的花苞，羞羞答答的。大抵是政府的规定只为贪图省事（baoli zhifa），我们的城市在春节期间竟然不允许燃放烟花。只是冷冷清清的城市，在这个孤孤单单的季节里，多少显得有点委屈。 不过几日的天气倒是也好。阳光灿烂如孩童的笑脸天真无瑕，暖心的却不热烈，滑落在皮肤生怕破碎。有一天猪头提议全家动身前去东坪山晒太阳，只为了这一刻的阳光弥足珍贵。是啊，往前每每在老家过年，春节这几天几乎都是阴雨连天，难得的出现这么晴朗的天气。南方的小渔村更添了几分冷意，空气了充斥了水气的冰冻，像是凝结的薄幕。更有那些象征喜庆的鞭炮在燃放过后四处挥舞的烟雾，掺杂在冰晶的半空，久久不散，犹如仙境。一个人常年在外旅居，此刻见了这般景象，竟有一些感伤，仿佛这是一股催泪剂，流浪的酸楚与归家的喜悦一齐涌上眼角，润湿了眼眶。 今天春节并没有回老家过春节。年前和猪头商量了一下，决定邀请家中两位老人来厦团聚。一来是我们也没有那么多时间，本来她的假期就少得可怜，这来来回回的在路上费的时间多，也够折腾人（航班经常改道，火车时而晚点），小咪豆也不大适合舟车劳顿，怕了出了漏子；二来，我们也想让老人家出来走走，毕竟厦门这个春节的天气真的是好的惹人疼爱，招人喜欢，而且在这边我们两个都比较熟悉，平时出来旅游吃饭都挺方便的。于是乎，我们家今年便最终在厦门团聚了。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/:1:0","tags":[],"title":"诸多事情","uri":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/"},{"categories":["Personal"],"content":" 一次未行的聚会掐指一算，现在离初中毕业已经十年了。十年可算是一个大时期，我从一个毛头小伙子到一个丈夫与一个孩子的父亲。走过的这十年，一直都坎坎坷坷，曲曲折折。人生本当如此，历经风雨，奋斗不止，在晚年回首方有可念之处。可是这十年来，我总是那么的羡慕当初的那个纯真的孩子，一脸惘然的朝向未知的旅途，却也满心的勇气。 初中的校园坐落在一个海滩湾处。小，而且年代久远，当时又正值人口峰值，我们的学校里竟然漫漫的都是人。这业已脱离了我对学校的概念，原先的小学人少，地大，小伙伴们总是有各种玩趣之地可去。可是现在，我只能在教室里待着，不能出去，稍不小心，便有人在走廊里撞到了。在这个拥挤甚至可以说是臃肿的校园里，我却感到无尽的孤单。人与人的会面，往往加深了心与心的分裂。愈多的人，愈感孤单。这种在人多之处说体会到的孤单，长年累月的陪伴着我，阴魂不散，挥之不去。 初中唯一让我着迷的事情，是数学课本里那些由符号与方程编写而成的美丽世界。它们像极了天际线在昏黄夜晚的轮廓，淡淡的泛着氤氲。很多时候，我愿凝视这个虚无缥缈却深埋心底的幻城，痴痴的美梦着，想要得到那个神秘的答案。 无数的小时里，我把自己深埋在那些符号里，不吭一声。我的这种孤傲与孤单，将周边的同学都隔离起来了，不再联系。其实，我只是不说一句话；其实，我只是一直都孤单着。 很多的年头里，我不曾与我的那些小伙伴们联络。 今年突然听娜姐给我电话（我也不知她何来家里的号码），说是春节会有同学聚会，毕竟许多人已经不见整十年，希望此次可以相聚会面。可是，这次命运又在捉弄玩笑，今年正值全家都齐来厦门团聚，并没有计划会老家。而家中尚有小咪豆需要照顾，故而此次聚会也无奈不能成行。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/:2:0","tags":[],"title":"诸多事情","uri":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/"},{"categories":["Personal"],"content":" 一个未果的问题有一个悬而未解的问题，未果，不便诉说。 ","date":"2014-02-12","objectID":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/:3:0","tags":[],"title":"诸多事情","uri":"/archives/2014-02-12-%E8%AF%B8%E5%A4%9A%E4%BA%8B%E6%83%85/"},{"categories":["Programming"],"content":"为什么我们做数据分析需要使用 `R` 这门编程语言？难道仅仅是因为她是目前最性感的数据分析语言么？或许还有更多理由，让你爱上这么神奇的统计编程语言。","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 大神出品，必属精品","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:0:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 小小膜拜这个文档记录了我在学习 Hadley Wickham 即将出版的新书，Advanced R Programming 时的一些笔记与总结，以便将来复习查阅。 ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:1:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 老司机谈经验该书博大精深，结构严谨，涵盖面广泛，涉及几乎目前有关「R」的所有问题。从最基础的数据结构开始讲起，然后逐步渐进到如何编写针对问题的 function，再进阶到如何开发能够发布以供他人使用的 package。Wickham 本人就是在「R Community」团体中的传奇人物，开发了许多为人称道的宏包，如 ggplot2等。而本书真是作者在总结了近十年的 「R」软件开发后编写的一本巨著。仔细深入阅读此书必将受益匪浅，极大的提升我们使用与开发「R」的各项技能，真正从最底层去认识「R」这个当今最强大的数据处理、统计分析与图形可视化编程语言。 正如他自己所说的： I have been programming in R for over 10 years, spending a lot of time trying to figure out how the language works. Not everyone has the luxury of spending years to understand a programming language, so this book is my attempt to help you to become an effective R programmer as quickly as possible. By reading this book, you will avoid the many mistakes that I made and the many dead ends that I got stuck in, and quickly navigate your way to useful tools and techniques. Although R has its frustrating quirks, I truly believe that at its heart lies an elegant and beautiful language, well tailored for data analysis and statistics. In this book, I’ll do my best to reveal that language to you, helping you to understand powerful idioms that allow you to attack many types of problems. Why 「R」对于这个问题的回答，最简短的回答是 多学一门编程语言总不会死吧？！！！ ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:2:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 与计算机共舞确实，在当今这个互联网与信息时代，我们的生活与工作与电脑紧密相连、形影不离，如果要想了解这个时代、这个世界，我们首先必须先了解那些控制与主宰了我们生活节奏的「电脑们」是如何「生活」的。进一步说，即那些操控了「电脑们」的**「程序」**是如何运行的。而所谓的「程序」，终归到底，是「程序语言」（Programming language）。前几年流行的一本「Hakers and Painters」就在序言开宗明义地说： Everything around us is turning into computers. Your typewriter is gone, replaced by a computer. Your phone has turned into a computer. So has your camera. Soon your Tv will. Your car was not only designed on computers, but has more processing power in it than a room-sized mainframe did in 1970. Letters, encyclopedias, newspapers, and even your local store are being replaced by the Internet. 因此，我们要想了解世界，就必须先懂得这个世界在说什么（编程）「语言」。所谓「技多不压身」，多学习一门「编程语言」也促使我们从另外一个角度看世界，多一种批判的眼光，多一层思维的觉悟。何乐而不为？ ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:3:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 请君入坑当然，如果你是首次听说/接触「R」，对这个编程语言一点冲动的想法都没有，那我就需要找各种理由来劝说你「是时候该学习『R』了」，哪怕是对阅读统计报告的需要。 注意：真是下面的几条Reasons把我拉入了「R」介个广大的「神教」中，有幸或不幸，我也希望你来加入！ 「R」是处理统计数据与图形可视化的「神器」，能够高效的完成各种数据分析，生成信息充实而页面精美的图形。一方面，我们可是直接使用现今已有的软件包（通过install.packages(\"\"))，涵盖了从基本的统计分析方法，如计算均值，方差分析，到时下最前沿的统计方法，可用于处理有关统计建模、机器学习、大数据管理等问题;另一方面，如果发现现有的软件包不能满足或者不适合手头问题的解决，那么我们还可以自己动手开发。这个特性赋予了「R」强大的处理数据的能力。 「R」是一款自由的开源软件体。这意味着你有权限去获取、使用、修改甚至是发行任何版本的「R」程序。这一点对于使用Windows的用户可能不会意识到有多重要，因为在国内的环境中，我们从来都没有关心过一款软件的「版权」问题，心想着反正上网有大量的破解软件可供下载使用。可是对于一个合格的哪怕只是刚入门的「Geek」来说，我已经不能再忍受破解（=盗版=病毒）软件的荼毒。从网上某处下载的软件，总是神乎其神的在某个地方给你添加插件，修改管理者权限，安装不必要也不想要的软件。然后在某天开机之后，屏幕变黑，系统变坏，情绪变糟。 后来我开始转移阵地到「Linux」，开始慢慢接触开源项目，才逐渐领会到开源软件带来的自由。比如，我可以从互联网以「正当理由」、「合理方式」获得所需的软件，并能够在尊重原开发者的情况下修改软件，生成「私人定制」，我甚至还可以将其发布到网上供他人使用。涉及到软件的自由是多层次的，其中最基本的一条就是，我可以修改、进一步开发以利解决问题。 「R」就是这么一个软件，她给你所需，为你所用，助你之力。 同时，「R」的开源特性也意味着这是一个免费的软件，我们可以以零成本的价格使用。这对于一枚「学生党」，有着「千情万钟」的诱惑（刨去破解软件）。 分散在世界各地的「R Community」为这个编程语言持续地注入新鲜的生命力，使之长久延续。我们可以到「CRAN」、R-help mailing list、StackOverflow寻求帮助，也可以通过当地的「R user group」来咨询方案。不同与其他的编程语言，「R」的开源共享的属性让她得到世界各地用户的偏好，共同开发以保持其活力。我们无需担心哪一天自己辛苦学习与使用的编程语言/软件就撒手不干停止更新服务了。因此，学习「R」几乎是一个「零（违约）风险」的投资。 可重复（reproducable）研究指得是在现有的数据框架下，我们可以通过复制原来研究成果的代码来验证其准确性。这区别于更加广泛意义上的可复制（replecated）研究，即需要重新收集数据样本来复制结果。可重复研究允许我们在有限的经费预算约束下，极大可能的验证科学研究成果。 「R」正是开发可重复研究的利器，提供了像knitr这样优秀的软件包，使得统计分析的任何一个过程都可以通过运行代码来检验研究成果。同时，我们还可以在文章正文中「植入」程序代码，直接计算结果（面向对象，object-oriented）、绘制图形（ggplot2）、编制表格（tabular，xtable）。这省去了传统的撰写文章的麻烦与琐碎。比如，原先我们可能是在「LaTex」中写入论述，等到了需要使用图形的地方，需要事先标明\\includegraphic{}，然后通过查找对应的图片插入。这期间被各种「烦文缛节」、各种「黑暗技巧」搞得晕头转向、不知何处。最后搞不好还弄错了文字与图形的匹配。而这些统统在knitr中可以自动完成，我们需要的，就是顺着思维的路线一路走下去，该说人话的时候就写人话，该使用机器语言就直接健入代码产生需要的结果或者图形。真可谓 「R」与「LaTex」齐飞，思想代码共一体。 此外，「R」还是一个跨平台的软件体，通吃「三界」： Windows系统可以直接点击.exe软件来安装; Linux系统使用命令安装： sudo apt-get install r-base r-base-dev Mac系统。（抱歉，我没有使用Mac，故此处不敢高声语。） Why Not 「R」对于这个问题，我真的不知该如何回答。如果说以上的几点理由还不够具有「杀伤力」，那在下也只能自愧功力不够、道行尚浅、修行有限。 ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:4:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 小心套路不过还好，大神来帮忙了： Of course, R is not perfect. R’s biggest challenge is that most R users are not programmers. 他给出的批评无非是「double-edged sword」，所谓凡是有利有弊、一正一邪。各位看官可以到大神的网上去找找不使用「R」的「牵强附会」的理由。在下无需多言，只不过再此累赘一下，也算是个人当初的体会。 ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:5:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 出坑「R」的学习曲线太陡峭、成本太高了。也就是说，对于一个初学者来说，「R」的代码几乎可以说是「摧枯拉朽」、「灭顶之灾」的。原因有二： R 掺杂了其他语言的使用，如C，Python。这旨在提高「R」的运行速度与计算能力，增强数据分析。不过这对「beginner」却造成了困扰。 我的建议是：既来之，则安之。一开始看不懂没关系，先试着挑-「好看」的来，然后再进一步深入学习。等到你真正需要扩展的时候，再去找些资料学习就可以了。 R 对于编写程序没有过于严格的要求，是真正意义上的「注重结果」的编程语言。这直接造成了「恶劣影响」，导致许多的代码行都不大注重严谨，缺乏统一。看不懂别人的代码那是必须的，有时甚至都看不懂自己以前写的代码了。,,Ծ‸Ծ,, 推荐：多看多看多看！没见过猪跑也好歹有吃过猪肉。另外，可以看看一些「guide」，养成良好的编写程序的习惯，比如，大神的建议,以及Google’s R Style Guide ","date":"2014-01-20","objectID":"/archives/2014-01-20-why-r/:6:0","tags":["R","Stat"],"title":"Why R?","uri":"/archives/2014-01-20-why-r/"},{"categories":["Programming"],"content":" 换系统最近给这台老机子换了一个新系统.多年前买的一个笔记本,折旧损耗的严重,配置也不能满足当下的计算需要.想着是不是该从Win8换回XP,想来如此可能会提高些运行速度.可是听说微软竟然在不久前就宣布停止对XP的更新维护.一想到我这脆弱的本本与孱弱的数据,不免心生忧虑. ","date":"2014-01-02","objectID":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/:1:0","tags":["Linux"],"title":"本本的转型","uri":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/"},{"categories":["Programming"],"content":" Windows -\u003e Linux然后就想到了对硬件配置没那么高要求的Linux系统.这个是一个开源系统(话说当今最实用的软件基本上都或多或少的属于开源项目),以前在Win系统时是装在虚拟机上运行的,当时用的是Red Hat,貌似版本不是很好,试试了就放弃了.这次既然对Win不再抱有任何幻想,那就痛定思痛,直接安装Linux. 第一次是使用Ubuntu 13.04,有遇到过死机的,而且是Unixy界面,刚从Win系统转移阵地,当真有许多的不习惯.然后在Stackover上得到启发,可以先使用Linux Mint的KDE版本,基本上是模范Win的操作界面,对于新手比较直观明了. 这就是我目前的操作系统了:Linux Mint 16 “Petra”.以后有机会再写一个post单独谈谈如何安装系统的问题. ","date":"2014-01-02","objectID":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/:1:1","tags":["Linux"],"title":"本本的转型","uri":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/"},{"categories":["Programming"],"content":" 自由软件体在步入Linux大队伍后,我也逐渐开始接触自由软件项目(Free Software Programs). 其实最早我接触到的自由软件体是Latex文档编辑系统.当初课程老师要求term paper必须是使用Tex编辑的,无奈之下从Office搬家,开始使用Latex处理文档.那时是一个阵的痛苦啊,对着花花的满屏幕代码.好在有google这个科研神器,在不时的google一下后,好歹是把term paper给整出了一个看起来还是有点econ专业的模样. 然后是R,最早是在Time Series Analysis课程中使用.这个软件在统计分析是算是轻量级的,不比Matlab之庞大,SAS之冗余,而且有一个广泛而活跃的社区可以寻求帮助,免费得到最前沿的数据分析包. 而目前我在捣鼓着Git. ","date":"2014-01-02","objectID":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/:1:2","tags":["Linux"],"title":"本本的转型","uri":"/archives/2014-01-02-%E6%9C%AC%E6%9C%AC%E7%9A%84%E8%BD%AC%E5%9E%8B/"},{"categories":["Personal"],"content":"闲来无事，独自坐在阳台上，夏日的夜晚，却是没风最来得受罪。只是这样闷热的天气，自己的大脑也早已狂躁。一整天在背单词，终日满脑子的符号。那些牛鬼生蛇，那些漫天星宇，那些蛛丝马迹，那些朝花夕拾，那些风霜雪月，那些年少无知，那些异想天开，都在这小小的大脑里，搅拌的晕乎，缠绕着酸楚。 突然想起翻看一些老友的相片。我本是一个不好社交的人，与人相处已经不易，何况这种久期远距的联络。有的感情，诉说的话语，往日的情怀，只当埋藏心里，和着时间的酵母，慢慢老去。知我者为我心忧，不知我者谓我何所求。 看到那个依旧在穿棉质格子衬衫的女孩，唇边浅浅微笑，冲着镜头。这一刻，记录下了彼时属于她的快乐。可是分明在眼角边，隐隐显现的，却是另一番景象。眼里满是空洞，找不到边际的惘然。这是一种不快乐的忧伤，还是除去悲伤后的欣喜？我不知道。 多少年，我依旧记得那个早上，在报道台见的女孩。身着一件棉质衬衣，被风扬起的马尾欢快的炫舞，满脸干净的白，笑的灿烂没有忧伤。有过多久，没见过如此纯净的笑容呢。我知道，她是快乐的。 心底的阴雨连绵的下，偶尔的狂风暴雨，黑云压低，电闪雷鸣。内心是紧张的，惧怕的，任何一丝的风吹草动，总是让自己提心吊胆，这个世界，我在中心，四周，却是悬空。往前一步，已不知归入何处的边际。像个失去玩具的孩子，找不到归家的路，只能躲藏在街边的角落，默默落泪。 很多年在指间不急不缓的流淌，夏日的艳阳在海边泛着光，秋叶也该徐徐飘窗边，一去不返，冬日里的寒冷更像是催债的主死死相逼，难得的春风和煦却白驹过隙。一年一年又一年，我们彼此在不说话中碰见，然后再见。有些人，真的不再相见了。 有过几次，在梦中，我看见她走过来，依旧穿着那件棉质衬衫，格子形状，简单明了，一眼便看到。脸上依旧是那种干净的微笑。她在仔细倾听，一个诉说。梦里，我想讲话，却不知道说什么，遇见你是我彼时的幸福，可是我不知道如果去守候这样突然的幸福。釜底抽薪是万丈深渊的痛楚，被掠夺的幸福是一去不回的秋叶，飘过眼前，飘落天边。对于一个失去玩具的孩子，唯一不敢奢望的，便是从前百般肆无忌惮的挥霍对所有的控制权。少年的我，怎么也不敢去轻易奢望这份奢侈。她的笑在眼前，我却触手不及，像在天边，中间是永远。梦里，我依旧不说话。她只是微笑，笑的干净灿烂。像是晚晴的天，酝酿了许久的剧情，像要说着，却已经落幕。 醒来后，我说：谢谢你，给我的笑，不会忧伤。 ","date":"2013-07-27","objectID":"/archives/2013-07-27-%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/:0:0","tags":[],"title":"往事如烟","uri":"/archives/2013-07-27-%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"}]
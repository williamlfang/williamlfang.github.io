<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archives on William</title>
    <link>https://williamlfang.github.io/archives/</link>
    <description>Recent content in Archives on William</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://williamlfang.github.io/archives/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>frp 实现域名解析</title>
      <link>https://williamlfang.github.io/archives/2020-09-11-frp-%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2020-09-11-frp-%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;使用 frp 配合 godday 实现内网服务直接解析成二级域名。&lt;/p&gt;</description>
    </item>
    <item>
      <title>侯捷: C&#43;&#43; 面向对象高级编程</title>
      <link>https://williamlfang.github.io/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c&#43;&#43;-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2020-06-26-%E4%BE%AF%E6%8D%B7--c&#43;&#43;-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;侯捷老师在线教学：C++ 面向对象高级编程的课堂笔记。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;日志模块:loguru</title>
      <link>https://williamlfang.github.io/archives/2020-03-23-c&#43;&#43;%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2020-03-23-c&#43;&#43;%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97-loguru/</guid>
      <description>&lt;p&gt;loguru 是一款轻量级的　ｃ++ 日志模块，提供了多种格式的日志输出，并且可以使用 fmtlib 的格式化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solarflare网卡开发：openonload 安装与调试</title>
      <link>https://williamlfang.github.io/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-12-11-solarflare%E7%BD%91%E5%8D%A1%E5%BC%80%E5%8F%91-openonload-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;p&gt;这个教程将系统介绍如何实现基于 solarflare 网卡技术进行高频交易系统开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 源代码安装 wireshark</title>
      <link>https://williamlfang.github.io/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-12-10-ubuntu-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85-wireshark/</guid>
      <description>&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt; 与 &lt;code&gt;tcpdump&lt;/code&gt; 是网络抓包的两大神器。其中，前者提供了更加便捷的界面操作，后者则比较适合在命令行进行操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clion 远程调试</title>
      <link>https://williamlfang.github.io/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-12-04-clion-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;p&gt;使用 Clion 在远程服务器进行项目开发&lt;/p&gt;</description>
    </item>
    <item>
      <title>tmux:终端神器</title>
      <link>https://williamlfang.github.io/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-12-04-tmux-%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8/</guid>
      <description>&lt;p&gt;编程是一门手艺活，仅仅是凭借思而不动、想而不做，是无法完成工作的。我常常把编程比喻成一门手艺活，既需要我们懂得如何设计框架、如何布局，又需要结合实际的材料、配置手中的资源，然后使用娴熟的手艺一点点的认真打磨，最后得到一件称心如意的产品。现在人们喜欢讨论工匠精神，其实是推崇对手艺的尊重，对于一件事情持之以恒的追求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K&amp;R 读书笔记</title>
      <link>https://williamlfang.github.io/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;“The C Programming Language” 是计算机编程的经典之作，别名 &lt;code&gt;K&amp;amp;R&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;这是一本简短精悍的书籍，介绍了 &lt;code&gt;C&lt;/code&gt; 语言的编程核心、ANSI 规范、编译原理等诸多方面的内容。现在很难想象这本不足 200 页的小书^[可以参考这个链接看看现在有哪些优秀的 C 编程数据：&lt;a href=&#34;https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;The Definitive C Book Guide and List - Stack Overflow&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;]尽然能够放得下这么多的内容，可以说是提纲挈领、言简意垓。尤其是附录A部分，只是简要介绍了 &lt;code&gt;C&lt;/code&gt; 的编译原理，区区几页纸张就足以为后人编写各式不同的编译器提供指引^[关于 &lt;code&gt;C&lt;/code&gt; 的历史，这里有一篇 Dennis Ritchie 写的文章可供参考：&lt;a href=&#34;https://www.bell-labs.com/usr/dmr/www/chist.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;The Development of the C Language&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;]。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs: 神的编辑器</title>
      <link>https://williamlfang.github.io/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-01-17-emacs--%E7%A5%9E%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>&lt;p&gt;&lt;code&gt;Emacs&lt;/code&gt; 速来有「神的编辑器」之美誉，同另一款「编辑器之神」&lt;code&gt;Vi/Vim&lt;/code&gt;，都是程序员编辑源文件、编写文档的重要法宝。用一种在江湖上流传许久的说法，&lt;code&gt;Emacs&lt;/code&gt;其实不是&lt;strong&gt;编辑器&lt;/strong&gt;，而是披着编辑器外衣的&lt;strong&gt;操作系统&lt;/strong&gt;，具有高强度的可拓展性，堪比一款操作系统般强大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018年会总结大纲</title>
      <link>https://williamlfang.github.io/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-01-16-2018%E5%B9%B4%E4%BC%9A%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B2/</guid>
      <description>&lt;p&gt;先在这里写一个总结大纲，后面的ppt照着这个大纲来制作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sublime 编译 运行 c/c&#43;&#43; 文件</title>
      <link>https://williamlfang.github.io/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2019-01-05-sublime-%E7%BC%96%E8%AF%91-%E8%BF%90%E8%A1%8C-cpp/</guid>
      <description>&lt;p&gt;在 Sublime Text 3 编辑器里实现对 C/C++ 文件的编译与运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CLion：最好用的 C-C&#43;&#43; IDE</title>
      <link>https://williamlfang.github.io/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c&#43;&#43;-ide/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-12-10-clion-%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84-c-c&#43;&#43;-ide/</guid>
      <description>&lt;p&gt;&lt;code&gt;C/Cpp&lt;/code&gt; 编程常常使程序员感到懊恼，一方面是编程语言本身的难度较高，另一方面，我认为也是因为没有比较好用的 &lt;code&gt;IDE&lt;/code&gt;。不像 &lt;code&gt;R&lt;/code&gt; 或者 &lt;code&gt;Python&lt;/code&gt; 这些解释性编程语言，不需要经过编译即可运行 &lt;code&gt;REPL&lt;/code&gt;(read-evaluate-print-loop)，提供实时互动的编程环境；&lt;code&gt;C/Cpp&lt;/code&gt; 是一种静态的、需要经过编译的编程语言，这增加了我们查找代码错误的难度，也就是无法提供实时的纠错功能，而只能是在整个项目运行结束后才把相关的错误提示给到程序员。因此，对一款「好用IDE」的向往应该是一家有抱负的科技企业的奋斗动力。&lt;/p&gt;&#xA;&lt;p&gt;神奇的 &lt;code&gt;JetBrain&lt;/code&gt; 就是这么一家牛逼的公司，最早开发了 &lt;code&gt;CLion&lt;/code&gt; 造福广大的 &lt;code&gt;C/Cpp&lt;/code&gt; 程序员，后来又陆陆续续的开发了 &lt;code&gt;PyCharm&lt;/code&gt; 等多款好用又好看的 &lt;code&gt;IDE&lt;/code&gt;，可以说功德千秋、造福万代啊。今天我们来看看怎么在操作系统安装和使用这么好用的 &lt;code&gt;C/Cpp&lt;/code&gt; IDE。&lt;/p&gt;</description>
    </item>
    <item>
      <title>交易所数据爬虫之上期所</title>
      <link>https://williamlfang.github.io/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-11-10-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%8A%E6%9C%9F%E6%89%80/</guid>
      <description>&lt;p&gt;我们已经实现了对两个交易所的数据爬虫（&lt;a href=&#34;&#34;&gt;中金所&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;郑商所&lt;/a&gt;）。在技术层面上，这两个交易所都采用了静态网页的格式来呈现交易数据，这种类型的数据爬虫相对比较容易，我们只需要找到对应的数据文件地址，然后利用历史的交易日期来生成所有交易日的数据链接，然后开通并行计算模式即可下载到所有的历史数据。但对于上期所和大商所，二者则使用了相对复杂一些的动态网页技术，使用 &lt;code&gt;AJAX&lt;/code&gt; 动态加载来显示数据。对这类网站进行数据爬虫，我们需要使用更加高级的技术手段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>升级 Rstudio Server</title>
      <link>https://williamlfang.github.io/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-11-05-%E5%8D%87%E7%BA%A7-rstudio-server/</guid>
      <description>&lt;p&gt;在 CentOS 操作系统更新 Rstudio-Server 软件，并进行相关的端口设置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>交易所数据爬虫之郑商所</title>
      <link>https://williamlfang.github.io/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-10-28-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E9%83%91%E5%95%86%E6%89%80/</guid>
      <description>&lt;p&gt;上回我介绍了如何&lt;a href=&#34;https://williamlfang.github.io/post/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;对中金所进行网络爬虫&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;，获得了股指期货相关的历史日行情数据和成交排名数据。同样的，我们也可以使用类似的爬虫技术，对郑商所进行网络爬虫。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PKD</title>
      <link>https://williamlfang.github.io/archives/2017-10-25-pkd/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-10-25-pkd/</guid>
      <description>&lt;p&gt;PKD 是美国当代比较另类的一位科幻作家。一方面，他基本上只写短小说，故事情节短小精悍，往往只叙述某一个关键的情节，其他的具体细节需要读者自己脑补；另一方面，他对未来的现象是阴暗、悲观的，在所有的场景设定上，天空永远是因为核战争而变得灰蒙蒙，城市街道显得破旧杂乱，人们生活在绝望与无望的底层。&lt;/p&gt;&#xA;&lt;p&gt;然而，PKD 的小说却有一种独特的魅力：在特定的情节设定下，他在科幻小说的框架下增加了对抉择两难、道德判断、人性考验等哲学层面的讨论。&lt;/p&gt;</description>
    </item>
    <item>
      <title>交易所数据爬虫之中金所</title>
      <link>https://williamlfang.github.io/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-10-23-%E4%BA%A4%E6%98%93%E6%89%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E4%B9%8B%E4%B8%AD%E9%87%91%E6%89%80/</guid>
      <description>&lt;p&gt;针对中金所网站进行自动化网络爬虫，下载交易相关的数据，如日行情数据、期货公司持仓排名数据、仓单数据等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&gt;&lt;a class=&#34;lightgallery&#34; href=&#34;./cffex01.png?size=large&#34; data-thumbnail=&#34;./cffex01.png?size=small&#34; data-sub-html=&#34;&lt;h2&gt;中金所网站提供股指期货相关的重要数据&lt;/h2&gt;&lt;p&gt;中金所网站提供股指期货相关的重要数据&lt;/p&gt;&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;./cffex01.png&#34; alt=&#34;中金所网站提供股指期货相关的重要数据&#34; srcset=&#34;./cffex01.png?size=small, ./cffex01.png?size=medium 1.5x, ./cffex01.png?size=large 2x&#34; data-title=&#34;中金所网站提供股指期货相关的重要数据&#34; style=&#34;background: url(/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/a&gt;&lt;figcaption class=&#34;image-caption&#34;&gt;中金所网站提供股指期货相关的重要数据&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;从&lt;a href=&#34;http://www.cffex.com.cn/sj/hqsj/rtj/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;中金所网站&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;可以得到大量股指期货、国债以及国债期货相关的重要交易数据，如日行情数据、期货公司持仓排名数据、仓单数据等。 通过网络爬虫技术，我们可以下载得到历史的所有数据，为后期的量化建模与收益率回测提供数据支持。本篇文章讨论了&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何识别中金所网址，找到对应的数据文件链接&lt;/li&gt;&#xA;&lt;li&gt;使用并行计算模式下载所有的历史数据文件&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>S·A·阿列克谢耶维奇</title>
      <link>https://williamlfang.github.io/archives/2017-10-17-sa%E9%98%BF%E5%88%97%E5%85%8B%E8%B0%A2%E8%80%B6%E7%BB%B4%E5%A5%87/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-10-17-sa%E9%98%BF%E5%88%97%E5%85%8B%E8%B0%A2%E8%80%B6%E7%BB%B4%E5%A5%87/</guid>
      <description>&lt;p&gt;这是一本关于切尔诺贝利核爆炸灾难的访谈录，以受灾民众、参与现场清理工作的战士、相关科研人士的亲身经历作为叙事题材，为我们提供了第一视角去看待这次人类历史上最惨痛的科学失败与政治欺骗。&lt;/p&gt;</description>
    </item>
    <item>
      <title>chan2017: Machine Trading</title>
      <link>https://williamlfang.github.io/archives/2017-10-15-chan2017-machine-trading/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://williamlfang.github.io/archives/2017-10-15-chan2017-machine-trading/</guid>
      <description>&lt;p&gt;Ernest Chan 在今年新出版的新书，『Machine Trading』。书中介绍了最新的量化交易/程序化交易的技术细节与建模技巧。通读吃书，可以增进对量化交易领域的最新发展的进一步理解。结合目前我正在开发的 &lt;code&gt;CTP&lt;/code&gt; 交易系统以及中国期货数据数据库的整理工作，我对量化交易有了更深刻的认识。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

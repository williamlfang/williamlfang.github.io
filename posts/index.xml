<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - William</title>
    <link>https://williamlfang.github.io/posts/</link>
    <description>所有文章 | William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 05 Jan 2025 15:45:18 &#43;0800</lastBuildDate><atom:link href="https://williamlfang.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>nvim with lower glibc version</title>
  <link>https://williamlfang.github.io/2025-01-05-nvim-with-lower-glibc-version/</link>
  <pubDate>Sun, 05 Jan 2025 15:45:18 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-05-nvim-with-lower-glibc-version/</guid>
  <description><![CDATA[<p>I&rsquo;m writting code on a rather outdated Linux CentoOS7, with <code>glibc</code> of version up to &lsquo;2.18&rsquo;. And for a meanwhile, there is no hope to upgrade it, since we&rsquo;ve deployed quite a lot of services, meaning updating may cause some unanticipated crashes.</p>
<p>I&rsquo;ve also learned that starting from <code>v1.0.0</code>, <code>neovim</code> would support <strong>buildin inlay</strong>, which definitely enhance our code reading. It&rsquo;s gonna to be the main reason I need to upgrade <code>nvim</code>. The sad part of this story is that, the official release of <code>nvim</code> require at lease <code>glibc</code> of version 2.29.</p>
<p>However, there is on repo provide <strong>unsupported release version</strong> of <code>nvim</code> for some legacy systems. And it only require <code>glibc</code> of version <code>2.17</code>. What a great job!</p>
<p>In case anyone would need this <a href="https://github.com/neovim/neovim-releases"target="_blank" rel="external nofollow noopener noreferrer">repo<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>.</p>
<p>Now I&rsquo;m happy with it.</p>]]></description>
</item>
<item>
  <title>Nystrom: Game Programming Patterns</title>
  <link>https://williamlfang.github.io/2025-01-04-nystrom--game-programming-patterns/</link>
  <pubDate>Sat, 04 Jan 2025 23:59:23 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-04-nystrom--game-programming-patterns/</guid>
  <description><![CDATA[<p>Reading notes from <strong>Robert Nystrom</strong>&rsquo;s <em>Game Programming Patterns</em>.</p>]]></description>
</item>
<item>
  <title>nvim bufferline 设置过滤条件</title>
  <link>https://williamlfang.github.io/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/</link>
  <pubDate>Sat, 04 Jan 2025 18:36:30 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-04-nvim-bufferline-%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6/</guid>
  <description><![CDATA[<p>今天在写代码的时候，遇到一个有趣的事情：有时候我们只打开一个文件，但是 <code>bufferline</code> 也会显示该文件相关的操作。</p>]]></description>
</item>
<item>
  <title>docker 占用磁盘空间太大</title>
  <link>https://williamlfang.github.io/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/</link>
  <pubDate>Sat, 04 Jan 2025 13:08:11 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-04-docker-%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%AA%E5%A4%A7/</guid>
  <description><![CDATA[<p>一觉醒来发现天塌了：我的 <code>Linux Mint</code> 机器无法登录。联想到昨天启动了一个 <code>Docker</code> 用于测试更新 <code>gcc14</code>，因而有可能是编译导致的临时目标文件太大，占用磁盘空间，导致系统启动无法正常读写相关启动的配置文件。</p>]]></description>
</item>
<item>
  <title>入坑 HHKB 无刻键盘</title>
  <link>https://williamlfang.github.io/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/</link>
  <pubDate>Fri, 03 Jan 2025 23:11:11 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-03-%E5%85%A5%E5%9D%91-hhkb-%E6%97%A0%E5%88%BB%E9%94%AE%E7%9B%98/</guid>
  <description><![CDATA[<p>决定在新的一年折腾一下自己，学习一些新的技能，比如</p>
<ul>
<li>使用 <code>c++</code> 开发一个高性能、低延迟的通信系统</li>
<li>更加了解 <code>Linux</code> 操作系统底层涉及</li>
<li>熟练使用 <code>nvim</code> 以及学习 <code>lua</code> 语言开发插件</li>
<li>&hellip;&hellip;</li>
</ul>
<p>再比如，本篇博客的主题：入坑 <code>HHKB</code> 无刻键盘，强迫自己在盲打情况下的写代码能力。</p>]]></description>
</item>
<item>
  <title>zsh auto suggestion with key binding</title>
  <link>https://williamlfang.github.io/2025-01-03-zsh-auto-suggestion-with-key-binding/</link>
  <pubDate>Fri, 03 Jan 2025 23:06:14 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-03-zsh-auto-suggestion-with-key-binding/</guid>
  <description><![CDATA[<p>We could bind key to <code>zsh-autosuggestions</code>. This is especially helpful when we use HHKB, whereas there is no such thing as left-arrow or right-arrow.</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="c1"># 自动建议</span>
</span></span><span class="line"><span class="cl"><span class="c1"># zinit wait lucid light-mode for \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     atload&#34;_zsh_autosuggest_start; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         ZSH_AUTOSUGGEST_STRATEGY=(history completion) \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         ZSH_AUTOSUGGEST_HISTORY_IGNORE=&#39; *&#39; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^p&#39; history-search-backward; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^o&#39; history-search-forward; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^n&#39; autosuggest-accept; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^e&#39; autosuggest-execute; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^a&#39; autosuggest-toggle; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         bindkey &#39;^ &#39; autosuggest-accept&#34; \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     zsh-users/zsh-autosuggestions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># https://github.com/zsh-users/zsh-autosuggestions/issues/642</span>
</span></span><span class="line"><span class="cl"><span class="c1"># For example, this would bind ctrl + space to accept the current suggestion.</span>
</span></span><span class="line"><span class="cl">zinit <span class="nb">wait</span> lucid light-mode <span class="k">for</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    atload<span class="s2">&#34;_zsh_autosuggest_start; \
</span></span></span><span class="line"><span class="cl"><span class="s2">        ZSH_AUTOSUGGEST_STRATEGY=(history completion) \
</span></span></span><span class="line"><span class="cl"><span class="s2">        ZSH_AUTOSUGGEST_MANUAL_REBIND=0 \
</span></span></span><span class="line"><span class="cl"><span class="s2">        ZSH_AUTOSUGGEST_HISTORY_IGNORE=&#39; *&#39; \
</span></span></span><span class="line"><span class="cl"><span class="s2">        bindkey &#39;^ &#39; autosuggest-accept;&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    zsh-users/zsh-autosuggestions
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE</span><span class="o">=</span><span class="s1">&#39;fg=yellow&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>crti.so 找不到的解决方法</title>
  <link>https://williamlfang.github.io/2025-01-03-crti.so-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
  <pubDate>Fri, 03 Jan 2025 22:29:36 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-03-crti.so-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
  <description><![CDATA[<p>在编译一个代码模块的是否，<code>gcc</code> 报错</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/bin/ld: cannot find crt1.o: No such file or directory</span></span></code></pre></td></tr></table>
</div>
</div><p>我们需要让 <code>gcc</code> 识别到 <code>crt</code> 的路径</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find /usr -name crti*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/usr/lib32/crti.o
</span></span><span class="line"><span class="cl">/usr/lib/i386-linux-gnu/crti.o
</span></span><span class="line"><span class="cl">/usr/lib/x86_64-linux-gnu/crti.o
</span></span><span class="line"><span class="cl">/usr/libx32/crti.o</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，在默认的路径找到了 <code>/usr/lib32/crt1.o</code>，但是由于这个指向的是 32 位操作系统的动态库（可能是当前系统安装了多个编译环境），导致 <code>gcc</code> 编译文件无法使用 64 位的动态库。同时，我们还发现 <code>/usr/lib/x86_64-linux-gnu/crti.o</code> 这个版本是 64 位动态库，因此需要让 <code>gcc</code> 使用该版本</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libc6-dev
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/usr/lib/x86_64-linux-gnu:<span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LIBRARY_PATH</span><span class="o">=</span>/usr/lib/x86_64-linux-gnu:<span class="si">${</span><span class="nv">LIBRARY_PATH</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>使用 zoxide</title>
  <link>https://williamlfang.github.io/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/</link>
  <pubDate>Wed, 01 Jan 2025 12:42:28 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-01-01-%E4%BD%BF%E7%94%A8-zoxide/</guid>
  <description><![CDATA[<p><code>zoxide</code> 是一款类比 <code>cd</code> 的目录导航工具，但是提供了基于使用频率的快速跳转功能。</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube-nocookie.com/embed/aghxkpyRVDY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>]]></description>
</item>
<item>
  <title>Ubuntu 升级 ffmpeg</title>
  <link>https://williamlfang.github.io/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/</link>
  <pubDate>Sun, 22 Dec 2024 12:06:55 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-12-22-ubuntu-%E5%8D%87%E7%BA%A7-ffmpeg/</guid>
  <description><![CDATA[<p>今天使用 <code>yt-dlp</code> 下载视频时，遇到一个报错</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>youtube<span class="o">]</span> Extracting URL: https://youtu.be/_dLLIjKz9MY
</span></span><span class="line"><span class="cl"><span class="o">[</span>youtube<span class="o">]</span> _dLLIjKz9MY: Downloading webpage
</span></span><span class="line"><span class="cl">...........................................
</span></span><span class="line"><span class="cl"><span class="o">[</span>Merger<span class="o">]</span> Merging formats into <span class="s2">&#34;Fear in Tech - Titus Winters - Keynote Meeting C++ 2024 [_dLLIjKz9MY].mp4&#34;</span>
</span></span><span class="line"><span class="cl">ERROR: Postprocessing:   Stream <span class="c1">#1:0 -&gt; #0:1 (copy)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查找一遍，发现这个是因为 <code>yt-dlp</code> 与 <code>ffmpeg</code> 版本冲突导致的，导致<code>yt-dlp --merge-output-format mp4</code> 无法合成 <code>mp4</code> 格式。因此需要升级 <code>ffmpeg</code>。</p>]]></description>
</item>
<item>
  <title>R 调用 python</title>
  <link>https://williamlfang.github.io/2024-11-28-r-%E8%B0%83%E7%94%A8-python/</link>
  <pubDate>Thu, 28 Nov 2024 22:19:38 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-11-28-r-%E8%B0%83%E7%94%A8-python/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-11-28-r-%E8%B0%83%E7%94%A8-python/rpython.png" alt="R 调用 python" title="R 调用 python" referrerpolicy="no-referrer"/></div><p>利用 <code>reticulate</code> 接口，我们可以在 <code>R</code> 中调用 <code>python</code> 封装的函数。</p>]]></description>
</item>
</channel>
</rss>

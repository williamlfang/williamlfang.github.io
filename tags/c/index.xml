<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>C - 标签 - William</title>
    <link>https://williamlfang.github.io/tags/c/</link>
    <description>C - 标签 | William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 22 Feb 2025 12:49:59 &#43;0800</lastBuildDate><atom:link href="https://williamlfang.github.io/tags/c/" rel="self" type="application/rss+xml" /><item>
  <title>在 c 代码文件插入 shell 命令</title>
  <link>https://williamlfang.github.io/2025-02-22-%E5%9C%A8-c-%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5-shell-%E5%91%BD%E4%BB%A4/</link>
  <pubDate>Sat, 22 Feb 2025 12:49:59 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2025-02-22-%E5%9C%A8-c-%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5-shell-%E5%91%BD%E4%BB%A4/</guid>
  <description><![CDATA[<p>今天看到一个帖子：<a href="https://www.reddit.com/r/C_Programming/comments/1iuvu0f/just_realized_you_can_put_shell_script_inside_c/"target="_blank" rel="external nofollow noopener noreferrer">Just realized you can put shell script inside c source files<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，想到以前有个朋友也是这么使用 <code>c</code>，觉得挺神奇的。</p>
<p>这个是在 <code>c</code> 源代码文件，使用 <code>macro</code> 宏定义一组 <code>shell</code> 命令，然后再退出 <code>shell</code>，这样就不会在继续执行真正的 <code>c</code> 代码了。这样做的好处是可以使用一个命令 <code>sh main.c</code> 即可快速运行可执行文件，对于一些简单部署的任务比较方便。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#if 0</span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">cc -o /tmp/app main.c
</span></span></span><span class="line"><span class="cl"><span class="c">/tmp/app
</span></span></span><span class="line"><span class="cl"><span class="c">exit # required, otherwise sh will try to interpret the C code below
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;quick script</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh main.c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">quick script</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>ATT 汇编语法</title>
  <link>https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/</link>
  <pubDate>Tue, 19 Mar 2024 18:30:35 &#43;0800</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://williamlfang.github.io/2024-03-19-att-%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95/att.png" alt="ATT 汇编语法" title="ATT 汇编语法" referrerpolicy="no-referrer"/></div><p><code>AT&amp;T</code> 汇编是 <code>Linux</code> 操作系统默认的汇编语言。熟悉汇编语言能够增强我们对程序运行逻辑的认识，理解程序运行的性能瓶颈。</p>]]></description>
</item>
<item>
  <title>bash入门</title>
  <link>https://williamlfang.github.io/2023-07-25-bash%E5%85%A5%E9%97%A8/</link>
  <pubDate>Tue, 25 Jul 2023 13:19:12 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2023-07-25-bash%E5%85%A5%E9%97%A8/</guid>
  <description><![CDATA[<p>关于使用 <code>bash/shell</code> 编程的总结。</p>]]></description>
</item>
<item>
  <title>linux 设置超级用户程序</title>
  <link>https://williamlfang.github.io/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/</link>
  <pubDate>Tue, 13 Sep 2022 13:13:59 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-09-13-linux-%E8%AE%BE%E7%BD%AE%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F/</guid>
  <description><![CDATA[<p>通过在 <code>Linux</code> 系统配置一个超级用户程序，获取 <code>root</code> 权限</p>]]></description>
</item>
<item>
  <title>The Practice of Programming 读书笔记</title>
  <link>https://williamlfang.github.io/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
  <pubDate>Sun, 13 Mar 2022 15:03:44 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-03-13-the-practice-of-programming-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
  <description><![CDATA[<p>最近在看这本经典书籍，可谓是言简意赅，却句句提纲挈领，读后非常有收获。所以决定写一篇读书笔记，以表敬意！</p>]]></description>
</item>
<item>
  <title>cmake 要点总结</title>
  <link>https://williamlfang.github.io/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</link>
  <pubDate>Tue, 17 Dec 2019 00:00:00 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/archives/2019-12-17-cmake-%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
  <description><![CDATA[调试通过 CMAKE_BUILD_TYPE 可以设置条件编译，执行生成可供调试的程序，这个相当于在命令行使用 1 cmake .. -DCMAKE_BUILD_TYPE=Debug 1 2 3 4 5 ## 调试状态 set(CMAKE_BUILD_TYPE Debug) ## 发布状态 set(CMAKE_BUILD_TYPE Release) 头文件包含 inclu]]></description>
</item>
<item>
  <title>Unix Network Programming 代码学习</title>
  <link>https://williamlfang.github.io/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
  <pubDate>Mon, 09 Dec 2019 00:00:00 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/archives/2019-12-09-unix-network-programming-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
  <description><![CDATA[<p><img loading="lazy" src="/images/2019-12-09-Unix-Network-Programming-%e4%bb%a3%e7%a0%81%e5%ad%a6%e4%b9%a0/unp-book1.jpg" alt="网络编程的圣经" srcset="/images/2019-12-09-Unix-Network-Programming-%e4%bb%a3%e7%a0%81%e5%ad%a6%e4%b9%a0/unp-book1.jpg?size=small, /images/2019-12-09-Unix-Network-Programming-%e4%bb%a3%e7%a0%81%e5%ad%a6%e4%b9%a0/unp-book1.jpg?size=medium 1.5x, /images/2019-12-09-Unix-Network-Programming-%e4%bb%a3%e7%a0%81%e5%ad%a6%e4%b9%a0/unp-book1.jpg?size=large 2x" data-title="网络编程的圣经" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<h1 id="chap0-安装源代码" class="heading-element">
  <a href="#chap0-%e5%ae%89%e8%a3%85%e6%ba%90%e4%bb%a3%e7%a0%81" class="heading-mark"></a>Chap.0 安装源代码</h1><h2 id="安装步骤" class="heading-element">
  <a href="#%e5%ae%89%e8%a3%85%e6%ad%a5%e9%aa%a4" class="heading-mark"></a>安装步骤</h2><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## git clone git@github.com:williamlfang/unix-network-programming-v3.git
</span></span><span class="line"><span class="cl">cd unix-network-programming-v3-master
</span></span><span class="line"><span class="cl">./configure
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cd lib         # build the basic library that all programs need
</span></span><span class="line"><span class="cl">make           # use &#34;gmake&#34; everywhere on BSD/OS systems
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cd ../libfree  # continue building the basic library
</span></span><span class="line"><span class="cl">make</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>makefile 将所有目录中的源文件编译成独立程序</title>
  <link>https://williamlfang.github.io/archives/2019-03-24-makefile-%E5%B0%86%E6%89%80%E6%9C%89%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E6%88%90%E7%8B%AC%E7%AB%8B%E7%A8%8B%E5%BA%8F/</link>
  <pubDate>Sun, 24 Mar 2019 00:00:00 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/archives/2019-03-24-makefile-%E5%B0%86%E6%89%80%E6%9C%89%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E6%88%90%E7%8B%AC%E7%AB%8B%E7%A8%8B%E5%BA%8F/</guid>
  <description><![CDATA[<p><code>makefile</code> 是一款功能强大的<strong>工程项目管理套件</strong>，可以根据各个文件之间的依赖关系，自动生成事物处理的完整流程。我们现在有一个要求：使用 <code>make</code> 来一次性的把目录下的所有源文件编译成单独可运行的程序。</p>]]></description>
</item>
<item>
  <title>K&amp;R 读书笔记</title>
  <link>https://williamlfang.github.io/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
  <pubDate>Sun, 24 Feb 2019 00:00:00 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/archives/2019-02-24-k-r-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
  <description><![CDATA[<p>“The C Programming Language” 是计算机编程的经典之作，别名 <code>K&amp;R</code>。</p>
<p>这是一本简短精悍的书籍，介绍了 <code>C</code> 语言的编程核心、ANSI 规范、编译原理等诸多方面的内容。现在很难想象这本不足 200 页的小书^[可以参考这个链接看看现在有哪些优秀的 C 编程数据：<a href="https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list"target="_blank" rel="external nofollow noopener noreferrer">The Definitive C Book Guide and List - Stack Overflow<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>]尽然能够放得下这么多的内容，可以说是提纲挈领、言简意垓。尤其是附录A部分，只是简要介绍了 <code>C</code> 的编译原理，区区几页纸张就足以为后人编写各式不同的编译器提供指引^[关于 <code>C</code> 的历史，这里有一篇 Dennis Ritchie 写的文章可供参考：<a href="https://www.bell-labs.com/usr/dmr/www/chist.html"target="_blank" rel="external nofollow noopener noreferrer">The Development of the C Language<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>]。</p>]]></description>
</item>
<item>
  <title>SublimeGDB: 更好用的轻量级 Debugger</title>
  <link>https://williamlfang.github.io/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/</link>
  <pubDate>Wed, 20 Feb 2019 00:00:00 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/archives/2019-02-20-sublimegdb--%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7-debugger/</guid>
  <description><![CDATA[<p><code>SublimeGDB</code> 是一款可以在 <code>Sublime</code> 编辑器内运行的代码调试器，即调用系统的 <code>GNU Debugger</code> 套件。通过一定的设置，我们便可以把 <code>Sublime</code> 改造成一款轻量级的 <code>IDE</code>，从而可以直接在编辑器对源文件^[source code]进行调试，并且提供了了多个代码调试状态，比直接在终端进行调试要强大的多，也十分方便。</p>]]></description>
</item>
</channel>
</rss>

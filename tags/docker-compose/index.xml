<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Docker-Compose - 标签 - William</title>
    <link>https://williamlfang.github.io/tags/docker-compose/</link>
    <description>Docker-Compose - 标签 | William</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 29 Nov 2022 11:58:58 &#43;0000</lastBuildDate><atom:link href="https://williamlfang.github.io/tags/docker-compose/" rel="self" type="application/rss+xml" /><item>
  <title>docker 安装 RabbitMQ</title>
  <link>https://williamlfang.github.io/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/</link>
  <pubDate>Tue, 29 Nov 2022 11:58:58 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-11-29-docker-%E5%AE%89%E8%A3%85-rabbitmq/</guid>
  <description><![CDATA[<p>在 <code>Docker</code> 环境安装 <code>RabbitMQ</code></p>]]></description>
</item>
<item>
  <title>docker 使用 sytemctl</title>
  <link>https://williamlfang.github.io/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/</link>
  <pubDate>Fri, 25 Nov 2022 10:43:35 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-11-25-docker-%E4%BD%BF%E7%94%A8-sytemctl/</guid>
  <description><![CDATA[<p>允许一个 <code>Docker container</code> 获取主机的 <code>systemctl</code> 权限。</p>]]></description>
</item>
<item>
  <title>docker compose command 保持容器处于活跃状态alive</title>
  <link>https://williamlfang.github.io/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/</link>
  <pubDate>Thu, 24 Nov 2022 22:12:24 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-11-24-docker-compose-command-%E4%BF%9D%E6%8C%81%E5%AE%B9%E5%99%A8%E5%A4%84%E4%BA%8E%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81alive/</guid>
  <description><![CDATA[<p>通过添加 <code>tail -f /dev/null</code> 保持刷新，使得容器始终处于活跃状态（alive），否则一旦命令执行完成，就会立即停止了。这样对于一些任务，我们往往想要其保持状态，方便进去容器内部进行调试。</p>]]></description>
</item>
<item>
  <title>docker compose 保持 git pull 最新代码</title>
  <link>https://williamlfang.github.io/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/</link>
  <pubDate>Thu, 24 Nov 2022 21:48:34 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-11-24-docker-compose-%E4%BF%9D%E6%8C%81-git-pull-%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/</guid>
  <description><![CDATA[<p>由于 <code>Dockerfile</code> 使用了多层构建的方式，对于没有改动的命令行，就不会在执行重新构建了。如果我们需要在 <code>Dockerfile</code> 保持更新 <code>git pull</code>，可以有两种方式</p>
<ol>
<li><code>docker build</code> 的时候使用 <code>--no-cache</code> 选项，但是这个是全局范围的配置，一旦设置，需要全部重新构建，往往显得十分臃肿</li>
<li><code>docker-compose</code> 还支持提供 <code>--build-arg</code> 的选项，可以把一些参数传递到 <code>Dockerfile</code> 里面。</li>
</ol>]]></description>
</item>
<item>
  <title>Ubuntu 更新 docker compose 2.1.1</title>
  <link>https://williamlfang.github.io/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/</link>
  <pubDate>Wed, 23 Nov 2022 13:18:03 &#43;0000</pubDate>
  <author>william</author>
  <guid>https://williamlfang.github.io/2022-11-23-ubuntu-%E6%9B%B4%E6%96%B0-docker-compose-2.1.1/</guid>
  <description><![CDATA[<p>由于在 <code>Dockerfile</code> 里面需要支持新的语法规则（<code>experimental</code>以支持 <code>–mount=</code>），我们需要同步更新 <code>docker-compose</code> 到 <code>v2</code> 版本。</p>]]></description>
</item>
</channel>
</rss>
